[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "content/R/index.html",
    "href": "content/R/index.html",
    "title": "About R Tutorials",
    "section": "",
    "text": "Each class session has a set of required readings that you should complete before watching the lecture.\nEvery class session also has a YouTube playlist of short recorded videos for each of the lecture sections. The lecture slides are special HTML files made with the R package xaringan (R can do so much!). On each class session page you’ll see buttons for opening the presentation in a new tab or for downloading a PDF of the slides in case you want to print them or store them on your computer:\n\n View all slides in new window  Download PDF of all slides\n\nThe slides are also embedded on each page. You can click in the slides and navigate through them with ← and →. If you type ? (or shift + /) while viewing the slides you can see a list of slide-specific commands (like f for fullscreen or p for presenter mode if you want to see my notes)."
  },
  {
    "objectID": "content/R/r-manuals/01-content.html",
    "href": "content/R/r-manuals/01-content.html",
    "title": "Evaluation and the causal revolution",
    "section": "",
    "text": "The syllabus, content, examples, and assignments pages for this class\n Chapter 1 in Impact Evaluation in Practice [@wb-eval]\n Chapters 1 and 2 in The Effect [@Huntington-Klein:2021]\n DJ Patil, “What Makes a Radical and Revolutionary Technology?”\n\n(DJ Patil is the former Chief Data Scientist of the United States under President Obama. He gave this forum address at Brigham Young University on February 13, 2018.)\n\n Stephen Goldsmith, “Next Generation of Public Employees Must Understand Data and Policy”\n Hadley Wickham, “Data Science: How is it Different To Statistics?”"
  },
  {
    "objectID": "content/R/r-manuals/01-content.html#slides",
    "href": "content/R/r-manuals/01-content.html#slides",
    "title": "Evaluation and the causal revolution",
    "section": "Slides",
    "text": "Slides\n\n\n\n\n\n\nWarning\n\n\n\nImportant!!: In the “Class details” video, I say that there are three books for the class: the World Bank evaluation book, ’Metrics Matter, and Causal Inference: The Mixtape. That’s not the case this semester, since we’re using the new The Effect book, which replaces both ’Metrics Matter and the Mixtape. So ignore that part of the video. The slides are updated with the correct books, though: see here.\n\n\nThe slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.\n\n View all slides in new window  Download PDF of all slides\n\n\n\nIntroduction\n\n\nData science and public service\n\n\nEvidence, evaluation, and causation (1)\n\n\nEvidence, evaluation, and causation (2)\n\n\nClass details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands."
  },
  {
    "objectID": "content/R/r-manuals/01-content.html#videos",
    "href": "content/R/r-manuals/01-content.html#videos",
    "title": "Evaluation and the causal revolution",
    "section": "Videos",
    "text": "Videos\n\n\n\n\n\n\nWarning\n\n\n\nImportant!!: In the “Class details” video, I say that there are three books for the class: the World Bank evaluation book, ’Metrics Matter, and Causal Inference: The Mixtape. That’s not the case this semester, since we’re using the new The Effect book, which replaces both ’Metrics Matter and the Mixtape. So ignore that part of the video. The slides are updated with the correct books, though: see here.\n\n\nVideos for each section of the lecture are available at this YouTube playlist.\n\nIntroduction\nData science and public service\nEvidence, evaluation, and causation (1)\nEvidence, evaluation, and causation (2)\nClass details\n\nYou can also watch the playlist (and skip around to different sections) here:"
  },
  {
    "objectID": "content/R/r-manuals/01-content.html#in-class-stuff",
    "href": "content/R/r-manuals/01-content.html#in-class-stuff",
    "title": "Evaluation and the causal revolution",
    "section": "In-class stuff",
    "text": "In-class stuff\nHere are all the materials we’ll use in class:\n\nSession 1 in-person slides (PDF)\n\nRStudio labs:\n\nRStudio.cloud project\nProject .zip file\nLab slides 1: Markdown and universal writing (PDF)\nLab slides 2: Getting started with R and RStudio (PDF)\nLab slides 3: Data basics (PDF)\nLab slides 4: Visualize data with ggplot2 (PDF)\nLab slides 5: Transform data with dplyr (PDF)"
  },
  {
    "objectID": "content/R/r-manuals/02-content.html",
    "href": "content/R/r-manuals/02-content.html",
    "title": "Regression and inference",
    "section": "",
    "text": "Chapters 3 and 4 in The Effect [@Huntington-Klein:2021]"
  },
  {
    "objectID": "content/R/r-manuals/02-content.html#recommended-readings",
    "href": "content/R/r-manuals/02-content.html#recommended-readings",
    "title": "Regression and inference",
    "section": "Recommended readings",
    "text": "Recommended readings\nLook through your notes on regression from your last stats class. Also, you can skim through these resources:\n\n 5.1–5.4 in ModernDive [@IsmayKim:2018]\n 6.1–6.4 in ModernDive [@IsmayKim:2018]\n 7.1–7.3 in OpenIntro Statistics [@DiezBarrCetinkaya-Rundel:2017]\n 8.1 in OpenIntro Statistics [@DiezBarrCetinkaya-Rundel:2017]\n\nWe’ll review all this regression stuff in the videos, so don’t panic if this all looks terrifying! Also, take advantage of the videos that accompany the OpenIntro chapters. And also, the OpenIntro chapters are heavier on the math—don’t worry if you don’t understand everything."
  },
  {
    "objectID": "content/R/r-manuals/02-content.html#slides",
    "href": "content/R/r-manuals/02-content.html#slides",
    "title": "Regression and inference",
    "section": "Slides",
    "text": "Slides\nThe slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.\n\n View all slides in new window  Download PDF of all slides\n\n\n\nIntroduction\n\n\nDrawing lines\n\n\nLines, Greek, and regression\n\n\nNull worlds and statistical significance\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands."
  },
  {
    "objectID": "content/R/r-manuals/02-content.html#videos",
    "href": "content/R/r-manuals/02-content.html#videos",
    "title": "Regression and inference",
    "section": "Videos",
    "text": "Videos\nVideos for each section of the lecture are available at this YouTube playlist.\n\nIntroduction\nDrawing lines\nLines, Greek, and regression\nNull worlds and statistical significance\n\nYou can also watch the playlist (and skip around to different sections) here:"
  },
  {
    "objectID": "content/R/r-manuals/02-content.html#in-class-stuff",
    "href": "content/R/r-manuals/02-content.html#in-class-stuff",
    "title": "Regression and inference",
    "section": "In-class stuff",
    "text": "In-class stuff\nHere are all the materials we’ll use in class:\n\nSession 2 FAQ slides (PDF)\nErrors vs. warnings vs. messages (i.e. what to do when R shows you red text)\nR Markdown examples:\n\nExample R Markdown file used as a code-through or step-by-step teaching document:\n\nLots of blog posts here\nJulia Silge, “Modeling human/computer interactions on Star Trek from #TidyTuesday with workflowsets”\nBob Rudis, “Some Covid Donuts To End The Week”\nHolger K. von Jouanne-Diedrich, “The “Youth Bulge” of Afghanistan: The Hidden Force behind Political Instability”\n\nExample R Markdown file used as a publicly-consumable document:\n\nClick on the “Manuscript” menu item at this site\nSee the Rmd file here\n\n\n\nHands-on R materials:\n\nRStudio.cloud project\nProject .zip file\nGapminder data\nLab slides 1: Markdown and universal writing (PDF)\nLab slides 2: Getting started with R and RStudio (PDF)\nLab slides 3: Data basics (PDF)\nLab slides 4: Visualize data with ggplot2 (PDF)\nLab slides 5: Transform data with dplyr (PDF)\n restaurant_inspections.csv"
  },
  {
    "objectID": "content/R/r-manuals/02-content.html#bayesian-statistics-resources",
    "href": "content/R/r-manuals/02-content.html#bayesian-statistics-resources",
    "title": "Regression and inference",
    "section": "Bayesian statistics resources",
    "text": "Bayesian statistics resources\nIn class I briefly mentioned the difference between frequentist and Bayesian statistics. You can see a bunch of additional resources and examples of these two approaches to statistics here. This huge blog post also shows how to do multilevel models with Bayesian models."
  },
  {
    "objectID": "content/R/r-manuals/03-content.html",
    "href": "content/R/r-manuals/03-content.html",
    "title": "Theories of change and logic models",
    "section": "",
    "text": "Chapter 2 in Impact Evaluation in Practice [@wb-eval]\n Chapter 2 in Evaluation: A Systematic Approach [@RossiLipseyHenry:2019]. This is available on iCollege.\n Chapter 3 in Evaluation: A Systematic Approach [@RossiLipseyHenry:2019]. This is available on iCollege."
  },
  {
    "objectID": "content/R/r-manuals/03-content.html#slides",
    "href": "content/R/r-manuals/03-content.html#slides",
    "title": "Theories of change and logic models",
    "section": "Slides",
    "text": "Slides\nThe slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.\n\n View all slides in new window  Download PDF of all slides\n\n\n\nIntroduction\n\n\nReproducibility\n\n\nProgram theories\n\n\nLogic models & results chains\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands."
  },
  {
    "objectID": "content/R/r-manuals/03-content.html#videos",
    "href": "content/R/r-manuals/03-content.html#videos",
    "title": "Theories of change and logic models",
    "section": "Videos",
    "text": "Videos\nVideos for each section of the lecture are available at this YouTube playlist.\n\nIntroduction\nReproducibility\nProgram theories\nLogic models & results chains\n\nYou can also watch the playlist (and skip around to different sections) here:"
  },
  {
    "objectID": "content/R/r-manuals/04-content.html",
    "href": "content/R/r-manuals/04-content.html",
    "title": "Measurement and DAGs",
    "section": "",
    "text": "The witch trial scene from Monty Python and the Holy Grail\n Chapter 5 in Evaluation: A Systematic Approach [@RossiLipseyHenry:2019]. This is available on iCollege.\n Chapter 5 in The Effect [@Huntington-Klein:2021]\n\n\n\n\n\n Julia M. Rohrer, “Thinking Clearly About Correlations and Causation: Graphical Causal Models for Observational Data” [@Rohrer:2018] This will be posted on iCollege.\n Section 2 only (pp. 4–11) from Julian Schuessler and Peter Selb, “Graphical Causal Models for Survey Inference.” [@SchuesslerSelb:2019] The PDF is available at SocArXiv.\n Chapters 6 and 7 in The Effect [@Huntington-Klein:2021]\n\n\n\n\n\nThe example page on DAGs shows how to draw and analyze DAGs with both dagitty.net and R + ggdag"
  },
  {
    "objectID": "content/R/r-manuals/04-content.html#slides",
    "href": "content/R/r-manuals/04-content.html#slides",
    "title": "Measurement and DAGs",
    "section": "Slides",
    "text": "Slides\nThe slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.\n\n View all slides in new window  Download PDF of all slides\n\n\n\nIntroduction\n\n\nAbstraction, stretching, and validity\n\n\nCausal models\n\n\nPaths, doors, and adjustment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands."
  },
  {
    "objectID": "content/R/r-manuals/04-content.html#videos",
    "href": "content/R/r-manuals/04-content.html#videos",
    "title": "Measurement and DAGs",
    "section": "Videos",
    "text": "Videos\nVideos for each section of the lecture are available at this YouTube playlist.\n\nIntroduction\nAbstraction, stretching, and validity\nCausal models\nPaths, doors, and adjustment\n\nYou can also watch the playlist (and skip around to different sections) here:"
  },
  {
    "objectID": "content/R/r-manuals/04-content.html#in-class-stuff",
    "href": "content/R/r-manuals/04-content.html#in-class-stuff",
    "title": "Measurement and DAGs",
    "section": "In-class stuff",
    "text": "In-class stuff\nHere are all the materials we’ll use in class:\n\nSession 4 FAQ slides (PDF)"
  },
  {
    "objectID": "content/R/r-manuals/05-content.html",
    "href": "content/R/r-manuals/05-content.html",
    "title": "DAGs and potential outcomes",
    "section": "",
    "text": "Prologue and at least one of the four acts from This American Life, “Gardens of Branching Paths,” episode #691, January 10, 2020\n Chapter 3 in Impact Evaluation in Practice [@wb-eval]\n Chapters 8, 9, and 10 in The Effect [@Huntington-Klein:2021]\n\n\n\n\nThe example page on potential outcomes, ATEs, and CATEs shows how to use R to calculate ATEs and CATEs"
  },
  {
    "objectID": "content/R/r-manuals/05-content.html#slides",
    "href": "content/R/r-manuals/05-content.html#slides",
    "title": "DAGs and potential outcomes",
    "section": "Slides",
    "text": "Slides\nThe slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.\n\n View all slides in new window  Download PDF of all slides\n\n\n\nIntroduction\n\n\ndo()ing observational causal inference\n\n\nPotential outcomes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands."
  },
  {
    "objectID": "content/R/r-manuals/05-content.html#videos",
    "href": "content/R/r-manuals/05-content.html#videos",
    "title": "DAGs and potential outcomes",
    "section": "Videos",
    "text": "Videos\nVideos for each section of the lecture are available at this YouTube playlist.\n\nIntroduction\ndo()ing observational causal inference\nPotential outcomes\n\nYou can also watch the playlist (and skip around to different sections) here:"
  },
  {
    "objectID": "content/R/r-manuals/05-content.html#in-class-stuff",
    "href": "content/R/r-manuals/05-content.html#in-class-stuff",
    "title": "DAGs and potential outcomes",
    "section": "In-class stuff",
    "text": "In-class stuff\nHere are all the materials we’ll use in class:\n\nSession 5 FAQ slides (PDF)\n\n\nConfounding, unblocked\n\n\n\n\n\n\n\nConfounding, blocked\n\n\n\n\n\n\n\nMediation"
  },
  {
    "objectID": "content/R/r-manuals/06-content.html",
    "href": "content/R/r-manuals/06-content.html",
    "title": "Threats to validity",
    "section": "",
    "text": "Guido Imbens, “Statistical Significance, p-Values, and the Reporting of Uncertainty” [@Imbens:2021]. This is available on iCollege, and it’s also free here.\n Randall Munroe, “Significant”\n Alexander Coppock, “10 Things to Know About Statistical Power”\n Play around with FiveThirtyEight, “Hack Your Way To Scientific Glory”\n Chapter 9 in Impact Evaluation in Practice [@wb-eval]\n Chapter 11 in The Effect [@Huntington-Klein:2021]"
  },
  {
    "objectID": "content/R/r-manuals/06-content.html#slides",
    "href": "content/R/r-manuals/06-content.html#slides",
    "title": "Threats to validity",
    "section": "Slides",
    "text": "Slides\nThe slides for today’s lesson are available online as an HTML file. Use the buttons below to open the slides either as an interactive website or as a static PDF (for printing or storing for later). You can also click in the slides below and navigate through them with your left and right arrow keys.\n\n View all slides in new window  Download PDF of all slides\n\n\n\nIntroduction\n\n\nConstruct validity\n\n\nStatistical conclusion validity\n\n\nInternal validity\n\n\nExternal validity\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFun fact: If you type ? (or shift + /) while going through the slides, you can see a list of special slide-specific commands."
  },
  {
    "objectID": "content/R/r-manuals/06-content.html#videos",
    "href": "content/R/r-manuals/06-content.html#videos",
    "title": "Threats to validity",
    "section": "Videos",
    "text": "Videos\nVideos for each section of the lecture are available at this YouTube playlist.\n\nIntroduction\nConstruct validity\nStatistical conclusion validity\nInternal validity\nExternal validity\n\nYou can also watch the playlist (and skip around to different sections) here:"
  },
  {
    "objectID": "content/R/r-manuals/06-content.html#in-class-stuff",
    "href": "content/R/r-manuals/06-content.html#in-class-stuff",
    "title": "Threats to validity",
    "section": "In-class stuff",
    "text": "In-class stuff\nHere are all the materials we’ll use in class:\n\nSession 6 FAQ slides (PDF)\nZilch!\n Live R script\n restaurant_inspections.csv"
  },
  {
    "objectID": "content/R/r-manuals/test.html",
    "href": "content/R/r-manuals/test.html",
    "title": "R Manuals :: An Introduction to R",
    "section": "",
    "text": "This is an introduction to R (“GNU S”), a language and environment for statistical computing and graphics. R is similar to the award-winning1 S system, which was developed at Bell Laboratories by John Chambers et al. It provides a wide variety of statistical and graphical techniques (linear and nonlinear modelling, statistical tests, time series analysis, classification, clustering, ...).\nThis manual provides information on data types, programming elements, statistical modelling and graphics.\nThis manual is for R, version 4.3.0 Under development.\nCopyright © 1990 W. N. Venables\nCopyright © 1992 W. N. Venables & D. M. Smith\nCopyright © 1997 R. Gentleman & R. Ihaka\nCopyright © 1997, 1998 M. Maechler\nCopyright © 1999–2022 R Core Team\n\nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the R Core Team."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-r-environment",
    "href": "content/R/r-manuals/test.html#sec-the-r-environment",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.1 The R environment",
    "text": "1.1 The R environment\nR is an integrated suite of software facilities for data manipulation, calculation and graphical display. Among other things it has\n\nan effective data handling and storage facility,\na suite of operators for calculations on arrays, in particular matrices,\na large, coherent, integrated collection of intermediate tools for data analysis,\ngraphical facilities for data analysis and display either directly at the computer or on hardcopy, and\na well developed, simple and effective programming language (called ‘S’) which includes conditionals, loops, user defined recursive functions and input and output facilities. (Indeed most of the system supplied functions are themselves written in the S language.)\n\nThe term “environment” is intended to characterize it as a fully planned and coherent system, rather than an incremental accretion of very specific and inflexible tools, as is frequently the case with other data analysis software.\nR is very much a vehicle for newly developing methods of interactive data analysis. It has developed rapidly, and has been extended by a large collection of packages. However, most programs written in R are essentially ephemeral, written for a single piece of data analysis."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-related-software-and-documentation",
    "href": "content/R/r-manuals/test.html#sec-related-software-and-documentation",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.2 Related software and documentation",
    "text": "1.2 Related software and documentation\nR can be regarded as an implementation of the S language which was developed at Bell Laboratories by Rick Becker, John Chambers and Allan Wilks, and also forms the basis of the S-PLUS systems.\nThe evolution of the S language is characterized by four books by John Chambers and coauthors. For R, the basic reference is The New S Language: A Programming Environment for Data Analysis and Graphics by Richard A. Becker, John M. Chambers and Allan R. Wilks. The new features of the 1991 release of S are covered in Statistical Models in S edited by John M. Chambers and Trevor J. Hastie. The formal methods and classes of the methods package are based on those described in Programming with Data by John M. Chambers. See Section 20, for precise references.\nThere are now a number of books which describe how to use R for data analysis and statistics, and documentation for S/S-PLUS can typically be used with R, keeping the differences between the S implementations in mind. See What documentation exists for R in the R statistical system FAQ."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-r-and-statistics",
    "href": "content/R/r-manuals/test.html#sec-r-and-statistics",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.3 R and statistics",
    "text": "1.3 R and statistics\nOur introduction to the R environment did not mention statistics, yet many people use R as a statistics system. We prefer to think of it of an environment within which many classical and modern statistical techniques have been implemented. A few of these are built into the base R environment, but many are supplied as packages. There are about 25 packages supplied with R (called “standard” and “recommended” packages) and many more are available through the CRAN family of Internet sites (via https://CRAN.R-project.org) and elsewhere. More details on packages are given later (see Section 13).\nMost classical statistics and much of the latest methodology is available for use with R, but users may need to be prepared to do a little work to find it.\nThere is an important difference in philosophy between S (and hence R) and the other main statistical systems. In S a statistical analysis is normally done as a series of steps, with intermediate results being stored in objects. Thus whereas SAS and SPSS will give copious output from a regression or discriminant analysis, R will give minimal output and store the results in a fit object for subsequent interrogation by further R functions."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-r-and-the-window-system",
    "href": "content/R/r-manuals/test.html#sec-r-and-the-window-system",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.4 R and the window system",
    "text": "1.4 R and the window system\nThe most convenient way to use R is at a graphics workstation running a windowing system. This guide is aimed at users who have this facility. In particular we will occasionally refer to the use of R on an X window system although the vast bulk of what is said applies generally to any implementation of the R environment.\nMost users will find it necessary to interact directly with the operating system on their computer from time to time. In this guide, we mainly discuss interaction with the operating system on UNIX machines. If you are running R under Windows or macOS you will need to make some small adjustments.\nSetting up a workstation to take full advantage of the customizable features of R is a straightforward if somewhat tedious procedure, and will not be considered further here. Users in difficulty should seek local expert help."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-using-r-interactively",
    "href": "content/R/r-manuals/test.html#sec-using-r-interactively",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.5 Using R interactively",
    "text": "1.5 Using R interactively\nWhen you use the R program it issues a prompt when it expects input commands. The default prompt is >, which on UNIX might be the same as the shell prompt, and so it may appear that nothing is happening. However, as we shall see, it is easy to change to a different R prompt if you wish. We will assume that the UNIX shell prompt is $.\nIn using R under UNIX the suggested procedure for the first occasion is as follows:\n\nCreate a separate sub-directory, say work, to hold data files on which you will use R for this problem. This will be the working directory whenever you use R for this particular problem. R     $ mkdir work     $ cd work\nStart the R program with the command R     $ R\nAt this point R commands may be issued (see later).\nTo quit the R program the command is\n> q()\nAt this point you will be asked whether you want to save the data from your R session. On some systems this will bring up a dialog box, and on others you will receive a text prompt to which you can respond yes, no or cancel (a single letter abbreviation will do) to save the data before quitting, quit without saving, or return to the R session. Data which is saved will be available in future R sessions.\n\nFurther R sessions are simple.\n\nMake work the working directory and start the program as before: R     $ cd work     $ R\nUse the R program, terminating with the q() command at the end of the session.\n\nTo use R under Windows the procedure to follow is basically the same. Create a folder as the working directory, and set that in the Start In field in your R shortcut. Then launch R by double clicking on the icon."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-1.6-an-introductory-session",
    "href": "content/R/r-manuals/test.html#sec-1.6-an-introductory-session",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.6 1.6 An introductory session",
    "text": "1.6 1.6 An introductory session\nReaders wishing to get a feel for R at a computer before proceeding are strongly advised to work through the introductory session given in Section 15."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-getting-help-with-functions-and-features",
    "href": "content/R/r-manuals/test.html#sec-getting-help-with-functions-and-features",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.7 Getting help with functions and features",
    "text": "1.7 Getting help with functions and features\nR has an inbuilt help facility similar to the man facility of UNIX. To get more information on any specific named function, for example solve, the command is\n> help(solve)\nAn alternative is\n> ?solve\nFor a feature specified by special characters, the argument must be enclosed in double or single quotes, making it a “character string”: This is also necessary for a few words with syntactic meaning including if, for and function.\n> help(\"[[\")\nEither form of quote mark may be used to escape the other, as in the string \"It's important\". Our convention is to use double quote marks for preference.\nOn most R installations help is available in HTML format by running\n> help.start()\nwhich will launch a Web browser that allows the help pages to be browsed with hyperlinks. On UNIX, subsequent help requests are sent to the HTML-based help system. The ‘Search Engine and Keywords’ link in the page loaded by help.start() is particularly useful as it is contains a high-level concept list which searches though available functions. It can be a great way to get your bearings quickly and to understand the breadth of what R has to offer.\nThe help.search command (alternatively ??) allows searching for help in various ways. For example,\n> ??solve\nTry ?help.search for details and more examples.\nThe examples on a help topic can normally be run by\n> example(topic)\nWindows versions of R have other optional help systems: use\n> ?help\nfor further details."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-r-commands-case-sensitivity-etc.",
    "href": "content/R/r-manuals/test.html#sec-r-commands-case-sensitivity-etc.",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.8 R commands, case sensitivity, etc.",
    "text": "1.8 R commands, case sensitivity, etc.\nTechnically R is an expression language with a very simple syntax. It is case sensitive as are most UNIX based packages, so A and a are different symbols and would refer to different variables. The set of symbols which can be used in R names depends on the operating system and country within which R is being run (technically on the locale in use). Normally all alphanumeric symbols are allowed2 (and in some countries this includes accented letters) plus . and _‘, with the restriction that a name must start with’. or a letter, and if it starts with . the second character must not be a digit. Names are effectively unlimited in length.\nElementary commands consist of either expressions or assignments. If an expression is given as a command, it is evaluated, printed (unless specifically made invisible), and the value is lost. An assignment also evaluates an expression and passes the value to a variable but the result is not automatically printed.\nCommands are separated either by a semi-colon (;), or by a newline. Elementary commands can be grouped together into one compound expression by braces ({’ and ’}). Comments can be put almost3 anywhere, starting with a hashmark (#), everything to the end of the line is a comment.\nIf a command is not complete at the end of a line, R will give a different prompt, by default\n+\non second and subsequent lines and continue to read input until the command is syntactically complete. This prompt may be changed by the user. We will generally omit the continuation prompt and indicate continuation by simple indenting.\nCommand lines entered at the console are limited4 to about 4095 bytes (not characters)."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-recall-and-correction-of-previous-commands",
    "href": "content/R/r-manuals/test.html#sec-recall-and-correction-of-previous-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.9 Recall and correction of previous commands",
    "text": "1.9 Recall and correction of previous commands\nUnder many versions of UNIX and on Windows, R provides a mechanism for recalling and re-executing previous commands. The vertical arrow keys on the keyboard can be used to scroll forward and backward through a command history. Once a command is located in this way, the cursor can be moved within the command using the horizontal arrow keys, and characters can be removed with the DEL key or added with the other keys. More details are provided later: see Section 17 .\nThe recall and editing capabilities under UNIX are highly customizable. You can find out how to do this by reading the manual entry for the readline library.\nAlternatively, the Emacs text editor provides more general support mechanisms (via ESS, Emacs Speaks Statistics) for working interactively with R. See R and Emacs in The R statistical system FAQ."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-executing-commands-from-or-diverting-output-to-a-file",
    "href": "content/R/r-manuals/test.html#sec-executing-commands-from-or-diverting-output-to-a-file",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.10 Executing commands from or diverting output to a file",
    "text": "1.10 Executing commands from or diverting output to a file\nIf commands5 are stored in an external file, say commands.R in the working directory work, they may be executed at any time in an R session with the command\n> source(\"commands.R\")\nFor Windows Source is also available on the File menu. The function sink,\n> sink(\"record.lis\")\nwill divert all subsequent output from the console to an external file, record.lis. The command\n> sink()\nrestores it to the console once again."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-data-permanency-and-removing-objects",
    "href": "content/R/r-manuals/test.html#sec-data-permanency-and-removing-objects",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.11 Data permanency and removing objects",
    "text": "1.11 Data permanency and removing objects\nThe entities that R creates and manipulates are known as objects. These may be variables, arrays of numbers, character strings, functions, or more general structures built from such components.\nDuring an R session, objects are created and stored by name (we discuss this process in the next section). The R command\n> objects()\n(alternatively, ls()) can be used to display the names of (most of) the objects which are currently stored within R. The collection of objects currently stored is called the workspace.\nTo remove objects the function rm is available:\n> rm(x, y, z, ink, junk, temp, foo, bar)\nAll objects created during an R session can be stored permanently in a file for use in future R sessions. At the end of each R session you are given the opportunity to save all the currently available objects. If you indicate that you want to do this, the objects are written to a file called .RData6 in the current directory, and the command lines used in the session are saved to a file called .Rhistory.\nWhen R is started at later time from the same directory it reloads the workspace from this file. At the same time the associated commands history is reloaded.\nIt is recommended that you should use separate working directories for analyses conducted with R. It is quite common for objects with names x and y to be created during an analysis. Names like this are often meaningful in the context of a single analysis, but it can be quite hard to decide what they might be when the several analyses have been conducted in the same directory."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-vectors-and-assignment",
    "href": "content/R/r-manuals/test.html#sec-vectors-and-assignment",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.1 Vectors and assignment",
    "text": "2.1 Vectors and assignment\nR operates on named data structures. The simplest such structure is the numeric vector, which is a single entity consisting of an ordered collection of numbers. To set up a vector named x, say, consisting of five numbers, namely 10.4, 5.6, 3.1, 6.4 and 21.7, use the R command\n> x <- c(10.4, 5.6, 3.1, 6.4, 21.7)\nThis is an assignment statement using the function c() which in this context can take an arbitrary number of vector arguments and whose value is a vector got by concatenating its arguments end to end.7\nA number occurring by itself in an expression is taken as a vector of length one.\nNotice that the assignment operator (<-), which consists of the two characters <’ (“less than”) and ‘- (“minus”) occurring strictly side-by-side and it ’points’ to the object receiving the value of the expression. In most contexts the = operator can be used as an alternative.\nAssignment can also be made using the function assign(). An equivalent way of making the same assignment as above is with:\n> assign(\"x\", c(10.4, 5.6, 3.1, 6.4, 21.7))\nThe usual operator, <-, can be thought of as a syntactic short-cut to this.\nAssignments can also be made in the other direction, using the obvious change in the assignment operator. So the same assignment could be made using\n> c(10.4, 5.6, 3.1, 6.4, 21.7) -> x\nIf an expression is used as a complete command, the value is printed and lost8. So now if we were to use the command\n> 1/x\nthe reciprocals of the five values would be printed at the terminal (and the value of x, of course, unchanged).\nThe further assignment\n> y <- c(x, 0, x)\nwould create a vector y with 11 entries consisting of two copies of x with a zero in the middle place."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-vector-arithmetic",
    "href": "content/R/r-manuals/test.html#sec-vector-arithmetic",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.2 Vector arithmetic",
    "text": "2.2 Vector arithmetic\nVectors can be used in arithmetic expressions, in which case the operations are performed element by element. Vectors occurring in the same expression need not all be of the same length. If they are not, the value of the expression is a vector with the same length as the longest vector which occurs in the expression. Shorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector. In particular a constant is simply repeated. So with the above assignments the command\n> v <- 2*x + y + 1\ngenerates a new vector v of length 11 constructed by adding together, element by element, 2*x repeated 2.2 times, y repeated just once, and 1 repeated 11 times.\nThe elementary arithmetic operators are the usual +, -, *, / and ^ for raising to a power. In addition all of the common arithmetic functions are available. log, exp, sin, cos, tan, sqrt, and so on, all have their usual meaning. max and min select the largest and smallest elements of a vector respectively. range is a function whose value is a vector of length two, namely c(min(x), max(x)). length(x) is the number of elements in x, sum(x) gives the total of the elements in x, and prod(x) their product.\nTwo statistical functions are mean(x) which calculates the sample mean, which is the same as sum(x)/length(x), and var(x) which gives\nsum((x-mean(x))^2)/(length(x)-1)\nor sample variance. If the argument to var() is an n-by-p matrix the value is a p-by-p sample covariance matrix got by regarding the rows as independent p-variate sample vectors.\nsort(x) returns a vector of the same size as x with the elements arranged in increasing order; however there are other more flexible sorting facilities available (see order() or sort.list() which produce a permutation to do the sorting).\nNote that max and min select the largest and smallest values in their arguments, even if they are given several vectors. The parallel maximum and minimum functions pmax and pmin return a vector (of length equal to their longest argument) that contains in each element the largest (smallest) element in that position in any of the input vectors.\nFor most purposes the user will not be concerned if the “numbers” in a numeric vector are integers, reals or even complex. Internally calculations are done as double precision real numbers, or double precision complex numbers if the input data are complex.\nTo work with complex numbers, supply an explicit complex part. Thus\nsqrt(-17)\nwill give NaN and a warning, but\nsqrt(-17+0i)\nwill do the computations as complex numbers."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-generating-regular-sequences",
    "href": "content/R/r-manuals/test.html#sec-generating-regular-sequences",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.3 Generating regular sequences",
    "text": "2.3 Generating regular sequences\nR has a number of facilities for generating commonly used sequences of numbers. For example 1:30 is the vector c(1, 2, …, 29, 30). The colon operator has high priority within an expression, so, for example 2*1:15 is the vector c(2, 4, …, 28, 30). Put n <- 10 and compare the sequences 1:n-1 and 1:(n-1).\nThe construction 30:1 may be used to generate a sequence backwards.\nThe function seq() is a more general facility for generating sequences. It has five arguments, only some of which may be specified in any one call. The first two arguments, if given, specify the beginning and end of the sequence, and if these are the only two arguments given the result is the same as the colon operator. That is seq(2,10) is the same vector as 2:10.\nArguments to seq(), and to many other R functions, can also be given in named form, in which case the order in which they appear is irrelevant. The first two arguments may be named from=``value and to=``value; thus seq(1,30), seq(from=1, to=30) and seq(to=30, from=1) are all the same as 1:30. The next two arguments to seq() may be named by=``value and length=``value, which specify a step size and a length for the sequence respectively. If neither of these is given, the default by=1 is assumed.\nFor example\n> seq(-5, 5, by=.2) -> s3\ngenerates in s3 the vector c(-5.0, -4.8, -4.6, …, 4.6, 4.8, 5.0). Similarly\n> s4 <- seq(length=51, from=-5, by=.2)\ngenerates the same vector in s4.\nThe fifth argument may be named along=``vector, which is normally used as the only argument to create the sequence 1, 2, …, length(``vector), or the empty sequence if the vector is empty (as it can be).\nA related function is rep() which can be used for replicating an object in various complicated ways. The simplest form is\n> s5 <- rep(x, times=5)\nwhich will put five copies of x end-to-end in s5. Another useful version is\n> s6 <- rep(x, each=5)\nwhich repeats each element of x five times before moving on to the next."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-logical-vectors",
    "href": "content/R/r-manuals/test.html#sec-logical-vectors",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.4 Logical vectors",
    "text": "2.4 Logical vectors\nAs well as numerical vectors, R allows manipulation of logical quantities. The elements of a logical vector can have the values TRUE, FALSE, and NA (for “not available”, see below). The first two are often abbreviated as T and F, respectively. Note however that T and F are just variables which are set to TRUE and FALSE by default, but are not reserved words and hence can be overwritten by the user. Hence, you should always use TRUE and FALSE.\nLogical vectors are generated by conditions. For example\n> temp <- x > 13\nsets temp as a vector of the same length as x with values FALSE corresponding to elements of x where the condition is not met and TRUE where it is.\nThe logical operators are <, <=, >, >=, == for exact equality and != for inequality. In addition if c1 and c2 are logical expressions, then c1 & c2 is their intersection (“and”), c1 | c2 is their union (“or”), and !c1 is the negation of c1.\nLogical vectors may be used in ordinary arithmetic, in which case they are coerced into numeric vectors, FALSE becoming 0 and TRUE becoming 1. However there are situations where logical vectors and their coerced numeric counterparts are not equivalent, for example see the next subsection."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-missing-values",
    "href": "content/R/r-manuals/test.html#sec-missing-values",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.5 Missing values",
    "text": "2.5 Missing values\nIn some cases the components of a vector may not be completely known. When an element or value is “not available” or a “missing value” in the statistical sense, a place within a vector may be reserved for it by assigning it the special value NA. In general any operation on an NA becomes an NA. The motivation for this rule is simply that if the specification of an operation is incomplete, the result cannot be known and hence is not available.\nThe function is.na(x) gives a logical vector of the same size as x with value TRUE if and only if the corresponding element in x is NA.\n> z <- c(1:3,NA);  ind <- is.na(z)\nNotice that the logical expression x == NA is quite different from is.na(x) since NA is not really a value but a marker for a quantity that is not available. Thus x == NA is a vector of the same length as x all of whose values are NA as the logical expression itself is incomplete and hence undecidable.\nNote that there is a second kind of “missing” values which are produced by numerical computation, the so-called Not a Number, NaN, values. Examples are\n> 0/0\nor\n> Inf - Inf\nwhich both give NaN since the result cannot be defined sensibly.\nIn summary, is.na(xx) is TRUE both for NA and NaN values. To differentiate these, is.nan(xx) is only TRUE for NaNs.\nMissing values are sometimes printed as <NA> when character vectors are printed without quotes."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-character-vectors",
    "href": "content/R/r-manuals/test.html#sec-character-vectors",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.6 Character vectors",
    "text": "2.6 Character vectors\nCharacter quantities and character vectors are used frequently in R, for example as plot labels. Where needed they are denoted by a sequence of characters delimited by the double quote character, e.g., \"x-values\", \"New iteration results\".\nCharacter strings are entered using either matching double (\") or single (') quotes, but are printed using double quotes (or sometimes without quotes). They use C-style escape sequences, using \\ as the escape character, so \\ is entered and printed as \\\\, and inside double quotes \" is entered as \\\". Other useful escape sequences are \\n, newline, \\t, tab and \\b, backspace—see ?Quotes for a full list.\nCharacter vectors may be concatenated into a vector by the c() function; examples of their use will emerge frequently.\nThe paste() function takes an arbitrary number of arguments and concatenates them one by one into character strings. Any numbers given among the arguments are coerced into character strings in the evident way, that is, in the same way they would be if they were printed. The arguments are by default separated in the result by a single blank character, but this can be changed by the named argument, sep=``string, which changes it to string, possibly empty.\nFor example\n> labs <- paste(c(\"X\",\"Y\"), 1:10, sep=\"\")\nmakes labs into the character vector\nc(\"X1\", \"Y2\", \"X3\", \"Y4\", \"X5\", \"Y6\", \"X7\", \"Y8\", \"X9\", \"Y10\")\nNote particularly that recycling of short lists takes place here too; thus c(\"X\", \"Y\") is repeated 5 times to match the sequence 1:10. 9"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-index-vectors-selecting-and-modifying-subsets-of-a-data-set",
    "href": "content/R/r-manuals/test.html#sec-index-vectors-selecting-and-modifying-subsets-of-a-data-set",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.7 Index vectors; selecting and modifying subsets of a data set",
    "text": "2.7 Index vectors; selecting and modifying subsets of a data set\nSubsets of the elements of a vector may be selected by appending to the name of the vector an index vector in square brackets. More generally any expression that evaluates to a vector may have subsets of its elements similarly selected by appending an index vector in square brackets immediately after the expression.\nSuch index vectors can be any of four distinct types.\n\nA logical vector. In this case the index vector is recycled to the same length as the vector from which elements are to be selected. Values corresponding to TRUE in the index vector are selected and those corresponding to FALSE are omitted. For example\n> y <- x[!is.na(x)]\ncreates (or re-creates) an object y which will contain the non-missing values of x, in the same order. Note that if x has missing values, y will be shorter than x. Also\n> (x+1)[(!is.na(x)) & x>0] -> z\ncreates an object z and places in it the values of the vector x+1 for which the corresponding value in x was both non-missing and positive.\nA vector of positive integral quantities. In this case the values in the index vector must lie in the set {1, 2, …, length(x)}. The corresponding elements of the vector are selected and concatenated, in that order, in the result. The index vector can be of any length and the result is of the same length as the index vector. For example x[6] is the sixth component of x and\n> x[1:10]\nselects the first 10 elements of x (assuming length(x) is not less than 10). Also\n> c(\"x\",\"y\")[rep(c(1,2,2,1), times=4)]\n(an admittedly unlikely thing to do) produces a character vector of length 16 consisting of \"x\", \"y\", \"y\", \"x\" repeated four times.\nA vector of negative integral quantities. Such an index vector specifies the values to be excluded rather than included. Thus\n> y <- x[-(1:5)]\ngives y all but the first five elements of x.\nA vector of character strings. This possibility only applies where an object has a names attribute to identify its components. In this case a sub-vector of the names vector may be used in the same way as the positive integral labels in item 2 further above.\n> fruit <- c(5, 10, 1, 20)\n> names(fruit) <- c(\"orange\", \"banana\", \"apple\", \"peach\")\n> lunch <- fruit[c(\"apple\",\"orange\")]\nThe advantage is that alphanumeric names are often easier to remember than numeric indices. This option is particularly useful in connection with data frames, as we shall see later.\n\nAn indexed expression can also appear on the receiving end of an assignment, in which case the assignment operation is performed only on those elements of the vector. The expression must be of the form vector[``index_vector] as having an arbitrary expression in place of the vector name does not make much sense here.\nFor example\n> x[is.na(x)] <- 0\nreplaces any missing values in x by zeros and\n> y[y < 0] <- -y[y < 0]\nhas the same effect as\n> y <- abs(y)"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-other-types-of-objects",
    "href": "content/R/r-manuals/test.html#sec-other-types-of-objects",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.8 Other types of objects",
    "text": "2.8 Other types of objects\nVectors are the most important type of object in R, but there are several others which we will meet more formally in later sections.\n\nmatrices or more generally arrays are multi-dimensional generalizations of vectors. In fact, they are vectors that can be indexed by two or more indices and will be printed in special ways. See Section 5.\nfactors provide compact ways to handle categorical data. See Section 4.\nlists are a general form of vector in which the various elements need not be of the same type, and are often themselves vectors or lists. Lists provide a convenient way to return the results of a statistical computation. See Section 6.1.\ndata frames are matrix-like structures, in which the columns can be of different types. Think of data frames as ‘data matrices’ with one row per observational unit but with (possibly) both numerical and categorical variables. Many experiments are best described by data frames: the treatments are categorical but the response is numeric. See Section 6.3.\nfunctions are themselves objects in R which can be stored in the project’s workspace. This provides a simple and convenient way to extend R. See Section 10 ."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-intrinsic-attributes:-mode-and-length",
    "href": "content/R/r-manuals/test.html#sec-intrinsic-attributes:-mode-and-length",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.1 Intrinsic attributes: mode and length",
    "text": "3.1 Intrinsic attributes: mode and length\nThe entities R operates on are technically known as objects. Examples are vectors of numeric (real) or complex values, vectors of logical values and vectors of character strings. These are known as “atomic” structures since their components are all of the same type, or mode, namely numeric10, complex, logical, character and raw.\nVectors must have their values all of the same mode. Thus any given vector must be unambiguously either logical, numeric, complex, character or raw. (The only apparent exception to this rule is the special “value” listed as NA for quantities not available, but in fact there are several types of NA). Note that a vector can be empty and still have a mode. For example the empty character string vector is listed as character(0) and the empty numeric vector as numeric(0).\nR also operates on objects called lists, which are of mode list. These are ordered sequences of objects which individually can be of any mode. lists are known as “recursive” rather than atomic structures since their components can themselves be lists in their own right.\nThe other recursive structures are those of mode function and expression. Functions are the objects that form part of the R system along with similar user written functions, which we discuss in some detail later. Expressions as objects form an advanced part of R which will not be discussed in this guide, except indirectly when we discuss formulae used with modeling in R.\nBy the mode of an object we mean the basic type of its fundamental constituents. This is a special case of a “property” of an object. Another property of every object is its length. The functions mode(``object) and length(``object) can be used to find out the mode and length of any defined structure 11.\nFurther properties of an object are usually provided by attributes(``object), see Section 3.3. Because of this, mode and length are also called “intrinsic attributes” of an object.\nFor example, if z is a complex vector of length 100, then in an expression mode(z) is the character string \"complex\" and length(z) is 100.\nR caters for changes of mode almost anywhere it could be considered sensible to do so, (and a few where it might not be). For example with\n> z <- 0:9\nwe could put\n> digits <- as.character(z)\nafter which digits is the character vector c(\"0\", \"1\", \"2\", …, \"9\"). A further coercion, or change of mode, reconstructs the numerical vector again:\n> d <- as.integer(digits)\nNow d and z are the same.12 There is a large collection of functions of the form as.``something() for either coercion from one mode to another, or for investing an object with some other attribute it may not already possess. The reader should consult the different help files to become familiar with them."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-changing-the-length-of-an-object",
    "href": "content/R/r-manuals/test.html#sec-changing-the-length-of-an-object",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.2 Changing the length of an object",
    "text": "3.2 Changing the length of an object\nAn “empty” object may still have a mode. For example\n> e <- numeric()\nmakes e an empty vector structure of mode numeric. Similarly character() is a empty character vector, and so on. Once an object of any size has been created, new components may be added to it simply by giving it an index value outside its previous range. Thus\n> e[3] <- 17\nnow makes e a vector of length 3, (the first two components of which are at this point both NA). This applies to any structure at all, provided the mode of the additional component(s) agrees with the mode of the object in the first place.\nThis automatic adjustment of lengths of an object is used often, for example in the scan() function for input. (see Section 7.2.)\nConversely to truncate the size of an object requires only an assignment to do so. Hence if alpha is an object of length 10, then\n> alpha <- alpha[2 * 1:5]\nmakes it an object of length 5 consisting of just the former components with even index. (The old indices are not retained, of course.) We can then retain just the first three values by\n> length(alpha) <- 3\nand vectors can be extended (by missing values) in the same way."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-getting-and-setting-attributes",
    "href": "content/R/r-manuals/test.html#sec-getting-and-setting-attributes",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.3 Getting and setting attributes",
    "text": "3.3 Getting and setting attributes\nThe function attributes(``object) returns a list of all the non-intrinsic attributes currently defined for that object. The function attr(``object, ``name) can be used to select a specific attribute. These functions are rarely used, except in rather special circumstances when some new attribute is being created for some particular purpose, for example to associate a creation date or an operator with an R object. The concept, however, is very important.\nSome care should be exercised when assigning or deleting attributes since they are an integral part of the object system used in R.\nWhen it is used on the left hand side of an assignment it can be used either to associate a new attribute with object or to change an existing one. For example\n> attr(z, \"dim\") <- c(10,10)\nallows R to treat z as if it were a 10-by-10 matrix."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-class-of-an-object",
    "href": "content/R/r-manuals/test.html#sec-the-class-of-an-object",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.4 The class of an object",
    "text": "3.4 The class of an object\nAll objects in R have a class, reported by the function class. For simple vectors this is just the mode, for example \"numeric\", \"logical\", \"character\" or \"list\", but \"matrix\", \"array\", \"factor\" and \"data.frame\" are other possible values.\nA special attribute known as the class of the object is used to allow for an object-oriented style13 of programming in R. For example if an object has class \"data.frame\", it will be printed in a certain way, the plot() function will display it graphically in a certain way, and other so-called generic functions such as summary() will react to it as an argument in a way sensitive to its class.\nTo remove temporarily the effects of class, use the function unclass(). For example if winter has the class \"data.frame\" then\n> winter\nwill print it in data frame form, which is rather like a matrix, whereas\n> unclass(winter)\nwill print it as an ordinary list. Only in rather special situations do you need to use this facility, but one is when you are learning to come to terms with the idea of class and generic functions.\nGeneric functions and classes will be discussed further in Object orientation, but only briefly."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-4.1-a-specific-example",
    "href": "content/R/r-manuals/test.html#sec-4.1-a-specific-example",
    "title": "R Manuals :: An Introduction to R",
    "section": "4.1 4.1 A specific example",
    "text": "4.1 4.1 A specific example\nSuppose, for example, we have a sample of 30 tax accountants from all the states and territories of Australia14 and their individual state of origin is specified by a character vector of state mnemonics as\n> state <- c(\"tas\", \"sa\",  \"qld\", \"nsw\", \"nsw\", \"nt\",  \"wa\",  \"wa\",\n             \"qld\", \"vic\", \"nsw\", \"vic\", \"qld\", \"qld\", \"sa\",  \"tas\",\n             \"sa\",  \"nt\",  \"wa\",  \"vic\", \"qld\", \"nsw\", \"nsw\", \"wa\",\n             \"sa\",  \"act\", \"nsw\", \"vic\", \"vic\", \"act\")\nNotice that in the case of a character vector, “sorted” means sorted in alphabetical order.\nA factor is similarly created using the factor() function:\n> statef <- factor(state)\nThe print() function handles factors slightly differently from other objects:\n> statef\n [1] tas sa  qld nsw nsw nt  wa  wa  qld vic nsw vic qld qld sa\n[16] tas sa  nt  wa  vic qld nsw nsw wa  sa  act nsw vic vic act\nLevels:  act nsw nt qld sa tas vic wa\nTo find out the levels of a factor the function levels() can be used.\n> levels(statef)\n[1] \"act\" \"nsw\" \"nt\"  \"qld\" \"sa\"  \"tas\" \"vic\" \"wa\"\n\n\n\n• The function tapply() and ragged arrays\n  \n\n\n\n• Ordered factors"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-function-tapply-and-ragged-arrays",
    "href": "content/R/r-manuals/test.html#sec-the-function-tapply-and-ragged-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "4.2 The function tapply() and ragged arrays",
    "text": "4.2 The function tapply() and ragged arrays\nTo continue the previous example, suppose we have the incomes of the same tax accountants in another vector (in suitably large units of money)\n> incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,\n               61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,\n               59, 46, 58, 43)\nTo calculate the sample mean income for each state we can now use the special function tapply():\n> incmeans <- tapply(incomes, statef, mean)\ngiving a means vector with the components labelled by the levels\n   act    nsw     nt    qld     sa    tas    vic     wa\n44.500 57.333 55.500 53.600 55.000 60.500 56.000 52.250\nThe function tapply() is used to apply a function, here mean(), to each group of components of the first argument, here incomes, defined by the levels of the second component, here statef15, as if they were separate vector structures. The result is a structure of the same length as the levels attribute of the factor containing the results. The reader should consult the help document for more details.\nSuppose further we needed to calculate the standard errors of the state income means. To do this we need to write an R function to calculate the standard error for any given vector. Since there is an builtin function var() to calculate the sample variance, such a function is a very simple one liner, specified by the assignment:\n> stdError <- function(x) sqrt(var(x)/length(x))\n(Writing functions will be considered later in Section 10 . Note that R’s a builtin function sd() is something different.) After this assignment, the standard errors are calculated by\n> incster <- tapply(incomes, statef, stdError)\nand the values calculated are then\n> incster\nact    nsw  nt    qld     sa tas   vic     wa\n1.5 4.3102 4.5 4.1061 2.7386 0.5 5.244 2.6575\nAs an exercise you may care to find the usual 95% confidence limits for the state mean incomes. To do this you could use tapply() once more with the length() function to find the sample sizes, and the qt() function to find the percentage points of the appropriate t-distributions. (You could also investigate R’s facilities for t-tests.)\nThe function tapply() can also be used to handle more complicated indexing of a vector by multiple categories. For example, we might wish to split the tax accountants by both state and sex. However in this simple instance (just one factor) what happens can be thought of as follows. The values in the vector are collected into groups corresponding to the distinct entries in the factor. The function is then applied to each of these groups individually. The value is a vector of function results, labelled by the levels attribute of the factor.\nThe combination of a vector and a labelling factor is an example of what is sometimes called a ragged array, since the subclass sizes are possibly irregular. When the subclass sizes are all the same the indexing may be done implicitly and much more efficiently, as we see in the next section."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-ordered-factors",
    "href": "content/R/r-manuals/test.html#sec-ordered-factors",
    "title": "R Manuals :: An Introduction to R",
    "section": "4.3 Ordered factors",
    "text": "4.3 Ordered factors\nThe levels of factors are stored in alphabetical order, or in the order they were specified to factor if they were specified explicitly.\nSometimes the levels will have a natural ordering that we want to record and want our statistical analysis to make use of. The ordered() function creates such ordered factors but is otherwise identical to factor. For most purposes the only difference between ordered and unordered factors is that the former are printed showing the ordering of the levels, but the contrasts generated for them in fitting linear models are different."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-arrays",
    "href": "content/R/r-manuals/test.html#sec-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.1 Arrays",
    "text": "5.1 Arrays\nAn array can be considered as a multiply subscripted collection of data entries, for example numeric. R allows simple facilities for creating and handling arrays, and in particular the special case of matrices.\nA dimension vector is a vector of non-negative integers. If its length is k then the array is k-dimensional, e.g. a matrix is a 2-dimensional array. The dimensions are indexed from one up to the values given in the dimension vector.\nA vector can be used by R as an array only if it has a dimension vector as its dim attribute. Suppose, for example, z is a vector of 1500 elements. The assignment\n> dim(z) <- c(3,5,100)\ngives it the dim attribute that allows it to be treated as a 3 by 5 by 100 array.\nOther functions such as matrix() and array() are available for simpler and more natural looking assignments, as we shall see in The array() function.\nThe values in the data vector give the values in the array in the same order as they would occur in FORTRAN, that is “column major order,” with the first subscript moving fastest and the last subscript slowest.\nFor example if the dimension vector for an array, say a, is c(3,4,2) then there are 3 * 4 * 2 = 24 entries in a and the data vector holds them in the order a[1,1,1], a[2,1,1], …, a[2,4,2], a[3,4,2].\nArrays can be one-dimensional: such arrays are usually treated in the same way as vectors (including when printing), but the exceptions can cause confusion."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-array-indexing.-subsections-of-an-array",
    "href": "content/R/r-manuals/test.html#sec-array-indexing.-subsections-of-an-array",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.2 Array indexing. Subsections of an array",
    "text": "5.2 Array indexing. Subsections of an array\nIndividual elements of an array may be referenced by giving the name of the array followed by the subscripts in square brackets, separated by commas.\nMore generally, subsections of an array may be specified by giving a sequence of index vectors in place of subscripts; however if any index position is given an empty index vector, then the full range of that subscript is taken.\nContinuing the previous example, a[2,,] is a 4 * 2 array with dimension vector c(4,2) and data vector containing the values\nc(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],\n  a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])\nin that order. a[,,] stands for the entire array, which is the same as omitting the subscripts entirely and using a alone.\nFor any array, say Z, the dimension vector may be referenced explicitly as dim(Z) (on either side of an assignment).\nAlso, if an array name is given with just one subscript or index vector, then the corresponding values of the data vector only are used; in this case the dimension vector is ignored. This is not the case, however, if the single index is not a vector but itself an array, as we next discuss."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-index-matrices",
    "href": "content/R/r-manuals/test.html#sec-index-matrices",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.3 Index matrices",
    "text": "5.3 Index matrices\nAs well as an index vector in any subscript position, a matrix may be used with a single index matrix in order either to assign a vector of quantities to an irregular collection of elements in the array, or to extract an irregular collection as a vector.\nA matrix example makes the process clear. In the case of a doubly indexed array, an index matrix may be given consisting of two columns and as many rows as desired. The entries in the index matrix are the row and column indices for the doubly indexed array. Suppose for example we have a 4 by 5 array X and we wish to do the following:\n\nExtract elements X[1,3], X[2,2] and X[3,1] as a vector structure, and\nReplace these entries in the array X by zeroes.\n\nIn this case we need a 3 by 2 subscript array, as in the following example.\n> x <- array(1:20, dim=c(4,5))   # Generate a 4 by 5 array.\n> x\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n> i <- array(c(1:3,3:1), dim=c(3,2))\n> i                             # i is a 3 by 2 index array.\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    2\n[3,]    3    1\n> x[i]                          # Extract those elements\n[1] 9 6 3\n> x[i] <- 0                     # Replace those elements by zeros.\n> x\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    0   13   17\n[2,]    2    0   10   14   18\n[3,]    0    7   11   15   19\n[4,]    4    8   12   16   20\n>\nNegative indices are not allowed in index matrices. NA and zero values are allowed: rows in the index matrix containing a zero are ignored, and rows containing an NA produce an NA in the result.\nAs a less trivial example, suppose we wish to generate an (unreduced) design matrix for a block design defined by factors blocks (b levels) and varieties (v levels). Further suppose there are n plots in the experiment. We could proceed as follows:\n> Xb <- matrix(0, n, b)\n> Xv <- matrix(0, n, v)\n> ib <- cbind(1:n, blocks)\n> iv <- cbind(1:n, varieties)\n> Xb[ib] <- 1\n> Xv[iv] <- 1\n> X <- cbind(Xb, Xv)\nTo construct the incidence matrix, N say, we could use\n> N <- crossprod(Xb, Xv)\nHowever a simpler direct way of producing this matrix is to use table():\n> N <- table(blocks, varieties)\nIndex matrices must be numerical: any other form of matrix (e.g. a logical or character matrix) supplied as a matrix is treated as an indexing vector."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-array-function",
    "href": "content/R/r-manuals/test.html#sec-the-array-function",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.4 The array() function",
    "text": "5.4 The array() function\nAs well as giving a vector structure a dim attribute, arrays can be constructed from vectors by the array function, which has the form\n> Z <- array(data_vector, dim_vector)\nFor example, if the vector h contains 24 or fewer, numbers then the command\n> Z <- array(h, dim=c(3,4,2))\nwould use h to set up 3 by 4 by 2 array in Z. If the size of h is exactly 24 the result is the same as\n> Z <- h ; dim(Z) <- c(3,4,2)\nHowever if h is shorter than 24, its values are recycled from the beginning again to make it up to size 24 (see The recycling rule) but dim(h) <- c(3,4,2) would signal an error about mismatching length. As an extreme but common example\n> Z <- array(0, c(3,4,2))\nmakes Z an array of all zeros.\nAt this point dim(Z) stands for the dimension vector c(3,4,2), and Z[1:24] stands for the data vector as it was in h, and Z[] with an empty subscript or Z with no subscript stands for the entire array as an array.\nArrays may be used in arithmetic expressions and the result is an array formed by element-by-element operations on the data vector. The dim attributes of operands generally need to be the same, and this becomes the dimension vector of the result. So if A, B and C are all similar arrays, then\n> D <- 2*A*B + C + 1\nmakes D a similar array with its data vector being the result of the given element-by-element operations. However the precise rule concerning mixed array and vector calculations has to be considered a little more carefully.\n\n5.4.1 Mixed vector and array arithmetic. The recycling rule\nThe precise rule affecting element by element mixed calculations with vectors and arrays is somewhat quirky and hard to find in the references. From experience we have found the following to be a reliable guide.\n\nThe expression is scanned from left to right.\nAny short vector operands are extended by recycling their values until they match the size of any other operands.\nAs long as short vectors and arrays only are encountered, the arrays must all have the same dim attribute or an error results.\nAny vector operand longer than a matrix or array operand generates an error.\nIf array structures are present and no error or coercion to vector has been precipitated, the result is an array structure with the common dim attribute of its array operands."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-outer-product-of-two-arrays",
    "href": "content/R/r-manuals/test.html#sec-the-outer-product-of-two-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.5 The outer product of two arrays",
    "text": "5.5 The outer product of two arrays\nAn important operation on arrays is the outer product. If a and b are two numeric arrays, their outer product is an array whose dimension vector is obtained by concatenating their two dimension vectors (order is important), and whose data vector is got by forming all possible products of elements of the data vector of a with those of b. The outer product is formed by the special operator %o%:\n> ab <- a %o% b\nAn alternative is\n> ab <- outer(a, b, \"*\")\nThe multiplication function can be replaced by an arbitrary function of two variables. For example if we wished to evaluate the function f(x; y) = cos(y)/(1 + x^2) over a regular grid of values with x- and y-coordinates defined by the R vectors x and y respectively, we could proceed as follows:\n> f <- function(x, y) cos(y)/(1 + x^2)\n> z <- outer(x, y, f)\nIn particular the outer product of two ordinary vectors is a doubly subscripted array (that is a matrix, of rank at most 1). Notice that the outer product operator is of course non-commutative. Defining your own R functions will be considered further in Section 10 .\n\n5.5.1 An example: Determinants of 2 by 2 single-digit matrices\nAs an artificial but cute example, consider the determinants of 2 by 2 matrices [a, b; c, d] where each entry is a non-negative integer in the range 0, 1, …, 9, that is a digit.\nThe problem is to find the determinants, ad - bc, of all possible matrices of this form and represent the frequency with which each value occurs as a high density plot. This amounts to finding the probability distribution of the determinant if each digit is chosen independently and uniformly at random.\nA neat way of doing this uses the outer() function twice:\n> d <- outer(0:9, 0:9)\n> fr <- table(outer(d, d, \"-\"))\n> plot(fr, xlab=\"Determinant\", ylab=\"Frequency\")\nNotice that plot() here uses a histogram like plot method, because it “sees” that fr is of class \"table\". The “obvious” way of doing this problem with for loops, to be discussed in Loops and conditional execution, is so inefficient as to be impractical.\nIt is also perhaps surprising that about 1 in 20 such matrices is singular."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-generalized-transpose-of-an-array",
    "href": "content/R/r-manuals/test.html#sec-generalized-transpose-of-an-array",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.6 Generalized transpose of an array",
    "text": "5.6 Generalized transpose of an array\nThe function aperm(a, perm) may be used to permute an array, a. The argument perm must be a permutation of the integers {1, …, k}, where k is the number of subscripts in a. The result of the function is an array of the same size as a but with old dimension given by perm[j] becoming the new j-th dimension. The easiest way to think of this operation is as a generalization of transposition for matrices. Indeed if A is a matrix, (that is, a doubly subscripted array) then B given by\n> B <- aperm(A, c(2,1))\nis just the transpose of A. For this special case a simpler function t() is available, so we could have used B <- t(A)."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-matrix-facilities",
    "href": "content/R/r-manuals/test.html#sec-matrix-facilities",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.7 Matrix facilities",
    "text": "5.7 Matrix facilities\nAs noted above, a matrix is just an array with two subscripts. However it is such an important special case it needs a separate discussion. R contains many operators and functions that are available only for matrices. For example t(X) is the matrix transpose function, as noted above. The functions nrow(A) and ncol(A) give the number of rows and columns in the matrix A respectively.\n\n5.7.1 Matrix multiplication\nThe operator %*% is used for matrix multiplication. An n by 1 or 1 by n matrix may of course be used as an n-vector if in the context such is appropriate. Conversely, vectors which occur in matrix multiplication expressions are automatically promoted either to row or column vectors, whichever is multiplicatively coherent, if possible, (although this is not always unambiguously possible, as we see later).\nIf, for example, A and B are square matrices of the same size, then\n> A * B\nis the matrix of element by element products and\n> A %*% B\nis the matrix product. If x is a vector, then\n> x %*% A %*% x\nis a quadratic form.16\nThe function crossprod() forms “crossproducts”, meaning that crossprod(X, y) is the same as t(X) %*% y but the operation is more efficient. If the second argument to crossprod() is omitted it is taken to be the same as the first.\nThe meaning of diag() depends on its argument. diag(v), where v is a vector, gives a diagonal matrix with elements of the vector as the diagonal entries. On the other hand diag(M), where M is a matrix, gives the vector of main diagonal entries of M. This is the same convention as that used for diag() in MATLAB. Also, somewhat confusingly, if k is a single numeric value then diag(k) is the k by k identity matrix!\n\n\n5.7.2 Linear equations and inversion\nSolving linear equations is the inverse of matrix multiplication. When after\n> b <- A %*% x\nonly A and b are given, the vector x is the solution of that linear equation system. In R,\n> solve(A,b)\nsolves the system, returning x (up to some accuracy loss). Note that in linear algebra, formally x = A^{-1} %*% b where A^{-1} denotes the inverse of A, which can be computed by\nsolve(A)\nbut rarely is needed. Numerically, it is both inefficient and potentially unstable to compute x <- solve(A) %*% b instead of solve(A,b).\nThe quadratic form  x %*% A^{-1} %*% x   which is used in multivariate computations, should be computed by something like17 x %*% solve(A,x), rather than computing the inverse of A.\n\n\n5.7.3 Eigenvalues and eigenvectors\nThe function eigen(Sm) calculates the eigenvalues and eigenvectors of a symmetric matrix Sm. The result of this function is a list of two components named values and vectors. The assignment\n> ev <- eigen(Sm)\nwill assign this list to ev. Then ev$val is the vector of eigenvalues of Sm and ev$vec is the matrix of corresponding eigenvectors. Had we only needed the eigenvalues we could have used the assignment:\n> evals <- eigen(Sm)$values\nevals now holds the vector of eigenvalues and the second component is discarded. If the expression\n> eigen(Sm)\nis used by itself as a command the two components are printed, with their names. For large matrices it is better to avoid computing the eigenvectors if they are not needed by using the expression\n> evals <- eigen(Sm, only.values = TRUE)$values\n\n\n5.7.4 Singular value decomposition and determinants\nThe function svd(M) takes an arbitrary matrix argument, M, and calculates the singular value decomposition of M. This consists of a matrix of orthonormal columns U with the same column space as M, a second matrix of orthonormal columns V whose column space is the row space of M and a diagonal matrix of positive entries D such that M = U %*% D %*% t(V). D is actually returned as a vector of the diagonal elements. The result of svd(M) is actually a list of three components named d, u and v, with evident meanings.\nIf M is in fact square, then, it is not hard to see that\n> absdetM <- prod(svd(M)$d)\ncalculates the absolute value of the determinant of M. If this calculation were needed often with a variety of matrices it could be defined as an R function\n> absdet <- function(M) prod(svd(M)$d)\nafter which we could use absdet() as just another R function. As a further trivial but potentially useful example, you might like to consider writing a function, say tr(), to calculate the trace of a square matrix. [Hint: You will not need to use an explicit loop. Look again at the diag() function.]\nR has a builtin function det to calculate a determinant, including the sign, and another, determinant, to give the sign and modulus (optionally on log scale),\n\n\n5.7.5 Least squares fitting and the QR decomposition\nThe function lsfit() returns a list giving results of a least squares fitting procedure. An assignment such as\n> ans <- lsfit(X, y)\ngives the results of a least squares fit where y is the vector of observations and X is the design matrix. See the help facility for more details, and also for the follow-up function ls.diag() for, among other things, regression diagnostics. Note that a grand mean term is automatically included and need not be included explicitly as a column of X. Further note that you almost always will prefer using lm(.) (see Linear models) to lsfit() for regression modelling.\nAnother closely related function is qr() and its allies. Consider the following assignments\n> Xplus <- qr(X)\n> b <- qr.coef(Xplus, y)\n> fit <- qr.fitted(Xplus, y)\n> res <- qr.resid(Xplus, y)\nThese compute the orthogonal projection of y onto the range of X in fit, the projection onto the orthogonal complement in res and the coefficient vector for the projection in b, that is, b is essentially the result of the MATLAB ‘backslash’ operator.\nIt is not assumed that X has full column rank. Redundancies will be discovered and removed as they are found.\nThis alternative is the older, low-level way to perform least squares calculations. Although still useful in some contexts, it would now generally be replaced by the statistical models features, as will be discussed in Statistical models in R."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-forming-partitioned-matrices-cbind-and-rbind",
    "href": "content/R/r-manuals/test.html#sec-forming-partitioned-matrices-cbind-and-rbind",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.8 Forming partitioned matrices, cbind() and rbind()",
    "text": "5.8 Forming partitioned matrices, cbind() and rbind()\nAs we have already seen informally, matrices can be built up from other vectors and matrices by the functions cbind() and rbind(). Roughly cbind() forms matrices by binding together matrices horizontally, or column-wise, and rbind() vertically, or row-wise.\nIn the assignment\n> X <- cbind(arg_1, arg_2, arg_3, …)\nthe arguments to cbind() must be either vectors of any length, or matrices with the same column size, that is the same number of rows. The result is a matrix with the concatenated arguments arg_1, arg_2, … forming the columns.\nIf some of the arguments to cbind() are vectors they may be shorter than the column size of any matrices present, in which case they are cyclically extended to match the matrix column size (or the length of the longest vector if no matrices are given).\nThe function rbind() does the corresponding operation for rows. In this case any vector argument, possibly cyclically extended, are of course taken as row vectors.\nSuppose X1 and X2 have the same number of rows. To combine these by columns into a matrix X, together with an initial column of 1s we can use\n> X <- cbind(1, X1, X2)\nThe result of rbind() or cbind() always has matrix status. Hence cbind(x) and rbind(x) are possibly the simplest ways explicitly to allow the vector x to be treated as a column or row matrix respectively."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-concatenation-function-c-with-arrays",
    "href": "content/R/r-manuals/test.html#sec-the-concatenation-function-c-with-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.9 The concatenation function, c(), with arrays",
    "text": "5.9 The concatenation function, c(), with arrays\nIt should be noted that whereas cbind() and rbind() are concatenation functions that respect dim attributes, the basic c() function does not, but rather clears numeric objects of all dim and dimnames attributes. This is occasionally useful in its own right.\nThe official way to coerce an array back to a simple vector object is to use as.vector()\n> vec <- as.vector(X)\nHowever a similar result can be achieved by using c() with just one argument, simply for this side-effect:\n> vec <- c(X)\nThere are slight differences between the two, but ultimately the choice between them is largely a matter of style (with the former being preferable)."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-frequency-tables-from-factors",
    "href": "content/R/r-manuals/test.html#sec-frequency-tables-from-factors",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.10 Frequency tables from factors",
    "text": "5.10 Frequency tables from factors\nRecall that a factor defines a partition into groups. Similarly a pair of factors defines a two way cross classification, and so on. The function table() allows frequency tables to be calculated from equal length factors. If there are k factor arguments, the result is a k-way array of frequencies.\nSuppose, for example, that statef is a factor giving the state code for each entry in a data vector. The assignment\n> statefr <- table(statef)\ngives in statefr a table of frequencies of each state in the sample. The frequencies are ordered and labelled by the levels attribute of the factor. This simple case is equivalent to, but more convenient than,\n> statefr <- tapply(statef, statef, length)\nFurther suppose that incomef is a factor giving a suitably defined “income class” for each entry in the data vector, for example with the cut() function:\n> factor(cut(incomes, breaks = 35+10*(0:7))) -> incomef\nThen to calculate a two-way table of frequencies:\n> table(incomef,statef)\n         statef\nincomef   act nsw nt qld sa tas vic wa\n  (35,45]   1   1  0   1  0   0   1  0\n  (45,55]   1   1  1   1  2   0   1  3\n  (55,65]   0   3  1   3  2   2   2  1\n  (65,75]   0   1  0   0  0   0   1  0\nExtension to higher-way frequency tables is immediate."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-lists",
    "href": "content/R/r-manuals/test.html#sec-lists",
    "title": "R Manuals :: An Introduction to R",
    "section": "6.1 Lists",
    "text": "6.1 Lists\nAn R list is an object consisting of an ordered collection of objects known as its components.\nThere is no particular need for the components to be of the same mode or type, and, for example, a list could consist of a numeric vector, a logical value, a matrix, a complex vector, a character array, a function, and so on. Here is a simple example of how to make a list:\n> Lst <- list(name=\"Fred\", wife=\"Mary\", no.children=3,\n              child.ages=c(4,7,9))\nComponents are always numbered and may always be referred to as such. Thus if Lst is the name of a list with four components, these may be individually referred to as Lst[[1]], Lst[[2]], Lst[[3]] and Lst[[4]]. If, further, Lst[[4]] is a vector subscripted array then Lst[[4]][1] is its first entry.\nIf Lst is a list, then the function length(Lst) gives the number of (top level) components it has.\nComponents of lists may also be named, and in this case the component may be referred to either by giving the component name as a character string in place of the number in double square brackets, or, more conveniently, by giving an expression of the form\n> name$component_name\nfor the same thing.\nThis is a very useful convention as it makes it easier to get the right component if you forget the number.\nSo in the simple example given above:\nLst$name is the same as Lst[[1]] and is the string \"Fred\",\nLst$wife is the same as Lst[[2]] and is the string \"Mary\",\nLst$child.ages[1] is the same as Lst[[4]][1] and is the number 4.\nAdditionally, one can also use the names of the list components in double square brackets, i.e., Lst[[\"name\"]] is the same as Lst$name. This is especially useful, when the name of the component to be extracted is stored in another variable as in\n> x <- \"name\"; Lst[[x]]\nIt is very important to distinguish Lst[[1]] from Lst[1]. [[``…]] is the operator used to select a single element, whereas [``…] is a general subscripting operator. Thus the former is the first object in the list Lst, and if it is a named list the name is not included. The latter is a sublist of the list Lst consisting of the first entry only. If it is a named list, the names are transferred to the sublist.\nThe names of components may be abbreviated down to the minimum number of letters needed to identify them uniquely. Thus Lst$coefficients may be minimally specified as Lst$coe and Lst$covariance as Lst$cov.\nThe vector of names is in fact simply an attribute of the list like any other and may be handled as such. Other structures besides lists may, of course, similarly be given a names attribute also."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-constructing-and-modifying-lists",
    "href": "content/R/r-manuals/test.html#sec-constructing-and-modifying-lists",
    "title": "R Manuals :: An Introduction to R",
    "section": "6.2 Constructing and modifying lists",
    "text": "6.2 Constructing and modifying lists\nNew lists may be formed from existing objects by the function list(). An assignment of the form\n> Lst <- list(name_1=object_1, …, name_m=object_m)\nsets up a list Lst of m components using object_1, …, object_m for the components and giving them names as specified by the argument names, (which can be freely chosen). If these names are omitted, the components are numbered only. The components used to form the list are copied when forming the new list and the originals are not affected.\nLists, like any subscripted object, can be extended by specifying additional components. For example\n> Lst[5] <- list(matrix=Mat)\n\n6.2.1 Concatenating lists\nWhen the concatenation function c() is given list arguments, the result is an object of mode list also, whose components are those of the argument lists joined together in sequence.\n> list.ABC <- c(list.A, list.B, list.C)\nRecall that with vector objects as arguments the concatenation function similarly joined together all arguments into a single vector structure. In this case all other attributes, such as dim attributes, are discarded."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-data-frames",
    "href": "content/R/r-manuals/test.html#sec-data-frames",
    "title": "R Manuals :: An Introduction to R",
    "section": "6.3 Data frames",
    "text": "6.3 Data frames\nA data frame is a list with class \"data.frame\". There are restrictions on lists that may be made into data frames, namely\n\nThe components must be vectors (numeric, character, or logical), factors, numeric matrices, lists, or other data frames.\nMatrices, lists, and data frames provide as many variables to the new data frame as they have columns, elements, or variables, respectively.\nVector structures appearing as variables of the data frame must all have the same length, and matrix structures must all have the same number of rows.\n\nA data frame may for many purposes be regarded as a matrix with columns possibly of differing modes and attributes. It may be displayed in matrix form, and its rows and columns extracted using matrix indexing conventions.\n\n6.3.1 Making data frames\nObjects satisfying the restrictions placed on the columns (components) of a data frame may be used to form one using the function data.frame:\n> accountants <- data.frame(home=statef, loot=incomes, shot=incomef)\nA list whose components conform to the restrictions of a data frame may be coerced into a data frame using the function as.data.frame()\nThe simplest way to construct a data frame from scratch is to use the read.table() function to read an entire data frame from an external file. This is discussed further in Reading data from files.\n\n\n6.3.2 attach() and detach()\nThe $ notation, such as accountants$home, for list components is not always very convenient. A useful facility would be somehow to make the components of a list or data frame temporarily visible as variables under their component name, without the need to quote the list name explicitly each time.\nThe attach() function takes a ‘database’ such as a list or data frame as its argument. Thus suppose lentils is a data frame with three variables lentils$u, lentils$v, lentils$w. The attach\n> attach(lentils)\nplaces the data frame in the search path at position 2, and provided there are no variables u, v or w in position 1, u, v and w are available as variables from the data frame in their own right. At this point an assignment such as\n> u <- v+w\ndoes not replace the component u of the data frame, but rather masks it with another variable u in the working directory at position 1 on the search path. To make a permanent change to the data frame itself, the simplest way is to resort once again to the $ notation:\n> lentils$u <- v+w\nHowever the new value of component u is not visible until the data frame is detached and attached again.\nTo detach a data frame, use the function\n> detach()\nMore precisely, this statement detaches from the search path the entity currently at position 2. Thus in the present context the variables u, v and w would be no longer visible, except under the list notation as lentils$u and so on. Entities at positions greater than 2 on the search path can be detached by giving their number to detach, but it is much safer to always use a name, for example by detach(lentils) or detach(\"lentils\")\n\nNote: In R lists and data frames can only be attached at position 2 or above, and what is attached is a copy of the original object. You can alter the attached values via assign, but the original list or data frame is unchanged.\n\n\n\n6.3.3 Working with data frames\nA useful convention that allows you to work with many different problems comfortably together in the same working directory is\n\ngather together all variables for any well defined and separate problem in a data frame under a suitably informative name;\nwhen working with a problem attach the appropriate data frame at position 2, and use the working directory at level 1 for operational quantities and temporary variables;\nbefore leaving a problem, add any variables you wish to keep for future reference to the data frame using the $ form of assignment, and then detach();\nfinally remove all unwanted variables from the working directory and keep it as clean of left-over temporary variables as possible.\n\nIn this way it is quite simple to work with many problems in the same directory, all of which have variables named x, y and z, for example.\n\n\n6.3.4 Attaching arbitrary lists\nattach() is a generic function that allows not only directories and data frames to be attached to the search path, but other classes of object as well. In particular any object of mode \"list\" may be attached in the same way:\n> attach(any.old.list)\nAnything that has been attached can be detached by detach, by position number or, preferably, by name.\n\n\n6.3.5 Managing the search path\nThe function search shows the current search path and so is a very useful way to keep track of which data frames and lists (and packages) have been attached and detached. Initially it gives\n> search()\n[1] \".GlobalEnv\"   \"Autoloads\"    \"package:base\"\nwhere .GlobalEnv is the workspace.18\nAfter lentils is attached we have\n> search()\n[1] \".GlobalEnv\"   \"lentils\"      \"Autoloads\"    \"package:base\"\n> ls(2)\n[1] \"u\" \"v\" \"w\"\nand as we see ls (or objects) can be used to examine the contents of any position on the search path.\nFinally, we detach the data frame and confirm it has been removed from the search path.\n> detach(\"lentils\")\n> search()\n[1] \".GlobalEnv\"   \"Autoloads\"    \"package:base\""
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-read.table-function",
    "href": "content/R/r-manuals/test.html#sec-the-read.table-function",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.1 The read.table() function",
    "text": "7.1 The read.table() function\nTo read an entire data frame directly, the external file will normally have a special form.\n\nThe first line of the file should have a name for each variable in the data frame.\nEach additional line of the file has as its first item a row label and the values for each variable.\n\nIf the file has one fewer item in its first line than in its second, this arrangement is presumed to be in force. So the first few lines of a file to be read as a data frame might look as follows.\n\n\n\n\n\n\n\n\nInput file form with names and row labels:\n\n     Price    Floor     Area   Rooms     Age  Cent.heat\n01   52.00    111.0      830     5       6.2      no\n02   54.75    128.0      710     5       7.5      no\n03   57.50    101.0     1000     5       4.2      no\n04   57.50    131.0      690     6       8.8      no\n05   59.75     93.0      900     5       1.9     yes\n...\n\n\n\n\n\nBy default numeric items (except row labels) are read as numeric variables and non-numeric variables, such as Cent.heat in the example, as character variables. This can be changed if necessary.\nThe function read.table() can then be used to read the data frame directly\n> HousePrice <- read.table(\"houses.data\")\nOften you will want to omit including the row labels directly and use the default labels. In this case the file may omit the row label column as in the following.\n\n\n\n\n\n\n\n\nInput file form without row labels:\n\nPrice    Floor     Area   Rooms     Age  Cent.heat\n52.00    111.0      830     5       6.2      no\n54.75    128.0      710     5       7.5      no\n57.50    101.0     1000     5       4.2      no\n57.50    131.0      690     6       8.8      no\n59.75     93.0      900     5       1.9     yes\n...\n\n\n\n\n\nThe data frame may then be read as\n> HousePrice <- read.table(\"houses.data\", header=TRUE)\nwhere the header=TRUE option specifies that the first line is a line of headings, and hence, by implication from the form of the file, that no explicit row labels are given."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-the-scan-function",
    "href": "content/R/r-manuals/test.html#sec-the-scan-function",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.2 The scan() function",
    "text": "7.2 The scan() function\nSuppose the data vectors are of equal length and are to be read in parallel. Further suppose that there are three vectors, the first of mode character and the remaining two of mode numeric, and the file is input.dat. The first step is to use scan() to read in the three vectors as a list, as follows\n> inp <- scan(\"input.dat\", list(\"\",0,0))\nThe second argument is a dummy list structure that establishes the mode of the three vectors to be read. The result, held in inp, is a list whose components are the three vectors read in. To separate the data items into three separate vectors, use assignments like\n> label <- inp[[1]]; x <- inp[[2]]; y <- inp[[3]]\nMore conveniently, the dummy list can have named components, in which case the names can be used to access the vectors read in. For example\n> inp <- scan(\"input.dat\", list(id=\"\", x=0, y=0))\nIf you wish to access the variables separately they may either be re-assigned to variables in the working frame:\n> label <- inp$id; x <- inp$x; y <- inp$y\nor the list may be attached at position 2 of the search path (see Attaching arbitrary lists).\nIf the second argument is a single value and not a list, a single vector is read in, all components of which must be of the same mode as the dummy value.\n> X <- matrix(scan(\"light.dat\", 0), ncol=5, byrow=TRUE)\nThere are more elaborate input facilities available and these are detailed in the manuals."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-accessing-builtin-datasets",
    "href": "content/R/r-manuals/test.html#sec-accessing-builtin-datasets",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.3 Accessing builtin datasets",
    "text": "7.3 Accessing builtin datasets\nAround 100 datasets are supplied with R (in package datasets), and others are available in packages (including the recommended packages supplied with R). To see the list of datasets currently available use\ndata()\nAll the datasets supplied with R are available directly by name. However, many packages still use the obsolete convention in which data was also used to load datasets into R, for example\ndata(infert)\nand this can still be used with the standard packages (as in this example). In most cases this will load an R object of the same name. However, in a few cases it loads several objects, so see the on-line help for the object to see what to expect.\n\n7.3.1 7.3.1 Loading data from other R packages\nTo access data from a particular package, use the package argument, for example\ndata(package=\"rpart\")\ndata(Puromycin, package=\"datasets\")\nIf a package has been attached by library, its datasets are automatically included in the search.\nUser-contributed packages can be a rich source of datasets."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-editing-data",
    "href": "content/R/r-manuals/test.html#sec-editing-data",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.4 Editing data",
    "text": "7.4 Editing data\nWhen invoked on a data frame or matrix, edit brings up a separate spreadsheet-like environment for editing. This is useful for making small changes once a data set has been read. The command\n> xnew <- edit(xold)\nwill allow you to edit your data set xold, and on completion the changed object is assigned to xnew. If you want to alter the original dataset xold, the simplest way is to use fix(xold), which is equivalent to xold <- edit(xold).\nUse\n> xnew <- edit(data.frame())\nto enter new data via the spreadsheet interface."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-r-as-a-set-of-statistical-tables",
    "href": "content/R/r-manuals/test.html#sec-r-as-a-set-of-statistical-tables",
    "title": "R Manuals :: An Introduction to R",
    "section": "8.1 R as a set of statistical tables",
    "text": "8.1 R as a set of statistical tables\nOne convenient use of R is to provide a comprehensive set of statistical tables. Functions are provided to evaluate the cumulative distribution function P(X <= x), the probability density function and the quantile function (given q, the smallest x such that P(X <= x) > q), and to simulate from the distribution.\n\n\n\n\n\nDistribution\nR name\nadditional arguments\n\n\n\n\nbeta\nbeta\nshape1, shape2, ncp\n\n\nbinomial\nbinom\nsize, prob\n\n\nCauchy\ncauchy\nlocation, scale\n\n\nchi-squared\nchisq\ndf, ncp\n\n\nexponential\nexp\nrate\n\n\nF\nf\ndf1, df2, ncp\n\n\ngamma\ngamma\nshape, scale\n\n\ngeometric\ngeom\nprob\n\n\nhypergeometric\nhyper\nm, n, k\n\n\nlog-normal\nlnorm\nmeanlog, sdlog\n\n\nlogistic\nlogis\nlocation, scale\n\n\nnegative binomial\nnbinom\nsize, prob\n\n\nnormal\nnorm\nmean, sd\n\n\nPoisson\npois\nlambda\n\n\nsigned rank\nsignrank\nn\n\n\nStudent’s t\nt\ndf, ncp\n\n\nuniform\nunif\nmin, max\n\n\nWeibull\nweibull\nshape, scale\n\n\nWilcoxon\nwilcox\nm, n\n\n\n\n\n\nPrefix the name given here by ‘d’ for the density, ‘p’ for the CDF, ‘q’ for the quantile function and ‘r’ for simulation (random deviates). The first argument is x for d``xxx, q for p``xxx, p for q``xxx and n for r``xxx (except for rhyper, rsignrank and rwilcox, for which it is nn). In not quite all cases is the non-centrality parameter ncp currently available: see the on-line help for details.\nThe p``xxx and q``xxx functions all have logical arguments lower.tail and log.p and the d``xxx ones have log. This allows, e.g., getting the cumulative (or “integrated”) hazard function, H(t) = - log(1 - F(t)), by\n - pxxx(t, ..., lower.tail = FALSE, log.p = TRUE)\nor more accurate log-likelihoods (by d``xxx(..., log = TRUE)), directly.\nIn addition there are functions ptukey and qtukey for the distribution of the studentized range of samples from a normal distribution, and dmultinom and rmultinom for the multinomial distribution. Further distributions are available in contributed packages, notably SuppDists.\nHere are some examples\n> ## 2-tailed p-value for t distribution\n> 2*pt(-2.43, df = 13)\n> ## upper 1% point for an F(2, 7) distribution\n> qf(0.01, 2, 7, lower.tail = FALSE)\nSee the on-line help on RNG for how random-number generation is done in R."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-examining-the-distribution-of-a-set-of-data",
    "href": "content/R/r-manuals/test.html#sec-examining-the-distribution-of-a-set-of-data",
    "title": "R Manuals :: An Introduction to R",
    "section": "8.2 Examining the distribution of a set of data",
    "text": "8.2 Examining the distribution of a set of data\nGiven a (univariate) set of data we can examine its distribution in a large number of ways. The simplest is to examine the numbers. Two slightly different summaries are given by summary and fivenum and a display of the numbers by stem (a “stem and leaf” plot).\n> attach(faithful)\n> summary(eruptions)\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n  1.600   2.163   4.000   3.488   4.454   5.100\n> fivenum(eruptions)\n[1] 1.6000 2.1585 4.0000 4.4585 5.1000\n> stem(eruptions)\n\n  The decimal point is 1 digit(s) to the left of the |\n\n  16 | 070355555588\n  18 | 000022233333335577777777888822335777888\n  20 | 00002223378800035778\n  22 | 0002335578023578\n  24 | 00228\n  26 | 23\n  28 | 080\n  30 | 7\n  32 | 2337\n  34 | 250077\n  36 | 0000823577\n  38 | 2333335582225577\n  40 | 0000003357788888002233555577778\n  42 | 03335555778800233333555577778\n  44 | 02222335557780000000023333357778888\n  46 | 0000233357700000023578\n  48 | 00000022335800333\n  50 | 0370\nA stem-and-leaf plot is like a histogram, and R has a function hist to plot histograms.\n> hist(eruptions)\n## make the bins smaller, make a plot of density\n> hist(eruptions, seq(1.6, 5.2, 0.2), prob=TRUE)\n> lines(density(eruptions, bw=0.1))\n> rug(eruptions) # show the actual data points\nMore elegant density plots can be made by density, and we added a line produced by density in this example. The bandwidth bw was chosen by trial-and-error as the default gives too much smoothing (it usually does for “interesting” densities). (Better automated methods of bandwidth choice are available, and in this example bw = \"SJ\" gives a good result.)\n\n\n\nimages/hist\n\n\nWe can plot the empirical cumulative distribution function by using the function ecdf.\n> plot(ecdf(eruptions), do.points=FALSE, verticals=TRUE)\nThis distribution is obviously far from any standard distribution. How about the right-hand mode, say eruptions of longer than 3 minutes? Let us fit a normal distribution and overlay the fitted CDF.\n> long <- eruptions[eruptions > 3]\n> plot(ecdf(long), do.points=FALSE, verticals=TRUE)\n> x <- seq(3, 5.4, 0.01)\n> lines(x, pnorm(x, mean=mean(long), sd=sqrt(var(long))), lty=3)\n\n\n\nimages/ecdf\n\n\nQuantile-quantile (Q-Q) plots can help us examine this more carefully.\npar(pty=\"s\")       # arrange for a square figure region\nqqnorm(long); qqline(long)\nwhich shows a reasonable fit but a shorter right tail than one would expect from a normal distribution. Let us compare this with some simulated data from a t distribution\n\n\n\nimages/QQ\n\n\nx <- rt(250, df = 5)\nqqnorm(x); qqline(x)\nwhich will usually (if it is a random sample) show longer tails than expected for a normal. We can make a Q-Q plot against the generating distribution by\nqqplot(qt(ppoints(250), df = 5), x, xlab = \"Q-Q plot for t dsn\")\nqqline(x)\nFinally, we might want a more formal test of agreement with normality (or not). R provides the Shapiro-Wilk test\n> shapiro.test(long)\n\n         Shapiro-Wilk normality test\n\ndata:  long\nW = 0.9793, p-value = 0.01052\nand the Kolmogorov-Smirnov test\n> ks.test(long, \"pnorm\", mean = mean(long), sd = sqrt(var(long)))\n\n         One-sample Kolmogorov-Smirnov test\n\ndata:  long\nD = 0.0661, p-value = 0.4284\nalternative hypothesis: two.sided\n(Note that the distribution theory is not valid here as we have estimated the parameters of the normal distribution from the same sample.)"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-one--and-two-sample-tests",
    "href": "content/R/r-manuals/test.html#sec-one--and-two-sample-tests",
    "title": "R Manuals :: An Introduction to R",
    "section": "8.3 One- and two-sample tests",
    "text": "8.3 One- and two-sample tests\nSo far we have compared a single sample to a normal distribution. A much more common operation is to compare aspects of two samples. Note that in R, all “classical” tests including the ones used below are in package stats which is normally loaded.\nConsider the following sets of data on the latent heat of the fusion of ice (cal/gm) from Rice (1995, p.490)\nMethod A: 79.98 80.04 80.02 80.04 80.03 80.03 80.04 79.97\n          80.05 80.03 80.02 80.00 80.02\nMethod B: 80.02 79.94 79.98 79.97 79.97 80.03 79.95 79.97\nBoxplots provide a simple graphical comparison of the two samples.\nA <- scan()\n79.98 80.04 80.02 80.04 80.03 80.03 80.04 79.97\n80.05 80.03 80.02 80.00 80.02\n\nB <- scan()\n80.02 79.94 79.98 79.97 79.97 80.03 79.95 79.97\n\nboxplot(A, B)\nwhich indicates that the first group tends to give higher results than the second.\n\n\n\nimages/ice\n\n\nTo test for the equality of the means of the two examples, we can use an unpaired t-test by\n> t.test(A, B)\n\n         Welch Two Sample t-test\n\ndata:  A and B\nt = 3.2499, df = 12.027, p-value = 0.00694\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.01385526 0.07018320\nsample estimates:\nmean of x mean of y\n 80.02077  79.97875\nwhich does indicate a significant difference, assuming normality. By default the R function does not assume equality of variances in the two samples. We can use the F test to test for equality in the variances, provided that the two samples are from normal populations.\n> var.test(A, B)\n\n         F test to compare two variances\n\ndata:  A and B\nF = 0.5837, num df = 12, denom df =  7, p-value = 0.3938\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.1251097 2.1052687\nsample estimates:\nratio of variances\n         0.5837405\nwhich shows no evidence of a significant difference, and so we can use the classical t-test that assumes equality of the variances.\n> t.test(A, B, var.equal=TRUE)\n\n         Two Sample t-test\n\ndata:  A and B\nt = 3.4722, df = 19, p-value = 0.002551\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.01669058 0.06734788\nsample estimates:\nmean of x mean of y\n 80.02077  79.97875\nAll these tests assume normality of the two samples. The two-sample Wilcoxon (or Mann-Whitney) test only assumes a common continuous distribution under the null hypothesis.\n> wilcox.test(A, B)\n\n         Wilcoxon rank sum test with continuity correction\n\ndata:  A and B\nW = 89, p-value = 0.007497\nalternative hypothesis: true location shift is not equal to 0\n\nWarning message:\nCannot compute exact p-value with ties in: wilcox.test(A, B)\nNote the warning: there are several ties in each sample, which suggests strongly that these data are from a discrete distribution (probably due to rounding).\nThere are several ways to compare graphically the two samples. We have already seen a pair of boxplots. The following\n> plot(ecdf(A), do.points=FALSE, verticals=TRUE, xlim=range(A, B))\n> plot(ecdf(B), do.points=FALSE, verticals=TRUE, add=TRUE)\nwill show the two empirical CDFs, and qqplot will perform a Q-Q plot of the two samples. The Kolmogorov-Smirnov test is of the maximal vertical distance between the two ecdf’s, assuming a common continuous distribution:\n> ks.test(A, B)\n\n         Two-sample Kolmogorov-Smirnov test\n\ndata:  A and B\nD = 0.5962, p-value = 0.05919\nalternative hypothesis: two-sided\n\nWarning message:\ncannot compute correct p-values with ties in: ks.test(A, B)"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-grouped-expressions",
    "href": "content/R/r-manuals/test.html#sec-grouped-expressions",
    "title": "R Manuals :: An Introduction to R",
    "section": "9.1 Grouped expressions",
    "text": "9.1 Grouped expressions\nR is an expression language in the sense that its only command type is a function or expression which returns a result. Even an assignment is an expression whose result is the value assigned, and it may be used wherever any expression may be used; in particular multiple assignments are possible.\nCommands may be grouped together in braces, {``expr_1; ``…; ``expr_m}, in which case the value of the group is the result of the last expression in the group evaluated. Since such a group is also an expression it may, for example, be itself included in parentheses and used as part of an even larger expression, and so on."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-control-statements",
    "href": "content/R/r-manuals/test.html#sec-control-statements",
    "title": "R Manuals :: An Introduction to R",
    "section": "9.2 Control statements",
    "text": "9.2 Control statements\n\n9.2.1 Conditional execution: if statements\nThe language has available a conditional construction of the form\n> if (expr_1) expr_2 else expr_3\nwhere expr_1 must evaluate to a single logical value and the result of the entire expression is then evident.\nThe “short-circuit” operators && and || are often used as part of the condition in an if statement. Whereas & and | apply element-wise to vectors, && and || apply to vectors of length one, and only evaluate their second argument if necessary.\nThere is a vectorized version of the if/else construct, the ifelse function. This has the form ifelse(condition, a, b) and returns a vector of the same length as condition, with elements a[i] if condition[i] is true, otherwise b[i] (where a and b are recycled as necessary).\n\n\n9.2.2 Repetitive execution: for loops, repeat and while\nThere is also a for loop construction which has the form\n> for (name in expr_1) expr_2\nwhere name is the loop variable. expr_1 is a vector expression, (often a sequence like 1:20), and expr_2 is often a grouped expression with its sub-expressions written in terms of the dummy name. expr_2 is repeatedly evaluated as name ranges through the values in the vector result of expr_1.\nAs an example, suppose ind is a vector of class indicators and we wish to produce separate plots of y versus x within classes. One possibility here is to use coplot(),20 which will produce an array of plots corresponding to each level of the factor. Another way to do this, now putting all plots on the one display, is as follows:\n> xc <- split(x, ind)\n> yc <- split(y, ind)\n> for (i in 1:length(yc)) {\n    plot(xc[[i]], yc[[i]])\n    abline(lsfit(xc[[i]], yc[[i]]))\n  }\n(Note the function split() which produces a list of vectors obtained by splitting a larger vector according to the classes specified by a factor. This is a useful function, mostly used in connection with boxplots. See the help facility for further details.)\n\nWarning: for() loops are used in R code much less often than in compiled languages. Code that takes a ‘whole object’ view is likely to be both clearer and faster in R.\n\nOther looping facilities include the\n> repeat expr\nstatement and the\n> while (condition) expr\nstatement.\nThe break statement can be used to terminate any loop, possibly abnormally. This is the only way to terminate repeat loops.\nThe next statement can be used to discontinue one particular cycle and skip to the “next”.\nControl statements are most often used in connection with functions which are discussed in Section 10 , and where more examples will emerge."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-simple-examples",
    "href": "content/R/r-manuals/test.html#sec-simple-examples",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.1 Simple examples",
    "text": "10.1 Simple examples\nAs a first example, consider a function to calculate the two sample t-statistic, showing “all the steps”. This is an artificial example, of course, since there are other, simpler ways of achieving the same end.\nThe function is defined as follows:\n> twosam <- function(y1, y2) {\n    n1  <- length(y1); n2  <- length(y2)\n    yb1 <- mean(y1);   yb2 <- mean(y2)\n    s1  <- var(y1);    s2  <- var(y2)\n    s <- ((n1-1)*s1 + (n2-1)*s2)/(n1+n2-2)\n    tst <- (yb1 - yb2)/sqrt(s*(1/n1 + 1/n2))\n    tst\n  }\nWith this function defined, you could perform two sample t-tests using a call such as\n> tstat <- twosam(data$male, data$female); tstat\nAs a second example, consider a function to emulate directly the MATLAB backslash command, which returns the coefficients of the orthogonal projection of the vector y onto the column space of the matrix, X. (This is ordinarily called the least squares estimate of the regression coefficients.) This would ordinarily be done with the qr() function; however this is sometimes a bit tricky to use directly and it pays to have a simple function such as the following to use it safely.\nThus given a n by 1 vector y and an n by p matrix X then X \\ y is defined as (X’X)^{-}X’y, where (X’X)^{-} is a generalized inverse of X'X.\n> bslash <- function(X, y) {\n  X <- qr(X)\n  qr.coef(X, y)\n}\nAfter this object is created it may be used in statements such as\n> regcoeff <- bslash(Xmat, yvar)\nand so on.\nThe classical R function lsfit() does this job quite well, and more21. It in turn uses the functions qr() and qr.coef() in the slightly counterintuitive way above to do this part of the calculation. Hence there is probably some value in having just this part isolated in a simple to use function if it is going to be in frequent use. If so, we may wish to make it a matrix binary operator for even more convenient use."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-defining-new-binary-operators",
    "href": "content/R/r-manuals/test.html#sec-defining-new-binary-operators",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.2 Defining new binary operators",
    "text": "10.2 Defining new binary operators\nHad we given the bslash() function a different name, namely one of the form\n%anything%\nit could have been used as a binary operator in expressions rather than in function form. Suppose, for example, we choose ! for the internal character. The function definition would then start as\n> \"%!%\" <- function(X, y) { … }\n(Note the use of quote marks.) The function could then be used as X %!% y. (The backslash symbol itself is not a convenient choice as it presents special problems in this context.)\nThe matrix multiplication operator, %*%, and the outer product matrix operator %o% are other examples of binary operators defined in this way."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-named-arguments-and-defaults",
    "href": "content/R/r-manuals/test.html#sec-named-arguments-and-defaults",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.3 Named arguments and defaults",
    "text": "10.3 Named arguments and defaults\nAs first noted in Generating regular sequences, if arguments to called functions are given in the “name=``object” form, they may be given in any order. Furthermore the argument sequence may begin in the unnamed, positional form, and specify named arguments after the positional arguments.\nThus if there is a function fun1 defined by\n> fun1 <- function(data, data.frame, graph, limit) {\n    [function body omitted]\n  }\nthen the function may be invoked in several ways, for example\n> ans <- fun1(d, df, TRUE, 20)\n> ans <- fun1(d, df, graph=TRUE, limit=20)\n> ans <- fun1(data=d, limit=20, graph=TRUE, data.frame=df)\nare all equivalent.\nIn many cases arguments can be given commonly appropriate default values, in which case they may be omitted altogether from the call when the defaults are appropriate. For example, if fun1 were defined as\n> fun1 <- function(data, data.frame, graph=TRUE, limit=20) { … }\nit could be called as\n> ans <- fun1(d, df)\nwhich is now equivalent to the three cases above, or as\n> ans <- fun1(d, df, limit=10)\nwhich changes one of the defaults.\nIt is important to note that defaults may be arbitrary expressions, even involving other arguments to the same function; they are not restricted to be constants as in our simple example here."
  },
  {
    "objectID": "content/R/r-manuals/test.html#the-sec-the--argument",
    "href": "content/R/r-manuals/test.html#the-sec-the--argument",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.4 The ‘…{#sec-the-’…’-argument}",
    "text": "10.4 The ‘…{#sec-the-’…’-argument}\nAnother frequent requirement is to allow one function to pass on argument settings to another. For example many graphics functions use the function par() and functions like plot() allow the user to pass on graphical parameters to par() to control the graphical output. (See The par() function, for more details on the par() function.) This can be done by including an extra argument, literally ‘…’, of the function, which may then be passed on. An outline example is given below.\nfun1 <- function(data, data.frame, graph=TRUE, limit=20, ...) {\n  [omitted statements]\n  if (graph)\n    par(pch=\"*\", ...)\n  [more omissions]\n}\nLess frequently, a function will need to refer to components of ‘…’. The expression list(...) evaluates all such arguments and returns them in a named list, while ..1, ..2, etc. evaluate them one at a time, with ‘..n’ returning the n’th unmatched argument."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-assignments-within-functions",
    "href": "content/R/r-manuals/test.html#sec-assignments-within-functions",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.5 Assignments within functions",
    "text": "10.5 Assignments within functions\nNote that any ordinary assignments done within the function are local and temporary and are lost after exit from the function. Thus the assignment X <- qr(X) does not affect the value of the argument in the calling program.\nTo understand completely the rules governing the scope of R assignments the reader needs to be familiar with the notion of an evaluation frame. This is a somewhat advanced, though hardly difficult, topic and is not covered further here.\nIf global and permanent assignments are intended within a function, then either the “superassignment” operator, <<- or the function assign() can be used. See the help document for details."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-more-advanced-examples",
    "href": "content/R/r-manuals/test.html#sec-more-advanced-examples",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.6 More advanced examples",
    "text": "10.6 More advanced examples\n\n10.6.1 Efficiency factors in block designs\nAs a more complete, if a little pedestrian, example of a function, consider finding the efficiency factors for a block design. (Some aspects of this problem have already been discussed in Index matrices.)\nA block design is defined by two factors, say blocks (b levels) and varieties (v levels). If R and K are the v by v and b by b replications and block size matrices, respectively, and N is the b by v incidence matrix, then the efficiency factors are defined as the eigenvalues of the matrix E = I_v - R^{-1/2}N’K^{-1}NR^{-1/2} = I_v - A’A, where A = K^{-1/2}NR^{-1/2}. One way to write the function is given below.\n> bdeff <- function(blocks, varieties) {\n    blocks <- as.factor(blocks)             # minor safety move\n    b <- length(levels(blocks))\n    varieties <- as.factor(varieties)       # minor safety move\n    v <- length(levels(varieties))\n    K <- as.vector(table(blocks))           # remove dim attr\n    R <- as.vector(table(varieties))        # remove dim attr\n    N <- table(blocks, varieties)\n    A <- 1/sqrt(K) * N * rep(1/sqrt(R), rep(b, v))\n    sv <- svd(A)\n    list(eff=1 - sv$d^2, blockcv=sv$u, varietycv=sv$v)\n}\nIt is numerically slightly better to work with the singular value decomposition on this occasion rather than the eigenvalue routines.\nThe result of the function is a list giving not only the efficiency factors as the first component, but also the block and variety canonical contrasts, since sometimes these give additional useful qualitative information.\n\n\n10.6.2 Dropping all names in a printed array\nFor printing purposes with large matrices or arrays, it is often useful to print them in close block form without the array names or numbers. Removing the dimnames attribute will not achieve this effect, but rather the array must be given a dimnames attribute consisting of empty strings. For example to print a matrix, X\n> temp <- X\n> dimnames(temp) <- list(rep(\"\", nrow(X)), rep(\"\", ncol(X)))\n> temp; rm(temp)\nThis can be much more conveniently done using a function, no.dimnames(), shown below, as a “wrap around” to achieve the same result. It also illustrates how some effective and useful user functions can be quite short.\nno.dimnames <- function(a) {\n  ## Remove all dimension names from an array for compact printing.\n  d <- list()\n  l <- 0\n  for(i in dim(a)) {\n    d[[l <- l + 1]] <- rep(\"\", i)\n  }\n  dimnames(a) <- d\n  a\n}\nWith this function defined, an array may be printed in close format using\n> no.dimnames(X)\nThis is particularly useful for large integer arrays, where patterns are the real interest rather than the values.\n\n\n10.6.3 Recursive numerical integration\nFunctions may be recursive, and may themselves define functions within themselves. Note, however, that such functions, or indeed variables, are not inherited by called functions in higher evaluation frames as they would be if they were on the search path.\nThe example below shows a naive way of performing one-dimensional numerical integration. The integrand is evaluated at the end points of the range and in the middle. If the one-panel trapezium rule answer is close enough to the two panel, then the latter is returned as the value. Otherwise the same process is recursively applied to each panel. The result is an adaptive integration process that concentrates function evaluations in regions where the integrand is farthest from linear. There is, however, a heavy overhead, and the function is only competitive with other algorithms when the integrand is both smooth and very difficult to evaluate.\nThe example is also given partly as a little puzzle in R programming.\narea <- function(f, a, b, eps = 1.0e-06, lim = 10) {\n  fun1 <- function(f, a, b, fa, fb, a0, eps, lim, fun) {\n    ## function ‘fun1’ is only visible inside ‘area’\n    d <- (a + b)/2\n    h <- (b - a)/4\n    fd <- f(d)\n    a1 <- h * (fa + fd)\n    a2 <- h * (fd + fb)\n    if(abs(a0 - a1 - a2) < eps || lim == 0)\n      return(a1 + a2)\n    else {\n      return(fun(f, a, d, fa, fd, a1, eps, lim - 1, fun) +\n             fun(f, d, b, fd, fb, a2, eps, lim - 1, fun))\n    }\n  }\n  fa <- f(a)\n  fb <- f(b)\n  a0 <- ((fa + fb) * (b - a))/2\n  fun1(f, a, b, fa, fb, a0, eps, lim, fun1)\n}"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-scope",
    "href": "content/R/r-manuals/test.html#sec-scope",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.7 Scope",
    "text": "10.7 Scope\nThe discussion in this section is somewhat more technical than in other parts of this document. However, it details one of the major differences between S-PLUS and R.\nThe symbols which occur in the body of a function can be divided into three classes; formal parameters, local variables and free variables. The formal parameters of a function are those occurring in the argument list of the function. Their values are determined by the process of binding the actual function arguments to the formal parameters. Local variables are those whose values are determined by the evaluation of expressions in the body of the functions. Variables which are not formal parameters or local variables are called free variables. Free variables become local variables if they are assigned to. Consider the following function definition.\nf <- function(x) {\n  y <- 2*x\n  print(x)\n  print(y)\n  print(z)\n}\nIn this function, x is a formal parameter, y is a local variable and z is a free variable.\nIn R the free variable bindings are resolved by first looking in the environment in which the function was created. This is called lexical scope. First we define a function called cube.\ncube <- function(n) {\n  sq <- function() n*n\n  n*sq()\n}\nThe variable n in the function sq is not an argument to that function. Therefore it is a free variable and the scoping rules must be used to ascertain the value that is to be associated with it. Under static scope (S-PLUS) the value is that associated with a global variable named n. Under lexical scope (R) it is the parameter to the function cube since that is the active binding for the variable n at the time the function sq was defined. The difference between evaluation in R and evaluation in S-PLUS is that S-PLUS looks for a global variable called n while R first looks for a variable called n in the environment created when cube was invoked.\n## first evaluation in S\nS> cube(2)\nError in sq(): Object \"n\" not found\nDumped\nS> n <- 3\nS> cube(2)\n[1] 18\n## then the same function evaluated in R\nR> cube(2)\n[1] 8\nLexical scope can also be used to give functions mutable state. In the following example we show how R can be used to mimic a bank account. A functioning bank account needs to have a balance or total, a function for making withdrawals, a function for making deposits and a function for stating the current balance. We achieve this by creating the three functions within account and then returning a list containing them. When account is invoked it takes a numerical argument total and returns a list containing the three functions. Because these functions are defined in an environment which contains total, they will have access to its value.\nThe special assignment operator, <<-, is used to change the value associated with total. This operator looks back in enclosing environments for an environment that contains the symbol total and when it finds such an environment it replaces the value, in that environment, with the value of right hand side. If the global or top-level environment is reached without finding the symbol total then that variable is created and assigned to there. For most users <<- creates a global variable and assigns the value of the right hand side to it22. Only when <<- has been used in a function that was returned as the value of another function will the special behavior described here occur.\nopen.account <- function(total) {\n  list(\n    deposit = function(amount) {\n      if(amount <= 0)\n        stop(\"Deposits must be positive!\\n\")\n      total <<- total + amount\n      cat(amount, \"deposited.  Your balance is\", total, \"\\n\\n\")\n    },\n    withdraw = function(amount) {\n      if(amount > total)\n        stop(\"You don't have that much money!\\n\")\n      total <<- total - amount\n      cat(amount, \"withdrawn.  Your balance is\", total, \"\\n\\n\")\n    },\n    balance = function() {\n      cat(\"Your balance is\", total, \"\\n\\n\")\n    }\n  )\n}\n\nross <- open.account(100)\nrobert <- open.account(200)\n\nross$withdraw(30)\nross$balance()\nrobert$balance()\n\nross$deposit(50)\nross$balance()\nross$withdraw(500)"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-customizing-the-environment",
    "href": "content/R/r-manuals/test.html#sec-customizing-the-environment",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.8 Customizing the environment",
    "text": "10.8 Customizing the environment\nUsers can customize their environment in several different ways. There is a site initialization file and every directory can have its own special initialization file. Finally, the special functions .First and .Last can be used.\nThe location of the site initialization file is taken from the value of the R_PROFILE environment variable. If that variable is unset, the file Rprofile.site in the R home subdirectory etc is used. This file should contain the commands that you want to execute every time R is started under your system. A second, personal, profile file named .Rprofile23 can be placed in any directory. If R is invoked in that directory then that file will be sourced. This file gives individual users control over their workspace and allows for different startup procedures in different working directories. If no .Rprofile file is found in the startup directory, then R looks for a .Rprofile file in the user’s home directory and uses that (if it exists). If the environment variable R_PROFILE_USER is set, the file it points to is used instead of the .Rprofile files.\nAny function named .First() in either of the two profile files or in the .RData image has a special status. It is automatically performed at the beginning of an R session and may be used to initialize the environment. For example, the definition in the example below alters the prompt to $ and sets up various other useful things that can then be taken for granted in the rest of the session.\nThus, the sequence in which files are executed is, Rprofile.site, the user profile, .RData and then .First(). A definition in later files will mask definitions in earlier files.\n> .First <- function() {\n  options(prompt=\"$ \", continue=\"+\\t\")  # $ is the prompt\n  options(digits=5, length=999)         # custom numbers and printout\n  x11()                                 # for graphics\n  par(pch = \"+\")                        # plotting character\n  source(file.path(Sys.getenv(\"HOME\"), \"R\", \"mystuff.R\"))\n                                        # my personal functions\n  library(MASS)                         # attach a package\n}\nSimilarly a function .Last(), if defined, is (normally) executed at the very end of the session. An example is given below.\n> .Last <- function() {\n  graphics.off()                        # a small safety measure.\n  cat(paste(date(),\"\\nAdios\\n\"))        # Is it time for lunch?\n}"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-classes-generic-functions-and-object-orientation",
    "href": "content/R/r-manuals/test.html#sec-classes-generic-functions-and-object-orientation",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.9 Classes, generic functions and object orientation",
    "text": "10.9 Classes, generic functions and object orientation\nThe class of an object determines how it will be treated by what are known as generic functions. Put the other way round, a generic function performs a task or action on its arguments specific to the class of the argument itself. If the argument lacks any class attribute, or has a class not catered for specifically by the generic function in question, there is always a default action provided.\nAn example makes things clearer. The class mechanism offers the user the facility of designing and writing generic functions for special purposes. Among the other generic functions are plot() for displaying objects graphically, summary() for summarizing analyses of various types, and anova() for comparing statistical models.\nThe number of generic functions that can treat a class in a specific way can be quite large. For example, the functions that can accommodate in some fashion objects of class \"data.frame\" include\n[     [[<-    any    as.matrix\n[<-   mean    plot   summary\nA currently complete list can be got by using the methods() function:\n> methods(class=\"data.frame\")\nConversely the number of classes a generic function can handle can also be quite large. For example the plot() function has a default method and variants for objects of classes \"data.frame\", \"density\", \"factor\", and more. A complete list can be got again by using the methods() function:\n> methods(plot)\nFor many generic functions the function body is quite short, for example\n> coef\nfunction (object, ...)\nUseMethod(\"coef\")\nThe presence of UseMethod indicates this is a generic function. To see what methods are available we can use methods()\n> methods(coef)\n[1] coef.aov*         coef.Arima*       coef.default*     coef.listof*\n[5] coef.nls*         coef.summary.nls*\n\n   Non-visible functions are asterisked\nIn this example there are six methods, none of which can be seen by typing its name. We can read these by either of\n> getAnywhere(\"coef.aov\")\nA single object matching 'coef.aov' was found\nIt was found in the following places\n  registered S3 method for coef from namespace stats\n  namespace:stats\nwith value\n\nfunction (object, ...)\n{\n    z <- object$coef\n    z[!is.na(z)]\n}\n\n> getS3method(\"coef\", \"aov\")\nfunction (object, ...)\n{\n    z <- object$coef\n    z[!is.na(z)]\n}\nA function named gen.``cl will be invoked by the generic gen for class cl, so do not name functions in this style unless they are intended to be methods.\nThe reader is referred to the R Language Definition for a more complete discussion of this mechanism."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-defining-statistical-models-formulae",
    "href": "content/R/r-manuals/test.html#sec-defining-statistical-models-formulae",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.1 Defining statistical models; formulae",
    "text": "11.1 Defining statistical models; formulae\nThe template for a statistical model is a linear regression model with independent, homoscedastic errors\n\ny_i = sum_{j=0}^p beta_j x_{ij} + e_i,     i = 1, …, n,\n\nwhere the e_i are NID(0, sigma^2). In matrix terms this would be written\n\ny = X  beta + e\n\nwhere the y is the response vector, X is the model matrix or design matrix and has columns x_0, x_1, …, x_p, the determining variables. Very often x_0 will be a column of ones defining an intercept term.\n\n11.1.1 Examples\nBefore giving a formal specification, a few examples may usefully set the picture.\nSuppose y, x, x0, x1, x2, … are numeric variables, X is a matrix and A, B, C, … are factors. The following formulae on the left side below specify statistical models as described on the right.\ny ~ x\ny ~ 1 + x\n: Both imply the same simple linear regression model of y on x. The first has an implicit intercept term, and the second an explicit one.\ny ~ 0 + x\ny ~ -1 + x\ny ~ x - 1\n: Simple linear regression of y on x through the origin (that is, without an intercept term).\n\nlog(y) ~ x1 + x2\n\nMultiple regression of the transformed variable, log(y), on x1 and x2 (with an implicit intercept term).\n\n\ny ~ poly(x,2)\ny ~ 1 + x + I(x^2)\n: Polynomial regression of y on x of degree 2. The first form uses orthogonal polynomials, and the second uses explicit powers, as basis.\n\ny ~ X + poly(x,2)\n\nMultiple regression y with model matrix consisting of the matrix X as well as polynomial terms in x to degree 2.\n\ny ~ A\n\nSingle classification analysis of variance model of y, with classes determined by A.\n\ny ~ A + x\n\nSingle classification analysis of covariance model of y, with classes determined by A, and with covariate x.\n\n\ny ~ A*B\ny ~ A + B + A:B\ny ~ B %in% A\ny ~ A/B\n: Two factor non-additive model of y on A and B. The first two specify the same crossed classification and the second two specify the same nested classification. In abstract terms all four specify the same model subspace.\ny ~ (A + B + C)^2\ny ~ A*B*C - A:B:C\n: Three factor experiment but with a model containing main effects and two factor interactions only. Both formulae specify the same model.\ny ~ A * x\ny ~ A/x\ny ~ A/(1 + x) - 1\n: Separate simple linear regression models of y on x within the levels of A, with different codings. The last form produces explicit estimates of as many different intercepts and slopes as there are levels in A.\n\ny ~ A*B + Error(C)\n\nAn experiment with two treatment factors, A and B, and error strata determined by factor C. For example a split plot experiment, with whole plots (and hence also subplots), determined by factor C.\n\n\nThe operator ~ is used to define a model formula in R. The form, for an ordinary linear model, is\nresponse ~ op_1 term_1 op_2 term_2 op_3 term_3 …\nwhere\n\nresponse\n\nis a vector or matrix, (or expression evaluating to a vector or matrix) defining the response variable(s).\n\nop_i\n\nis an operator, either + or -, implying the inclusion or exclusion of a term in the model, (the first is optional).\n\nterm_i\n\nis either\n\na vector or matrix expression, or 1,\na factor, or\na formula expression consisting of factors, vectors or matrices connected by formula operators.\n\nIn all cases each term defines a collection of columns either to be added to or removed from the model matrix. A 1 stands for an intercept column and is by default included in the model matrix unless explicitly removed.\n\n\nThe formula operators are similar in effect to the Wilkinson and Rogers notation used by such programs as Glim and Genstat. One inevitable change is that the operator .’ becomes ’: since the period is a valid name character in R.\nThe notation is summarized below (based on Chambers & Hastie, 1992, p.29):\n\nY~ ``M\n\nY is modeled as M.\n\nM_1+ ``M_2\n\nInclude M_1 and M_2.\n\nM_1- ``M_2\n\nInclude M_1 leaving out terms of M_2.\n\nM_1: ``M_2\n\nThe tensor product of M_1 and M_2. If both terms are factors, then the “subclasses” factor.\n\nM_1%in% ``M_2\n\nSimilar to M_1:``M_2, but with a different coding.\n\nM_1* ``M_2\n\nM_1+ ``M_2+ ``M_1:``M_2.\n\nM_1/ ``M_2\n\nM_1+ ``M_2%in% ``M_1.\n\nM^``n\n\nAll terms in M together with “interactions” up to order n\n\nI(``M)\n\nInsulate M. Inside M all operators have their normal arithmetic meaning, and that term appears in the model matrix.\n\n\nNote that inside the parentheses that usually enclose function arguments all operators have their normal arithmetic meaning. The function I() is an identity function used to allow terms in model formulae to be defined using arithmetic operators.\nNote particularly that the model formulae specify the columns of the model matrix, the specification of the parameters being implicit. This is not the case in other contexts, for example in specifying nonlinear models.\n\n\n11.1.2 Contrasts\nWe need at least some idea how the model formulae specify the columns of the model matrix. This is easy if we have continuous variables, as each provides one column of the model matrix (and the intercept will provide a column of ones if included in the model).\nWhat about a k-level factor A? The answer differs for unordered and ordered factors. For unordered factors k - 1 columns are generated for the indicators of the second, …, kth levels of the factor. (Thus the implicit parameterization is to contrast the response at each level with that at the first.) For ordered factors the k - 1 columns are the orthogonal polynomials on 1, …, k, omitting the constant term.\nAlthough the answer is already complicated, it is not the whole story. First, if the intercept is omitted in a model that contains a factor term, the first such term is encoded into k columns giving the indicators for all the levels. Second, the whole behavior can be changed by the options setting for contrasts. The default setting in R is\noptions(contrasts = c(\"contr.treatment\", \"contr.poly\"))\nThe main reason for mentioning this is that R and S have different defaults for unordered factors, S using Helmert contrasts. So if you need to compare your results to those of a textbook or paper which used S-PLUS, you will need to set\noptions(contrasts = c(\"contr.helmert\", \"contr.poly\"))\nThis is a deliberate difference, as treatment contrasts (R’s default) are thought easier for newcomers to interpret.\nWe have still not finished, as the contrast scheme to be used can be set for each term in the model using the functions contrasts and C.\nWe have not yet considered interaction terms: these generate the products of the columns introduced for their component terms.\nAlthough the details are complicated, model formulae in R will normally generate the models that an expert statistician would expect, provided that marginality is preserved. Fitting, for example, a model with an interaction but not the corresponding main effects will in general lead to surprising results, and is for experts only."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-linear-models",
    "href": "content/R/r-manuals/test.html#sec-linear-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.2 Linear models",
    "text": "11.2 Linear models\nThe basic function for fitting ordinary multiple models is lm(), and a streamlined version of the call is as follows:\n> fitted.model <- lm(formula, data = data.frame)\nFor example\n> fm2 <- lm(y ~ x1 + x2, data = production)\nwould fit a multiple regression model of y on x1 and x2 (with implicit intercept term).\nThe important (but technically optional) parameter data = production specifies that any variables needed to construct the model should come first from the production data frame. This is the case regardless of whether data frame production has been attached on the search path or not."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-generic-functions-for-extracting-model-information",
    "href": "content/R/r-manuals/test.html#sec-generic-functions-for-extracting-model-information",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.3 Generic functions for extracting model information",
    "text": "11.3 Generic functions for extracting model information\nThe value of lm() is a fitted model object; technically a list of results of class \"lm\". Information about the fitted model can then be displayed, extracted, plotted and so on by using generic functions that orient themselves to objects of class \"lm\". These include\nadd1    deviance   formula      predict  step\nalias   drop1      kappa        print    summary\nanova   effects    labels       proj     vcov\ncoef    family     plot         residuals\nA brief description of the most commonly used ones is given below.\n\nanova(``object_1, ``object_2)\nCompare a submodel with an outer model and produce an analysis of variance table.\ncoef(``object)\nExtract the regression coefficient (matrix).\nLong form: coefficients(``object).\ndeviance(``object)\nResidual sum of squares, weighted if appropriate.\nformula(``object)\nExtract the model formula.\nplot(``object)\nProduce four plots, showing residuals, fitted values and some diagnostics.\npredict(``object, newdata=``data.frame)\nThe data frame supplied must have variables specified with the same labels as the original. The value is a vector or matrix of predicted values corresponding to the determining variable values in data.frame.\nprint(``object)\nPrint a concise version of the object. Most often used implicitly.\nresiduals(``object)\nExtract the (matrix of) residuals, weighted as appropriate.\nShort form: resid(``object).\nstep(``object)\nSelect a suitable model by adding or dropping terms and preserving hierarchies. The model with the smallest value of AIC (Akaike’s An Information Criterion) discovered in the stepwise search is returned.\nsummary(``object)\nPrint a comprehensive summary of the results of the regression analysis.\nvcov(``object)\nReturns the variance-covariance matrix of the main parameters of a fitted model object."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-analysis-of-variance-and-model-comparison",
    "href": "content/R/r-manuals/test.html#sec-analysis-of-variance-and-model-comparison",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.4 Analysis of variance and model comparison",
    "text": "11.4 Analysis of variance and model comparison\nThe model fitting function aov(``formula, data=``data.frame) operates at the simplest level in a very similar way to the function lm(), and most of the generic functions listed in the table in Generic functions for extracting model information apply.\nIt should be noted that in addition aov() allows an analysis of models with multiple error strata such as split plot experiments, or balanced incomplete block designs with recovery of inter-block information. The model formula\nresponse ~ mean.formula + Error(strata.formula)\nspecifies a multi-stratum experiment with error strata defined by the strata.formula. In the simplest case, strata.formula is simply a factor, when it defines a two strata experiment, namely between and within the levels of the factor.\nFor example, with all determining variables factors, a model formula such as that in:\n> fm <- aov(yield ~ v + n*p*k + Error(farms/blocks), data=farm.data)\nwould typically be used to describe an experiment with mean model v + n*p*k and three error strata, namely “between farms”, “within farms, between blocks” and “within blocks”.\n\n11.4.1 ANOVA tables\nNote also that the analysis of variance table (or tables) are for a sequence of fitted models. The sums of squares shown are the decrease in the residual sums of squares resulting from an inclusion of that term in the model at that place in the sequence. Hence only for orthogonal experiments will the order of inclusion be inconsequential.\nFor multistratum experiments the procedure is first to project the response onto the error strata, again in sequence, and to fit the mean model to each projection. For further details, see Chambers & Hastie (1992).\nA more flexible alternative to the default full ANOVA table is to compare two or more models directly using the anova() function.\n> anova(fitted.model.1, fitted.model.2, …)\nThe display is then an ANOVA table showing the differences between the fitted models when fitted in sequence. The fitted models being compared would usually be an hierarchical sequence, of course. This does not give different information to the default, but rather makes it easier to comprehend and control."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-updating-fitted-models",
    "href": "content/R/r-manuals/test.html#sec-updating-fitted-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.5 Updating fitted models",
    "text": "11.5 Updating fitted models\nThe update() function is largely a convenience function that allows a model to be fitted that differs from one previously fitted usually by just a few additional or removed terms. Its form is\n> new.model <- update(old.model, new.formula)\nIn the new.formula the special name consisting of a period, ., only, can be used to stand for “the corresponding part of the old model formula”. For example,\n> fm05 <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = production)\n> fm6  <- update(fm05, . ~ . + x6)\n> smf6 <- update(fm6, sqrt(.) ~ .)\nwould fit a five variate multiple regression with variables (presumably) from the data frame production, fit an additional model including a sixth regressor variable, and fit a variant on the model where the response had a square root transform applied.\nNote especially that if the data= argument is specified on the original call to the model fitting function, this information is passed on through the fitted model object to update() and its allies.\nThe name ‘.’ can also be used in other contexts, but with slightly different meaning. For example\n> fmfull <- lm(y ~ . , data = production)\nwould fit a model with response y and regressor variables all other variables in the data frame production.\nOther functions for exploring incremental sequences of models are add1(), drop1() and step(). The names of these give a good clue to their purpose, but for full details see the on-line help."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-generalized-linear-models",
    "href": "content/R/r-manuals/test.html#sec-generalized-linear-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.6 Generalized linear models",
    "text": "11.6 Generalized linear models\nGeneralized linear modeling is a development of linear models to accommodate both non-normal response distributions and transformations to linearity in a clean and straightforward way. A generalized linear model may be described in terms of the following sequence of assumptions:\n\nThere is a response, y, of interest and stimulus variables x_1, x_2, …, whose values influence the distribution of the response.\nThe stimulus variables influence the distribution of y through a single linear function, only. This linear function is called the linear predictor, and is usually written\n\neta = beta_1 x_1 + beta_2 x_2 + … + beta_p x_p,\n\nhence x_i has no influence on the distribution of y if and only if beta_i is zero.\nThe distribution of y is of the form\n\nf_Y(y; mu, phi)\n  = exp((A/phi) * (y lambda(mu) - gamma(lambda(mu))) + tau(y, phi))\n\nwhere phi is a scale parameter (possibly known), and is constant for all observations, A represents a prior weight, assumed known but possibly varying with the observations, and $\\mu$ is the mean of y. So it is assumed that the distribution of y is determined by its mean and possibly a scale parameter as well.\nThe mean, mu, is a smooth invertible function of the linear predictor:\n\nmu = m(eta),    eta = m^{-1}(mu) = ell(mu)\n\nand this inverse function, ell(), is called the link function.\n\nThese assumptions are loose enough to encompass a wide class of models useful in statistical practice, but tight enough to allow the development of a unified methodology of estimation and inference, at least approximately. The reader is referred to any of the current reference works on the subject for full details, such as McCullagh & Nelder (1989) or Dobson (1990).\n\n11.6.1 Families\nThe class of generalized linear models handled by facilities supplied in R includes gaussian, binomial, poisson, inverse gaussian and gamma response distributions and also quasi-likelihood models where the response distribution is not explicitly specified. In the latter case the variance function must be specified as a function of the mean, but in other cases this function is implied by the response distribution.\nEach response distribution admits a variety of link functions to connect the mean with the linear predictor. Those automatically available are shown in the following table:\n\n\n\n\n\nFamily name\nLink functions\n\n\n\n\nbinomial\nlogit, probit, log, cloglog\n\n\ngaussian\nidentity, log, inverse\n\n\nGamma\nidentity, inverse, log\n\n\ninverse.gaussian\n1/mu^2, identity, inverse, log\n\n\npoisson\nidentity, log, sqrt\n\n\nquasi\nlogit, probit, cloglog, identity, inverse, log, 1/mu^2, sqrt\n\n\n\n\n\nThe combination of a response distribution, a link function and various other pieces of information that are needed to carry out the modeling exercise is called the family of the generalized linear model.\n\n\n11.6.2 The glm() function\nSince the distribution of the response depends on the stimulus variables through a single linear function only, the same mechanism as was used for linear models can still be used to specify the linear part of a generalized model. The family has to be specified in a different way.\nThe R function to fit a generalized linear model is glm() which uses the form\n> fitted.model <- glm(formula, family=family.generator, data=data.frame)\nThe only new feature is the family.generator, which is the instrument by which the family is described. It is the name of a function that generates a list of functions and expressions that together define and control the model and estimation process. Although this may seem a little complicated at first sight, its use is quite simple.\nThe names of the standard, supplied family generators are given under “Family Name” in the table in Families. Where there is a choice of links, the name of the link may also be supplied with the family name, in parentheses as a parameter. In the case of the quasi family, the variance function may also be specified in this way.\nSome examples make the process clear.\n\n\n11.6.3 The gaussian family\nA call such as\n> fm <- glm(y ~ x1 + x2, family = gaussian, data = sales)\nachieves the same result as\n> fm <- lm(y ~ x1+x2, data=sales)\nbut much less efficiently. Note how the gaussian family is not automatically provided with a choice of links, so no parameter is allowed. If a problem requires a gaussian family with a nonstandard link, this can usually be achieved through the quasi family, as we shall see later.\n\n\n11.6.4 The binomial family\nConsider a small, artificial example, from Silvey (1970).\nOn the Aegean island of Kalythos the male inhabitants suffer from a congenital eye disease, the effects of which become more marked with increasing age. Samples of islander males of various ages were tested for blindness and the results recorded. The data is shown below:\nThe problem we consider is to fit both logistic and probit models to this data, and to estimate for each model the LD50, that is the age at which the chance of blindness for a male inhabitant is 50%.\nIf y is the number of blind at age x and n the number tested, both models have the form y ~ B(n, F(beta_0 + beta_1 x)) where for the probit case, F(z) = Phi(z) is the standard normal distribution function, and in the logit case (the default), F(z) = e^z/(1+e^z). In both cases the LD50 is LD50 = - beta_0/beta_1 that is, the point at which the argument of the distribution function is zero.\nThe first step is to set the data up as a data frame\n> kalythos <- data.frame(x = c(20,35,45,55,70), n = rep(50,5),\n                         y = c(6,17,26,37,44))\nTo fit a binomial model using glm() there are three possibilities for the response:\n\nIf the response is a vector it is assumed to hold binary data, and so must be a 0/1 vector.\nIf the response is a two-column matrix it is assumed that the first column holds the number of successes for the trial and the second holds the number of failures.\nIf the response is a factor, its first level is taken as failure (0) and all other levels as ‘success’ (1).\n\nHere we need the second of these conventions, so we add a matrix to our data frame:\n> kalythos$Ymat <- cbind(kalythos$y, kalythos$n - kalythos$y)\nTo fit the models we use\n> fmp <- glm(Ymat ~ x, family = binomial(link=probit), data = kalythos)\n> fml <- glm(Ymat ~ x, family = binomial, data = kalythos)\nSince the logit link is the default the parameter may be omitted on the second call. To see the results of each fit we could use\n> summary(fmp)\n> summary(fml)\nBoth models fit (all too) well. To find the LD50 estimate we can use a simple function:\n> ld50 <- function(b) -b[1]/b[2]\n> ldp <- ld50(coef(fmp)); ldl <- ld50(coef(fml)); c(ldp, ldl)\nThe actual estimates from this data are 43.663 years and 43.601 years respectively.\n\n\n11.6.5 Poisson models\nWith the Poisson family the default link is the log, and in practice the major use of this family is to fit surrogate Poisson log-linear models to frequency data, whose actual distribution is often multinomial. This is a large and important subject we will not discuss further here. It even forms a major part of the use of non-gaussian generalized models overall.\nOccasionally genuinely Poisson data arises in practice and in the past it was often analyzed as gaussian data after either a log or a square-root transformation. As a graceful alternative to the latter, a Poisson generalized linear model may be fitted as in the following example:\n> fmod <- glm(y ~ A + B + x, family = poisson(link=sqrt),\n              data = worm.counts)\n\n\n11.6.6 Quasi-likelihood models\nFor all families the variance of the response will depend on the mean and will have the scale parameter as a multiplier. The form of dependence of the variance on the mean is a characteristic of the response distribution; for example for the poisson distribution Var(y) = mu.\nFor quasi-likelihood estimation and inference the precise response distribution is not specified, but rather only a link function and the form of the variance function as it depends on the mean. Since quasi-likelihood estimation uses formally identical techniques to those for the gaussian distribution, this family provides a way of fitting gaussian models with non-standard link functions or variance functions, incidentally.\nFor example, consider fitting the non-linear regression y = theta_1 z_1 / (z_2 - theta_2) + e which may be written alternatively as y = 1 / (beta_1 x_1 + beta_2 x_2) + e where x_1 = z_2/z_1, x_2 = -1/z_1, beta_1 = 1/theta_1, and beta_2 = theta_2/theta_1. Supposing a suitable data frame to be set up we could fit this non-linear regression as\n> nlfit <- glm(y ~ x1 + x2 - 1,\n               family = quasi(link=inverse, variance=constant),\n               data = biochem)\nThe reader is referred to the manual and the help document for further information, as needed."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-nonlinear-least-squares-and-maximum-likelihood-models",
    "href": "content/R/r-manuals/test.html#sec-nonlinear-least-squares-and-maximum-likelihood-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.7 Nonlinear least squares and maximum likelihood models",
    "text": "11.7 Nonlinear least squares and maximum likelihood models\nCertain forms of nonlinear model can be fitted by Generalized Linear Models (glm()). But in the majority of cases we have to approach the nonlinear curve fitting problem as one of nonlinear optimization. R’s nonlinear optimization routines are optim(), nlm() and nlminb(), We seek the parameter values that minimize some index of lack-of-fit, and they do this by trying out various parameter values iteratively. Unlike linear regression for example, there is no guarantee that the procedure will converge on satisfactory estimates. All the methods require initial guesses about what parameter values to try, and convergence may depend critically upon the quality of the starting values.\n\n11.7.1 Least squares\nOne way to fit a nonlinear model is by minimizing the sum of the squared errors (SSE) or residuals. This method makes sense if the observed errors could have plausibly arisen from a normal distribution.\nHere is an example from Bates & Watts (1988), page 51. The data are:\n> x <- c(0.02, 0.02, 0.06, 0.06, 0.11, 0.11, 0.22, 0.22, 0.56, 0.56,\n         1.10, 1.10)\n> y <- c(76, 47, 97, 107, 123, 139, 159, 152, 191, 201, 207, 200)\nThe fit criterion to be minimized is:\n> fn <- function(p) sum((y - (p[1] * x)/(p[2] + x))^2)\nIn order to do the fit we need initial estimates of the parameters. One way to find sensible starting values is to plot the data, guess some parameter values, and superimpose the model curve using those values.\n> plot(x, y)\n> xfit <- seq(.02, 1.1, .05)\n> yfit <- 200 * xfit/(0.1 + xfit)\n> lines(spline(xfit, yfit))\nWe could do better, but these starting values of 200 and 0.1 seem adequate. Now do the fit:\n> out <- nlm(fn, p = c(200, 0.1), hessian = TRUE)\nAfter the fitting, out$minimum is the SSE, and out$estimate are the least squares estimates of the parameters. To obtain the approximate standard errors (SE) of the estimates we do:\n> sqrt(diag(2*out$minimum/(length(y) - 2) * solve(out$hessian)))\nThe 2 which is subtracted in the line above represents the number of parameters. A 95% confidence interval would be the parameter estimate +/- 1.96 SE. We can superimpose the least squares fit on a new plot:\n> plot(x, y)\n> xfit <- seq(.02, 1.1, .05)\n> yfit <- 212.68384222 * xfit/(0.06412146 + xfit)\n> lines(spline(xfit, yfit))\nThe standard package stats provides much more extensive facilities for fitting non-linear models by least squares. The model we have just fitted is the Michaelis-Menten model, so we can use\n> df <- data.frame(x=x, y=y)\n> fit <- nls(y ~ SSmicmen(x, Vm, K), df)\n> fit\nNonlinear regression model\n  model:  y ~ SSmicmen(x, Vm, K)\n   data:  df\n          Vm            K\n212.68370711   0.06412123\n residual sum-of-squares:  1195.449\n> summary(fit)\n\nFormula: y ~ SSmicmen(x, Vm, K)\n\nParameters:\n    Estimate Std. Error t value Pr(>|t|)\nVm 2.127e+02  6.947e+00  30.615 3.24e-11\nK  6.412e-02  8.281e-03   7.743 1.57e-05\n\nResidual standard error: 10.93 on 10 degrees of freedom\n\nCorrelation of Parameter Estimates:\n      Vm\nK 0.7651\n\n\n11.7.2 Maximum likelihood\nMaximum likelihood is a method of nonlinear model fitting that applies even if the errors are not normal. The method finds the parameter values which maximize the log likelihood, or equivalently which minimize the negative log-likelihood. Here is an example from Dobson (1990), pp. 108–111. This example fits a logistic model to dose-response data, which clearly could also be fit by glm(). The data are:\n> x <- c(1.6907, 1.7242, 1.7552, 1.7842, 1.8113,\n         1.8369, 1.8610, 1.8839)\n> y <- c( 6, 13, 18, 28, 52, 53, 61, 60)\n> n <- c(59, 60, 62, 56, 63, 59, 62, 60)\nThe negative log-likelihood to minimize is:\n> fn <- function(p)\n   sum( - (y*(p[1]+p[2]*x) - n*log(1+exp(p[1]+p[2]*x))\n           + log(choose(n, y)) ))\nWe pick sensible starting values and do the fit:\n> out <- nlm(fn, p = c(-50,20), hessian = TRUE)\nAfter the fitting, out$minimum is the negative log-likelihood, and out$estimate are the maximum likelihood estimates of the parameters. To obtain the approximate SEs of the estimates we do:\n> sqrt(diag(solve(out$hessian)))\nA 95% confidence interval would be the parameter estimate +/- 1.96 SE."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-some-non-standard-models",
    "href": "content/R/r-manuals/test.html#sec-some-non-standard-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.8 Some non-standard models",
    "text": "11.8 Some non-standard models\nWe conclude this chapter with just a brief mention of some of the other facilities available in R for special regression and data analysis problems.\n\n Mixed models. The recommended nlme package provides functions lme() and nlme() for linear and non-linear mixed-effects models, that is linear and non-linear regressions in which some of the coefficients correspond to random effects. These functions make heavy use of formulae to specify the models.\n Local approximating regressions. The loess() function fits a nonparametric regression by using a locally weighted regression. Such regressions are useful for highlighting a trend in messy data or for data reduction to give some insight into a large data set.\nFunction loess is in the standard package stats, together with code for projection pursuit regression.\n Robust regression. There are several functions available for fitting regression models in a way resistant to the influence of extreme outliers in the data. Function lqs in the recommended package MASS provides state-of-art algorithms for highly-resistant fits. Less resistant but statistically more efficient methods are available in packages, for example function rlm in package MASS.\n Additive models. This technique aims to construct a regression function from smooth additive functions of the determining variables, usually one for each determining variable. Functions avas and ace in package acepack and functions bruto and mars in package mda provide some examples of these techniques in user-contributed packages to R. An extension is Generalized Additive Models, implemented in user-contributed packages gam and mgcv.\n Tree-based models. Rather than seek an explicit global linear model for prediction or interpretation, tree-based models seek to bifurcate the data, recursively, at critical points of the determining variables in order to partition the data ultimately into groups that are as homogeneous as possible within, and as heterogeneous as possible between. The results often lead to insights that other data analysis methods tend not to yield.\nModels are again specified in the ordinary linear model form. The model fitting function is tree(), but many other generic functions such as plot() and text() are well adapted to displaying the results of a tree-based model fit in a graphical way.\nTree models are available in R via the user-contributed packages rpart and tree."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-high-level-plotting-commands",
    "href": "content/R/r-manuals/test.html#sec-high-level-plotting-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.1 High-level plotting commands",
    "text": "12.1 High-level plotting commands\nHigh-level plotting functions are designed to generate a complete plot of the data passed as arguments to the function. Where appropriate, axes, labels and titles are automatically generated (unless you request otherwise.) High-level plotting commands always start a new plot, erasing the current plot if necessary.\n\n12.1.1 The plot() function\nOne of the most frequently used plotting functions in R is the plot() function. This is a generic function: the type of plot produced is dependent on the type or class of the first argument.\nplot(``x, ``y)\nplot(``xy)\n: If x and y are vectors, plot(``x, ``y) produces a scatterplot of y against x. The same effect can be produced by supplying one argument (second form) as either a list containing two elements x and y or a two-column matrix.\n\nplot(``x)\n\nIf x is a time series, this produces a time-series plot. If x is a numeric vector, it produces a plot of the values in the vector against their index in the vector. If x is a complex vector, it produces a plot of imaginary versus real parts of the vector elements.\n\n\nplot(``f)\nplot(``f, ``y)\n: f is a factor object, y is a numeric vector. The first form generates a bar plot of f; the second form produces boxplots of y for each level of f.\nplot(``df)\nplot(~ ``expr)\nplot(``y~ ``expr)\n: df is a data frame, y is any object, expr is a list of object names separated by + (e.g., a + b + c). The first two forms produce distributional plots of the variables in a data frame (first form) or of a number of named objects (second form). The third form plots y against every object named in expr.\n\n\n12.1.2 Displaying multivariate data\nR provides two very useful functions for representing multivariate data. If X is a numeric matrix or data frame, the command\n> pairs(X)\nproduces a pairwise scatterplot matrix of the variables defined by the columns of X, that is, every column of X is plotted against every other column of X and the resulting n(n-1) plots are arranged in a matrix with plot scales constant over the rows and columns of the matrix.\nWhen three or four variables are involved a coplot may be more enlightening. If a and b are numeric vectors and c is a numeric vector or factor object (all of the same length), then the command\n> coplot(a ~ b | c)\nproduces a number of scatterplots of a against b for given values of c. If c is a factor, this simply means that a is plotted against b for every level of c. When c is numeric, it is divided into a number of conditioning intervals and for each interval a is plotted against b for values of c within the interval. The number and position of intervals can be controlled with given.values= argument to coplot()—the function co.intervals() is useful for selecting intervals. You can also use two given variables with a command like\n> coplot(a ~ b | c + d)\nwhich produces scatterplots of a against b for every joint conditioning interval of c and d.\nThe coplot() and pairs() function both take an argument panel= which can be used to customize the type of plot which appears in each panel. The default is points() to produce a scatterplot but by supplying some other low-level graphics function of two vectors x and y as the value of panel= you can produce any type of plot you wish. An example panel function useful for coplots is panel.smooth().\n\n\n12.1.3 Display graphics\nOther high-level graphics functions produce different types of plots. Some examples are:\nqqnorm(x)\nqqline(x)\nqqplot(x, y)\n: \nDistribution-comparison plots. The first form plots the numeric\nvector `x` against the expected Normal order scores (a normal scores\nplot) and the second adds a straight line to such a plot by drawing\na line through the distribution and data quartiles. The third form\nplots the quantiles of `x` against those of `y` to compare their\nrespective distributions.\nhist(x)\nhist(x, nclass=``n)\nhist(x, breaks=``b, …)\n: \nProduces a histogram of the numeric vector `x`. A sensible number of\nclasses is usually chosen, but a recommendation can be given with\nthe `nclass=` argument. Alternatively, the breakpoints can be\nspecified exactly with the `breaks=` argument. If the\n`probability=TRUE` argument is given, the bars represent relative\nfrequencies divided by bin width instead of counts.\n\ndotchart(x, …)\n\n\nConstructs a dotchart of the data in x. In a dotchart the y-axis gives a labelling of the data in x and the x-axis gives its value. For example it allows easy visual selection of all data entries with values lying in specified ranges.\n\n\nimage(x, y, z, …)\ncontour(x, y, z, …)\npersp(x, y, z, …)\n: \nPlots of three variables. The `image` plot draws a grid of\nrectangles using different colours to represent the value of `z`,\nthe `contour` plot draws contour lines to represent the value of\n`z`, and the `persp` plot draws a 3D surface.\n\n\n12.1.4 Arguments to high-level plotting functions\nThere are a number of arguments which may be passed to high-level graphics functions, as follows:\n\nadd=TRUE\n\nForces the function to act as a low-level graphics function, superimposing the plot on the current plot (some functions only).\n\naxes=FALSE\n\nSuppresses generation of axes—useful for adding your own custom axes with the axis() function. The default, axes=TRUE, means include axes.\n\n\nlog=\"x\"\nlog=\"y\"\nlog=\"xy\"\n: Causes the x, y or both axes to be logarithmic. This will work for many, but not all, types of plot.\n\ntype=\n\nThe type= argument controls the type of plot produced, as follows:\n\ntype=\"p\"\n\nPlot individual points (the default)\n\ntype=\"l\"\n\nPlot lines\n\ntype=\"b\"\n\nPlot points connected by lines (both)\n\ntype=\"o\"\n\nPlot points overlaid by lines\n\ntype=\"h\"\n\nPlot vertical lines from points to the zero axis (high-density)\n\n\ntype=\"s\"\ntype=\"S\"\n: Step-function plots. In the first form, the top of the vertical defines the point; in the second, the bottom.\n\ntype=\"n\"\n\nNo plotting at all. However axes are still drawn (by default) and the coordinate system is set up according to the data. Ideal for creating plots with subsequent low-level graphics functions.\n\n\n\n\nxlab=``string\nylab=``string\n: Axis labels for the x and y axes. Use these arguments to change the default labels, usually the names of the objects used in the call to the high-level plotting function.\n\nmain=``string\n\nFigure title, placed at the top of the plot in a large font.\n\nsub=``string\n\nSub-title, placed just below the x-axis in a smaller font."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-low-level-plotting-commands",
    "href": "content/R/r-manuals/test.html#sec-low-level-plotting-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.2 Low-level plotting commands",
    "text": "12.2 Low-level plotting commands\nSometimes the high-level plotting functions don’t produce exactly the kind of plot you desire. In this case, low-level plotting commands can be used to add extra information (such as points, lines or text) to the current plot.\nSome of the more useful low-level plotting functions are:\npoints(x, y)\nlines(x, y)\n: \nAdds points or connected lines to the current plot. `plot()`'s\n`type=` argument can also be passed to these functions (and defaults\nto `\"p\"` for `points()` and `\"l\"` for `lines()`.)\n\ntext(x, y, labels, …)\n\n\nAdd text to a plot at points given by x, y. Normally labels is an integer or character vector in which case labels[i] is plotted at point (x[i], y[i]). The default is 1:length(x).\nNote: This function is often used in the sequence\n> plot(x, y, type=\"n\"); text(x, y, names)\nThe graphics parameter type=\"n\" suppresses the points but sets up the axes, and the text() function supplies special characters, as specified by the character vector names for the points.\n\n\nabline(a, b)\nabline(h=``y)\nabline(v=``x)\nabline(``lm.obj)\n: \nAdds a line of slope `b` and intercept `a` to the current plot.\n`h=``y`{.variable} may be used to specify *y*-coordinates for the\nheights of horizontal lines to go across a plot, and\n`v=``x`{.variable} similarly for the *x*-coordinates for vertical\nlines. Also `lm.obj`{.variable} may be list with a `coefficients`\ncomponent of length 2 (such as the result of model-fitting\nfunctions,) which are taken as an intercept and slope, in that\norder.\n\npolygon(x, y, …)\n\n\nDraws a polygon defined by the ordered vertices in (x, y) and (optionally) shade it in with hatch lines, or fill it if the graphics device allows the filling of figures.\n\nlegend(x, y, legend, …)\n\n\nAdds a legend to the current plot at the specified position. Plotting characters, line styles, colors etc., are identified with the labels in the character vector legend. At least one other argument v (a vector the same length as legend) with the corresponding values of the plotting unit must also be given, as follows:\n\nlegend( , fill=``v)\n\nColors for filled boxes\n\nlegend( , col=``v)\n\nColors in which points or lines will be drawn\n\nlegend( , lty=``v)\n\nLine styles\n\nlegend( , lwd=``v)\n\nLine widths\n\nlegend( , pch=``v)\n\nPlotting characters (character vector)\n\n\n\ntitle(main, sub)\n\n\nAdds a title main to the top of the current plot in a large font and (optionally) a sub-title sub at the bottom in a smaller font.\n\naxis(side, …)\n\n\nAdds an axis to the current plot on the side given by the first argument (1 to 4, counting clockwise from the bottom.) Other arguments control the positioning of the axis within or beside the plot, and tick positions and labels. Useful for adding custom axes after calling plot() with the axes=FALSE argument.\n\n\nLow-level plotting functions usually require some positioning information (e.g., x and y coordinates) to determine where to place the new plot elements. Coordinates are given in terms of user coordinates which are defined by the previous high-level graphics command and are chosen based on the supplied data.\nWhere x and y arguments are required, it is also sufficient to supply a single argument being a list with elements named x and y. Similarly a matrix with two columns is also valid input. In this way functions such as locator() (see below) may be used to specify positions on a plot interactively.\n\n12.2.1 Mathematical annotation\nIn some cases, it is useful to add mathematical symbols and formulae to a plot. This can be achieved in R by specifying an expression rather than a character string in any one of text, mtext, axis, or title. For example, the following code draws the formula for the Binomial probability function:\n> text(x, y, expression(paste(bgroup(\"(\", atop(n, x), \")\"), p^x, q^{n-x})))\nMore information, including a full listing of the features available can obtained from within R using the commands:\n> help(plotmath)\n> example(plotmath)\n> demo(plotmath)\n\n\n12.2.2 Hershey vector fonts\nIt is possible to specify Hershey vector fonts for rendering text when using the text and contour functions. There are three reasons for using the Hershey fonts:\n\nHershey fonts can produce better output, especially on a computer screen, for rotated and/or small text.\nHershey fonts provide certain symbols that may not be available in the standard fonts. In particular, there are zodiac signs, cartographic symbols and astronomical symbols.\nHershey fonts provide Cyrillic and Japanese (Kana and Kanji) characters.\n\nMore information, including tables of Hershey characters can be obtained from within R using the commands:\n> help(Hershey)\n> demo(Hershey)\n> help(Japanese)\n> demo(Japanese)"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-interacting-with-graphics",
    "href": "content/R/r-manuals/test.html#sec-interacting-with-graphics",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.3 Interacting with graphics",
    "text": "12.3 Interacting with graphics\nR also provides functions which allow users to extract or add information to a plot using a mouse. The simplest of these is the locator() function:\n\nlocator(n, type)\n\n\nWaits for the user to select locations on the current plot using the left mouse button. This continues until n (default 512) points have been selected, or another mouse button is pressed. The type argument allows for plotting at the selected points and has the same effect as for high-level graphics commands; the default is no plotting. locator() returns the locations of the points selected as a list with two components x and y.\n\n\nlocator() is usually called with no arguments. It is particularly useful for interactively selecting positions for graphic elements such as legends or labels when it is difficult to calculate in advance where the graphic should be placed. For example, to place some informative text near an outlying point, the command\n> text(locator(1), \"Outlier\", adj=0)\nmay be useful. (locator() will be ignored if the current device, such as postscript does not support interactive pointing.)\n\nidentify(x, y, labels)\n\n\nAllow the user to highlight any of the points defined by x and y (using the left mouse button) by plotting the corresponding component of labels nearby (or the index number of the point if labels is absent). Returns the indices of the selected points when another button is pressed.\n\n\nSometimes we want to identify particular points on a plot, rather than their positions. For example, we may wish the user to select some observation of interest from a graphical display and then manipulate that observation in some way. Given a number of (x, y) coordinates in two numeric vectors x and y, we could use the identify() function as follows:\n> plot(x, y)\n> identify(x, y)\nThe identify() functions performs no plotting itself, but simply allows the user to move the mouse pointer and click the left mouse button near a point. If there is a point near the mouse pointer it will be marked with its index number (that is, its position in the x/y vectors) plotted nearby. Alternatively, you could use some informative string (such as a case name) as a highlight by using the labels argument to identify(), or disable marking altogether with the plot = FALSE argument. When the process is terminated (see above), identify() returns the indices of the selected points; you can use these indices to extract the selected points from the original vectors x and y."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-using-graphics-parameters",
    "href": "content/R/r-manuals/test.html#sec-using-graphics-parameters",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.4 Using graphics parameters",
    "text": "12.4 Using graphics parameters\nWhen creating graphics, particularly for presentation or publication purposes, R’s defaults do not always produce exactly that which is required. You can, however, customize almost every aspect of the display using graphics parameters. R maintains a list of a large number of graphics parameters which control things such as line style, colors, figure arrangement and text justification among many others. Every graphics parameter has a name (such as col, which controls colors,) and a value (a color number, for example.)\nA separate list of graphics parameters is maintained for each active device, and each device has a default set of parameters when initialized. Graphics parameters can be set in two ways: either permanently, affecting all graphics functions which access the current device; or temporarily, affecting only a single graphics function call.\n\n12.4.1 Permanent changes: The par() function\nThe par() function is used to access and modify the list of graphics parameters for the current graphics device.\n\npar()\n\nWithout arguments, returns a list of all graphics parameters and their values for the current device.\n\npar(c(\"col\", \"lty\"))\n\nWith a character vector argument, returns only the named graphics parameters (again, as a list.)\n\npar(col=4, lty=2)\n\nWith named arguments (or a single list argument), sets the values of the named graphics parameters, and returns the original values of the parameters as a list.\n\n\nSetting graphics parameters with the par() function changes the value of the parameters permanently, in the sense that all future calls to graphics functions (on the current device) will be affected by the new value. You can think of setting graphics parameters in this way as setting “default” values for the parameters, which will be used by all graphics functions unless an alternative value is given.\nNote that calls to par() always affect the global values of graphics parameters, even when par() is called from within a function. This is often undesirable behavior—usually we want to set some graphics parameters, do some plotting, and then restore the original values so as not to affect the user’s R session. You can restore the initial values by saving the result of par() when making changes, and restoring the initial values when plotting is complete.\n> oldpar <- par(col=4, lty=2)\n  … plotting commands …\n> par(oldpar)\nTo save and restore all settable24 graphical parameters use\n> oldpar <- par(no.readonly=TRUE)\n  … plotting commands …\n> par(oldpar)\n\n\n12.4.2 Temporary changes: Arguments to graphics functions\nGraphics parameters may also be passed to (almost) any graphics function as named arguments. This has the same effect as passing the arguments to the par() function, except that the changes only last for the duration of the function call. For example:\n> plot(x, y, pch=\"+\")\nproduces a scatterplot using a plus sign as the plotting character, without changing the default plotting character for future plots.\nUnfortunately, this is not implemented entirely consistently and it is sometimes necessary to set and reset graphics parameters using par()."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-graphics-parameters-list",
    "href": "content/R/r-manuals/test.html#sec-graphics-parameters-list",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.5 Graphics parameters list",
    "text": "12.5 Graphics parameters list\nThe following sections detail many of the commonly-used graphical parameters. The R help documentation for the par() function provides a more concise summary; this is provided as a somewhat more detailed alternative.\nGraphics parameters will be presented in the following form:\n\nname=``value\n\nA description of the parameter’s effect. name is the name of the parameter, that is, the argument name to use in calls to par() or a graphics function. value is a typical value you might use when setting the parameter.\n\n\nNote that axes is not a graphics parameter but an argument to a few plot methods: see xaxt and yaxt.\n\n12.5.1 Graphical elements\nR plots are made up of points, lines, text and polygons (filled regions.) Graphical parameters exist which control how these graphical elements are drawn, as follows:\n\npch=\"+\"\n\nCharacter to be used for plotting points. The default varies with graphics drivers, but it is usually a circle. Plotted points tend to appear slightly above or below the appropriate position unless you use \".\" as the plotting character, which produces centered points.\n\npch=4\n\nWhen pch is given as an integer between 0 and 25 inclusive, a specialized plotting symbol is produced. To see what the symbols are, use the command\n> legend(locator(1), as.character(0:25), pch = 0:25)\nThose from 21 to 25 may appear to duplicate earlier symbols, but can be coloured in different ways: see the help on points and its examples.\nIn addition, pch can be a character or a number in the range 32:255 representing a character in the current font.\n\nlty=2\n\nLine types. Alternative line styles are not supported on all graphics devices (and vary on those that do) but line type 1 is always a solid line, line type 0 is always invisible, and line types 2 and onwards are dotted or dashed lines, or some combination of both.\n\nlwd=2\n\nLine widths. Desired width of lines, in multiples of the “standard” line width. Affects axis lines as well as lines drawn with lines(), etc. Not all devices support this, and some have restrictions on the widths that can be used.\n\ncol=2\n\nColors to be used for points, lines, text, filled regions and images. A number from the current palette (see ?palette) or a named colour.\n\n\ncol.axis\ncol.lab\ncol.main\ncol.sub\n: The color to be used for axis annotation, x and y labels, main and sub-titles, respectively.\n\nfont=2\n\nAn integer which specifies which font to use for text. If possible, device drivers arrange so that 1 corresponds to plain text, 2 to bold face, 3 to italic, 4 to bold italic and 5 to a symbol font (which include Greek letters).\n\n\nfont.axis\nfont.lab\nfont.main\nfont.sub\n: The font to be used for axis annotation, x and y labels, main and sub-titles, respectively.\n\nadj=-0.1\n\nJustification of text relative to the plotting position. 0 means left justify, 1 means right justify and 0.5 means to center horizontally about the plotting position. The actual value is the proportion of text that appears to the left of the plotting position, so a value of -0.1 leaves a gap of 10% of the text width between the text and the plotting position.\n\ncex=1.5\n\nCharacter expansion. The value is the desired size of text characters (including plotting characters) relative to the default text size.\n\n\ncex.axis\ncex.lab\ncex.main\ncex.sub\n: The character expansion to be used for axis annotation, x and y labels, main and sub-titles, respectively.\n\n\n12.5.2 Axes and tick marks\nMany of R’s high-level plots have axes, and you can construct axes yourself with the low-level axis() graphics function. Axes have three main components: the axis line (line style controlled by the lty graphics parameter), the tick marks (which mark off unit divisions along the axis line) and the tick labels (which mark the units.) These components can be customized with the following graphics parameters.\n\nlab=c(5, 7, 12)\n\nThe first two numbers are the desired number of tick intervals on the x and y axes respectively. The third number is the desired length of axis labels, in characters (including the decimal point.) Choosing a too-small value for this parameter may result in all tick labels being rounded to the same number!\n\nlas=1\n\nOrientation of axis labels. 0 means always parallel to axis, 1 means always horizontal, and 2 means always perpendicular to the axis.\n\nmgp=c(3, 1, 0)\n\nPositions of axis components. The first component is the distance from the axis label to the axis position, in text lines. The second component is the distance to the tick labels, and the final component is the distance from the axis position to the axis line (usually zero). Positive numbers measure outside the plot region, negative numbers inside.\n\ntck=0.01\n\nLength of tick marks, as a fraction of the size of the plotting region. When tck is small (less than 0.5) the tick marks on the x and y axes are forced to be the same size. A value of 1 gives grid lines. Negative values give tick marks outside the plotting region. Use tck=0.01 and mgp=c(1,-1.5,0) for internal tick marks.\n\n\nxaxs=\"r\"\nyaxs=\"i\"\n: Axis styles for the x and y axes, respectively. With styles \"i\" (internal) and \"r\" (the default) tick marks always fall within the range of the data, however style \"r\" leaves a small amount of space at the edges.\n\n\n12.5.3 Figure margins\nA single plot in R is known as a figure and comprises a plot region surrounded by margins (possibly containing axis labels, titles, etc.) and (usually) bounded by the axes themselves.\nA typical figure is\n\n\n\nimages/fig11\n\n\nGraphics parameters controlling figure layout include:\n\nmai=c(1, 0.5, 0.5, 0)\n\nWidths of the bottom, left, top and right margins, respectively, measured in inches.\n\nmar=c(4, 2, 2, 1)\n\nSimilar to mai, except the measurement unit is text lines.\n\n\nmar and mai are equivalent in the sense that setting one changes the value of the other. The default values chosen for this parameter are often too large; the right-hand margin is rarely needed, and neither is the top margin if no title is being used. The bottom and left margins must be large enough to accommodate the axis and tick labels. Furthermore, the default is chosen without regard to the size of the device surface: for example, using the postscript() driver with the height=4 argument will result in a plot which is about 50% margin unless mar or mai are set explicitly. When multiple figures are in use (see below) the margins are reduced, however this may not be enough when many figures share the same page.\n\n\n12.5.4 Multiple figure environment\nR allows you to create an n by m array of figures on a single page. Each figure has its own margins, and the array of figures is optionally surrounded by an outer margin, as shown in the following figure.\n\n\n\nimages/fig12\n\n\nThe graphical parameters relating to multiple figures are as follows:\nmfcol=c(3, 2)\nmfrow=c(2, 4)\n: Set the size of a multiple figure array. The first value is the number of rows; the second is the number of columns. The only difference between these two parameters is that setting mfcol causes figures to be filled by column; mfrow fills by rows.\nThe layout in the Figure could have been created by setting\n`mfrow=c(3,2)`; the figure shows the page after four plots have been\ndrawn.\n\nSetting either of these can reduce the base size of symbols and text\n(controlled by `par(\"cex\")` and the pointsize of the device). In a\nlayout with exactly two rows and columns the base size is reduced by\na factor of 0.83: if there are three or more of either rows or\ncolumns, the reduction factor is 0.66.\n\nmfg=c(2, 2, 3, 2)\n\nPosition of the current figure in a multiple figure environment. The first two numbers are the row and column of the current figure; the last two are the number of rows and columns in the multiple figure array. Set this parameter to jump between figures in the array. You can even use different values for the last two numbers than the true values for unequally-sized figures on the same page.\n\nfig=c(4, 9, 1, 4)/10\n\nPosition of the current figure on the page. Values are the positions of the left, right, bottom and top edges respectively, as a percentage of the page measured from the bottom left corner. The example value would be for a figure in the bottom right of the page. Set this parameter for arbitrary positioning of figures within a page. If you want to add a figure to a current page, use new=TRUE as well (unlike S).\n\n\noma=c(2, 0, 3, 0)\nomi=c(0, 0, 0.8, 0)\n: Size of outer margins. Like mar and mai, the first measures in text lines and the second in inches, starting with the bottom margin and working clockwise.\nOuter margins are particularly useful for page-wise titles, etc. Text can be added to the outer margins with the mtext() function with argument outer=TRUE. There are no outer margins by default, however, so you must create them explicitly using oma or omi.\nMore complicated arrangements of multiple figures can be produced by the split.screen() and layout() functions, as well as by the grid and lattice packages."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-device-drivers",
    "href": "content/R/r-manuals/test.html#sec-device-drivers",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.6 Device drivers",
    "text": "12.6 Device drivers\nR can generate graphics (of varying levels of quality) on almost any type of display or printing device. Before this can begin, however, R needs to be informed what type of device it is dealing with. This is done by starting a device driver. The purpose of a device driver is to convert graphical instructions from R (“draw a line,” for example) into a form that the particular device can understand.\nDevice drivers are started by calling a device driver function. There is one such function for every device driver: type help(Devices) for a list of them all. For example, issuing the command\n> postscript()\ncauses all future graphics output to be sent to the printer in PostScript format. Some commonly-used device drivers are:\n\nX11()\n\n\nFor use with the X11 window system on Unix-alikes\n\nwindows()\n\n\nFor use on Windows\n\nquartz()\n\n\nFor use on macOS\n\npostscript()\n\n\nFor printing on PostScript printers, or creating PostScript graphics files.\n\npdf()\n\n\nProduces a PDF file, which can also be included into PDF files.\n\npng()\n\n\nProduces a bitmap PNG file. (Not always available: see its help page.)\n\njpeg()\n\n\nProduces a bitmap JPEG file, best used for image plots. (Not always available: see its help page.)\n\n\nWhen you have finished with a device, be sure to terminate the device driver by issuing the command\n> dev.off()\nThis ensures that the device finishes cleanly; for example in the case of hardcopy devices this ensures that every page is completed and has been sent to the printer. (This will happen automatically at the normal end of a session.)\n\n12.6.1 PostScript diagrams for typeset documents\nBy passing the file argument to the postscript() device driver function, you may store the graphics in PostScript format in a file of your choice. The plot will be in landscape orientation unless the horizontal=FALSE argument is given, and you can control the size of the graphic with the width and height arguments (the plot will be scaled as appropriate to fit these dimensions.) For example, the command\n> postscript(\"file.ps\", horizontal=FALSE, height=5, pointsize=10)\nwill produce a file containing PostScript code for a figure five inches high, perhaps for inclusion in a document. It is important to note that if the file named in the command already exists, it will be overwritten. This is the case even if the file was only created earlier in the same R session.\nMany usages of PostScript output will be to incorporate the figure in another document. This works best when encapsulated PostScript is produced: R always produces conformant output, but only marks the output as such when the onefile=FALSE argument is supplied. This unusual notation stems from S-compatibility: it really means that the output will be a single page (which is part of the EPSF specification). Thus to produce a plot for inclusion use something like\n> postscript(\"plot1.eps\", horizontal=FALSE, onefile=FALSE,\n             height=8, width=6, pointsize=10)\n\n\n12.6.2 Multiple graphics devices\nIn advanced use of R it is often useful to have several graphics devices in use at the same time. Of course only one graphics device can accept graphics commands at any one time, and this is known as the current device. When multiple devices are open, they form a numbered sequence with names giving the kind of device at any position.\nThe main commands used for operating with multiple devices, and their meanings are as follows:\n\nX11()\n\n[UNIX]\n\n\nwindows()\nwin.printer()\nwin.metafile()\n: [Windows]\n\nquartz()\n\n[macOS]\n\n\npostscript()\npdf()\npng()\njpeg()\ntiff()\nbitmap()\n…\n: Each new call to a device driver function opens a new graphics device, thus extending by one the device list. This device becomes the current device, to which graphics output will be sent.\n\ndev.list()\n\n\nReturns the number and name of all active devices. The device at position 1 on the list is always the null device which does not accept graphics commands at all.\n\n\ndev.next()\ndev.prev()\n: \nReturns the number and name of the graphics device next to, or\nprevious to the current device, respectively.\n\ndev.set(which=``k)\n\n\nCan be used to change the current graphics device to the one at position k of the device list. Returns the number and label of the device.\n\ndev.off(``k)\n\n\nTerminate the graphics device at point k of the device list. For some devices, such as postscript devices, this will either print the file immediately or correctly complete the file for later printing, depending on how the device was initiated.\n\n\ndev.copy(device, …, which=``k)\ndev.print(device, …, which=``k)\n: Make a copy of the device k. Here device is a device function, such as postscript, with extra arguments, if needed, specified by ‘…’. dev.print is similar, but the copied device is immediately closed, so that end actions, such as printing hardcopies, are immediately performed.\n\ngraphics.off()\n\nTerminate all graphics devices on the list, except the null device."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-dynamic-graphics",
    "href": "content/R/r-manuals/test.html#sec-dynamic-graphics",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.7 Dynamic graphics",
    "text": "12.7 Dynamic graphics\nR does not have builtin capabilities for dynamic or interactive graphics, e.g. rotating point clouds or to “brushing” (interactively highlighting) points. However, extensive dynamic graphics facilities are available in the system GGobi by Swayne, Cook and Buja available from\n\nhttp://ggobi.org/\n\nand these can be accessed from R via the package rggobi, described at http://ggobi.org/rggobi.html.\nAlso, package rgl provides ways to interact with 3D plots, for example of surfaces."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-standard-packages",
    "href": "content/R/r-manuals/test.html#sec-standard-packages",
    "title": "R Manuals :: An Introduction to R",
    "section": "13.1 Standard packages",
    "text": "13.1 Standard packages\nThe standard (or base) packages are considered part of the R source code. They contain the basic functions that allow R to work, and the datasets and standard statistical and graphical functions that are described in this manual. They should be automatically available in any R installation. See R packages in R FAQ, for a complete list."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-contributed-packages-and-cran",
    "href": "content/R/r-manuals/test.html#sec-contributed-packages-and-cran",
    "title": "R Manuals :: An Introduction to R",
    "section": "13.2 Contributed packages and CRAN",
    "text": "13.2 Contributed packages and CRAN\nThere are thousands of contributed packages for R, written by many different authors. Some of these packages implement specialized statistical methods, others give access to data or hardware, and others are designed to complement textbooks. Some (the recommended packages) are distributed with every binary distribution of R. Most are available for download from CRAN (https://CRAN.R-project.org/ and its mirrors) and other repositories such as Bioconductor (https://www.bioconductor.org/). The R FAQ contains a list of CRAN packages current at the time of release, but the collection of available packages changes very frequently."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-namespaces",
    "href": "content/R/r-manuals/test.html#sec-namespaces",
    "title": "R Manuals :: An Introduction to R",
    "section": "13.3 Namespaces",
    "text": "13.3 Namespaces\nPackages have namespaces, which do three things: they allow the package writer to hide functions and data that are meant only for internal use, they prevent functions from breaking when a user (or other package writer) picks a name that clashes with one in the package, and they provide a way to refer to an object within a particular package.\nFor example, t() is the transpose function in R, but users might define their own function named t. Namespaces prevent the user’s definition from taking precedence, and breaking every function that tries to transpose a matrix.\nThere are two operators that work with namespaces. The double-colon operator :: selects definitions from a particular namespace. In the example above, the transpose function will always be available as base::t, because it is defined in the base package. Only functions that are exported from the package can be retrieved in this way.\nThe triple-colon operator ::: may be seen in a few places in R code: it acts like the double-colon operator but also allows access to hidden objects. Users are more likely to use the getAnywhere() function, which searches multiple packages.\nPackages are often inter-dependent, and loading one may cause others to be automatically loaded. The colon operators described above will also cause automatic loading of the associated package. When packages with namespaces are loaded automatically they are not added to the search list."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-files-and-directories",
    "href": "content/R/r-manuals/test.html#sec-files-and-directories",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.1 Files and directories",
    "text": "14.1 Files and directories\nThere are many functions to manipulate files and directories. Here are pointers to some of the more commonly used ones.\nTo create an (empty) file or directory, use file.create or dir.create. (These are the analogues of the POSIX utilities touch and mkdir.) For temporary files and directories in the R session directory see tempfile.\nFiles can be removed by either file.remove or unlink: the latter can remove directory trees.\nFor directory listings use list.files (also available as dir) or list.dirs. These can select files using a regular expression: to select by wildcards use Sys.glob.\nMany types of information on a filepath (including for example if it is a file or directory) can be found by file.info.\nThere are several ways to find out if a file ‘exists’ (a file can exist on the filesystem and not be visible to the current user). There are functions file.exists, file.access and file_test with various versions of this test: file_test is a version of the POSIX test command for those familiar with shell scripting.\nFunction file.copy is the R analogue of the POSIX command cp.\nChoosing files can be done interactively by file.choose: the Windows port has the more versatile functions choose.files and choose.dir and there are similar functions in the tcltk package: tk_choose.files and tk_choose.dir.\nFunctions file.show and file.edit will display and edit one or more files in a way appropriate to the R port, using the facilities of a console (such as RGui on Windows or R.app on macOS) if one is in use.\nThere is some support for links in the filesystem: see functions file.link and Sys.readlink."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-filepaths",
    "href": "content/R/r-manuals/test.html#sec-filepaths",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.2 Filepaths",
    "text": "14.2 Filepaths\nWith a few exceptions, R relies on the underlying OS functions to manipulate filepaths. Some aspects of this are allowed to depend on the OS, and do, even down to the version of the OS. There are POSIX standards for how OSes should interpret filepaths and many R users assume POSIX compliance: but Windows does not claim to be compliant and other OSes may be less than completely compliant.\nThe following are some issues which have been encountered with filepaths.\n\nPOSIX filesystems are case-sensitive, so foo.png and Foo.PNG are different files. However, the defaults on Windows and macOS are to be case-insensitive, and FAT filesystems (commonly used on removable storage) are not normally case-sensitive (and all filepaths may be mapped to lower case).\nAlmost all the Windows’ OS services support the use of slash or backslash as the filepath separator, and R converts the known exceptions to the form required by Windows.\nThe behaviour of filepaths with a trailing slash is OS-dependent. Such paths are not valid on Windows and should not be expected to work. POSIX-2008 requires such paths to match only directories, but earlier versions allowed them to also match files. So they are best avoided.\nMultiple slashes in filepaths such as /abc//def are valid on POSIX filesystems and treated as if there was only one slash. They are usually accepted by Windows’ OS functions. However, leading double slashes may have a different meaning.\nWindows’ UNC filepaths (such as \\\\server\\dir1\\dir2\\file and \\\\?\\UNC\\server\\dir1\\dir2\\file) are not supported, but they may work in some R functions. POSIX filesystems are allowed to treat a leading double slash specially.\nWindows allows filepaths containing drives and relative to the current directory on a drive, e.g. d:foo/bar refers to d:/a/b/c/foo/bar if the current directory on drive d: is /a/b/c. It is intended that these work, but the use of absolute paths is safer.\n\nFunctions basename and dirname select parts of a file path: the recommended way to assemble a file path from components is file.path. Function pathexpand does ‘tilde expansion’, substituting values for home directories (the current user’s, and perhaps those of other users).\nOn filesystems with links, a single file can be referred to by many filepaths. Function normalizePath will find a canonical filepath.\nWindows has the concepts of short (‘8.3’) and long file names: normalizePath will return an absolute path using long file names and shortPathName will return a version using short names. The latter does not contain spaces and uses backslash as the separator, so is sometimes useful for exporting names from R.\nFile permissions are a related topic. R has support for the POSIX concepts of read/write/execute permission for owner/group/all but this may be only partially supported on the filesystem, so for example on Windows only read-only files (for the account running the R session) are recognized. Access Control Lists (ACLs) are employed on several filesystems, but do not have an agreed standard and R has no facilities to control them. Use Sys.chmod to change permissions."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-system-commands",
    "href": "content/R/r-manuals/test.html#sec-system-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.3 System commands",
    "text": "14.3 System commands\nFunctions system and system2 are used to invoke a system command and optionally collect its output. system2 is a little more general but its main advantage is that it is easier to write cross-platform code using it.\nsystem behaves differently on Windows from other OSes (because the API C call of that name does). Elsewhere it invokes a shell to run the command: the Windows port of R has a function shell to do that.\nTo find out if the OS includes a command, use Sys.which, which attempts to do this in a cross-platform way (unfortunately it is not a standard OS service).\nFunction shQuote will quote filepaths as needed for commands in the current OS."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-compression-and-archives",
    "href": "content/R/r-manuals/test.html#sec-compression-and-archives",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.4 Compression and Archives",
    "text": "14.4 Compression and Archives\nRecent versions of R have extensive facilities to read and write compressed files, often transparently. Reading of files in R is to a very large extent done by connections, and the file function which is used to open a connection to a file (or a URL) and is able to identify the compression used from the ‘magic’ header of the file.\nThe type of compression which has been supported for longest is gzip compression, and that remains a good general compromise. Files compressed by the earlier Unix compress utility can also be read, but these are becoming rare. Two other forms of compression, those of the bzip2 and xz utilities are also available. These generally achieve higher rates of compression (depending on the file, much higher) at the expense of slower decompression and much slower compression.\nThere is some confusion between xz and lzma compression (see https://en.wikipedia.org/wiki/Xz and https://en.wikipedia.org/wiki/LZMA): R can read files compressed by most versions of either.\nFile archives are single files which contain a collection of files, the most common ones being ‘tarballs’ and zip files as used to distribute R packages. R can list and unpack both (see functions untar and unzip) and create both (for zip with the help of an external program)."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-b.1-invoking-r-from-the-command-line",
    "href": "content/R/r-manuals/test.html#sec-b.1-invoking-r-from-the-command-line",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.5 B.1 Invoking R from the command line",
    "text": "14.5 B.1 Invoking R from the command line\nWhen working at a command line on UNIX or Windows, the command ‘R’ can be used both for starting the main R program in the form\n\nR [options] [<infile] [>outfile],\n\nor, via the R CMD interface, as a wrapper to various R tools (e.g., for processing files in R documentation format or manipulating add-on packages) which are not intended to be called “directly”.\nAt the Windows command-line, Rterm.exe is preferred to R.\nYou need to ensure that either the environment variable TMPDIR is unset or it points to a valid place to create temporary files and directories.\nMost options control what happens at the beginning and at the end of an R session. The startup mechanism is as follows (see also the on-line help for topic ‘Startup’ for more information, and the section below for some Windows-specific details).\n\nUnless --no-environ was given, R searches for user and site files to process for setting environment variables. The name of the site file is the one pointed to by the environment variable R_ENVIRON; if this is unset, R_HOME/etc/Renviron.site is used (if it exists). The user file is the one pointed to by the environment variable R_ENVIRON_USER if this is set; otherwise, files .Renviron in the current or in the user’s home directory (in that order) are searched for. These files should contain lines of the form ‘name=``value’. (See help(\"Startup\") for a precise description.) Variables you might want to set include R_PAPERSIZE (the default paper size), R_PRINTCMD (the default print command) and R_LIBS (specifies the list of R library trees searched for add-on packages).\nThen R searches for the site-wide startup profile unless the command line option --no-site-file was given. The name of this file is taken from the value of the R_PROFILE environment variable. If that variable is unset, the default R_HOME/etc/Rprofile.site is used if this exists.\nThen, unless --no-init-file was given, R searches for a user profile and sources it. The name of this file is taken from the environment variable R_PROFILE_USER; if unset, a file called .Rprofile in the current directory or in the user’s home directory (in that order) is searched for.\nIt also loads a saved workspace from file .RData in the current directory if there is one (unless --no-restore or --no-restore-data was specified).\nFinally, if a function .First() exists, it is executed. This function (as well as .Last() which is executed at the end of the R session) can be defined in the appropriate startup profiles, or reside in .RData.\n\nIn addition, there are options for controlling the memory available to the R process (see the on-line help for topic ‘Memory’ for more information). Users will not normally need to use these unless they are trying to limit the amount of memory used by R.\nR accepts the following command-line options.\n--help\n-h\n: Print short help message to standard output and exit successfully.\n\n--version\n\nPrint version information to standard output and exit successfully.\n\n--encoding=``enc\n\nSpecify the encoding to be assumed for input from the console or stdin. This needs to be an encoding known to iconv: see its help page. (--encoding ``enc is also accepted.) The input is re-encoded to the locale R is running in and needs to be representable in the latter’s encoding (so e.g. you cannot re-encode Greek text in a French locale unless that locale uses the UTF-8 encoding).\n\nRHOME\n\nPrint the path to the R “home directory” to standard output and exit successfully. Apart from the front-end shell script and the man page, R installation puts everything (executables, packages, etc.) into this directory.\n\n\n--save\n--no-save\n: Control whether data sets should be saved or not at the end of the R session. If neither is given in an interactive session, the user is asked for the desired behavior when ending the session with q(); in non-interactive use one of these must be specified or implied by some other option (see below).\n\n--no-environ\n\nDo not read any user file to set environment variables.\n\n--no-site-file\n\nDo not read the site-wide profile at startup.\n\n--no-init-file\n\nDo not read the user’s profile at startup.\n\n\n--restore\n--no-restore\n--no-restore-data\n: Control whether saved images (file .RData in the directory where R was started) should be restored at startup or not. The default is to restore. (--no-restore implies all the specific --no-restore-* options.)\n\n--no-restore-history\n\nControl whether the history file (normally file .Rhistory in the directory where R was started, but can be set by the environment variable R_HISTFILE) should be restored at startup or not. The default is to restore.\n\n--no-Rconsole\n\n(Windows only) Prevent loading the Rconsole file at startup.\n\n--vanilla\n\nCombine --no-save, --no-environ, --no-site-file, --no-init-file and --no-restore. Under Windows, this also includes --no-Rconsole.\n\n\n-f ``file\n--file=``file\n: (not Rgui.exe) Take input from file: ‘-’ means stdin. Implies --no-save unless --save has been set. On a Unix-alike, shell metacharacters should be avoided in file (but spaces are allowed).\n\n-e ``expression\n\n(not Rgui.exe) Use expression as an input line. One or more -e options can be used, but not together with -f or --file. Implies --no-save unless --save has been set. (There is a limit of 10,000 bytes on the total length of expressions used in this way. Expressions containing spaces or shell metacharacters will need to be quoted.)\n\n--no-readline\n\n(UNIX only) Turn off command-line editing via readline. This is useful when running R from within Emacs using the ESS (“Emacs Speaks Statistics”) package. See Section 17 , for more information. Command-line editing is enabled for default interactive use (see --interactive). This option also affects tilde-expansion: see the help for path.expand.\n\n\n--min-vsize=``N\n--min-nsize=``N\n: For expert use only: set the initial trigger sizes for garbage collection of vector heap (in bytes) and cons cells (number) respectively. Suffix ‘M’ specifies megabytes or millions of cells respectively. The defaults are 6Mb and 350k respectively and can also be set by environment variables R_NSIZE and R_VSIZE.\n\n--max-ppsize=``N\n\nSpecify the maximum size of the pointer protection stack as N locations. This defaults to 10000, but can be increased to allow large and complicated calculations to be done. Currently the maximum value accepted is 100000.\n\n\n--quiet\n--silent\n-q\n: Do not print out the initial copyright and welcome messages.\n\n--no-echo\n\nMake R run as quietly as possible. This option is intended to support programs which use R to compute results for them. It implies --quiet and --no-save.\n\n--interactive\n\n(UNIX only) Assert that R really is being run interactively even if input has been redirected: use if input is from a FIFO or pipe and fed from an interactive program. (The default is to deduce that R is being run interactively if and only if stdin is connected to a terminal or pty.) Using -e, -f or --file asserts non-interactive use even if --interactive is given.\nNote that this does not turn on command-line editing.\n\n--ess\n\n(Windows only) Set Rterm up for use by R-inferior-mode in ESS, including asserting interactive use (without the command-line editor) and no buffering of stdout.\n\n--verbose\n\nPrint more information about progress, and in particular set R’s option verbose to TRUE. R code uses this option to control the printing of diagnostic messages.\n\n\n--debugger=``name\n-d ``name\n: (UNIX only) Run R through debugger name. For most debuggers (the exceptions are valgrind and recent versions of gdb), further command line options are disregarded, and should instead be given when starting the R executable from inside the debugger.\n--gui=``type\n-g ``type\n: (UNIX only) Use type as graphical user interface (note that this also includes interactive graphics). Currently, possible values for type are ‘X11’ (the default) and, provided that ‘Tcl/Tk’ support is available, ‘Tk’. (For back-compatibility, ‘x11’ and ‘tk’ are accepted.)\n\n--arch=``name\n\n(UNIX only) Run the specified sub-architecture.\n\n--args\n\nThis flag does nothing except cause the rest of the command line to be skipped: this can be useful to retrieve values from it with commandArgs(TRUE).\n\n\nNote that input and output can be redirected in the usual way (using ‘<’ and ‘>’), but the line length limit of 4095 bytes still applies. Warning and error messages are sent to the error channel (stderr).\nThe command R CMD allows the invocation of various tools which are useful in conjunction with R, but not intended to be called “directly”. The general form is\nR CMD command args\nwhere command is the name of the tool and args the arguments passed on to it.\nCurrently, the following tools are available.\n\nBATCH\n\nRun R in batch mode. Runs R --restore --save with possibly further options (see ?BATCH).\n\nCOMPILE\n\n(UNIX only) Compile C, C++, Fortran … files for use with R.\n\nSHLIB\n\nBuild shared library for dynamic loading.\n\nINSTALL\n\nInstall add-on packages.\n\nREMOVE\n\nRemove add-on packages.\n\nbuild\n\nBuild (that is, package) add-on packages.\n\ncheck\n\nCheck add-on packages.\n\nLINK\n\n(UNIX only) Front-end for creating executable programs.\n\nRprof\n\nPost-process R profiling files.\n\n\nRdconv\nRd2txt\n: Convert Rd format to various other formats, including HTML, LaTeX, plain text, and extracting the examples. Rd2txt can be used as shorthand for Rd2conv -t txt.\n\nRd2pdf\n\nConvert Rd format to PDF.\n\nStangle\n\nExtract S/R code from Sweave or other vignette documentation\n\nSweave\n\nProcess Sweave or other vignette documentation\n\nRdiff\n\nDiff R output ignoring headers etc\n\nconfig\n\nObtain configuration information\n\njavareconf\n\n(Unix only) Update the Java configuration variables\n\nrtags\n\n(Unix only) Create Emacs-style tag files from C, R, and Rd files\n\nopen\n\n(Windows only) Open a file via Windows’ file associations\n\ntexify\n\n(Windows only) Process (La)TeX files with R’s style files\n\n\nUse\nR CMD command --help\nto obtain usage information for each of the tools accessible via the R CMD interface.\nIn addition, you can use options --arch=, --no-environ, --no-init-file, --no-site-file and --vanilla between R and CMD: these affect any R processes run by the tools. (Here --vanilla is equivalent to --no-environ --no-site-file --no-init-file.) However, note that R CMD does not of itself use any R startup files (in particular, neither user nor site Renviron files), and all of the R processes run by these tools (except BATCH) use --no-restore. Most use --vanilla and so invoke no R startup files: the current exceptions are INSTALL, REMOVE, Sweave and SHLIB (which uses --no-site-file --no-init-file).\nR CMD cmd args\nfor any other executable cmd on the path or given by an absolute filepath: this is useful to have the same environment as R or the specific commands run under, for example to run ldd or pdflatex. Under Windows cmd can be an executable or a batch file, or if it has extension .sh or .pl the appropriate interpreter (if available) is called to run it."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-b.2-invoking-r-under-windows",
    "href": "content/R/r-manuals/test.html#sec-b.2-invoking-r-under-windows",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.6 B.2 Invoking R under Windows",
    "text": "14.6 B.2 Invoking R under Windows\nThere are two ways to run R under Windows. Within a terminal window (e.g. cmd.exe or a more capable shell), the methods described in the previous section may be used, invoking by R.exe or more directly by Rterm.exe. For interactive use, there is a console-based GUI (Rgui.exe).\nThe startup procedure under Windows is very similar to that under UNIX, but references to the ‘home directory’ need to be clarified, as this is not always defined on Windows. If the environment variable R_USER is defined, that gives the home directory. Next, if the environment variable HOME is defined, that gives the home directory. After those two user-controllable settings, R tries to find system defined home directories. It first tries to use the Windows \"personal\" directory (typically My Documents in recent versions of Windows). If that fails, and environment variables HOMEDRIVE and HOMEPATH are defined (and they normally are) these define the home directory. Failing all those, the home directory is taken to be the starting directory.\nYou need to ensure that either the environment variables TMPDIR, TMP and TEMP are either unset or one of them points to a valid place to create temporary files and directories.\nEnvironment variables can be supplied as ‘name=``value’ pairs on the command line.\nIf there is an argument ending .RData (in any case) it is interpreted as the path to the workspace to be restored: it implies --restore and sets the working directory to the parent of the named file. (This mechanism is used for drag-and-drop and file association with RGui.exe, but also works for Rterm.exe. If the named file does not exist it sets the working directory if the parent directory exists.)\nThe following additional command-line options are available when invoking RGui.exe.\n--mdi\n--sdi\n--no-mdi\n: Control whether Rgui will operate as an MDI program (with multiple child windows within one main window) or an SDI application (with multiple top-level windows for the console, graphics and pager). The command-line setting overrides the setting in the user’s Rconsole file.\n\n--debug\n\nEnable the “Break to debugger” menu item in Rgui, and trigger a break to the debugger during command line processing.\n\n\nUnder Windows with R CMD you may also specify your own .bat, .exe, .sh or .pl file. It will be run under the appropriate interpreter (Perl for .pl) with several environment variables set appropriately, including R_HOME, R_OSTYPE, PATH, BSTINPUTS and TEXINPUTS. For example, if you already have latex.exe on your path, then\nR CMD latex.exe mydoc\nwill run LaTeX on mydoc.tex, with the path to R’s share/texmf macros appended to TEXINPUTS. (Unfortunately, this does not help with the MiKTeX build of LaTeX, but R CMD texify mydoc will work in that case.)"
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-b.3-invoking-r-under-macos",
    "href": "content/R/r-manuals/test.html#sec-b.3-invoking-r-under-macos",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.7 B.3 Invoking R under macOS",
    "text": "14.7 B.3 Invoking R under macOS\nThere are two ways to run R under macOS. Within a Terminal.app window by invoking R, the methods described in the first subsection apply. There is also console-based GUI (R.app) that by default is installed in the Applications folder on your system. It is a standard double-clickable macOS application.\nThe startup procedure under macOS is very similar to that under UNIX, but R.app does not make use of command-line arguments. The ‘home directory’ is the one inside the R.framework, but the startup and current working directory are set as the user’s home directory unless a different startup directory is given in the Preferences window accessible from within the GUI."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-b.4-scripting-with-r",
    "href": "content/R/r-manuals/test.html#sec-b.4-scripting-with-r",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.8 B.4 Scripting with R",
    "text": "14.8 B.4 Scripting with R\nIf you just want to run a file foo.R of R commands, the recommended way is to use R CMD BATCH foo.R. If you want to run this in the background or as a batch job use OS-specific facilities to do so: for example in most shells on Unix-alike OSes R CMD BATCH foo.R & runs a background job.\nYou can pass parameters to scripts via additional arguments on the command line: for example (where the exact quoting needed will depend on the shell in use)\nR CMD BATCH \"--args arg1 arg2\" foo.R &\nwill pass arguments to a script which can be retrieved as a character vector by\nargs <- commandArgs(TRUE)\nThis is made simpler by the alternative front-end Rscript, which can be invoked by\nRscript foo.R arg1 arg2\nand this can also be used to write executable script files like (at least on Unix-alikes, and in some Windows shells)\n#! /path/to/Rscript\nargs <- commandArgs(TRUE)\n...\nq(status=<exit status code>)\nIf this is entered into a text file runfoo and this is made executable (by chmod 755 runfoo), it can be invoked for different arguments by\nrunfoo arg1 arg2\nFor further options see help(\"Rscript\"). This writes R output to stdout and stderr, and this can be redirected in the usual way for the shell running the command.\nIf you do not wish to hardcode the path to Rscript but have it in your path (which is normally the case for an installed R except on Windows, but e.g. macOS users may need to add /usr/local/bin to their path), use\n#! /usr/bin/env Rscript\n...\nAt least in Bourne and bash shells, the #! mechanism does not allow extra arguments like #! /usr/bin/env Rscript --vanilla.\nOne thing to consider is what stdin() refers to. It is commonplace to write R scripts with segments like\nchem <- scan(n=24)\n2.90 3.10 3.40 3.40 3.70 3.70 2.80 2.50 2.40 2.40 2.70 2.20\n5.28 3.37 3.03 3.03 28.95 3.77 3.40 2.20 3.50 3.60 3.70 3.70\nand stdin() refers to the script file to allow such traditional usage. If you want to refer to the process’s stdin, use \"stdin\" as a file connection, e.g. scan(\"stdin\", ...).\nAnother way to write executable script files (suggested by François Pinard) is to use a here document like\n#!/bin/sh\n[environment variables can be set here]\nR --no-echo [other options] <<EOF\n\n   R program goes here...\n\nEOF\nbut here stdin() refers to the program source and \"stdin\" will not be usable.\nShort scripts can be passed to Rscript on the command-line via the -e flag. (Empty scripts are not accepted.)\nNote that on a Unix-alike the input filename (such as foo.R) should not contain spaces nor shell metacharacters."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-c.1-preliminaries",
    "href": "content/R/r-manuals/test.html#sec-c.1-preliminaries",
    "title": "R Manuals :: An Introduction to R",
    "section": "17.1 Preliminaries",
    "text": "17.1 Preliminaries\nWhen the GNU readline library is available at the time R is configured for compilation under UNIX, an inbuilt command line editor allowing recall, editing and re-submission of prior commands is used. Note that other versions of readline exist and may be used by the inbuilt command line editor: this is most common on macOS. You can find out which version (if any) is available by running extSoftVersion() in an R session.\nIt can be disabled (useful for usage with ESS 25) using the startup option --no-readline.\nWindows versions of R have somewhat simpler command-line editing: see ‘Console’ under the ‘Help’ menu of the GUI, and the file README.Rterm for command-line editing under Rterm.exe.\nWhen using R with GNU26 readline capabilities, the functions described below are available, as well as others (probably) documented in man readline or info readline on your system.\nMany of these use either Control or Meta characters. Control characters, such as Control-m, are obtained by holding the CTRL down while you press the m key, and are written as C-m below. Meta characters, such as Meta-b, are typed by holding down META27 and pressing b, and written as M-b in the following. If your terminal does not have a META key enabled, you can still type Meta characters using two-character sequences starting with ESC. Thus, to enter M-b, you could type ESCb. The ESC character sequences are also allowed on terminals with real Meta keys. Note that case is significant for Meta characters.\nSome but not all versions28 of readline will recognize resizing of the terminal window so this is best avoided."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-c.2-editing-actions",
    "href": "content/R/r-manuals/test.html#sec-c.2-editing-actions",
    "title": "R Manuals :: An Introduction to R",
    "section": "17.2 Editing actions",
    "text": "17.2 Editing actions\nThe R program keeps a history of the command lines you type, including the erroneous lines, and commands in your history may be recalled, changed if necessary, and re-submitted as new commands. In Emacs-style command-line editing any straight typing you do while in this editing phase causes the characters to be inserted in the command you are editing, displacing any characters to the right of the cursor. In vi mode character insertion mode is started by M-i or M-a, characters are typed and insertion mode is finished by typing a further ESC. (The default is Emacs-style, and only that is described here: for vi mode see the readline documentation.)\nPressing the RET command at any time causes the command to be re-submitted.\nOther editing actions are summarized in the following table."
  },
  {
    "objectID": "content/R/r-manuals/test.html#sec-c.3-command-line-editor-summary",
    "href": "content/R/r-manuals/test.html#sec-c.3-command-line-editor-summary",
    "title": "R Manuals :: An Introduction to R",
    "section": "17.3 Command-line editor summary",
    "text": "17.3 Command-line editor summary\n\n17.3.1 Command recall and vertical motion\n\nC-p\n\nGo to the previous command (backwards in the history).\n\nC-n\n\nGo to the next command (forwards in the history).\n\nC-r text\n\nFind the last command with the text string in it. This can be cancelled by C-g (and on some versions of R by C-c).\n\n\nOn most terminals, you can also use the up and down arrow keys instead of C-p and C-n, respectively.\n\n\n17.3.2 Horizontal motion of the cursor\n\nC-a\n\nGo to the beginning of the command.\n\nC-e\n\nGo to the end of the line.\n\nM-b\n\nGo back one word.\n\nM-f\n\nGo forward one word.\n\nC-b\n\nGo back one character.\n\nC-f\n\nGo forward one character.\n\n\nOn most terminals, you can also use the left and right arrow keys instead of C-b and C-f, respectively.\n\n\n17.3.3 Editing and re-submission\n\ntext\n\nInsert text at the cursor.\n\nC-f text\n\nAppend text after the cursor.\n\nDEL\n\nDelete the previous character (left of the cursor).\n\nC-d\n\nDelete the character under the cursor.\n\nM-d\n\nDelete the rest of the word under the cursor, and “save” it.\n\nC-k\n\nDelete from cursor to end of command, and “save” it.\n\nC-y\n\nInsert (yank) the last “saved” text here.\n\nC-t\n\nTranspose the character under the cursor with the next.\n\nM-l\n\nChange the rest of the word to lower case.\n\nM-c\n\nChange the rest of the word to upper case.\n\nRET\n\nRe-submit the command to R.\n\n\nThe final RET terminates the command line editing sequence.\nThe readline key bindings can be customized in the usual way via a ~/.inputrc file. These customizations can be conditioned on application R, that is by including a section like\n$if R\n  \"\\C-xd\": \"q('no')\\n\"\n$endif"
  },
  {
    "objectID": "content/python/01-eval-background-theory.html",
    "href": "content/python/01-eval-background-theory.html",
    "title": "Background and theory",
    "section": "",
    "text": "For your final project, you will conduct an evaluation for a social program of your choosing. In this assignment, you will explore the program’s background, history, purpose, and theory.\nIf you decide to use a different program for your final project, that’s okay! This assignment doesn’t have to be related to your final program, but it would be helpful—a more polished version of this assignment can be included as part of your final project."
  },
  {
    "objectID": "content/python/01-eval-background-theory.html#instructions",
    "href": "content/python/01-eval-background-theory.html#instructions",
    "title": "Background and theory",
    "section": "Instructions",
    "text": "Instructions\nYou need to complete the four sections listed below. Ideally you should type this in R Markdown and knit your document to HTML or Word or PDF, but you can also write in Word if you want (though your final project will need to be in R Markdown, and this would give you practice).1\nI’ve created an R Markdown template you can use here:  background-theory.zip. It’s also available on RStudio.cloud.\nYou can draw your impact theory and logic model charts by hand or with something like Diagrams.net, Lucidchart, or Creately. Export the image as a PNG, place it in the same directory as your R Markdown file, and include the image with Markdown.\nThe syntax for adding an image in Markdown is fairly simple. Importantly, it is not R code, so don’t try putting it in an R chunk. Just type this:\n![Image caption](/path/to/image.png)\nSubmit this assignment as a PDF or Word file on iCollege."
  },
  {
    "objectID": "content/python/01-eval-background-theory.html#assignment-outline",
    "href": "content/python/01-eval-background-theory.html#assignment-outline",
    "title": "Background and theory",
    "section": "Assignment outline",
    "text": "Assignment outline\n\n1: Program background and purpose\n(≈350 words)\nProvide in-depth background about the program. Include details about (1) when it was started, (2) why it was started, (3) what it was designed to address in society. If the program hasn’t started yet, explain why it’s under consideration. Make sure you cite your sources appropriately! (In the past, some students have just copied/pasted text from a program’s website; don’t do that! Describe and analyze the program’s background!)\n\n\n2: Program theory\n(≈400 words)\nExplain and explore the program’s underlying theory. Sometimes programs will explain why they exist in a mission statement, but often they don’t and you have to infer the theory from what the program looks like when implemented. What did the program designers plan on occurring? Was this theory based on existing research? If so, cite it.\nInclude a simple impact theory graph showing the program’s basic activities and outcomes. Recall from class and your reading that this is focused primarily on the theory and mechanisms, not on the implementation of the program.\n\n\n3: Logic model\nList every possible input, activity, output, and outcome for the program and provide a brief 1–2 sentence description of each.\n\nInputs\n\nSomething\nSomething else\n\n\n\nActivities\n\nSomething\nSomething else\n\n\n\nOutputs\n\nSomething\nSomething else\n\n\n\nOutcomes\n\nSomething\nSomething else\n\n\n\nDiagram\nUse flowchart software to connect the inputs, activities, outputs, and outcomes and create a complete logic model. Remember that inputs will always feed into activities, and that activities always produce outputs (that’s the whole purpose of an activity: convert an input to an output). Include this as a figure.\n\n\n\n4: Analysis\n(≈150 words)\nEvaluate how well the logic model relates to the program theory. Do the inputs, activities, and outputs have a logical, well-grounded connection to the intended outcomes? Under ideal conditions, would the components of the program lead to changes or lasting effects?"
  },
  {
    "objectID": "content/python/01-problem-set.html",
    "href": "content/python/01-problem-set.html",
    "title": "Problem set 1",
    "section": "",
    "text": "Go the the example page for this week, “Welcome to R, RStudio, and the tidyverse”, and work through the different primers and videos in the four parts of the page.\nIt seems like there’s a lot on the page, but they’re short and go fairly quickly (especially as you get the hang of the syntax). Also, I have no way of seeing what you do or what you get wrong or right, and that’s totally fine! If you get stuck and want to skip some (or if it gets too easy), go right ahead and skip them!"
  },
  {
    "objectID": "content/python/01-problem-set.html#task-2-make-an-rstudio-project",
    "href": "content/python/01-problem-set.html#task-2-make-an-rstudio-project",
    "title": "Problem set 1",
    "section": "Task 2: Make an RStudio Project",
    "text": "Task 2: Make an RStudio Project\n\nUse either RStudio.cloud or RStudio on your computer (preferably RStudio on your computer! Follow these instructions to get started!) to create a new RStudio Project. Refer to the example page you read in Task 1 for instructions\nCreate a folder named “data” in the project folder you just made.\nDownload this CSV file and place it in that folder:\n\n cars.csv\n\nIn RStudio, go to “File” > “New File…” > “R Markdown…” and click “OK” in the dialog without changing anything.\nDelete all the placeholder text in that new file and replace it with this:\n---\ntitle: \"Problem set 1\"\nauthor: \"Put your name here\"\noutput: html_document\n---\n\n\n```{r load-libraries-data, warning=FALSE, message=FALSE}\nlibrary(tidyverse)\n\ncars <- read_csv(\"data/cars.csv\")\n```\n\n\n\n# Learning R\n\nTell me that you worked through the primers and videos and examples at the example page for this week:\n\nWRITE SOMETHING HERE LIKE \"I did all the primers and had the time of my life!\" or whatever.\n\n\n# My first plots\n\nInsert a chunk below and use it to create a scatterplot (hint: `geom_point()`) with diplacement (`displ`) on the x-axis, city MPG (`cty`) on the y-axis, and with the points colored by drive (`drv`).\n\nPUT CHUNK HERE\n\nInsert a chunk below and use it to create a histogram (hint: `geom_histogram()`) with highway MPG (`hwy`) on the x-axis. Do not include anything on the y-axis (`geom_histogram()` will do that automatically for you). Choose an appropriate bin width. If you're brave, facet by drive (`drv`).\n\nPUT CHUNK HERE\n\n\n# My first data manipulation\n\nInsert a chunk below and use it to calculate the average city MPG (`cty`) by class of car (`class`). This won't be a plot---it'll be a table. Hint: use a combination of `group_by()` and `summarize()`.\n\nPUT CHUNK HERE\nSave the R Markdown file with some sort of name (without any spaces!)\nYour project folder should look something like this:"
  },
  {
    "objectID": "content/python/01-problem-set.html#task-3-work-with-r",
    "href": "content/python/01-problem-set.html#task-3-work-with-r",
    "title": "Problem set 1",
    "section": "Task 3: Work with R",
    "text": "Task 3: Work with R\n\nRemove the text that says “PUT CHUNK HERE” and insert a new R code chunk. Either type ctrl + alt + i on Windows, or ⌘ + ⌥ + i on macOS, or use the “Insert Chunk” menu:\n\n\n\n\n\n\n\n\n\n\n\nFollow the instructions for the three chunks of code.\nKnit your document as a Word file (or PDF if you’re brave and installed LaTeX). Use the “Knit” menu:\n\n\n\n\n\n\n\n\n\n\n\nUpload the knitted document to iCollege.\n🎉 Party! 🎉\n\n\n\n\n\n\n\nTip\n\n\n\nYou’ll be doing this same process for all your future problem sets. Each problem set will involve an R Markdown file. You can either create a new RStudio Project directory for all your work:\n\n\n\n\n\n\n\n\n\nOr you can create individual projects for each assignment and project:"
  },
  {
    "objectID": "content/python/02-eval-measurement.html",
    "href": "content/python/02-eval-measurement.html",
    "title": "Measurement",
    "section": "",
    "text": "For your final project, you will conduct an evaluation for a social program of your choosing. In this assignment, you will decide how to best measure two of the program’s outcomes.\nIf you decide to use a different program for your final project, that’s okay! This assignment doesn’t have to be related to your final program, but it would be extraordinarily helpful—a more polished version of this assignment can be included as part of your final project."
  },
  {
    "objectID": "content/python/02-eval-measurement.html#instructions",
    "href": "content/python/02-eval-measurement.html#instructions",
    "title": "Measurement",
    "section": "Instructions",
    "text": "Instructions\nYou need to complete the two sections listed below. Ideally you should type this in R Markdown and knit your document to HTML or Word or PDF, but you can also write in Word if you want (though your final project will need to be in R Markdown, and this would give you practice).1\nI’ve created an R Markdown template you can use here:  measurement.zip. It’s also available on RStudio.cloud.\nSubmit this assignment as a PDF or Word file on iCollege."
  },
  {
    "objectID": "content/python/02-eval-measurement.html#assignment-outline",
    "href": "content/python/02-eval-measurement.html#assignment-outline",
    "title": "Measurement",
    "section": "Assignment outline",
    "text": "Assignment outline\n\n1: Measurement and abstraction for full-day kindergarten\nRead this article about half-day vs. full-day kindergarten in Utah. The article is 10 years old, and half-day kindergarten still remains standard practice in most Utah school districts.\nPretend you are the administrator of the Optional Extended Day Kindergarten initiative. Based on the Salt Lake Tribune article (which provides hints throughout, and especially in one of the final paragraphs), and based on your own knowledge of educational outcomes, make a list of two (2) possible outcomes of the full-day kindergarten program.\nThen, for each of those two outcomes, do the following: Using the concept of the “ladder of abstraction” that we discussed in class (e.g. identifying a witch, measuring poverty, etc.), make a list of all the possible attributes of the outcome. Narrow this list down to 3–4 key attributes. Discuss how you decided to narrow the concepts and justify why you think these attributes capture the outcome. (≈100 words)\nThen, for each of those attributes, answer these questions:\n\nMeasurable definition: How would you specifically define this attribute? (i.e. if the attribute is “reduced crime”, define it as “The percent change in crime in a specific neighborhood during a certain time frame” or something similar)\nIdeal measurement: How would you measure this attribute in an ideal world?\nFeasible measurement: How would you measure this given reality and given limitations in budget, time, etc.?\nMeasurement of program effect: How would to connect this measure to people in the program? How would you check to see if the program itself had an effect?\n\n\n\n2: Measurement and abstraction for your program\nMake a list of two possible outcomes of your selected program. For each of those outcomes, make a list of all the possible attributes. Narrow this list down to 3–4 key attributes. Discuss how you decided to narrow the concepts and justify why you think these attributes capture the outcome. (≈100 words)\nThen, for each of those attributes, answer these questions:\n\nMeasurable definition: How would you specifically define this attribute? (i.e. if the attribute is “reduced crime”, define it as “The percent change in crime in a specific neighborhood during a certain time frame” or something similar)\nIdeal measurement: How would you measure this attribute in an ideal world?\nFeasible measurement: How would you measure this given reality and given limitations in budget, time, etc.?\nMeasurement of program effect: How would to connect this measure to people in the program? How would you check to see if the program itself had an effect?"
  },
  {
    "objectID": "content/python/02-problem-set.html",
    "href": "content/python/02-problem-set.html",
    "title": "Problem set 2",
    "section": "",
    "text": "Note\n\n\n\nIMPORTANT: This looks like a lot of work, but it’s mostly copying/pasting chunks of code and changing things."
  },
  {
    "objectID": "content/python/02-problem-set.html#getting-started",
    "href": "content/python/02-problem-set.html#getting-started",
    "title": "Problem set 2",
    "section": "Getting started",
    "text": "Getting started\nFor this problem set, you’ll practice running and interpreting regression models using data about penguins in Antarctica and data on food access and mortality in the US.\nYou’ll be doing all your R work in R Markdown this time (and from now on). You should use an RStudio Project to keep your files well organized (either on your computer or on RStudio.cloud). Either create a new project for this exercise only, or make a project for all your work in this class.\nYou’ll need to download these two CSV files and put them somewhere on your computer or upload them to RStudio.cloud—preferably in a folder named data in your project folder:\n\n penguins.csv\n food_health_politics.csv\n\nYou’ll also need to download this R Markdown file with a template for this problem set. Download that here and include it in your project:\n\n problem-set-2.Rmd\n\nIn the end, the structure of your project directory should look something like this:\nyour-project-name\n├── data\n│   ├── food_health_politics.csv\n│   └── penguins.csv\n├── your-project-name.Rproj\n└── your-name_problem-set-2.Rmd\nTo check that you put everything in the right places, you can download and unzip this file, which contains everything in the correct structure:\n\n problem-set-2.zip\n\nYou’ll need to make sure you have these packages installed on your computer: tidyverse and modelsummary. If you try to load one of those packages with library(tidyverse) or library(modelsummary), etc., and R gives an error that the package is missing, use the “Packages” panel in RStudio to install it.\n(Alternatively, you can open the project named “Problem Set 2” on RStudio.cloud and complete the assignment in your browser without needing to install anything. If you don’t have access to the class RStudio.cloud account, please let me know as soon as possible. This link should take you to the project—if it doesn’t, log in and look for the project named “Problem Set 2.”)\nRemember that you can run an entire chunk by clicking on the green play arrow in the top right corner of the chunk. You can also run lines of code line-by-line if you place your cursor on some R code and press ⌘ + enter (for macOS users) or ctrl + enter (for Windows users).\nMake sure you run each chunk sequentially. If you run a chunk in the middle of the document without running previous ones, it might not work, since previous chunks might do things that later chunks depend on.\nRemember, if you’re struggling, please talk to me. Work with classmates too. Don’t suffer in silence!"
  },
  {
    "objectID": "content/python/02-problem-set.html#instructions",
    "href": "content/python/02-problem-set.html#instructions",
    "title": "Problem set 2",
    "section": "Instructions",
    "text": "Instructions\nFor this problem set, we’re less interested in causal relationships and more interested in the mechanics of manipulating data and running regressions in R. We’ll start caring about identification and causal models in the next problem set. Because of this, don’t put too much causal weight into the interpretations of these different models—this is an actual case of correlation not implying causation.\nThe example for week 2 on regression will be incredibly helpful for this exercise. Reference it. Copy and paste from it liberally.\n\nRename the R Markdown file named your-name_problem-set-2.Rmd to something that matches your name and open it in RStudio.\nComplete the tasks given in the R Markdown file. Fill out code in the empty chunks provided (you can definitely copy, paste, and adapt from other code in the document or from the regression example—don’t try to write everything from scratch!), and replace text in ALL CAPS with your own. (i.e. You’ll see a bunch of TYPE YOUR ANSWER HEREs. Type your answers there.). Again, you don’t need to type your answers in all caps."
  },
  {
    "objectID": "content/python/02-problem-set.html#turning-everything-in",
    "href": "content/python/02-problem-set.html#turning-everything-in",
    "title": "Problem set 2",
    "section": "Turning everything in",
    "text": "Turning everything in\nWhen you’re all done, click on the “Knit” button at the top of the editing window and create a Word or PDF version (if you’ve installed tinytex) of your document. Upload that file to iCollege. Do not upload a knitted HTML file (they don’t on iCollege)."
  },
  {
    "objectID": "content/python/03-eval-dag.html",
    "href": "content/python/03-eval-dag.html",
    "title": "Causal model",
    "section": "",
    "text": "For your final project, you will conduct an evaluation for a social program of your choosing. In this assignment, you will decide how to model the causal effect of your program on your primary outcome.\nIf you decide to use a different program for your final project, that’s okay! This assignment doesn’t have to be related to your final program, but it would be extraordinarily helpful—a more polished version of this assignment can be included as part of your final project."
  },
  {
    "objectID": "content/python/03-eval-dag.html#instructions",
    "href": "content/python/03-eval-dag.html#instructions",
    "title": "Causal model",
    "section": "Instructions",
    "text": "Instructions\nYou need to complete the three sections listed below. Ideally you should type this in R Markdown and knit your document to HTML or Word or PDF, but you can also write in Word if you want (though your final project will need to be in R Markdown, and this would give you practice).\nI’ve created an R Markdown template you can use here:  causal-model.zip. It’s also available on RStudio.cloud.\nSubmit this assignment as a PDF or Word file on iCollege."
  },
  {
    "objectID": "content/python/03-eval-dag.html#dag-i",
    "href": "content/python/03-eval-dag.html#dag-i",
    "title": "Causal model",
    "section": "1: DAG I",
    "text": "1: DAG I\nFind a news article that makes a causal claim and interpret that claim by drawing an appropriate diagram. The article likely won’t explain all the things the researchers controlled for, so you’ll need to create an ideal DAG. What should be included in the causal process to measure the effect of X on Y?\nExport the figure from dagitty and include it in your assignment, or use this code to draw the DAG with R:\n\nlibrary(tidyverse)\nlibrary(ggdag)\n\n# Remember that you can change the variable names here--they can be basically\n# anything, but cannot include spaces. The labels can have spaces. Adjust the\n# variable names (y, x2, etc) and labels (\"Outcome\", \"Something\", etc.) as\n# necessary.\nmy_dag <- dagify(y ~ x1 + x2 + z,\n                 z ~ x1,\n                 x2 ~ x1 + z,\n                 labels = c(\"y\" = \"Outcome\",\n                            \"x1\" = \"Something\",\n                            \"x2\" = \"Something else\",\n                            \"z\" = \"Yet another thing\"),\n                 exposure = \"z\",\n                 outcome = \"y\")\n\n# If you set text = TRUE, you'll see the variable names in the DAG points\n# The `seed` argument makes it so that the random layout is the same every time\nggdag(my_dag, text = FALSE, use_labels = \"label\", seed = 1234) +\n  theme_dag()\n\n# If you want the treatment and outcomes colored differently,\n# replace ggdag() with ggdag_status()\nggdag_status(my_dag, text = FALSE, use_labels = \"label\", seed = 1234) +\n  theme_dag() +\n  theme(legend.position = \"bottom\")  # Move legend to bottom for fun\n\nSummarize the causal claim. Describe what the authors controlled for and what else you included in the DAG. Justify the inclusion of each node (point) and connection (line) in the graph. (≈150 words)\nIdentify all the frontdoor and backdoor paths between your exposure and outcome. What variables need to be controlled for / adjusted to close the backdoors? Did this happen in the study or article? (≈100 words)"
  },
  {
    "objectID": "content/python/03-eval-dag.html#dag-ii",
    "href": "content/python/03-eval-dag.html#dag-ii",
    "title": "Causal model",
    "section": "2: DAG II",
    "text": "2: DAG II\nFind a different news article with a causal claim and do the same thing as above.\nDraw and include a DAG.\nSummarize the causal claim. Describe what the authors controlled for and what else you included in the DAG. Justify the inclusion of each node (point) and connection (line) in the graph. (≈150 words)\nIdentify all the frontdoor and backdoor paths between your exposure and outcome. What variables need to be controlled for / adjusted to close the backdoors? Did this happen in the study or article? (≈100 words)"
  },
  {
    "objectID": "content/python/03-eval-dag.html#dag-for-your-program",
    "href": "content/python/03-eval-dag.html#dag-for-your-program",
    "title": "Causal model",
    "section": "3: DAG for your program",
    "text": "3: DAG for your program\nIdentify the outcome you care most about from your final project program. Draw a DAG that shows the causal effect of your program’s intervention on the outcome.\nSummarize the causal claim. Describe what needs to be controlled for and what else you included in the DAG. Justify the inclusion of each node (point) and connection (line) in the graph. (≈150 words)\nIdentify all the frontdoor and backdoor paths between your exposure and outcome. What variables need to be controlled for / adjusted to close the backdoors? How might you do this with your evaluation? (≈100 words)"
  },
  {
    "objectID": "content/python/03-problem-set.html",
    "href": "content/python/03-problem-set.html",
    "title": "Problem set 3",
    "section": "",
    "text": "Note\n\n\n\nIMPORTANT: This looks like a lot of work, but again, it’s mostly copying/pasting chunks of code and changing things.\nFor this problem set, you’ll practice analyzing RCTs and working with matching and inverse probability weighting. These two examples will be incredibly useful for you:\nYou’ll be doing all your R work in R Markdown this time (and from now on). You can download a zipped file of a pre-made project here:\nAnd as always, if you’re struggling, please talk to me. Work with classmates too (especially for this assignment!). Don’t suffer in silence!"
  },
  {
    "objectID": "content/python/03-problem-set.html#instructions",
    "href": "content/python/03-problem-set.html#instructions",
    "title": "Problem set 3",
    "section": "Instructions",
    "text": "Instructions\n\nIf you’re using R on your own computer, download this file, unzip it, and double click on the file named problem-set-3.Rproj:  problem-set-3.zip\nYou’ll need to make sure you have these packages installed on your computer: tidyverse, MatchIt, modelsummary, and patchwork. If you try to load one of those packages with library(tidyverse) or library(MatchIt), etc., and R gives an error that the package is missing, use the “Packages” panel in RStudio to install it.\n(Alternatively, you can open the project named “Problem Set 3” on RStudio.cloud and complete the assignment in your browser without needing to install anything. If you don’t have access to the class RStudio.cloud account, please let me know as soon as possible. This link should take you to the project—if it doesn’t, log in and look for the project named “Problem Set 3.”)\nRename the R Markdown file named your-name_problem-set-3.Rmd to something that matches your name and open it in RStudio.\nComplete the tasks given in the R Markdown file. There are questions marked in bold (e.g. **What is the ATE?**). Your job is to answer those questions. You don’t need to put your answers in bold, and you can remove the question text if you want.\nFill out code in the empty chunks provided (you can definitely copy, paste, and adapt from other code in the document or the example page on RCTs and the example page on matching and IPW—don’t try to write everything from scratch!).\nYou’ll need to insert your own code chunks. Rather than typing them by hand (that’s tedious!), use the “Insert” button at the top of the editing window, or press ⌥ + ⌘ + I on macOS, or ctrl + alt + I on Windows.\n\n\n\n\n\n\n\n\n\nRemember that you can run an entire chunk by clicking on the green play arrow in the top right corner of the chunk. You can also run lines of code line-by-line if you place your cursor on some R code and press ⌘ + enter (for macOS users) or ctrl + enter (for Windows users).\nMake sure you run each chunk sequentially. If you run a chunk in the middle of the document without running previous ones, it might not work, since previous chunks might do things that later chunks depend on.\nWhen you’re all done, click on the “Knit” button at the top of the editing window and create a Word or PDF version (if you’ve installed tinytex) of your document. Upload that file to iCollege. Do not upload a knitted HTML file (they don’t on iCollege)."
  },
  {
    "objectID": "content/python/final-project.html",
    "href": "content/python/final-project.html",
    "title": "Final project",
    "section": "",
    "text": "Evaluation research is tricky and costly. If you begin an intervention or launch a study prematurely, you can waste time and money—and potentially lives.\nEven if you have a well designed program with an impeccable logic model and a perfect DAG, you might discover (too late!) that you forgot to collect some critical variables or realize that your identification strategy will not work.\nFrom a more cynical perspective, you might (unethically) engage in the practice of p-hacking—running all sorts of different model specifications until you find the results you want, and then claim in your report that you had intended to run that model all along.\nOne increasingly popular method for (1) ensuring that your data and methods work before launching a study or intervention, and (2) declaring and committing to your hypotheses and methods and models before analyzing your data is to pre-register your research or evaluation. A pre-registered study contains all the background work—an introduction, literature review, theory, hypotheses, and proposed analysis—but without the actual data. Authors post their expectations and hypotheses publicly so they can be held publicly accountable for any deviations from their proposed design.1\nThe best preregistered studies use simulated data that has the same structure as the data that will be collected (i.e. same columns, sometimes the same correlations and relationships researchers expect to see in the collected data, etc.). Because there’s no data yet (or just fake data), you have more freedom when developing a preregistered study. You can experiment with different models, play with different approaches, manipulate data in different ways, and so on. If you realize that you need a new variable, or that you need to rearrange questions on a survey, or make any other kinds of changes, you can—you haven’t collected the data yet!\n(Additionally, using synthetic data is extremely useful if you’re working with proprietary or private data that you cannot make public. You can make a synthetic version of the real data instead; see this too.)\nOnce you finalize your plan and know all the data you need to collect, and once you’ve written out the different models you’ll run, all you have to do is collect the real data, plop it into your script (replacing the fake data you’d been using), and run the analysis script again to generate the actual, real results. In the results section, you get to either say “As predicted, we found…”, or “Contrary to expectations, we found that…”.\nFor your final project in this class, you will write a pre-registered analysis of a public or nonprofit social program that you’re interested in. You don’t need to worry about collecting data—you’ll create a synthetic dataset for your pre-analysis.\nYou will submit three things via iCollege:\nThis project is due by 11:59 PM on Monday, December 12, 2022.  No late work will be accepted.\nYou can either run the analysis in RStudio locally on your computer (highly recommended(!!), since you won’t have to worry about keeping all your work on RStudio’s servers), or use an RStudio.cloud project. You can make a copy of this RStudio.cloud project—it doesn’t have anything in it, but I have preinstalled all the packages we’ve used over the course of the semester, so you don’t have to."
  },
  {
    "objectID": "content/python/final-project.html#resources",
    "href": "content/python/final-project.html#resources",
    "title": "Final project",
    "section": "Resources",
    "text": "Resources\nMost importantly, do not hesitate to work with classmates. You all must choose different programs, but you can work in groups of up to 4 people on your own projects. Also, absolutely do not hesitate to ask me questions! I’m here to help!\nYou might find this evaluation (and its proposal) of a truancy program in the Provo School District in Utah helpful as an example for the first half of this assignment (program overview, theory, implementation, threats to validity, and outcomes). The PSD evaluation doesn’t have DAGs or fancy econometrics models like RCTs, diff-in-diff, RDD, IVs, or anything like that, so you can’t use it as an example of that part, but these should provide a good template for the program-specific sections. This is longer than expected for this class. I provide suggested word counts in the outline below.\n\n psd-proposal-2011\n psd-final-report-2012"
  },
  {
    "objectID": "content/python/final-project.html#suggested-outline",
    "href": "content/python/final-project.html#suggested-outline",
    "title": "Final project",
    "section": "Suggested outline",
    "text": "Suggested outline\nHere’s an outline of what you’ll need to do. You did lots of this work in your evaluation assignments. Please don’t just copy/paste those assignments as is into this final project—you’ll want to polish it up for this final report. You can download this as an RMarkdown file and change the text if you want. I’ve also included this as an RMarkdown file in the empty RStudio.cloud project.\n\n final-project-template.Rmd\n\n\n\nIntroduction\nDescribe the motivation for this evaluation, briefly describe the program to be evaluated, and explain why it matters for society. (≈150 words)\n\n\nProgram overview\nProvide in-depth background about the program. Include details about (1) when it was started, (2) why it was started, (3) what it was designed to address in society. If the program hasn’t started yet, explain why it’s under consideration. (≈300 words)\n\n\nProgram theory and implementation\n\nProgram theory and impact theory graph\nExplain and explore the program’s underlying theory. Sometimes programs will explain why they exist in a mission statement, but often they don’t and you have to infer the theory from what the program looks like when implemented. What did the program designers plan on occurring? Was this theory based on existing research? If so, cite it. (≈300 words)\nInclude a simple impact theory graph showing the program’s basic activities and outcomes. Recall from class and your reading that this is focused primarily on the theory and mechanisms, not on the implementation of the program.\n\n\nLogic model\nDescribe the program’s inputs, activities, outputs, and outcomes. Pay careful attention to how they are linked—remember that every input needs to flow into an activity and every output must flow out of an activity. (≈150 words)\nUse flowchart software to connect the inputs, activities, outputs, and outcomes and create a complete logic model. Include this as a figure.\n\n\n\nOutcome and causation\n\nMain outcome\nSelect one of the program’s outcomes to evaluate. Explain why you’ve chosen this (is it the most important? easiest to measure? has the greatest impact on society?) (≈50 words)\n\n\nMeasurement\nUsing the concept of the “ladder of abstraction” that we discussed in class (e.g. identifying a witch, measuring poverty, etc.), make a list of all the possible attributes of the outcome. Narrow this list down to 3-4 key attributes. Discuss how you decided to narrow the concepts and justify why you think these attributes capture the outcome. Then, for each of these attributes, answer these questions:\n\nMeasurable definition: How would you specifically define this attribute? (i.e. if the attribute is “reduced crime”, define it as “The percent change in crime in a specific neighborhood during a certain time frame” or something similar)\nIdeal measurement: How would you measure this attribute in an ideal world?\nFeasible measurement: How would you measure this given reality and given limitations in budget, time, etc.?\nMeasurement of program effect: How would to connect this measure to people in the program? How would you check to see if the program itself had an effect?\n\n(≈150 words in this section)\n\n\nCausal theory\nGiven your measurement approach, describe and draw a causal diagram (DAG) that shows how your program causes the outcome. Note that this is not the same thing as the logic model—you’ll likely have nodes in the DAG that aren’t related to the program at all (like socioeconomic status, gender, experience, or other factors). The logic model provides the framework for the actual implementation of your program and connects all the moving parts to the outcomes. The DAG is how you can prove causation with statistical approaches. (≈150 words)\n\n\nHypotheses\nMake predictions of your program’s effect. Declare what you think will happen. (≈50 words)\n\n\n\nData and methods\n\nIdentification strategy\nHow will you measure the actual program effect? Will you rely on an RCT? Differences-in-differences? Regression discontinuity? Instrumental variables? How does your approach account for selection bias and endogeneity? How does your approach isolate the causal effect of the program on the outcome?\nAlso briefly describe what kinds of threats to internal and external validity you face in your study.\n(≈300 words)\n\n\nData\nGiven your measurement approach, limits on feasibility, and identification strategy, describe the data you will use. Will you rely on administrative data collected by a government agency or nonprofit? Will you collect your own data? If so, what variables will you measure, and how? Will you conduct a survey or rely on outside observers or do something else? What does this data look like? What variables does it (or should it) include?\n(≈100 words)\n\n\n\nSynthetic analysis\nGenerate a synthetic (fake) dataset in R with all the variables you’ll need for the real life analysis. Analyze the data using your identification strategy. For instance:\n\nIf you’re relying on observational data, close all the backdoors with matching or inverse probability weighting, don’t adjust for colliders, and make a strong argument for isolation of the causal effect in the absence of treatment/control groups\nIf you’re doing an RCT, test the differences in means in the treatment and control groups (and follow all other best practices listed in the World Bank book, checking for balance across groups, etc.)\nIf you’re doing diff-in-diff, run a regression model with an interaction term to show the diff-in-diff\nIf you’re doing regression discontinuity, check for a jump in the outcome variable at the cutoff in the running variable\nIf you’re using instrumental variables, check the validity of your instrument and run a 2SLS model\n\nInclude robustness checks to ensure the validity of your effect (i.e. if you’re doing regression discontinuity, test different bandwidths and kernel types; etc.)\n(As many words as you need to fully describe your analysis and results)\n\n\nConclusion\nWhat would the findings from this analysis mean for your selected program? What would it mean if you found an effect? What would it mean if you didn’t find an effect? Why does any of this matter? (≈75 words)"
  },
  {
    "objectID": "content/python/index.html",
    "href": "content/python/index.html",
    "title": "Assignments",
    "section": "",
    "text": "The main goals of this class are to help you design, critique, code, and run rigorous, valid, and feasible evaluations of public sector programs. Each type of assignment in this class is designed to help you achieve one or more of these goals."
  },
  {
    "objectID": "content/python/index.html#weekly-check-in",
    "href": "content/python/index.html#weekly-check-in",
    "title": "Assignments",
    "section": "Weekly check-in",
    "text": "Weekly check-in\nEvery week, after you finish working through the content, I want to hear about what you learned and what questions you still have. Because the content in this course is flipped, these questions are crucial for our weekly in-class discussions.\nTo encourage engagement with the course content—and to allow me to collect the class’s questions each week—you’ll need to fill out a short response on iCollege. This should be ≈150 words. That’s fairly short: there are ≈250 words on a typical double-spaced page in Microsoft Word (500 when single-spaced).\nThese check-ins are due by noon on the days we have class. This is so I can look through the responses and start structuring the discussion for the evening’s class.\nYou should answer these two questions each week:\n\nWhat were the three (3) most interesting or exciting things you learned from the session? Why?\nWhat were the three (3) muddiest or unclear things from the session this week? What are you still wondering about?\n\nYou can include more than three interesting or muddiest things, but you must include at least three. There should be six easily identifiable things in each check-in: three exciting things and three questions.\nI will grade these check-ins using a check system:\n\n✔+: (11.5 points (115%) in gradebook) Response shows phenomenal thought and engagement with the course content. I will not assign these often.\n✔: (10 points (100%) in gradebook) Response is thoughtful, well-written, and shows engagement with the course content. This is the expected level of performance.\n✔−: (5 points (50%) in gradebook) Response is hastily composed, too short, and/or only cursorily engages with the course content. This grade signals that you need to improve next time. I will hopefully not assign these often.\n\nNotice that is essentially a pass/fail or completion-based system. I’m not grading your writing ability, I’m not counting the exact number of words you’re writing, and I’m not looking for encyclopedic citations of every single reading to prove that you did indeed read everything. I’m looking for thoughtful engagement, three interesting things, and three questions. That’s all. Do good work and you’ll get a ✓.\nYou will submit these check-ins via iCollege."
  },
  {
    "objectID": "content/python/index.html#problem-sets",
    "href": "content/python/index.html#problem-sets",
    "title": "Assignments",
    "section": "Problem sets",
    "text": "Problem sets\nTo practice writing R code, running inferential models, and thinking about causation, you will complete a series of problem sets.\nYou need to show that you made a good faith effort to work each question. I will not grade these in detail. The problem sets will be graded using a check system:\n\n✔+: (33 points (110%) in gradebook) Assignment is 100% completed. Every question was attempted and answered, and most answers are correct. Document is clean and easy to follow. Work is exceptional. I will not assign these often.\n✔: (30 points (100%) in gradebook) Assignment is 70–99% complete and most answers are correct. This is the expected level of performance.\n✔−: (15 points (50%) in gradebook) Assignment is less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not asisgn these often.\n\nYou may (and should!) work together on the problem sets, but you must turn in your own answers. You cannot work in groups of more than four people, and you must note who participated in the group in your assignment."
  },
  {
    "objectID": "content/python/index.html#evaluation-assignments",
    "href": "content/python/index.html#evaluation-assignments",
    "title": "Assignments",
    "section": "Evaluation assignments",
    "text": "Evaluation assignments\nFor your final project, you will conduct a pre-registered evaluation of a social program using synthetic data. To (1) give you practice with the principles of program evaluation, research design, measurement, and causal diagrams, and (2) help you with the foundation of your final project, you will complete a set of four evaluation-related assignments.\nIdeally these will become major sections of your final project. However, there is no requirement that the programs you use in these assignments must be the same as the final project. If, through these assignments, you discover that your initially chosen program is too simple, too complex, too boring, etc., you can change at any time.\nThese assignments will be graded using a check system:\n\n✔+: (33 points (110%) in gradebook) Assignment is 100% completed. Every question was attempted and answered, and most answers are correct. Document is clean and easy to follow. Work is exceptional. I will not assign these often.\n✔: (30 points (100%) in gradebook) Assignment is 70–99% complete and most answers are correct. This is the expected level of performance.\n✔−: (15 points (50%) in gradebook) Assignment is less than 70% complete and/or most answers are incorrect. This indicates that you need to improve next time. I will hopefully not asisgn these often."
  },
  {
    "objectID": "content/python/index.html#exams",
    "href": "content/python/index.html#exams",
    "title": "Assignments",
    "section": "Exams",
    "text": "Exams\nThere will be two exams covering (1) program evaluation, design, and causation, and (2) the core statistical tools of program evaluation and causal inference.\nYou will take these exams online through iCollege. The exams will have a time limit, but you can use notes and readings and the Google. You must take the exams on your own though, and not talk to anyone about them."
  },
  {
    "objectID": "content/python/index.html#final-project",
    "href": "content/python/index.html#final-project",
    "title": "Assignments",
    "section": "Final project",
    "text": "Final project\nAt the end of the course, you will demonstrate your knowledge of program evaluation and causal inference by completing a final project.\nComplete details for the final project are here.\nThere is no final exam. This project is your final exam."
  },
  {
    "objectID": "content/python/weekly-check-in.html",
    "href": "content/python/weekly-check-in.html",
    "title": "Weekly check-in",
    "section": "",
    "text": "Every week, after you finish working through the content, I want to hear about what you learned and what questions you still have. Because the content in this course is flipped, these questions are crucial for our weekly in-class discussions.\nTo encourage engagement with the course content—and to allow me to collect the class’s questions each week—you’ll need to fill out a short response on iCollege. This should be ≈150 words. That’s fairly short: there are ≈250 words on a typical double-spaced page in Microsoft Word (500 when single-spaced).\nThese check-ins are due by noon on the days we have class. This is so I can look through the responses and start structuring the discussion for the evening’s class.\nYou should answer these two questions each week:\n\nWhat were the three (3) most interesting or exciting things you learned from the session? Why?\nWhat were the three (3) muddiest or unclear things from the session this week? What are you still wondering about?\n\nYou can include more than three interesting or muddiest things, but you must include at least three. There should be six easily identifiable things in each check-in: three exciting things and three questions.\nI will grade these check-ins using a check system:\n\n✔+: (11.5 points (115%) in gradebook) Response shows phenomenal thought and engagement with the course content. I will not assign these often.\n✔: (10 points (100%) in gradebook) Response is thoughtful, well-written, and shows engagement with the course content. This is the expected level of performance.\n✔−: (5 points (50%) in gradebook) Response is hastily composed, too short, and/or only cursorily engages with the course content. This grade signals that you need to improve next time. I will hopefully not assign these often.\n\nNotice that is essentially a pass/fail or completion-based system. I’m not grading your writing ability, I’m not counting the exact number of words you’re writing, and I’m not looking for encyclopedic citations of every single reading to prove that you did indeed read everything. I’m looking for thoughtful engagement, three interesting things, and three questions. That’s all. Do good work and you’ll get a ✓.\nYou will submit these check-ins via iCollege."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Joschka Schwarz",
    "section": "",
    "text": "Joschka Schwarz is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Joschka Schwarz",
    "section": "Education",
    "text": "Education\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St. Paul MA B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Joschka Schwarz",
    "section": "Experience",
    "text": "Experience\nWengo Analytics | Head Data Scientist | April 2018 - present\nGeoScynce | Chief Analyst | Spet 2012 - April 2018"
  },
  {
    "objectID": "resumes.html",
    "href": "resumes.html",
    "title": "Resumes",
    "section": "",
    "text": "Classic\n\n\nClassical themed CV\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpotify\n\n\nSpotify themed CV\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resumes/classic/index.html",
    "href": "resumes/classic/index.html",
    "title": "Classic",
    "section": "",
    "text": "Put spotify cv here"
  },
  {
    "objectID": "resumes/index.html",
    "href": "resumes/index.html",
    "title": "Resumes overview",
    "section": "",
    "text": "Classic\n\n\nClassical themed CV\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpotify\n\n\nSpotify themed CV\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "resumes/spotify/index.html",
    "href": "resumes/spotify/index.html",
    "title": "Spotify",
    "section": "",
    "text": "Put spotify cv here"
  },
  {
    "objectID": "revealjs/slides/2022/first/first.html#quarto",
    "href": "revealjs/slides/2022/first/first.html#quarto",
    "title": "First",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see https://quarto.org/docs/presentations/."
  },
  {
    "objectID": "revealjs/slides/2022/first/first.html#bullets",
    "href": "revealjs/slides/2022/first/first.html#bullets",
    "title": "First",
    "section": "Bullets",
    "text": "Bullets\nWhen you click the Render button a document will be generated that includes:\n\nContent authored with markdown\nOutput from executable code"
  },
  {
    "objectID": "revealjs/slides/2022/first/first.html#code",
    "href": "revealjs/slides/2022/first/first.html#code",
    "title": "First",
    "section": "Code",
    "text": "Code\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n[1] 2"
  },
  {
    "objectID": "revealjs/slides/2022/first/first.html#why",
    "href": "revealjs/slides/2022/first/first.html#why",
    "title": "First",
    "section": "Why",
    "text": "Why\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n[1] 2"
  },
  {
    "objectID": "revealjs/slides/2022/first/first.html#same",
    "href": "revealjs/slides/2022/first/first.html#same",
    "title": "First",
    "section": "Same",
    "text": "Same\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n[1] 2"
  },
  {
    "objectID": "revealjs/slides/2022/first/first.html#different",
    "href": "revealjs/slides/2022/first/first.html#different",
    "title": "First",
    "section": "Different",
    "text": "Different\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n[1] 2"
  },
  {
    "objectID": "slides/index.html",
    "href": "slides/index.html",
    "title": "Presentations overview",
    "section": "",
    "text": "Visit this section after you have finished the readings and lecture videos. It contains fully annotated R code and other supplementary information and it will be indispensable as you work on your problem sets and project.\nMany sections also contain videos of me live coding the examples so you can see what it looks like to work with R in real time. You’ll notice me make all sorts of little errors, which is totally normal—everyone does!"
  },
  {
    "objectID": "slides/random-numbers.html",
    "href": "slides/random-numbers.html",
    "title": "Generating random numbers",
    "section": "",
    "text": "In your final project, you will generate a synthetic dataset and use it to conduct an evaluation of some social program. Generating fake or simulated data is an incredibly powerful skill, but it takes some practice. Here are a bunch of helpful resources and code examples of how to use different R functions to generate random numbers that follow specific distributions (or probability shapes).\nThis example focuses primarily on distributions. Each of the columns you’ll generate will be completely independent from each other and there will be no correlation between them. The example for generating synthetic data provides code and a bunch of examples of how to build in correlations between columns.\nFirst, make sure you load the libraries we’ll use throughout the example:"
  },
  {
    "objectID": "slides/random-numbers.html#seeds",
    "href": "slides/random-numbers.html#seeds",
    "title": "Generating random numbers",
    "section": "Seeds",
    "text": "Seeds\nWhen R (or any computer program, really) generates random numbers, it uses an algorithm to simulate randomness. This algorithm always starts with an initial number, or seed. Typically it will use something like the current number of milliseconds since some date, so that every time you generate random numbers they’ll be different. Look at this, for instance:\n\n# Choose 3 numbers between 1 and 10\nsample(1:10, 3)\n## [1] 9 4 7\n\n\n# Choose 3 numbers between 1 and 10\nsample(1:10, 3)\n## [1] 5 6 9\n\nThey’re different both times.\nThat’s ordinarily totally fine, but if you care about reproducibility (like having a synthetic dataset with the same random values, or having jittered points in a plot be in the same position every time you knit), it’s a good idea to set your own seed. This ensures that the random numbers you generate are the same every time you generate them.\nDo this by feeding set.seed() some numbers. It doesn’t matter what number you use—it just has to be a whole number. People have all sorts of favorite seeds:\n\n1\n13\n42\n1234\n12345\n20201101 (i.e. the current date)\n8675309\n\nYou could even go to random.org and use atmospheric noise to generate a seed, and then use that in R.\nHere’s what happens when you generate random numbers after setting a seed:\n\n# Set a seed\nset.seed(1234)\n\n# Choose 3 numbers between 1 and 10\nsample(1:10, 3)\n## [1] 10  6  5\n\n# Set a seed\nset.seed(1234)\n\n# Choose another 3 numbers between 1 and 10\nsample(1:10, 3)\n## [1] 10  6  5\n\nThey’re the same!\nOnce you set a seed, it influences any function that does anything random, but it doesn’t reset. For instance, if you set a seed once and then run sample() twice, you’ll get different numbers the second time, but you’ll get the same different numbers every time:\n\n# Set a seed\nset.seed(1234)\n\n# Choose 3 numbers between 1 and 10\nsample(1:10, 3)\n## [1] 10  6  5\nsample(1:10, 3)  # This will be different!\n## [1] 9 5 6\n\n# Set a seed again\nset.seed(1234)\n\n# Choose 3 numbers between 1 and 10\nsample(1:10, 3)\n## [1] 10  6  5\nsample(1:10, 3)  # This will be different, but the same as before!\n## [1] 9 5 6\n\nTypically it’s easiest to just include set.seed(SOME_NUMBER) at the top of your script after you load all the libraries. Some functions have a seed argument, and it’s a good idea to use it: position_jitter(..., seed = 1234)."
  },
  {
    "objectID": "slides/random-numbers.html#distributions",
    "href": "slides/random-numbers.html#distributions",
    "title": "Generating random numbers",
    "section": "Distributions",
    "text": "Distributions\nRemember in elementary school when you’d decide on playground turns by saying “Pick a number between 1 and 10” and whoever was the closest would win? When you generate random numbers in R, you’re essentially doing the same thing, only with some fancier bells and whistles.\nWhen you ask someone to choose a number between 1 and 10, any of those numbers should be equally likely. 1 isn’t really less common than 5 or anything. In some situations, though, there are numbers that are more likely to appear than others (i.e. when you roll two dice, it’s pretty rare to get a 2, but pretty common to get a 7). These different kinds of likelihood change the shape of the distribution of possible values. There are hundreds of different distributions, but for the sake of generating data, there are only a few that you need to know.\n\nUniform distribution\nIn a uniform distribution, every number is equally likely. This is the “pick a number between 1 and 10” scenario, or rolling a single die. There are a couple ways to work with a uniform distribution in R: (1) sample() and (2) runif().\n\nsample()\nThe sample() function chooses an element from a list.\nFor instance, let’s pretend we have six possible numbers (like a die, or like 6 categories on a survey), like this:\n\npossible_answers <- c(1, 2, 3, 4, 5, 6)  # We could also write this as 1:6 instead\n\nIf we want to randomly choose from this list, you’d use sample(). The size argument defines how many numbers to choose.\n\n# Choose 1 random number\nsample(possible_answers, size = 1)\n## [1] 4\n\n# Choose 3 random numbers\nsample(possible_answers, size = 3)\n## [1] 2 6 5\n\nOne important argument you can use is replace, which essentially puts the number back into the pool of possible numbers. Imagine having a bowl full of ping pong balls with the numbers 1–6 on them. If you take the number “3” out, you can’t draw it again. If you put it back in, you can pull it out again. The replace argument puts the number back after it’s drawn:\n\n# Choose 10 random numbers, with replacement\nsample(possible_answers, size = 10, replace = TRUE)\n##  [1] 6 4 6 6 6 4 4 5 4 3\n\nIf you don’t specify replace = TRUE, and you try to choose more numbers than are in the set, you’ll get an error:\n\n# Choose 8 numbers between 1 and 6, but don't replace them.\n# This won't work!\nsample(possible_answers, size = 8)\n## Error in sample.int(length(x), size, replace, prob): cannot take a sample larger than the population when 'replace = FALSE'\n\nIt’s hard to see patterns in the outcomes when generating just a handful of numbers, but easier when you do a lot. Let’s roll a die 1,000 times:\n\nset.seed(1234)\ndie <- tibble(value = sample(possible_answers,\n                             size = 1000,\n                             replace = TRUE))\ndie %>%\n  count(value)\n\n\n\n\n\nvalue\nn\n\n\n\n\n1\n161\n\n\n2\n153\n\n\n3\n188\n\n\n4\n149\n\n\n5\n157\n\n\n6\n192\n\n\n\n\n\n\nggplot(die, aes(x = value)) +\n  geom_bar() +\n  labs(title = \"1,000 rolls of a single die\")\n\n\n\n\n\n\n\n\nIn this case, 3 and 6 came up more often than the others, but that’s just because of randomness. If we rolled the die 100,000 times, the bars should basically be the same:\n\nset.seed(1234)\ndie <- tibble(value = sample(possible_answers,\n                             size = 100000,\n                             replace = TRUE))\n\nggplot(die, aes(x = value)) +\n  geom_bar() +\n  labs(title = \"100,000 rolls of a single die\")\n\n\n\n\n\n\n\n\n\n\nrunif()\nAnother way to generate uniformly distributed numbers is to use the runif() function (which is short for “random uniform”, and which took me years to realize, and for years I wondered why people used a function named “run if” when there’s no if statement anywhere??)\nrunif() will choose numbers between a minimum and a maximum. These numbers will not be whole numbers. By default, the min and max are 0 and 1:\n\nrunif(5)\n## [1] 0.09862 0.96294 0.88655 0.05623 0.44452\n\nHere are 5 numbers between 35 and 56:\n\nrunif(5, min = 35, max = 56)\n## [1] 46.83 42.89 37.75 53.22 46.13\n\nSince these aren’t whole numbers, you can round them to make them look more realistic (like, if you were generating a column for age, you probably don’t want people who are 21.5800283 years old):\n\n# Generate 5 people between the ages of 18 and 35\nround(runif(5, min = 18, max = 35), 0)\n## [1] 21 28 33 34 31\n\nYou can confirm that each number has equal probability if you make a histogram. Here are 5,000 random people between 18 and 35:\n\nset.seed(1234)\nlots_of_numbers <- tibble(x = runif(5000, min = 18, max = 35))\n\nggplot(lots_of_numbers, aes(x = x)) +\n  geom_histogram(binwidth = 1, color = \"white\", boundary = 18)\n\n\n\n\n\n\n\n\n\n\n\nNormal distribution\nThe whole “choose a number between 1 and 10” idea of a uniform distribution is neat and conceptually makes sense, but most numbers that exist in the world tend to have higher probabilities around certain values—almost like gravity around a specific point. For instance, income in the United States is not uniformly distributed—a handful of people are really really rich, lots are very poor, and most are kind of clustered around an average.\nThe idea of having possible values clustered around an average is how the rest of these distributions work (uniform distributions don’t have any sort of central gravity point; all these others do). Each distribution is defined by different things called parameters, or values that determine the shape of the probabilities and locations of the clusters.\nA super common type of distribution is the normal distribution. This is the famous “bell curve” you learn about in earlier statistics classes. A normal distribution has two parameters:\n\nA mean (the center of the cluster)\nA standard deviation (how much spread there is around the mean).\n\nIn R, you can generate random numbers from a normal distribution with the rnorm() function. It takes three arguments: the number of numbers you want to generate, the mean, and the standard deviation. It defaults to a mean of 0 and a standard deviation of 1, which means most numbers will cluster around 0, with a lot between −1 and 1, and some going up to −2 and 2 (technically 67% of numbers will be between −1 and 1, while 95% of numbers will be between −2–2ish)\n\nrnorm(5)\n## [1] -1.3662  0.5392 -1.3219 -0.2813 -2.1049\n\n# Cluster around 10, with an SD of 4\nrnorm(5, mean = 10, sd = 4)\n## [1]  3.530  7.105 11.227 10.902 13.743\n\nWhen working with uniform distributions, it’s easy to know how high or low your random values might go, since you specify a minimum and maximum number. With a normal distribution, you don’t specify starting and ending points—you specify a middle and a spread, so it’s harder to guess the whole range. Plotting random values is thus essential. Here’s 1,000 random numbers clustered around 10 with a standard deviation of 4:\n\nset.seed(1234)\n\nplot_data <- tibble(x = rnorm(1000, mean = 10, sd = 4))\nhead(plot_data)\n\n\n\n\n\nx\n\n\n\n\n5.1717\n\n\n11.1097\n\n\n14.3378\n\n\n0.6172\n\n\n11.7165\n\n\n12.0242\n\n\n\n\n\n\nggplot(plot_data, aes(x = x)) +\n  geom_histogram(binwidth = 1, boundary = 0, color = \"white\")\n\n\n\n\n\n\n\n\nNeat. Most numbers are around 10; lots are between 5 and 15; some go as high as 25 and as low as −5.\nWatch what happens if you change the standard deviation to 10 to make the spread wider:\n\nset.seed(1234)\n\nplot_data <- tibble(x = rnorm(1000, mean = 10, sd = 10))\nhead(plot_data)\n\n\n\n\n\nx\n\n\n\n\n-2.071\n\n\n12.774\n\n\n20.844\n\n\n-13.457\n\n\n14.291\n\n\n15.061\n\n\n\n\n\n\nggplot(plot_data, aes(x = x)) +\n  geom_histogram(binwidth = 1, boundary = 0, color = \"white\")\n\n\n\n\n\n\n\n\nIt’s still centered around 10, but now you get values as high as 40 and as low as −20. The data is more spread out now.\nWhen simulating data, you’ll most often use a normal distribution just because it’s easy and lots of things follow that pattern in the real world. Incomes, ages, education, etc. all have a kind of gravity to them, and a normal distribution is a good way of showing that gravity. For instance, here are 1,000 simulated people with reasonable random incomes, ages, and years of education:\n\nset.seed(1234)\n\nfake_people <- tibble(income = rnorm(1000, mean = 40000, sd = 15000),\n                      age = rnorm(1000, mean = 25, sd = 8),\n                      education = rnorm(1000, mean = 16, sd = 4))\nhead(fake_people)\n\n\n\n\n\nincome\nage\neducation\n\n\n\n\n21894\n15.357\n12.105\n\n\n44161\n27.412\n15.601\n\n\n56267\n12.687\n15.557\n\n\n4815\n30.083\n20.769\n\n\n46437\n30.624\n9.377\n\n\n47591\n9.753\n11.817\n\n\n\n\n\n\nfake_income <- ggplot(fake_people, aes(x = income)) +\n  geom_histogram(binwidth = 5000, color = \"white\", boundary = 0) +\n  labs(title = \"Simulated income\")\n\nfake_age <- ggplot(fake_people, aes(x = age)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0) +\n  labs(title = \"Simulated age\")\n\nfake_education <- ggplot(fake_people, aes(x = education)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0) +\n  labs(title = \"Simulated education\")\n\nfake_income + fake_age + fake_education\n\n\n\n\n\n\n\n\nThese three columns all have different centers and spreads. Income is centered around $45,000, going up to almost $100,000 and as low as −$10,000; age is centered around 25, going as low as 0 and as high as 50; education is centered around 16, going as low as 3 and as high as 28. Cool.\nAgain, when generating these numbers, it’s really hard to know how high or low these ranges will be, so it’s a good idea to plot them constantly. I settled on sd = 4 for education only because I tried things like 1 and 10 and got wild looking values (everyone basically at 16 with little variation, or everyone ranging from −20 to 50, which makes no sense when thinking about years of education). Really it’s just a process of trial and error until the data looks good and reasonable.\n\n\nTruncated normal distribution\nSometimes you’ll end up with negative numbers that make no sense. Look at income in the plot above, for instance. Some people are earning −$10,000 year. The rest of the distribution looks okay, but those negative values are annoying.\nTo fix this, you can use something called a truncated normal distribution, which lets you specify a mean and standard deviation, just like a regular normal distribution, but also lets you specify a minimum and/or maximum so you don’t get values that go too high or too low.\nR doesn’t have a truncated normal function built-in, but you can install the truncnorm package and use the rtruncnorm() function. A truncated normal distribution has four parameters:\n\nA mean (mean)\nA standard deviation (sd)\nA minimum (optional) (a)\nA maximum (optional) (b)\n\nFor instance, let’s pretend you have a youth program designed to target people who are between 12 and 21 years old, with most around 14. You can generate numbers with a mean of 14 and a standard deviation of 5, but you’ll create people who are too old, too young, or even negatively aged!\n\nset.seed(1234)\n\nplot_data <- tibble(fake_age = rnorm(1000, mean = 14, sd = 5))\nhead(plot_data)\n\n\n\n\n\nfake_age\n\n\n\n\n7.965\n\n\n15.387\n\n\n19.422\n\n\n2.272\n\n\n16.146\n\n\n16.530\n\n\n\n\n\n\nggplot(plot_data, aes(x = fake_age)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0)\n\n\n\n\n\n\n\n\nTo fix this, truncate the range at 12 and 21:\n\nlibrary(truncnorm)  # For rtruncnorm()\n\nset.seed(1234)\n\nplot_data <- tibble(fake_age = rtruncnorm(1000, mean = 14, sd = 5, a = 12, b = 21))\nhead(plot_data)\n\n\n\n\n\nfake_age\n\n\n\n\n15.39\n\n\n19.42\n\n\n16.15\n\n\n16.53\n\n\n14.32\n\n\n18.80\n\n\n\n\n\n\nggplot(plot_data, aes(x = fake_age)) +\n  geom_histogram(binwidth = 1, color = \"white\", boundary = 0)\n\n\n\n\n\n\n\n\nAnd voila! A bunch of people between 12 and 21, with most around 14, with no invalid values.\n\n\nBeta distribution\nNormal distributions are neat, but they’re symmetrical around the mean (unless you truncate them). What if your program involves a test with a maximum of 100 points where most people score around 85, but a sizable portion score below that. In other words, it’s not centered at 85, but is skewed left.\nTo simulate this kind of distribution, we can use a Beta distribution. Beta distributions are neat because they naturally only range between 0 and 1—they’re perfect for things like percentages or proportions or or 100-based exams.\nUnlike a normal distribution, where you use the mean and standard deviation as parameters, Beta distributions take two non-intuitive parameters:\n\nshape1\nshape2\n\nWhat the heck are these shapes though?! This answer at Cross Validated does an excellent job of explaining the intuition behind Beta distributions and it’d be worth it to read it.\nBasically, Beta distributions are good at modeling probabilities of things, and shape1 and shape2 represent specific parts of a probability formula.\nLet’s say that there’s an exam with 10 points where most people score a 6/10. Another way to think about this is that an exam is a collection of correct answers and incorrect answers, and that the percent correct follows this equation:\n\\[\n\\frac{\\text{Number correct}}{\\text{Number correct} + \\text{Number incorrect}}\n\\]\nIf you scored a 6, you could write that as:\n\\[\n\\frac{6}{6 + 4}\n\\]\nTo make it more general, we can use Greek variable names: \\(\\alpha\\) for the number correct and \\(\\beta\\) for the number incorrect, leaving us with this:\n\\[\n\\frac{\\alpha}{\\alpha + \\beta}\n\\]\nNeat.\nIn a Beta distribution, the \\(\\alpha\\) and \\(\\beta\\) in that equation correspond to shape1 and shape2. If we want to generate random scores for this test where most people get 6/10, we can use rbeta():\n\nset.seed(1234)\n\nplot_data <- tibble(exam_score = rbeta(1000, shape1 = 6, shape2 = 4)) %>%\n  # rbeta() generates numbers between 0 and 1, so multiply everything by 10 to\n  # scale up the exam scores\n  mutate(exam_score = exam_score * 10)\n\nggplot(plot_data, aes(x = exam_score)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 0:10)\n\n\n\n\n\n\n\n\nMost people score around 6, with a bunch at 5 and 7, and fewer in the tails. Importantly, it’s not centered at 6—the distribution is asymmetric.\nThe magic of—and most confusing part about—Beta distributions is that you can get all sorts of curves by just changing the shape parameters. To make this easier to see, we can make a bunch of different Beta distributions. Instead of plotting them with histograms, we’ll use density plots (and instead of generating random numbers, we’ll plot the actual full range of the distribution (that’s what dbeta and geom_function() do in all these examples)).\nHere’s what we saw before, with \\(\\alpha\\) (shape1) = 6 and \\(\\beta\\) (shape2) = 4:\n\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 6, shape2 = 4))\n\n\n\n\n\n\n\n\nAgain, there’s a peak at 0.6 (or 6), which is what we expected.\nWe can make the distribution narrower if we scale the shapes up. Here pretty much everyone scores around 50% and 75%.\n\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 60, shape2 = 40))\n\n\n\n\n\n\n\n\nSo far all these curves look like normal distributions, just slightly skewed. But when if most people score 90–100%? Or most fail? A Beta distribution can handle that too:\n\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 9, shape2 = 1), color = \"blue\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 1, shape2 = 9), color = \"red\")\n\n\n\n\n\n\n\n\nWith shape1 = 9 and shape2 = 1 (or \\(\\frac{9}{9 + 1}\\)) we get most around 90%, while shape1 = 1 and shape2 = 9 (or \\(\\frac{1}{1 + 9}\\)) gets us most around 10%.\nCheck out all these other shapes too:\n\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 5, shape2 = 5), color = \"blue\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 2, shape2 = 5), color = \"red\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 80, shape2 = 23), color = \"orange\") +\n  geom_function(fun = ~dbeta(.x, shape1 = 13, shape2 = 17), color = \"brown\")\n\n\n\n\n\n\n\n\nIn real life, if I don’t want to figure out the math behind the \\(\\frac{\\alpha}{\\alpha + \\beta}\\) shape values, I end up just choosing different numbers until it looks like the shape I want, and then I use rbeta() with those parameter values. Like, how about we generate some numbers based on the red line above, with shape1 = 2 and shape2 = 5, which looks like it should be centered around 0.2ish (\\(\\frac{2}{2 + 5} = 0.2857\\)):\n\nset.seed(1234)\n\nplot_data <- tibble(thing = rbeta(1000, shape1 = 2, shape2 = 5)) %>%\n  mutate(thing = thing * 100)\nhead(plot_data)\n\n\n\n\n\nthing\n\n\n\n\n10.067\n\n\n34.507\n\n\n55.335\n\n\n2.191\n\n\n38.035\n\n\n39.900\n\n\n\n\n\n\nggplot(plot_data, aes(x = thing)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0)\n\n\n\n\n\n\n\n\nIt worked! Most values are around 20ish, but some go up to 60–80.\n\n\nBinomial distribution\nOften you’ll want to generate a column that only has two values: yes/no, treated/untreated, before/after, big/small, red/blue, etc. You’ll also likely want to control the proportions (25% treated, 62% blue, etc.). You can do this in two different ways: (1) sample() and (2) rbinom().\n\nsample()\nWe already saw sample() when we talked about uniform distributions. To generate a binary variable with sample(), just feed it a list of two possible values:\n\nset.seed(1234)\n\n# Choose 5 random T/F values\npossible_things <- c(TRUE, FALSE)\nsample(possible_things, 5, replace = TRUE)\n## [1] FALSE FALSE FALSE FALSE  TRUE\n\nR will choose these values with equal/uniform probability by default, but you can change that in sample() with the prob argument. For instance, pretend you want to simulate an election. According to the latest polls, one candidate has an 80% chance of winning. You want to randomly choose a winner based on that chance. Here’s how to do that with sample():\n\nset.seed(1234)\ncandidates <- c(\"Person 1\", \"Person 2\")\nsample(candidates, size = 1, prob = c(0.8, 0.2))\n## [1] \"Person 1\"\n\nPerson 1 wins!\nIt’s hard to see the weighted probabilities when you just choose one, so let’s pretend there are 1,000 elections:\n\nset.seed(1234)\nfake_elections <- tibble(winner = sample(candidates,\n                                         size = 1000,\n                                         prob = c(0.8, 0.2),\n                                         replace = TRUE))\nfake_elections %>%\n  count(winner)\n\n\n\n\n\nwinner\nn\n\n\n\n\nPerson 1\n792\n\n\nPerson 2\n208\n\n\n\n\n\n\nggplot(fake_elections, aes(x = winner)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nPerson 1 won 792 of the elections. Neat.\n(This is essentially what election forecasting websites like FiveThirtyEight do! They just do it with way more sophisticated simulations.)\n\n\nrbinom()\nInstead of using sample(), you can use a formal distribution called the binomial distribution. This distribution is often used for things that might have “trials” or binary outcomes that are like success/failure or yes/no or true/false\nThe binomial distribution takes two parameters:\n\nsize: The number of “trials”, or times that an event happens\nprob: The probability of success in each trial\n\nIt’s easiest to see some examples of this. Let’s say you have a program that has a 60% success rate and it is tried on groups of 20 people 5 times. The parameters are thus size = 20 (since there are twenty people per group) and prob = 0.6 (since there is a 60% chance of success):\n\nset.seed(1234)\n\nrbinom(5, size = 20, prob = 0.6)\n## [1] 15 11 11 11 10\n\nThe results here mean that in group 1, 15/20 (75%) people had success, in group 2, 11/20 (55%) people had success, and so on. Not every group will have exactly 60%, but they’re all kind of clustered around that.\nHOWEVER, I don’t like using rbinom() like this, since this is all group-based, and when you’re generating fake people you generally want to use individuals, or groups of 1. So instead, I assume that size = 1, which means that each “group” is only one person large. This forces the generated numbers to either be 0 or 1:\n\nset.seed(1234)\n\nrbinom(5, size = 1, prob = 0.6)\n## [1] 1 0 0 0 0\n\nHere, only 1 of the 5 people were 1/TRUE/yes, which is hardly close to a 60% chance overall, but that’s because we only generated 5 numbers. If we generate lots, we can see the probability of yes emerge:\n\nset.seed(12345)\n\nplot_data <- tibble(thing = rbinom(2000, 1, prob = 0.6)) %>%\n  # Make this a factor since it's basically a yes/no categorical variable\n  mutate(thing = factor(thing))\n\nplot_data %>%\n  count(thing) %>%\n  mutate(proportion = n / sum(n))\n\n\n\n\n\nthing\nn\nproportion\n\n\n\n\n0\n840\n0.42\n\n\n1\n1160\n0.58\n\n\n\n\n\n\nggplot(plot_data, aes(x = thing)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n58% of the 2,000 fake people here were 1/TRUE/yes, which is close to the goal of 60%. Perfect.\n\n\n\nPoisson distribution\nOne last common distribution that you might find helpful when simulating data is the Poisson distribution (in French, “poisson” = fish, but here it’s not actually named after the animal, but after French mathematician Siméon Denis Poisson).\nA Poisson distribution is special because it generates whole numbers (i.e. nothing like 1.432) that follow a skewed pattern (i.e. more smaller values than larger values). There’s all sorts of fancy math behind it that you don’t need to worry about so much—all you need to know is that it’s good at modeling things called Poisson processes.\nFor instance, let’s say you’re sitting at the front door of a coffee shop (in pre-COVID days) and you count how many people are in each arriving group. You’ll see something like this:\n\n1 person\n1 person\n2 people\n1 person\n3 people\n2 people\n1 person\n\nLots of groups of one, some groups of two, fewer groups of three, and so on. That’s a Poisson process: a bunch of independent random events that combine into grouped events.\nThat sounds weird and esoteric (and it is!), but it reflects lots of real world phenomena, and things you’ll potentially want to measure in a program. For instance, the number of kids a family has follows a type of Poisson process. Lots of families have 1, some have 2, fewer have 3, even fewer have 4, and so on. The number of cars in traffic, the number of phone calls received by an office, arrival times in a line, and even the outbreak of wars are all examples of Poisson processes.\nYou can generate numbers from a Poisson distribution with the rpois() function in R. This distribution only takes a single parameter:\n\nlambda (\\(\\lambda\\))\n\nThe \\(\\lambda\\) value controls the rate or speed that a Poisson process increases (i.e. jumps from 1 to 2, from 2 to 3, from 3 to 4, etc.). I have absolutely zero mathematical intuition for how it works. The two shape parameters for a Beta distribution at least fit in a fraction and you can wrap your head around that, but the lambda in a Poisson distribution is just a mystery to me. So whenever I use a Poisson distribution for something, I just play with the lambda until the data looks reasonable.\nLet’s assume that the number of kids a family has follows a Poisson process. Here’s how we can use rpois() to generate that data:\n\nset.seed(123)\n\n# 10 different families\nrpois(10, lambda = 1)\n##  [1] 0 2 1 2 3 0 1 2 1 1\n\nCool. Most families have 0–1 kids; some have 2; one has 3.\nIt’s easier to see these patterns with a plot:\n\nset.seed(1234)\n\nplot_data <- tibble(num_kids = rpois(500, lambda = 1))\nhead(plot_data)\n\n\n\n\n\nnum_kids\n\n\n\n\n0\n\n\n1\n\n\n1\n\n\n1\n\n\n2\n\n\n1\n\n\n\n\n\n\nplot_data %>%\n  group_by(num_kids) %>%\n  summarize(count = n()) %>%\n  mutate(proportion = count / sum(count))\n\n\n\n\n\nnum_kids\ncount\nproportion\n\n\n\n\n0\n180\n0.360\n\n\n1\n187\n0.374\n\n\n2\n87\n0.174\n\n\n3\n32\n0.064\n\n\n4\n11\n0.022\n\n\n5\n3\n0.006\n\n\n\n\n\n\nggplot(plot_data, aes(x = num_kids)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nHere 75ish% of families have 0–1 kids (36% + 37.4%), 17% have 2 kids, 6% have 3, 2% have 4, and only 0.6% have 5.\nWe can play with the \\(\\lambda\\) to increase the rate of kids per family:\n\nset.seed(1234)\n\nplot_data <- tibble(num_kids = rpois(500, lambda = 2))\nhead(plot_data)\n\n\n\n\n\nnum_kids\n\n\n\n\n0\n\n\n2\n\n\n2\n\n\n2\n\n\n4\n\n\n2\n\n\n\n\n\n\nplot_data %>%\n  group_by(num_kids) %>%\n  summarize(count = n()) %>%\n  mutate(proportion = count / sum(count))\n\n\n\n\n\nnum_kids\ncount\nproportion\n\n\n\n\n0\n62\n0.124\n\n\n1\n135\n0.270\n\n\n2\n145\n0.290\n\n\n3\n88\n0.176\n\n\n4\n38\n0.076\n\n\n5\n19\n0.038\n\n\n6\n10\n0.020\n\n\n7\n3\n0.006\n\n\n\n\n\n\nggplot(plot_data, aes(x = num_kids)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nNow most families have 1–2 kids. Cool."
  },
  {
    "objectID": "slides/random-numbers.html#rescaling-numbers",
    "href": "slides/random-numbers.html#rescaling-numbers",
    "title": "Generating random numbers",
    "section": "Rescaling numbers",
    "text": "Rescaling numbers\nAll these different distributions are good at generating general shapes:\n\nUniform: a bunch of random numbers with no central gravity\nNormal: an average ± some variation\nBeta: different shapes and skews and gravities between 0 and 1\nBinomial: yes/no outcomes that follow some probability\n\nThe shapes are great, but you also care about the values of these numbers. This can be tricky. As we saw earlier with a normal distribution, sometimes you’ll get values that go below zero or above some value you care about. We fixed that with a truncated normal distribution, but not all distributions have truncated versions. Additionally, if you’re using a Beta distribution, you’re stuck in a 0–1 scale (or 0–10 or 0–100 if you multiply the value by 10 or 100 or whatever).\nWhat if you want a fun skewed Beta shape for a variable like income or some other value that doesn’t fit within a 0–1 range? You can rescale any set of numbers after-the-fact using the rescale() function from the scales library and rescale things to whatever range you want.\nFor instance, let’s say that income isn’t normally distributed, but is right-skewed with a handful of rich people. This might look like a Beta distribution with shape1 = 2 and shape2 = 5:\n\nggplot() +\n  geom_function(fun = ~dbeta(.x, shape1 = 2, shape2 = 5))\n\n\n\n\n\n\n\n\nIf we generate random numbers from this distribution, they’ll all be stuck between 0 and 1:\n\nset.seed(1234)\n\nfake_people <- tibble(income = rbeta(1000, shape1 = 2, shape2 = 5))\n\nggplot(fake_people, aes(x = income)) +\n  geom_histogram(binwidth = 0.1, color = \"white\", boundary = 0)\n\n\n\n\n\n\n\n\nWe can take those underling 0–1 values and rescale them to some other range using the rescale() function. We can specify the minimum and maximum values in the to argument. Here we’ll scale it up so that 0 = $10,000 and 1 = $100,000. Our rescaled version follows the same skewed Beta distribution shape, but now we’re using better values!\n\nlibrary(scales)\n\nfake_people_scaled <- fake_people %>%\n  mutate(income_scaled = rescale(income, to = c(10000, 100000)))\nhead(fake_people_scaled)\n\n\n\n\n\nincome\nincome_scaled\n\n\n\n\n0.1007\n21154\n\n\n0.3451\n49014\n\n\n0.5534\n72757\n\n\n0.0219\n12176\n\n\n0.3804\n53036\n\n\n0.3990\n55162\n\n\n\n\n\n\nggplot(fake_people_scaled, aes(x = income_scaled)) +\n  geom_histogram(binwidth = 5000, color = \"white\", boundary = 0)\n\n\n\n\n\n\n\n\nThis works for anything, really. For instance, instead of specifying a mean and standard deviation for a normal distribution and hoping that the generated values don’t go too high or too low, you can generate a normal distribution with a mean of 0 and standard deviation of 1 and then rescale it to the range you want:\n\nset.seed(1234)\n\nfake_data <- tibble(age_not_scaled = rnorm(1000, mean = 0, sd = 1)) %>%\n  mutate(age = rescale(age_not_scaled, to = c(18, 65)))\nhead(fake_data)\n\n\n\n\n\nage_not_scaled\nage\n\n\n\n\n-1.2071\n33.61\n\n\n0.2774\n44.19\n\n\n1.0844\n49.95\n\n\n-2.3457\n25.49\n\n\n0.4291\n45.27\n\n\n0.5061\n45.82\n\n\n\n\n\n\nplot_unscaled <- ggplot(fake_data, aes(x = age_not_scaled)) +\n  geom_histogram(binwidth = 0.5, color = \"white\", boundary = 0)\n\nplot_scaled <- ggplot(fake_data, aes(x = age)) +\n  geom_histogram(binwidth = 5, color = \"white\", boundary = 0)\n\nplot_unscaled + plot_scaled\n\n\n\n\n\n\n\n\nThis gives you less control over the center of the distribution (here it happens to be 40 because that’s in the middle of 18 and 65), but it gives you more control over the edges of the distribution.\nRescaling things is really helpful when building in effects and interacting columns with other columns, since multiplying variables by different coefficients can make the values go way out of the normal range. You’ll see a lot more of that in the synthetic data example."
  },
  {
    "objectID": "slides/random-numbers.html#summary",
    "href": "slides/random-numbers.html#summary",
    "title": "Generating random numbers",
    "section": "Summary",
    "text": "Summary\nPhew. We covered a lot here, and we barely scratched the surface of all the distributions that exist. Here’s a helpful summary of the main distributions you should care about:\n\n\n\n\n \n  \n    Distribution \n    Description \n    Situations \n    Parameters \n    Code \n  \n \n\n  \n    Uniform \n    Numbers between a minimum and maximum; everything equally likely \n    ID numbers, age \n    min, max \n    sample() or runif() \n  \n  \n    Normal \n    Numbers bunched up around an average with a surrounding spread; numbers closer to average more likely \n    Income, education, most types of numbers that have some sort of central tendency \n    mean, sd \n    rnorm() \n  \n  \n    Truncated normal \n    Normal distribution + constraints on minimum and/or maximum values \n    Anything with a normal distribution \n    mean, sd, a (minimum), b (maximum) \n    truncnorm::rtruncnorm() \n  \n  \n    Beta \n    Numbers constrained between 0 and 1 \n    Anything with percents; anything on a 0–1(00) scale; anything, really, if you use rescale() to rescale it \n    shape1 ($\\alpha$), shape2 ($\\beta$) ($\\frac{\\alpha}{\\alpha + \\beta}$) \n    rbeta() \n  \n  \n    Binomial \n    Binary variables \n    Treatment/control, yes/no, true/false, 0/1 \n    size, prob \n    sample(..., prob = 0.5) or rbinom() \n  \n  \n    Poisson \n    Whole numbers that represent counts of things \n    Number of kids, number of cities lived in, arrival times \n    lambda \n    rpois()"
  },
  {
    "objectID": "slides/random-numbers.html#example",
    "href": "slides/random-numbers.html#example",
    "title": "Generating random numbers",
    "section": "Example",
    "text": "Example\nAnd here’s an example dataset of 1,000 fake people and different characteristics. One shortcoming of this fake data is that each of these columns is completely independent—there’s no relationship between age and education and family size and income. You can see how to make these columns correlated (and make one cause another!) in the example for synthetic data.\n\nset.seed(1234)\n\n# Set the number of people here once so it's easier to change later\nn_people <- 1000\n\nexample_fake_people <- tibble(\n  id = 1:n_people,\n  opinion = sample(1:5, n_people, replace = TRUE),\n  age = runif(n_people, min = 18, max = 80),\n  income = rnorm(n_people, mean = 50000, sd = 10000),\n  education = rtruncnorm(n_people, mean = 16, sd = 6, a = 8, b = 24),\n  happiness = rbeta(n_people, shape1 = 2, shape2 = 1),\n  treatment = sample(c(TRUE, FALSE), n_people, replace = TRUE, prob = c(0.3, 0.7)),\n  size = rbinom(n_people, size = 1, prob = 0.5),\n  family_size = rpois(n_people, lambda = 1) + 1  # Add one so there are no 0s\n) %>%\n  # Adjust some of these columns\n  mutate(opinion = recode(opinion, \"1\" = \"Strongly disagree\",\n                          \"2\" = \"Disagree\", \"3\" = \"Neutral\",\n                          \"4\" = \"Agree\", \"5\" = \"Strongly agree\")) %>%\n  mutate(size = recode(size, \"0\" = \"Small\", \"1\" = \"Large\")) %>%\n  mutate(happiness = rescale(happiness, to = c(1, 8)))\n\nhead(example_fake_people)\n\n\n\n\n\n\n\nid\n\n\nopinion\n\n\nage\n\n\nincome\n\n\neducation\n\n\nhappiness\n\n\ntreatment\n\n\nsize\n\n\nfamily_size\n\n\n\n\n\n\n1\n\n\nAgree\n\n\n31.67\n\n\n43900\n\n\n18.31\n\n\n7.197\n\n\nTRUE\n\n\nLarge\n\n\n1\n\n\n\n\n2\n\n\nDisagree\n\n\n52.85\n\n\n34696\n\n\n17.06\n\n\n4.728\n\n\nTRUE\n\n\nLarge\n\n\n2\n\n\n\n\n3\n\n\nStrongly agree\n\n\n45.26\n\n\n43263\n\n\n17.07\n\n\n7.323\n\n\nFALSE\n\n\nLarge\n\n\n4\n\n\n\n\n4\n\n\nAgree\n\n\n34.92\n\n\n40558\n\n\n11.71\n\n\n4.183\n\n\nFALSE\n\n\nSmall\n\n\n2\n\n\n\n\n5\n\n\nStrongly disagree\n\n\n50.26\n\n\n41392\n\n\n13.26\n\n\n2.613\n\n\nTRUE\n\n\nSmall\n\n\n2\n\n\n\n\n6\n\n\nStrongly agree\n\n\n63.59\n\n\n69917\n\n\n11.17\n\n\n4.355\n\n\nFALSE\n\n\nSmall\n\n\n2\n\n\n\n\n\n\n\n\n\nplot_opinion <- ggplot(example_fake_people, aes(x = opinion)) +\n  geom_bar() +\n  guides(fill = \"none\") +\n  labs(title = \"Opinion (uniform with sample())\")\n\nplot_age <- ggplot(example_fake_people, aes(x = age)) +\n  geom_histogram(binwidth = 5, color = \"white\", boundary = 0) +\n  labs(title = \"Age (uniform with runif())\")\n\nplot_income <- ggplot(example_fake_people, aes(x = income)) +\n  geom_histogram(binwidth = 5000, color = \"white\", boundary = 0) +\n  labs(title = \"Income (normal)\")\n\nplot_education <- ggplot(example_fake_people, aes(x = education)) +\n  geom_histogram(binwidth = 2, color = \"white\", boundary = 0) +\n  labs(title = \"Education (truncated normal)\")\n\nplot_happiness <- ggplot(example_fake_people, aes(x = happiness)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 1:8) +\n  labs(title = \"Happiness (Beta, rescaled to 1-8)\")\n\nplot_treatment <- ggplot(example_fake_people, aes(x = treatment)) +\n  geom_bar() +\n  labs(title = \"Treatment (binary with sample())\")\n\nplot_size <- ggplot(example_fake_people, aes(x = size)) +\n  geom_bar() +\n  labs(title = \"Size (binary with rbinom())\")\n\nplot_family <- ggplot(example_fake_people, aes(x = family_size)) +\n  geom_bar() +\n  scale_x_continuous(breaks = 1:7) +\n  labs(title = \"Family size (Poisson)\")\n\n(plot_opinion + plot_age) / (plot_income + plot_education)\n\n\n\n\n\n\n\n\n\n(plot_happiness + plot_treatment) / (plot_size + plot_family)"
  },
  {
    "objectID": "slides/slides_2021.html",
    "href": "slides/slides_2021.html",
    "title": "2021",
    "section": "",
    "text": "First presentation\n\n\n\n\n\n\nSecond presentation"
  },
  {
    "objectID": "slides/slides_2022.html",
    "href": "slides/slides_2022.html",
    "title": "2022",
    "section": "",
    "text": "First presentation"
  },
  {
    "objectID": "slides/synthetic-data.html",
    "href": "slides/synthetic-data.html",
    "title": "The ultimate guide to generating synthetic data for causal inference",
    "section": "",
    "text": "In the example guide for generating random numbers, we explored how to use a bunch of different statistical distributions to create variables that had reasonable values. However, each of the columns that we generated there were completely independent of each other. In the final example, we made some data with columns like age, education, and income, but none of those were related, though in real life they would be.\nGenerating random variables is fairly easy: choose some sort of distributional shape, set parameters like a mean and standard deviation, and let randomness take over. Forcing variables to be related is a little trickier and involves a little math. But don’t worry! That math is all just regression stuff!"
  },
  {
    "objectID": "slides/synthetic-data.html#basic-example",
    "href": "slides/synthetic-data.html#basic-example",
    "title": "The ultimate guide to generating synthetic data for causal inference",
    "section": "Basic example",
    "text": "Basic example\n\nRelationships and regression\nLet’s pretend we want to predict someone’s happiness on a 10-point scale based on the number of cookies they’ve eaten and whether or not their favorite color is blue.\n\\[\n\\text{Happiness} = \\beta_0 + \\beta_1 \\text{Cookies eaten} + \\beta_2 \\text{Favorite color is blue} + \\varepsilon\n\\]\nWe can generate a fake dataset with columns for happiness (Beta distribution clustered around 7ish), cookies (Poisson distribution), and favorite color (binomial distribution for blue/not blue):\n\nset.seed(1234)\n\nn_people <- 1000\nhappiness_simple <- tibble(\n  id = 1:n_people,\n  happiness = rbeta(n_people, shape1 = 7, shape2 = 3),\n  cookies = rpois(n_people, lambda = 1),\n  color_blue = sample(c(\"Blue\", \"Not blue\"), n_people, replace = TRUE)\n) %>%\n  # Adjust some of the columns\n  mutate(happiness = round(happiness * 10, 1),\n         cookies = cookies + 1,\n         color_blue = fct_relevel(factor(color_blue), \"Not blue\"))\n\nhead(happiness_simple)\n\n\n\n\n\nid\nhappiness\ncookies\ncolor_blue\n\n\n\n\n1\n8.7\n2\nBlue\n\n\n2\n6.5\n2\nNot blue\n\n\n3\n4.8\n2\nBlue\n\n\n4\n9.6\n3\nNot blue\n\n\n5\n6.2\n1\nNot blue\n\n\n6\n6.1\n2\nBlue\n\n\n\n\n\n\nWe have a neat dataset now, so let’s run a regression. Is eating more cookies or liking blue associated with greater happiness?\n\nmodel_happiness1 <- lm(happiness ~ cookies + color_blue, data = happiness_simple)\ntidy(model_happiness1)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n7.0592\n0.1053\n67.0432\n0.0000\n\n\ncookies\n-0.0088\n0.0419\n-0.2111\n0.8328\n\n\ncolor_blueBlue\n-0.0202\n0.0861\n-0.2347\n0.8145\n\n\n\n\n\n\nNot really. The coefficients for both cookies and color_blueBlue are basically 0 and not statistically significant. That makes sense since the three columns are completely independent of each other. If there were any significant effects, that’d be strange and solely because of random chance.\nFor the sake of your final project, you can just leave all the columns completely independent of each other if you want. None of your results will be significant and you won’t see any effects anywhere, but you can still build models, run all the pre-model diagnostics, and create graphs and tables based on this data.\nHOWEVER, it will be far more useful to you if you generate relationships. The whole goal of this class is to find causal effects in observational, non-experimental data. If you can generate synthetic non-experimental data and bake in a known causal effect, you can know if your different methods for recovering that effect are working.\nSo how do we bake in correlations and causal effects?\n\n\nExplanatory variables linked to outcome; no connection between explanatory variables\nTo help with the intuition of how to link these columns, think about the model we’re building:\n\\[\n\\text{Happiness} = \\beta_0 + \\beta_1 \\text{Cookies eaten} + \\beta_2 \\text{Favorite color is blue} + \\varepsilon\n\\]\nThis model provides estimates for all those betas. Throughout the semester, we’ve used the analogy of sliders and switches to describe regression coefficients. Here we have both:\n\n\\(\\beta_0\\): The average baseline happiness.\n\\(\\beta_1\\): The additional change in happiness that comes from eating one cookie. This is a slider: move cookies up by one and happiness changes by \\(\\beta_1\\).\n\\(\\beta_2\\): The change in happiness that comes from having your favorite color be blue. This is a switch: turn on “blue” for someone and their happiness changes by \\(\\beta_2\\).\n\nWe can invent our own coefficients and use some math to build them into the dataset. Let’s use these numbers as our targets:\n\n\\(\\beta_0\\): Average happiness is 7\n\\(\\beta_1\\): Eating one more cookie boosts happiness by 0.25 points\n\\(\\beta_2\\): People who like blue have 0.75 higher happiness\n\nWhen generating the data, we can’t just use rbeta() by itself to generate happiness, since happiness depends on both cookies and favorite color (that’s why we call it a dependent variable). To build in this effect, we can add a new column that uses math and modifies the underlying rbeta()-based happiness score:\n\nhappiness_with_effect <- happiness_simple %>%\n  # Turn the categorical favorite color column into TRUE/FALSE so we can do math with it\n  mutate(color_blue_binary = ifelse(color_blue == \"Blue\", TRUE, FALSE)) %>%\n  # Make a new happiness column that uses coefficients for cookies and favorite color\n  mutate(happiness_modified = happiness + (0.25 * cookies) + (0.75 * color_blue_binary))\nhead(happiness_with_effect)\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nhappiness\ncookies\ncolor_blue\ncolor_blue_binary\nhappiness_modified\n\n\n\n\n1\n8.7\n2\nBlue\nTRUE\n9.95\n\n\n2\n6.5\n2\nNot blue\nFALSE\n7.00\n\n\n3\n4.8\n2\nBlue\nTRUE\n6.05\n\n\n4\n9.6\n3\nNot blue\nFALSE\n10.35\n\n\n5\n6.2\n1\nNot blue\nFALSE\n6.45\n\n\n6\n6.1\n2\nBlue\nTRUE\n7.35\n\n\n\n\n\n\nNow that we have a new happiness_modified column we can run a model using it as the outcome:\n\nmodel_happiness2 <- lm(happiness_modified ~ cookies + color_blue, data = happiness_with_effect)\ntidy(model_happiness2)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n7.0592\n0.1053\n67.043\n0\n\n\ncookies\n0.2412\n0.0419\n5.759\n0\n\n\ncolor_blueBlue\n0.7298\n0.0861\n8.477\n0\n\n\n\n\n\n\nWhoa! Look at those coefficients! They’re exactly what we tried to build in! The baseline happiness (intercept) is ≈7, eating one cookie is associated with a ≈0.25 increase in happiness, and liking blue is associated with a ≈0.75 increase in happiness.\nHowever, we originally said that happiness was a 0-10 point scale. After boosting it with extra happiness for cookies and liking blue, there are some people who score higher than 10:\n\n# Original scale\nggplot(happiness_with_effect, aes(x = happiness)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 0:11) +\n  coord_cartesian(xlim = c(0, 11))\n\n\n\n\n\n\n\n\n\n# Scaled up\nggplot(happiness_with_effect, aes(x = happiness_modified)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 0:11) +\n  coord_cartesian(xlim = c(0, 11))\n\n\n\n\n\n\n\n\nTo fix that, we can use the rescale() function from the scales package to force the new happiness_modified variable to fit back in its original range:\n\nhappiness_with_effect <- happiness_with_effect %>%\n  mutate(happiness_rescaled = rescale(happiness_modified, to = c(3, 10)))\n\nggplot(happiness_with_effect, aes(x = happiness_rescaled)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  scale_x_continuous(breaks = 0:11) +\n  coord_cartesian(xlim = c(0, 11))\n\n\n\n\n\n\n\n\nEverything is back in the 3–10 range now. However, the rescaling also rescaled our built-in effects. Look what happens if we use the happiness_rescaled in the model:\n\nmodel_happiness3 <- lm(happiness_rescaled ~ cookies + color_blue, data = happiness_with_effect)\ntidy(model_happiness3)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n6.3351\n0.0910\n69.621\n0\n\n\ncookies\n0.2084\n0.0362\n5.759\n0\n\n\ncolor_blueBlue\n0.6307\n0.0744\n8.477\n0\n\n\n\n\n\n\nNow the baseline happiness is 6.3, the cookies effect is 0.2, and the blue effect is 0.63. These effects shrunk because we shrunk the data back down to have a maximum of 10.\nThere are probably fancy mathy ways to rescale data and keep the coefficients the same size, but rather than figure that out (who even wants to do that?!), my strategy is just to play with numbers until the results look good. Instead of using a 0.25 cookie effect and 0.75 blue effect, I make those effects bigger so that the rescaled version is roughly what I really want. There’s no systematic way to do this—I ran this chunk below a bunch of times until the numbers worked.\n\nset.seed(1234)\n\nn_people <- 1000\nhappiness_real_effect <- tibble(\n  id = 1:n_people,\n  happiness_baseline = rbeta(n_people, shape1 = 7, shape2 = 3),\n  cookies = rpois(n_people, lambda = 1),\n  color_blue = sample(c(\"Blue\", \"Not blue\"), n_people, replace = TRUE)\n) %>%\n  # Adjust some of the columns\n  mutate(happiness_baseline = round(happiness_baseline * 10, 1),\n         cookies = cookies + 1,\n         color_blue = fct_relevel(factor(color_blue), \"Not blue\")) %>%\n  # Turn the categorical favorite color column into TRUE/FALSE so we can do math with it\n  mutate(color_blue_binary = ifelse(color_blue == \"Blue\", TRUE, FALSE)) %>%\n  # Make a new happiness column that uses coefficients for cookies and favorite color\n  mutate(happiness_effect = happiness_baseline +\n           (0.31 * cookies) +  # Cookie effect\n           (0.91 * color_blue_binary)) %>%  # Blue effect\n  # Rescale to 3-10, since that's what the original happiness column looked like\n  mutate(happiness = rescale(happiness_effect, to = c(3, 10)))\n\nmodel_does_this_work_yet <- lm(happiness ~ cookies + color_blue, data = happiness_real_effect)\ntidy(model_does_this_work_yet)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n6.1459\n0.0886\n69.377\n0\n\n\ncookies\n0.2534\n0.0352\n7.192\n0\n\n\ncolor_blueBlue\n0.7486\n0.0724\n10.335\n0\n\n\n\n\n\n\nThere’s nothing magical about the 0.31 and 0.91 numbers I used here; I just kept changing those to different things until the regression coefficients ended up at ≈0.25 and ≈0.75. Also, I gave up on trying to make the baseline happiness 7. It’s possible to do—you’d just need to also shift the underlying Beta distribution up (like shape1 = 9, shape2 = 2 or something). But then you’d also need to change the coefficients more. You’ll end up with 3 moving parts and it can get complicated, so I don’t worry too much about it, since what we care about the most here is the effect of cookies and favorite color, not baseline levels of happiness.\nPhew. We successfully connected cookies and favorite color to happiness and we have effects that are measurable with regression! One last thing that I would do is get rid of some of the intermediate columns like color_blue_binary or happiness_effect—we only used those for the behind-the-scenes math of creating the effect. Here’s our final synthetic dataset:\n\nhappiness <- happiness_real_effect %>%\n  select(id, happiness, cookies, color_blue)\nhead(happiness)\n\n\n\n\n\nid\nhappiness\ncookies\ncolor_blue\n\n\n\n\n1\n8.814\n2\nBlue\n\n\n2\n6.197\n2\nNot blue\n\n\n3\n5.532\n2\nBlue\n\n\n4\n9.066\n3\nNot blue\n\n\n5\n5.684\n1\nNot blue\n\n\n6\n6.626\n2\nBlue\n\n\n\n\n\n\nWe can save that as a CSV file with write_csv():\n\nwrite_csv(happiness, \"data/happiness_fake_data.csv\")\n\n\n\nExplanatory variables linked to outcome; connection between explanatory variables\nIn that cookie example, we assumed that both cookie consumption and favorite color are associated with happiness. We also assumed that cookie consumption and favorite color are not related to each other. But what if they are? What if people who like blue eat more cookies?\nWe’ve already used regression-based math to connect explanatory variables to outcome variables. We can use that same intuition to connect explanatory variables to each other.\nThe easiest way to think about this is with DAGs. Here’s the DAG for the model we just ran:\n\nhappiness_dag1 <- dagify(hap ~ cook + blue,\n                         coords = list(x = c(hap = 3, cook = 1, blue = 2),\n                                       y = c(hap = 1, cook = 1, blue = 2)))\n\nggdag(happiness_dag1) +\n  theme_dag()\n\n\n\n\n\n\n\n\nBoth cookies and favorite color cause happiness, but there’s no link between them. Notice that dagify() uses the same model syntax that lm() does: hap ~ cook + blue. If we think of this just like a regression model, we can pretend that there are coefficients there too: hap ~ 0.25*cook + 0.75*blue. We don’t actually include any coefficients in the DAG or anything, but it helps with the intuition.\nBut what if people who like blue eat more cookies on average? For whatever reason, let’s pretend that liking blue causes you to eat 0.5 more cookies, on average. Here’s the new DAG:\n\nhappiness_dag2 <- dagify(hap ~ cook + blue,\n                         cook ~ blue,\n                         coords = list(x = c(hap = 3, cook = 1, blue = 2),\n                                       y = c(hap = 1, cook = 1, blue = 2)))\n\nggdag(happiness_dag2) +\n  theme_dag()\n\n\n\n\n\n\n\n\nNow we have two different equations: hap ~ cook + blue and cook ~ blue. Conveniently, these both translate to models, and we know the coefficients we want!\n\nhap ~ 0.25*cook + 0.75*blue: This is what we built before—cookies boost happiness by 0.25 and liking blue boosts happiness by 0.75\ncook ~ 0.3*blue: This is what we just proposed—liking blue boosts cookies by 0.5\n\nWe can follow the same process we did when building the cookie and blue effects into happiness to also build a blue effect into cookies!\n\nset.seed(1234)\n\nn_people <- 1000\nhappiness_cookies_blue <- tibble(\n  id = 1:n_people,\n  happiness_baseline = rbeta(n_people, shape1 = 7, shape2 = 3),\n  cookies = rpois(n_people, lambda = 1),\n  color_blue = sample(c(\"Blue\", \"Not blue\"), n_people, replace = TRUE)\n) %>%\n  # Adjust some of the columns\n  mutate(happiness_baseline = round(happiness_baseline * 10, 1),\n         cookies = cookies + 1,\n         color_blue = fct_relevel(factor(color_blue), \"Not blue\")) %>%\n  # Turn the categorical favorite color column into TRUE/FALSE so we can do math with it\n  mutate(color_blue_binary = ifelse(color_blue == \"Blue\", TRUE, FALSE)) %>%\n  # Make blue have an effect on cookie consumption\n  mutate(cookies = cookies + (0.5 * color_blue_binary)) %>%\n  # Make a new happiness column that uses coefficients for cookies and favorite color\n  mutate(happiness_effect = happiness_baseline +\n           (0.31 * cookies) +  # Cookie effect\n           (0.91 * color_blue_binary)) %>%  # Blue effect\n  # Rescale to 3-10, since that's what the original happiness column looked like\n  mutate(happiness = rescale(happiness_effect, to = c(3, 10)))\nhead(happiness_cookies_blue)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nhappiness_baseline\ncookies\ncolor_blue\ncolor_blue_binary\nhappiness_effect\nhappiness\n\n\n\n\n1\n8.7\n2.5\nBlue\nTRUE\n10.385\n8.835\n\n\n2\n6.5\n2.0\nNot blue\nFALSE\n7.120\n6.139\n\n\n3\n4.8\n2.5\nBlue\nTRUE\n6.485\n5.614\n\n\n4\n9.6\n3.0\nNot blue\nFALSE\n10.530\n8.955\n\n\n5\n6.2\n1.0\nNot blue\nFALSE\n6.510\n5.635\n\n\n6\n6.1\n2.5\nBlue\nTRUE\n7.785\n6.688\n\n\n\n\n\n\nNotice now that people who like blue eat partial cookies, as expected. We can verify that there’s a relationship between liking blue and cookies by running a model:\n\nlm(cookies ~ color_blue, data = happiness_cookies_blue) %>%\n  tidy()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n2.0713\n0.0451\n45.897\n0\n\n\ncolor_blueBlue\n0.4599\n0.0651\n7.068\n0\n\n\n\n\n\n\nYep. Liking blue is associated with 0.46 more cookies on average (it’s not quite 0.5, but that’s because of randomness).\nNow let’s do some neat DAG magic. Let’s say we’re interested in the causal effect of cookies on happiness. We could run a naive model:\n\nmodel_happiness_naive <- lm(happiness ~ cookies, data = happiness_cookies_blue)\ntidy(model_happiness_naive)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n6.2682\n0.0894\n70.132\n0\n\n\ncookies\n0.3253\n0.0354\n9.181\n0\n\n\n\n\n\n\nBased on this, eating a cookie causes you to have 0.325 more happiness points. But that’s wrong! Liking the color blue is a confounder and opens a path between cookies and happiness. You can see the confounding both in the DAG (since blue points to both the cookie node and the happiness node) and in the math (liking blue boosts happiness + liking blue boosts cookie consumption, which boosts happiness).\nTo fix this confounding, we need to statistically adjust for liking blue and close the backdoor path. Ordinarily we’d do this with something like matching or inverse probability weighting, but here we can just include liking blue as a control variable (since it’s linearly related to both cookies and happiness):\n\nmodel_happiness_ate <- lm(happiness ~ cookies + color_blue, data = happiness_cookies_blue)\ntidy(model_happiness_ate)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n6.0884\n0.0870\n70.008\n0\n\n\ncookies\n0.2487\n0.0346\n7.192\n0\n\n\ncolor_blueBlue\n0.7386\n0.0729\n10.138\n0\n\n\n\n\n\n\nAfter adjusting for backdoor confounding, eating one additional cookie causes a 0.249 point increase in happiness. This is the effect we originally built into the data!\nIf you wanted, we could rescale the number of cookies just like we rescaled happiness before, since sometimes adding effects to columns changes their reasonable ranges.\nNow that we have a good working dataset, we can keep the columns we care about and save it as a CSV file for later use:\n\nhappiness <- happiness_cookies_blue %>%\n  select(id, happiness, cookies, color_blue)\nhead(happiness)\n\n\n\n\n\nid\nhappiness\ncookies\ncolor_blue\n\n\n\n\n1\n8.835\n2.5\nBlue\n\n\n2\n6.139\n2.0\nNot blue\n\n\n3\n5.614\n2.5\nBlue\n\n\n4\n8.955\n3.0\nNot blue\n\n\n5\n5.635\n1.0\nNot blue\n\n\n6\n6.688\n2.5\nBlue\n\n\n\n\n\n\n\nwrite_csv(happiness, \"data/happiness_fake_data.csv\")\n\n\n\nAdding extra noise\nWe’ve got columns that follow specific distributions, and we’ve got columns that are statistically related to each other. We can add one more wrinkle to make our fake data even more fun (and even more reflective of real life). We can add some noise.\nRight now, the effects we’re finding are too perfect. When we used mutate() to add a 0.25 boost in happiness for every cookie people ate, we added exactly 0.25 happiness points. If someone ate 2 cookies, they got 0.5 more happiness; if they ate 5, they got 1.25 more.\nWhat if the cookie effect isn’t exactly 0.25, but somewhere around 0.25? For some people it’s 0.1, for others it’s 0.3, for others it’s 0.22. We can use the same ideas we talked about in the random numbers example to generate a distribution of an effect. For instance, let’s say that the average cookie effect is 0.25, but it can vary somewhat with a standard deviation of 0.15:\n\ntemp_data <- tibble(x = rnorm(10000, mean = 0.25, sd = 0.15))\n\nggplot(temp_data, aes(x = x)) +\n  geom_histogram(binwidth = 0.05, boundary = 0, color = \"white\")\n\n\n\n\n\n\n\n\nSometimes it can go as low as −0.25; sometimes it can go as high as 0.75; normally it’s around 0.25.\nNothing in the model explains why it’s higher or lower for some people—it’s just random noise. Remember that the model accounts for that! This random variation is what the \\(\\varepsilon\\) is for in this model equation:\n\\[\n\\text{Happiness} = \\beta_0 + \\beta_1 \\text{Cookies eaten} + \\beta_2 \\text{Favorite color is blue} + \\varepsilon\n\\]\nWe can build that uncertainty into the fake column! Instead of using 0.31 * cookies when generating happiness (which is technically 0.25, but shifted up to account for rescaling happiness back down after), we’ll make a column for the cookie effect and then multiply that by the number of cookies.\n\nset.seed(1234)\n\nn_people <- 1000\nhappiness_cookies_noisier <- tibble(\n  id = 1:n_people,\n  happiness_baseline = rbeta(n_people, shape1 = 7, shape2 = 3),\n  cookies = rpois(n_people, lambda = 1),\n  cookie_effect = rnorm(n_people, mean = 0.31, sd = 0.2),\n  color_blue = sample(c(\"Blue\", \"Not blue\"), n_people, replace = TRUE)\n) %>%\n  # Adjust some of the columns\n  mutate(happiness_baseline = round(happiness_baseline * 10, 1),\n         cookies = cookies + 1,\n         color_blue = fct_relevel(factor(color_blue), \"Not blue\")) %>%\n  # Turn the categorical favorite color column into TRUE/FALSE so we can do math with it\n  mutate(color_blue_binary = ifelse(color_blue == \"Blue\", TRUE, FALSE)) %>%\n  # Make blue have an effect on cookie consumption\n  mutate(cookies = cookies + (0.5 * color_blue_binary)) %>%\n  # Make a new happiness column that uses coefficients for cookies and favorite\n  # color. Importantly, instead of using 0.31 * cookies, we'll use the random\n  # cookie effect we generated earlier\n  mutate(happiness_effect = happiness_baseline +\n           (cookie_effect * cookies) +\n           (0.91 * color_blue_binary)) %>%\n  # Rescale to 3-10, since that's what the original happiness column looked like\n  mutate(happiness = rescale(happiness_effect, to = c(3, 10)))\nhead(happiness_cookies_noisier)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nhappiness_baseline\ncookies\ncookie_effect\ncolor_blue\ncolor_blue_binary\nhappiness_effect\nhappiness\n\n\n\n\n1\n8.7\n2.5\n0.1245\nBlue\nTRUE\n9.921\n8.156\n\n\n2\n6.5\n2.5\n0.3702\nBlue\nTRUE\n8.335\n7.018\n\n\n3\n4.8\n2.5\n0.3261\nBlue\nTRUE\n6.525\n5.719\n\n\n4\n9.6\n3.5\n0.5593\nBlue\nTRUE\n12.468\n9.983\n\n\n5\n6.2\n1.5\n0.0631\nBlue\nTRUE\n7.205\n6.207\n\n\n6\n6.1\n2.0\n0.2222\nNot blue\nFALSE\n6.544\n5.733\n\n\n\n\n\n\nNow let’s look at the cookie effect in this noisier data:\n\nmodel_noisier <- lm(happiness ~ cookies + color_blue, data = happiness_cookies_noisier)\ntidy(model_noisier)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n6.1109\n0.0779\n78.406\n0\n\n\ncookies\n0.2134\n0.0314\n6.791\n0\n\n\ncolor_blueBlue\n0.6501\n0.0671\n9.681\n0\n\n\n\n\n\n\nThe effect is a little smaller now because of the extra noise, so we’d need to mess with the 0.31 and 0.91 coefficients more to get those numbers back up to 0.25 and 0.75.\nWhile this didn’t influence the findings too much here, it can have consequences for other variables. For instance, in the previous section we said that the color blue influences cookie consumption. If the blue effect on cookies isn’t precisely 0.5 but follows some sort of distribution (sometimes small, sometimes big, sometimes negative, sometimes zero), that will influence cookies differently. That random effect on cookie consumption will then work together with the random effect of cookies on happiness, resulting in multiple varied values.\nFor instance, imagine the average effect of liking blue on cookies is 0.5, and the average effect of cookies on happiness is 0.25. For one person, their blue-on-cookie effect might be 0.392, which changes the number of cookies they eat. Their cookie-on-happiness effect is 0.573, which changes their happiness. Both of those random effects work together to generate the final happiness.\nIf you want more realistic-looking synthetic data, it’s a good idea to add some random noise wherever you can."
  },
  {
    "objectID": "slides/synthetic-data.html#visualizing-variables-and-relationships",
    "href": "slides/synthetic-data.html#visualizing-variables-and-relationships",
    "title": "The ultimate guide to generating synthetic data for causal inference",
    "section": "Visualizing variables and relationships",
    "text": "Visualizing variables and relationships\nGoing through this process requires a ton of trial and error. You will change all sorts of numbers to make sure the relationships you’re building work. This is especially the case if you rescale things, since that rescales your effects. There are a lot of moving parts and this is a complicated process.\nYou’ll run your data generation chunks lots and lots and lots of times, tinkering with the numbers as you go. This example makes it look easy, since it’s the final product, but I ran all these chunks over and over again until I got the causal effect and relationships just right.\nIt’s best if you also create plots and models to see what the relationships look like\n\nVisualizing one variable\nWe covered a bunch of distributions in the random number generation example, but it’s hard to think about what a standard deviation of 2 vs 10 looks like, or what happens when you mess with the shape parameters in a Beta distribution.\nIt’s best to visualize these variables. You could build the variable into your official dataset and then look at it, but I find it’s often faster to just look at what a general distribution looks like first. The easiest way to do this is generate a dataset with just one column in it and look at it, either with a histogram or a density plot.\nFor instance, what does a Beta distribution with shape1 = 3 and shape2 = 16 look like? The math says it should peak around 0.15ish (\\(\\frac{3}{3 + 16}\\)), and that looks like the case:\n\ntemp_data <- tibble(x = rbeta(10000, shape1 = 3, shape2 = 16))\n\nplot1 <- ggplot(temp_data, aes(x = x)) +\n  geom_histogram(binwidth = 0.05, boundary = 0, color = \"white\")\n\nplot2 <- ggplot(temp_data, aes(x = x)) +\n  geom_density()\n\nplot1 + plot2\n\n\n\n\n\n\n\n\nWhat if we want a normal distribution centered around 100, with most values range from 50 to 150. That’s range of ±50, but that doesn’t mean the sd will be 50—it’ll be much smaller than that, like 25ish. Tinker with the numbers until it looks right.\n\ntemp_data <- tibble(x = rnorm(10000, mean = 100, sd = 25))\n\nplot1 <- ggplot(temp_data, aes(x = x)) +\n  geom_histogram(binwidth = 10, boundary = 0, color = \"white\")\n\nplot2 <- ggplot(temp_data, aes(x = x)) +\n  geom_density()\n\nplot1 + plot2\n\n\n\n\n\n\n\n\n\n\nVisualizing two continuous variables\nIf you have two continuous/numeric columns, it’s best to use a scatterplot. For instance, let’s make two columns based on the Beta and normal distributions above, and we’ll make it so that y goes up by 0.25 for every increase in x, along with some noise:\n\nset.seed(1234)\n\ntemp_data <- tibble(\n  x = rnorm(1000, mean = 100, sd = 25)\n) %>%\n  mutate(y = rbeta(1000, shape1 = 3, shape2 = 16) +  # Baseline distribution\n           (0.25 * x) +  # Effect of x\n           rnorm(1000, mean = 0, sd = 10))  # Add some noise\n\nggplot(temp_data, aes(x = x, y = y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\nWe can confirm the effect with a model:\n\nlm(y ~ x, data = temp_data) %>%\n  tidy()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n1.9779\n1.2836\n1.541\n0.1237\n\n\nx\n0.2353\n0.0125\n18.770\n0.0000\n\n\n\n\n\n\n\n\nVisualizing a binary variable and a continuous variable\nIf you have one binary column and one continuous/numeric column, it’s generally best to not use a scatterplot. Instead, either look at the distribution of the continuous variable across the binary variable with a faceted histogram or overlaid density plot, or look at the average of the continuous variable across the different values of the binary variable with a point range.\nLet’s make two columns: a continuous outcome (y) and a binary treatment (x). Being in the treatment group causes an increase of 20 points, on average.\n\nset.seed(1234)\n\ntemp_data <- tibble(\n  treatment = rbinom(1000, size = 1, prob = 0.5)  # Make 1000 0/1 values with 50% chance of each\n) %>%\n  mutate(outcome = rbeta(1000, shape1 = 3, shape2 = 16) +  # Baseline distribution\n           (20 * treatment) +  # Effect of treatment\n           rnorm(1000, mean = 0, sd = 20)) %>%   # Add some noise\n  mutate(treatment = factor(treatment))  # Make treatment a factor/categorical variable\n\nWe can check the numbers with a model:\n\nlm(outcome ~ treatment, data = temp_data) %>% tidy()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n0.2441\n0.9351\n0.2611\n0.7941\n\n\ntreatment1\n20.9251\n1.2992\n16.1060\n0.0000\n\n\n\n\n\n\nHere’s what that looks like as a histogram:\n\nggplot(temp_data, aes(x = outcome, fill = treatment)) +\n  geom_histogram(binwidth = 5, color = \"white\", boundary = 0) +\n  guides(fill = \"none\") +  # Turn off the fill legend since it's redundant\n  facet_wrap(vars(treatment), ncol = 1)\n\n\n\n\n\n\n\n\nAnd as overlapping densities:\n\nggplot(temp_data, aes(x = outcome, fill = treatment)) +\n  geom_density(alpha = 0.5)\n\n\n\n\n\n\n\n\nAnd with a point range:\n\n# hahaha these error bars are tiny\nggplot(temp_data, aes(x = treatment, y = outcome, color = treatment)) +\n  stat_summary(geom = \"pointrange\", fun.data = \"mean_se\") +\n  guides(color = \"none\")  # Turn off the color legend since it's redundant"
  },
  {
    "objectID": "slides/synthetic-data.html#specific-examples",
    "href": "slides/synthetic-data.html#specific-examples",
    "title": "The ultimate guide to generating synthetic data for causal inference",
    "section": "Specific examples",
    "text": "Specific examples\n\ntl;dr: The general process\nThose previous sections go into a lot of detail. In general, here’s the process you should follow when building relationships in synthetic data:\n\nDraw a DAG that maps out how all the columns you care about are related.\nSpecify how those nodes are measured.\nSpecify the relationships between the nodes based on the DAG equations.\nGenerate random columns that stand alone. Generate related columns using regression math. Consider adding random noise. This is an entirely trial and error process until you get numbers that look good. Rely heavily on plots as you try different coefficients and parameters. Optionally rescale any columns that go out of reasonable bounds. If you rescale, you’ll need to tinker with the coefficients you used since the final effects will also get rescaled.\nVerify all relationships with plots and models.\nTry it out!\nSave the data.\n\n\n\nCreating an effect in an observational DAG\n\nDraw a DAG that maps out how all the columns you care about are related.\nHere’s a simple DAG that shows the causal effect of mosquito net usage on malaria risk. Income and health both influence and confound net use and malaria risk, and income also influences health.\n\nmosquito_dag <- dagify(mal ~ net + inc + hlth,\n                       net ~ inc + hlth,\n                       hlth ~ inc,\n                       coords = list(x = c(mal = 4, net = 1, inc = 2, hlth = 3),\n                                     y = c(mal = 1, net = 1, inc = 2, hlth = 2)))\nggdag(mosquito_dag) +\n  theme_dag()\n\n\n\n\n\n\n\n\nSpecify how those nodes are measured.\nFor the sake of this example, we’ll measure these nodes like so. See the random number example for more details about the distributions.\n\nMalaria risk: scale from 0–100, mostly around 40, but ranging from 10ish to 80ish. Best to use a Beta distribution.\nNet use: binary 0/1, TRUE/FALSE variable, where 50% of people use nets. Best to use a binomial distribution. However, since we want to use other variables that increase the likelihood of using a net, we’ll do some cool tricky stuff, explained later.\nIncome: weekly income, measured in dollars, mostly around 500 ± 300. Best to use a normal distribution.\nHealth: scale from 0–100, mostly around 70, but ranging from 50ish to 100. Best to use a Beta distribution.\n\nSpecify the relationships between the nodes based on the DAG equations.\nThere are three models in this DAG:\n\nhlth ~ inc: Income influences health. We’ll assume that every 10 dollars/week is associated with a 1 point increase in health (so a 1 dollar incrrease is associated with a 0.02 point increase in health)\nnet ~ inc + hlth: Income and health both increase the probability of net usage. This is where we do some cool tricky stuff.\nBoth income and health have an effect on the probability of bed net use, but bed net use is measured as a 0/1, TRUE/FALSE variable. If we run a regression with net as the outcome, we can’t really interpret the coefficients like “a 1 point increase in health is associated with a 0.42 point increase in bed net being TRUE.” That doesn’t even make sense.\nOrdinarily, when working with binary outcome variables, you use logistic regression models (see the crash course we had when talking about propensity scores here). In this kind of regression, the coefficients in the model represent changes in the log odds of using a net. As we discuss in the crash course section, log odds are typically impossible to interpet. If you exponentiate them, you get odds ratios, which let you say things like “a 1 point increase in health is associated with a 15% increase in the likelihood of using a net.” Technically we could include coefficients for a logistic regression model and simulate probabilities of using a net or not using log odds and odds ratios (and that’s what I do in the rain barrel data from Problem Set 3 (see code here)), but that’s really hard to wrap your head around since you’re dealing with strange uninterpretable coefficients. So we won’t do that here.\nInstead, we’ll do some fun trickery. We’ll create something called a “bed net score” that gets bigger as income and health increase. We’ll say that a 1 point increase in health score is associated with a 1.5 point increase in bed net score, and a 1 dollar increase in income is associated with a 0.5 point increase in bed net score. This results in a column that ranges all over the place, from 200 to 500 (in this case; that won’t always be true). This column definitely doesn’t look like a TRUE/FALSE binary column—it’s just a bunch of numbers. That’s okay!\nWe’ll then use the rescale() function from the scales package to take this bed net score and scale it down so that it goes from 0.05 to 0.95. This represents a person’s probability of using a bed net.\nFinally, we’ll use that probability in the rbinom() function to generate a 0 or 1 for each person. Some people will have a high probability because of their income and health, like 0.9, and will most likely use a net. Some people might have a 0.15 probability and will likely not use a net.\nWhen you generate binary variables like this, it’s hard to know the exact effect you’ll get, so it’s best to tinker with the numbers until you see relationships that you want.\nmal ~ net + inc + hlth: Finally net use, income, and health all have an effect on the risk of malaria. Building this relationship is easy since it’s just a regular linear regression model (since malaria risk is not binary). We’ll say that a 1 dollar increase in income is associated with a decrease in risk, a 1 point increase in health is associated with a decrease in risk, and using a net is associated with a 15 point decrease in risk. That’s the casual effect we’re building in to the DAG.\n\nGenerate random columns that stand alone. Generate related columns using regression math. Consider adding random noise. This is an entirely trial and error process until you get numbers that look good. Rely heavily on plots as you try different coefficients and parameters. Optionally rescale any columns that go out of reasonable bounds. If you rescale, you’ll need to tinker with the coefficients you used since the final effects will also get rescaled.\nHere we go! Let’s make some data. I’ll comment the code below so you can see what’s happening at each step.\n\n# Make this randomness consistent\nset.seed(1234)\n\n# Simulate 1138 people (just for fun)\nn_people <- 1138\n\nnet_data <- tibble(\n  # Make an ID column (not necessary, but nice to have)\n  id = 1:n_people,\n  # Generate income variable: normal, 500 ± 300\n  income = rnorm(n_people, mean = 500, sd = 75)\n) %>%\n  # Generate health variable: beta, centered around 70ish\n  mutate(health_base = rbeta(n_people, shape1 = 7, shape2 = 4) * 100,\n         # Health increases by 0.02 for every dollar in income\n         health_income_effect = income * 0.02,\n         # Make the final health score and add some noise\n         health = health_base + health_income_effect + rnorm(n_people, mean = 0, sd = 3),\n         # Rescale so it doesn't go above 100\n         health = rescale(health, to = c(min(health), 100))) %>%\n  # Generate net variable based on income, health, and random noise\n  mutate(net_score = (0.5 * income) + (1.5 * health) + rnorm(n_people, mean = 0, sd = 15),\n         # Scale net score down to 0.05 to 0.95 to create a probability of using a net\n         net_probability = rescale(net_score, to = c(0.05, 0.95)),\n         # Randomly generate a 0/1 variable using that probability\n         net = rbinom(n_people, 1, net_probability)) %>%\n  # Finally generate a malaria risk variable based on income, health, net use,\n  # and random noise\n  mutate(malaria_risk_base = rbeta(n_people, shape1 = 4, shape2 = 5) * 100,\n         # Risk goes down by 10 when using a net. Because we rescale things,\n         # though, we have to make the effect a lot bigger here so it scales\n         # down to -10. Risk also decreases as health and income go up. I played\n         # with these numbers until they created reasonable coefficients.\n         malaria_effect = (-30 * net) + (-1.9 * health) + (-0.1 * income),\n         # Make the final malaria risk score and add some noise\n         malaria_risk = malaria_risk_base + malaria_effect + rnorm(n_people, 0, sd = 3),\n         # Rescale so it doesn't go below 0,\n         malaria_risk = rescale(malaria_risk, to = c(5, 70)))\n\n# Look at all these columns!\nhead(net_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nincome\nhealth_base\nhealth_income_effect\nhealth\nnet_score\nnet_probability\nnet\nmalaria_risk_base\nmalaria_effect\nmalaria_risk\n\n\n\n\n1\n409.5\n61.24\n8.189\n63.07\n301.0\n0.3689\n0\n37.88\n-160.8\n45.12\n\n\n2\n520.8\n83.93\n10.416\n83.52\n408.6\n0.6838\n1\n55.02\n-240.8\n23.45\n\n\n3\n581.3\n64.62\n11.627\n73.02\n426.2\n0.7352\n0\n53.01\n-196.9\n36.49\n\n\n4\n324.1\n61.98\n6.481\n60.61\n255.1\n0.2346\n0\n68.44\n-147.6\n58.66\n\n\n5\n532.2\n69.22\n10.644\n73.40\n372.5\n0.5781\n1\n63.17\n-222.7\n32.73\n\n\n6\n538.0\n36.59\n10.759\n42.60\n294.9\n0.3511\n0\n38.61\n-134.7\n52.55\n\n\n\n\n\n\nVerify all relationships with plots and models.\nLet’s see if we have the relationships we want. Income looks like it’s associated with health:\n\nggplot(net_data, aes(x = income, y = health)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\nlm(health ~ income, data = net_data) %>% tidy()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n59.0769\n2.537\n23.287\n0e+00\n\n\nincome\n0.0169\n0.005\n3.357\n8e-04\n\n\n\n\n\n\nIt looks like richer and healthier people are more likely to use nets:\n\nnet_income <- ggplot(net_data, aes(x = income, fill = as.factor(net))) +\n  geom_density(alpha = 0.7) +\n  theme(legend.position = \"bottom\")\n\nnet_health <- ggplot(net_data, aes(x = health, fill = as.factor(net))) +\n  geom_density(alpha = 0.7) +\n  theme(legend.position = \"bottom\")\n\nnet_income + net_health\n\n\n\n\n\n\n\n\nIncome increasing makes it 1% more likely to use a net; health increasing make it 2% more likely to use a net:\n\nglm(net ~ income + health, family = binomial(link = \"logit\"), data = net_data) %>%\n  tidy(exponentiate = TRUE)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n0.0186\n0.5318\n-7.495\n0e+00\n\n\nincome\n1.0056\n0.0009\n6.468\n0e+00\n\n\nhealth\n1.0193\n0.0049\n3.893\n1e-04\n\n\n\n\n\n\nTry it out!\nIs the effect in there? Let’s try finding it by controlling for our two backdoors: health and income. Ordinarily we should do something like matching or inverse probability weighting, but we’ll just do regular regression here (which is okay-ish, since all these variables are indeed linearly related with each other—we made them that way!)\nIf we just look at the effect of nets on malaria risk without any statistical adjustment, we see that net cause a decrease of 13 points in malaria risk. This is wrong though becuase there’s confounding.\n\n# Wrong correlation-is-not-causation effect\nmodel_net_naive <- lm(malaria_risk ~ net, data = net_data)\ntidy(model_net_naive)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n41.94\n0.4128\n101.60\n0\n\n\nnet\n-13.57\n0.5724\n-23.71\n0\n\n\n\n\n\n\nIf we control for the confounders, we get the 10 point ATE. It works!\n\n# Correctly adjusted ATE effect\nmodel_net_ate <- lm(malaria_risk ~ net + health + income, data = net_data)\ntidy(model_net_ate)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n97.3050\n1.2787\n76.10\n0\n\n\nnet\n-10.5346\n0.3171\n-33.23\n0\n\n\nhealth\n-0.6077\n0.0123\n-49.35\n0\n\n\nincome\n-0.0320\n0.0021\n-15.02\n0\n\n\n\n\n\n\nSave the data.\nSince it works, let’s save it:\n\n# In the end, all we need is id, income, health, net, and malaria risk:\nnet_data_final <- net_data %>%\n  select(id, income, health, net, malaria_risk)\nhead(net_data_final)\n\n\n\n\n\nid\nincome\nhealth\nnet\nmalaria_risk\n\n\n\n\n1\n409.5\n63.07\n0\n45.12\n\n\n2\n520.8\n83.52\n1\n23.45\n\n\n3\n581.3\n73.02\n0\n36.49\n\n\n4\n324.1\n60.61\n0\n58.66\n\n\n5\n532.2\n73.40\n1\n32.73\n\n\n6\n538.0\n42.60\n0\n52.55\n\n\n\n\n\n\n\n# Save it as a CSV file\nwrite_csv(net_data_final, \"data/bed_nets.csv\")\n\n\n\n\nBrief pep talk intermission\nGenerating data for a full complete observational DAG like the example above is complicated and hard. These other forms of causal inference are design-based (i.e. tied to specific contexts like before/after treatment/control or arbitrary cutoffs) instead of model-based, so they’re actually a lot easier to simulate! So don’t be scared away yet!\n\n\nCreating an effect for RCTs\n\nDraw a DAG that maps out how all the columns you care about are related.\nRCTs are great because they make DAGs really easy! In a well-randomized RCT, you get to delete all arrows going into the treatment node in a DAG. We’ll stick with the same mosquito net situation we just used, but make it randomized:\n\nrct_dag <- dagify(mal ~ net + inc + hlth,\n                  hlth ~ inc,\n                  coords = list(x = c(mal = 4, net = 1, inc = 2, hlth = 3),\n                                y = c(mal = 1, net = 1, inc = 2, hlth = 2)))\nggdag(rct_dag) +\n  theme_dag()\n\n\n\n\n\n\n\n\nSpecify how those nodes are measured.\nWe’ll measure these nodes the same way as before:\n\nMalaria risk: scale from 0–100, mostly around 40, but ranging from 10ish to 80ish. Best to use a Beta distribution.\nNet use: binary 0/1, TRUE/FALSE variable, where 50% of people use nets. Best to use a binomial distribution.\nIncome: weekly income, measured in dollars, mostly around 500 ± 300. Best to use a normal distribution.\nHealth: scale from 0–100, mostly around 70, but ranging from 50ish to 100. Best to use a Beta distribution.\n\nSpecify the relationships between the nodes based on the DAG equations.\nThis is where RCTs are great. Because we removed all the arrows going into net, we don’t need to build any relationships that influence net use. Net use is randomized! We don’t need to make strange “bed net scores” and give people boosts according to income or health or anything. There are only two models in this DAG:\n\nhlth ~ inc: Income influences health. We’ll assume that every 10 dollars/week is associated with a 1 point increase in health (so a 1 dollar incrrease is associated with a 0.02 point increase in health)\nmal ~ net + inc + hlth: Net use, income, and health all have an effect on the risk of malaria. We’ll say that a 1 dollar increase in income is associated with a decrease in risk, a 1 point increase in health is associated with a decrease in risk, and using a net is associated with a 15 point decrease in risk. That’s the casual effect we’re building in to the DAG.\n\nGenerate random columns that stand alone. Generate related columns using regression math. Consider adding random noise. This is an entirely trial and error process until you get numbers that look good. Rely heavily on plots as you try different coefficients and parameters. Optionally rescale any columns that go out of reasonable bounds. If you rescale, you’ll need to tinker with the coefficients you used since the final effects will also get rescaled.\nLet’s make this data. It’ll be a lot easier than the full DAG we did before. Again, I’ll comment the code below so you can see what’s happening at each step.\n\n# Make this randomness consistent\nset.seed(1234)\n\n# Simulate 793 people (just for fun)\nn_people <- 793\n\nrct_data <- tibble(\n  # Make an ID column (not necessary, but nice to have)\n  id = 1:n_people,\n  # Generate income variable: normal, 500 ± 300\n  income = rnorm(n_people, mean = 500, sd = 75)\n) %>%\n  # Generate health variable: beta, centered around 70ish\n  mutate(health_base = rbeta(n_people, shape1 = 7, shape2 = 4) * 100,\n         # Health increases by 0.02 for every dollar in income\n         health_income_effect = income * 0.02,\n         # Make the final health score and add some noise\n         health = health_base + health_income_effect + rnorm(n_people, mean = 0, sd = 3),\n         # Rescale so it doesn't go above 100\n         health = rescale(health, to = c(min(health), 100))) %>%\n  # Randomly assign people to use a net (this is nice and easy!)\n  mutate(net = rbinom(n_people, 1, 0.5)) %>%\n  # Finally generate a malaria risk variable based on income, health, net use,\n  # and random noise\n  mutate(malaria_risk_base = rbeta(n_people, shape1 = 4, shape2 = 5) * 100,\n         # Risk goes down by 10 when using a net. Because we rescale things,\n         # though, we have to make the effect a lot bigger here so it scales\n         # down to -10. Risk also decreases as health and income go up. I played\n         # with these numbers until they created reasonable coefficients.\n         malaria_effect = (-35 * net) + (-1.9 * health) + (-0.1 * income),\n         # Make the final malaria risk score and add some noise\n         malaria_risk = malaria_risk_base + malaria_effect + rnorm(n_people, 0, sd = 3),\n         # Rescale so it doesn't go below 0,\n         malaria_risk = rescale(malaria_risk, to = c(5, 70)))\n\n# Look at all these columns!\nhead(rct_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nincome\nhealth_base\nhealth_income_effect\nhealth\nnet\nmalaria_risk_base\nmalaria_effect\nmalaria_risk\n\n\n\n\n1\n409.5\n57.25\n8.189\n61.25\n1\n37.45\n-192.3\n35.08\n\n\n2\n520.8\n63.31\n10.416\n69.43\n0\n32.97\n-184.0\n37.61\n\n\n3\n581.3\n61.79\n11.627\n71.88\n1\n36.36\n-229.7\n24.36\n\n\n4\n324.1\n42.17\n6.481\n45.46\n1\n52.71\n-153.8\n52.79\n\n\n5\n532.2\n72.15\n10.644\n78.55\n1\n41.90\n-237.5\n23.65\n\n\n6\n538.0\n81.97\n10.759\n89.08\n0\n46.59\n-223.0\n29.90\n\n\n\n\n\n\nVerify all relationships with plots and models.\nIncome still looks like it’s associated with health (which isn’t surprising, since it’s the same code we used for the full DAG earlier):\n\nggplot(net_data, aes(x = income, y = health)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\nlm(health ~ income, data = net_data) %>% tidy()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n59.0769\n2.537\n23.287\n0e+00\n\n\nincome\n0.0169\n0.005\n3.357\n8e-04\n\n\n\n\n\n\nTry it out!\nIs the effect in there? With an RCT, all we really need to do is compare the outcome across treatment and control groups—because there’s no confounding, we don’t need to control for anything. Ordinarily we should check for balance across characteristics like health and income (and maybe generate other demographic columns) like we did in the RCT example, but we’ll skip all that here since we’re just checking to see if the effect is there.\nIt looks like using nets causes an average decrease of 10 risk points. Great!\n\n# Correct RCT-based ATE\nmodel_rct <- lm(malaria_risk ~ net, data = rct_data)\ntidy(model_rct)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n40.76\n0.4630\n88.04\n0\n\n\nnet\n-10.24\n0.6535\n-15.67\n0\n\n\n\n\n\n\nJust for fun, if we control for health and income, we’ll get basically the same effect, since they don’t actualy confound the relationship and don’t really explain anything useful.\n\n# Controlling for stuff even though we don't need to\nmodel_rct_controls <- lm(malaria_risk ~ net + health + income, data = rct_data)\ntidy(model_rct_controls)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n97.7030\n1.4525\n67.26\n0\n\n\nnet\n-10.7561\n0.3438\n-31.29\n0\n\n\nhealth\n-0.5865\n0.0140\n-41.85\n0\n\n\nincome\n-0.0310\n0.0023\n-13.49\n0\n\n\n\n\n\n\nSave the data.\nThe data works, so let’s get rid of the intermediate columns we don’t need and save it as a CSV file.\n\n# In the end, all we need is id, income, health, net, and malaria risk:\nrct_data_final <- rct_data %>%\n  select(id, income, health, net, malaria_risk)\nhead(rct_data_final)\n\n\n\n\n\nid\nincome\nhealth\nnet\nmalaria_risk\n\n\n\n\n1\n409.5\n61.25\n1\n35.08\n\n\n2\n520.8\n69.43\n0\n37.61\n\n\n3\n581.3\n71.88\n1\n24.36\n\n\n4\n324.1\n45.46\n1\n52.79\n\n\n5\n532.2\n78.55\n1\n23.65\n\n\n6\n538.0\n89.08\n0\n29.90\n\n\n\n\n\n\n\n# Save it as a CSV file\nwrite_csv(rct_data_final, \"data/bed_nets_rct.csv\")\n\n\n\n\nCreating an effect for diff-in-diff\n\nDraw a DAG that maps out how all the columns you care about are related.\nDifference-in-differences approaches to causal inference are not based on models but on context or research design. You need comparable treatment and control groups before and after some policy or program is implemented.\nWe’ll keep with our mosquito net example and pretend that two cities in some country are dealing with malaria infections. City B rolls out a free net program in 2017; City A does not. Here’s what the DAG looks like:\n\ndid_dag <- dagify(mal ~ net + year + city,\n                  net ~ year + city,\n                  coords = list(x = c(mal = 3, net = 1, year = 2, city = 2),\n                                y = c(mal = 2, net = 2, year = 3, city = 1)))\nggdag(did_dag) +\n  theme_dag()\n\n\n\n\n\n\n\n\nSpecify how those nodes are measured.\nHere’s how we’ll measure these nodes:\n\nMalaria risk: scale from 0–100, mostly around 60, but ranging from 30ish to 90ish. Best to use a Beta distribution.\nNet use: binary 0/1, TRUE/FALSE variable. This is technically binomial, but we don’t need to simulate it since it will only happen for people who are in the treatment city after the universal net rollout.\nYear: year ranging from 2013 to 2020. Best to use a uniform distribution.\nCity: binary 0/1, City A/City B variable. Best to use a binomial distribution.\n\nSpecify the relationships between the nodes based on the DAG equations.\nThere are two models in the DAG:\n\nnet ~ year + city: Net use is determined by being in City B and being after 2017. We’ll assume perfect compliance here (but it’s fairly easy to simulate non-compliance and have some people in City A use nets after 2017, and some people in both cities use nets before 2017).\nmal ~ net + year + city: Malaria risk is determined by net use, year, and city. It’s determined by lots of other things too (like we saw in the previous DAGs), but since we’re assuming that the two cities are comparable treatment and control groups, we don’t need to worry about things like health, income, age, etc.\nWe’ll pretend that in general, City B has historicallly had a problem with malaria and people there have had higher risk: being in City B increases malaria risk by 5 points, on average. Over time, both cities have worked on mosquito abatement, so average malaria risk has decreased by 2 points per year (in both cities, because we believe in parallel trends). Using a mosquito net causes a decrease of 10 points on average. That’s our causal effect.\n\nGenerate random columns that stand alone. Generate related columns using regression math. Consider adding random noise. This is an entirely trial and error process until you get numbers that look good. Rely heavily on plots as you try different coefficients and parameters. Optionally rescale any columns that go out of reasonable bounds. If you rescale, you’ll need to tinker with the coefficients you used since the final effects will also get rescaled.\nGeneration time! Heavily annotated code below:\n\n# Make this randomness consistent\nset.seed(1234)\n\n# Simulate 2567 people (just for fun)\nn_people <- 2567\n\ndid_data <- tibble(\n  # Make an ID column (not necessary, but nice to have)\n  id = 1:n_people,\n  # Generate year variable: uniform, between 2013 and 2020. Round so it's whole.\n  year = round(runif(n_people, min = 2013, max = 2020), 0),\n  # Generate city variable: binomial, 50% chance of being in a city. We'll use\n  # sample() instead of rbinom()\n  city = sample(c(\"City A\", \"City B\"), n_people, replace = TRUE)\n) %>%\n  # Generate net variable. We're assuming perfect compliance, so this will only\n  # be TRUE for people in City B after 2017\n  mutate(net = ifelse(city == \"City B\" & year > 2017, TRUE, FALSE)) %>%\n  # Generate a malaria risk variable based on year, city, net use, and random noise\n  mutate(malaria_risk_base = rbeta(n_people, shape1 = 6, shape2 = 3) * 100,\n         # Risk goes up if you're in City B because they have a worse problem.\n         # We could just say \"city_effect = 5\" and give everyone in City A an\n         # exact 5-point boost, but to add some noise, we'll give people an\n         # average boost using rnorm(). Some people might go up 7, some might go\n         # up 1, some might go down 2\n         city_effect = ifelse(city == \"City B\", rnorm(n_people, mean = 5, sd = 2), 0),\n         # Risk goes down by 2 points on average every year. Creating this\n         # effect with regression would work fine (-2 * year), except the years\n         # are huge here (-2 * 2013 and -2 * 2020, etc.) So first we create a\n         # smaller year column where 2013 is year 1, 2014 is year 2, and so on,\n         # that way we can say -2 * 1 and -2 * 6, or whatever.\n         # Also, rather than make risk go down by *exactly* 2 every year, we'll\n         # add some noise with rnorm(), so for some people it'll go down by 1 or\n         # 4 or up by 1, and so on\n         year_smaller = year - 2012,\n         year_effect = rnorm(n_people, mean = -2, sd = 0.1) * year_smaller,\n         # Using a net causes a decrease of 10 points, on average. Again, rather\n         # than use exactly 10, we'll use a distribution around 10. People only\n         # get a net boost if they're in City B after 2017.\n         net_effect = ifelse(city == \"City B\" & year > 2017,\n                             rnorm(n_people, mean = -10, sd = 1.5),\n                             0),\n         # Finally combine all these effects to create the malaria risk variable\n         malaria_risk = malaria_risk_base + city_effect + year_effect + net_effect,\n         # Rescale so it doesn't go below 0 or above 100\n         malaria_risk = rescale(malaria_risk, to = c(0, 100))) %>%\n  # Make an indicator variable showing if the row is after 2017\n  mutate(after = year > 2017)\n\nhead(did_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nyear\ncity\nnet\nmalaria_risk_base\ncity_effect\nyear_smaller\nyear_effect\nnet_effect\nmalaria_risk\nafter\n\n\n\n\n1\n2014\nCity B\nFALSE\n52.99\n6.251\n2\n-3.971\n0\n54.19\nFALSE\n\n\n2\n2017\nCity B\nFALSE\n89.71\n3.318\n5\n-9.166\n0\n84.14\nFALSE\n\n\n3\n2017\nCity A\nFALSE\n49.55\n0.000\n5\n-10.075\n0\n37.64\nFALSE\n\n\n4\n2017\nCity B\nFALSE\n37.43\n7.110\n5\n-9.444\n0\n33.06\nFALSE\n\n\n5\n2019\nCity A\nFALSE\n76.55\n0.000\n7\n-14.685\n0\n61.10\nTRUE\n\n\n6\n2017\nCity B\nFALSE\n65.68\n5.376\n5\n-10.362\n0\n59.87\nFALSE\n\n\n\n\n\n\nVerify all relationships with plots and models.\nIs risk higher in City B? Yep.\n\nggplot(did_data, aes(x = city, y = malaria_risk, color = city)) +\n  stat_summary(geom = \"pointrange\", fun.data = \"mean_se\") +\n  guides(color = \"none\")\n\n\n\n\n\n\n\n\nDoes risk decrease over time? And are the trends parallel? There was a weird random spike in City B in 2017 for whatever reason, but in general, the trends in the two cities are pretty parallel from 2013 to 2017.\n\nplot_data <- did_data %>%\n  group_by(year, city) %>%\n  summarize(mean_risk = mean(malaria_risk),\n            se_risk = sd(malaria_risk) / sqrt(n()),\n            upper = mean_risk + (1.96 * se_risk),\n            lower = mean_risk + (-1.96 * se_risk))\n\nggplot(plot_data, aes(x = year, y = mean_risk, color = city)) +\n  geom_vline(xintercept = 2017.5) +\n  geom_ribbon(aes(ymin = lower, ymax = upper, fill = city), alpha = 0.3, color = FALSE) +\n  geom_line() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nTry it out!\nLet’s see if it works! For diff-in-diff we need to use this model:\n\\[\n\\text{Malaria risk} = \\alpha + \\beta\\ \\text{City B} + \\gamma\\ \\text{After 2017} + \\delta\\ (\\text{City B} \\times \\text{After 2017}) + \\varepsilon\n\\]\n\nmodel_did <- lm(malaria_risk ~ city + after + city * after, data = did_data)\ntidy(model_did)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n59.218\n0.5485\n107.962\n0\n\n\ncityCity B\n5.166\n0.7776\n6.644\n0\n\n\nafterTRUE\n-7.470\n0.9387\n-7.958\n0\n\n\ncityCity B:afterTRUE\n-10.250\n1.3158\n-7.790\n0\n\n\n\n\n\n\nIt works! Being in City B is associated with a 5-point higher risk on average; being after 2017 is associated with a 7.5-point lower risk on average, and being in City B after 2017 causes risk to drop by −10. The number isn’t exactly −10 here, since we rescaled the malaria_risk column a little, but still, it’s close. It’d probably be a good idea to build in some more noise and noncompliance, since the p-values are really really tiny here, but this is good enough for now.\nHere’s an obligatory diff-in-diff visualization:\n\nplot_data <- did_data %>%\n  group_by(after, city) %>%\n  summarize(mean_risk = mean(malaria_risk),\n            se_risk = sd(malaria_risk) / sqrt(n()),\n            upper = mean_risk + (1.96 * se_risk),\n            lower = mean_risk + (-1.96 * se_risk))\n\n# Extract parts of the model results for adding annotations\nmodel_results <- tidy(model_did)\nbefore_treatment <- filter(model_results, term == \"(Intercept)\")$estimate +\n  filter(model_results, term == \"cityCity B\")$estimate\ndiff_diff <- filter(model_results, term == \"cityCity B:afterTRUE\")$estimate\nafter_treatment <- before_treatment + diff_diff +\n  filter(model_results, term == \"afterTRUE\")$estimate\n\nggplot(plot_data, aes(x = after, y = mean_risk, color = city, group = city)) +\n  geom_pointrange(aes(ymin = lower, ymax = upper)) +\n  geom_line() +\n  annotate(geom = \"segment\", x = FALSE, xend = TRUE,\n           y = before_treatment, yend = after_treatment - diff_diff,\n           linetype = \"dashed\", color = \"grey50\") +\n  annotate(geom = \"segment\", x = 2.1, xend = 2.1,\n           y = after_treatment, yend = after_treatment - diff_diff,\n           linetype = \"dotted\", color = \"blue\") +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nSave the data.\nThe data works, so let’s get rid of the intermediate columns we don’t need and save it as a CSV file.\n\ndid_data_final <- did_data %>%\n  select(id, year, city, net, malaria_risk)\nhead(did_data_final)\n\n\n\n\n\nid\nyear\ncity\nnet\nmalaria_risk\n\n\n\n\n1\n2014\nCity B\nFALSE\n54.19\n\n\n2\n2017\nCity B\nFALSE\n84.14\n\n\n3\n2017\nCity A\nFALSE\n37.64\n\n\n4\n2017\nCity B\nFALSE\n33.06\n\n\n5\n2019\nCity A\nFALSE\n61.10\n\n\n6\n2017\nCity B\nFALSE\n59.87\n\n\n\n\n\n\n\n# Save data\nwrite_csv(did_data_final, \"data/diff_diff.csv\")\n\n\n\n\nCreating an effect for regression discontinuity\n\nDraw a DAG that maps out how all the columns you care about are related.\nRegression discontinuity designs are also based on context instead of models, so the DAG is pretty simple. We’ll keep with our mosquito net example and pretend that families that earn less than $450 a week qualify for a free net. Here’s the DAG:\n\nrdd_dag <- dagify(mal ~ net + inc,\n                  net ~ cut,\n                  cut ~ inc,\n                  coords = list(x = c(mal = 4, net = 1, inc = 3, cut = 2),\n                                y = c(mal = 1, net = 1, inc = 2, cut = 1.75)))\nggdag(rdd_dag) +\n  theme_dag()\n\n\n\n\n\n\n\n\nSpecify how those nodes are measured.\nHere’s how we’ll measure these nodes:\n\nMalaria risk: scale from 0–100, mostly around 60, but ranging from 30ish to 90ish. Best to use a Beta distribution.\nNet use: binary 0/1, TRUE/FALSE variable. This is technically binomial, but we don’t need to simulate it since it will only happen for people who below the cutoff.\nIncome: weekly income, measured in dollars, mostly around 500 ± 300. Best to use a normal distribution.\nCutoff: binary 0/1, below/above $450 variable. This is technically binomial, but we don’t need to simulate it since it is entirely based on income.\n\nSpecify the relationships between the nodes based on the DAG equations.\nThere are three models in the DAG:\n\ncut ~ inc: Being above or below the cutpoint is determined by income. We know the cutoff is 450, so we just make an indicator showing if people are below that.\nnet ~ cut: Net usage is determined by the cutpoint. If people are below the cutpoint, they’ll use a net; if not, they won’t. We can build in noncompliance here if we want and use fuzzy regression discontinuity. For the sake of this example, we’ll do it both ways, just so you can see both sharp and fuzzy synthetic data.\nmal ~ net + inc: Malaria risk is determined by both net usage and income. It’s also determined by lots of other things (age, education, city, etc.), but we don’t need to include those in the DAG because we’re using RDD to say that we have good treatment and control groups right around the cutoff.\nWe’ll pretend that a 1 dollar increase in income is associated with a drop in risk of 0.01, and that using a mosquito net causes a decrease of 10 points on average. That’s our causal effect.\n\nGenerate random columns that stand alone. Generate related columns using regression math. Consider adding random noise. This is an entirely trial and error process until you get numbers that look good. Rely heavily on plots as you try different coefficients and parameters. Optionally rescale any columns that go out of reasonable bounds. If you rescale, you’ll need to tinker with the coefficients you used since the final effects will also get rescaled.\nLet’s fake some data! Heavily annotated code below:\n\n# Make this randomness consistent\nset.seed(1234)\n\n# Simulate 5441 people (we need a lot bc we're throwing most away)\nn_people <- 5441\n\nrdd_data <- tibble(\n  # Make an ID column (not necessary, but nice to have)\n  id = 1:n_people,\n  # Generate income variable: normal, 500 ± 300\n  income = rnorm(n_people, mean = 500, sd = 75)\n) %>%\n  # Generate cutoff variable\n  mutate(below_cutoff = ifelse(income < 450, TRUE, FALSE)) %>%\n  # Generate net variable. We'll make two: one that's sharp and has perfect\n  # compliance, and one that's fuzzy\n  # Here's the sharp one. It's easy. If you're below the cutoff you use a net.\n  mutate(net_sharp = ifelse(below_cutoff == TRUE, TRUE, FALSE)) %>%\n  # Here's the fuzzy one, which is a little trickier. If you're far away from\n  # the cutoff, you follow what you're supposed to do (like if your income is\n  # 800, you don't use the program; if your income is 200, you definitely use\n  # the program). But if you're close to the cutoff, we'll pretend that there's\n  # an 80% chance that you'll do what you're supposed to do.\n  mutate(net_fuzzy = case_when(\n    # If your income is between 450 and 500, there's a 20% chance of using the program\n    income >= 450 & income <= 500 ~ sample(c(TRUE, FALSE), n_people, replace = TRUE, prob = c(0.2, 0.8)),\n    # If your income is above 500, you definitely don't use the program\n    income > 500 ~ FALSE,\n    # If your income is between 400 and 450, there's an 80% chance of using the program\n    income < 450 & income >= 400 ~ sample(c(TRUE, FALSE), n_people, replace = TRUE, prob = c(0.8, 0.2)),\n    # If your income is below 400, you definitely use the program\n    income < 400 ~ TRUE\n  )) %>%\n  # Finally we can make the malaria risk score, based on income, net use, and\n  # random noise. We'll make two outcomes: one using the sharp net use and one\n  # using the fuzzy net use. They have the same effect built in, we just have to\n  # use net_sharp and net_fuzzy separately.\n  mutate(malaria_risk_base = rbeta(n_people, shape1 = 4, shape2 = 5) * 100) %>%\n  # Make the sharp version. There's really a 10 point decrease, but because of\n  # rescaling, we use 15. I only chose 15 through lots of trial and error (i.e.\n  # I used -11, ran the RDD model, and the effect was too small; I used -20, ran\n  # the model, and the effect was too big; I kept changing numbers until landing\n  # on -15). Risk also goes down as income increases.\n  mutate(malaria_effect_sharp = (-15 * net_sharp) + (-0.01 * income),\n         malaria_risk_sharp = malaria_risk_base + malaria_effect_sharp + rnorm(n_people, 0, sd = 3),\n         malaria_risk_sharp = rescale(malaria_risk_sharp, to = c(5, 70))) %>%\n  # Do the same thing, but with net_fuzzy\n  mutate(malaria_effect_fuzzy = (-15 * net_fuzzy) + (-0.01 * income),\n         malaria_risk_fuzzy = malaria_risk_base + malaria_effect_fuzzy + rnorm(n_people, 0, sd = 3),\n         malaria_risk_fuzzy = rescale(malaria_risk_fuzzy, to = c(5, 70))) %>%\n  # Make a version of income that's centered at the cutpoint\n  mutate(income_centered = income - 450)\n\nhead(rdd_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nincome\nbelow_cutoff\nnet_sharp\nnet_fuzzy\nmalaria_risk_base\nmalaria_effect_sharp\nmalaria_risk_sharp\nmalaria_effect_fuzzy\nmalaria_risk_fuzzy\nincome_centered\n\n\n\n\n1\n409.5\nTRUE\nTRUE\nFALSE\n56.49\n-19.095\n38.05\n-4.095\n47.46\n-40.53\n\n\n2\n520.8\nFALSE\nFALSE\nFALSE\n26.09\n-5.208\n28.61\n-5.208\n27.64\n70.81\n\n\n3\n581.3\nFALSE\nFALSE\nFALSE\n84.38\n-5.813\n64.75\n-5.813\n65.52\n131.33\n\n\n4\n324.1\nTRUE\nTRUE\nTRUE\n32.88\n-18.241\n25.91\n-18.241\n23.39\n-125.93\n\n\n5\n532.2\nFALSE\nFALSE\nFALSE\n53.10\n-5.322\n46.52\n-5.322\n44.34\n82.18\n\n\n6\n538.0\nFALSE\nFALSE\nFALSE\n45.68\n-5.380\n43.20\n-5.380\n40.18\n87.95\n\n\n\n\n\n\nVerify all relationships with plots and models.\nIs there a cutoff in the running variable when we use the sharp net variable? Yep!\n\nggplot(rdd_data, aes(x = income, y = net_sharp, color = below_cutoff)) +\n  geom_vline(xintercept = 450) +\n  geom_point(alpha = 0.3, position = position_jitter(width = NULL, height = 0.2)) +\n  guides(color = \"none\")\n\n\n\n\n\n\n\n\nIs there a cutoff in the running variable when we use the fuzzy net variable? Yep! There are some richer people using the program and some poorer people not using it.\n\nggplot(rdd_data, aes(x = income, y = net_fuzzy, color = below_cutoff)) +\n  geom_vline(xintercept = 450) +\n  geom_point(alpha = 0.3, position = position_jitter(width = NULL, height = 0.2)) +\n  guides(color = \"none\")\n\n\n\n\n\n\n\n\nTry it out!\nLet’s test it! For sharp RDD we need to use this model:\n\\[\n\\text{Malaria risk} = \\beta_0 + \\beta_1 \\text{Income}_\\text{centered} + \\beta_2 \\text{Net} + \\varepsilon\n\\]\nWe’ll use a bandwidth of ±$50, because why not. In real life you’d be more careful about bandwidth selection (or use rdbwselect() from the rdrobust package to find the optimal bandwidth)\n\nggplot(rdd_data, aes(x = income, y = malaria_risk_sharp, color = net_sharp)) +\n  geom_vline(xintercept = 450) +\n  geom_point(alpha = 0.2, size = 0.5) +\n  # Add lines for the full range\n  geom_smooth(data = filter(rdd_data, income_centered <= 0),\n              method = \"lm\", se = FALSE, size = 1, linetype = \"dashed\") +\n  geom_smooth(data = filter(rdd_data, income_centered > 0),\n              method = \"lm\", se = FALSE, size = 1, linetype = \"dashed\") +\n  # Add lines for bandwidth = 50\n  geom_smooth(data = filter(rdd_data, income_centered >= -50 & income_centered <= 0),\n              method = \"lm\", se = FALSE, size = 2) +\n  geom_smooth(data = filter(rdd_data, income_centered > 0 & income_centered <= 50),\n              method = \"lm\", se = FALSE, size = 2) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\nmodel_sharp <- lm(malaria_risk_sharp ~ income_centered + net_sharp,\n                  data = filter(rdd_data,\n                                income_centered >= -50 & income_centered <= 50))\ntidy(model_sharp)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n40.6805\n0.4615\n88.147\n0.0000\n\n\nincome_centered\n-0.0197\n0.0144\n-1.368\n0.1716\n\n\nnet_sharpTRUE\n-10.6269\n0.8150\n-13.040\n0.0000\n\n\n\n\n\n\nThere’s an effect! For people in the bandwidth, the local average treatment effect of nets is a 10.6 point reduction in malaria risk.\nLet’s check if it works with the fuzzy version where there are noncompliers:\n\nggplot(rdd_data, aes(x = income, y = malaria_risk_fuzzy, color = net_fuzzy)) +\n  geom_vline(xintercept = 450) +\n  geom_point(alpha = 0.2, size = 0.5) +\n  # Add lines for the full range\n  geom_smooth(data = filter(rdd_data, income_centered <= 0),\n              method = \"lm\", se = FALSE, size = 1, linetype = \"dashed\") +\n  geom_smooth(data = filter(rdd_data, income_centered > 0),\n              method = \"lm\", se = FALSE, size = 1, linetype = \"dashed\") +\n  # Add lines for bandwidth = 50\n  geom_smooth(data = filter(rdd_data, income_centered >= -50 & income_centered <= 0),\n              method = \"lm\", se = FALSE, size = 2) +\n  geom_smooth(data = filter(rdd_data, income_centered > 0 & income_centered <= 50),\n              method = \"lm\", se = FALSE, size = 2) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nhere’s a gap, but it’s hard to measure since there are noncompliers on both sides. We can deal with the noncompliance if we use above/below the cutoff as an instrument (see the fuzzy regression discontinuity guide for a complete example). We should run this set of models:\n\\[\n\\begin{aligned}\n\\widehat{\\text{Net}} &= \\gamma_0 + \\gamma_1 \\text{Income}_{\\text{centered}} + \\gamma_2 \\text{Below 450} + \\omega \\\\\\\\\n\\text{Malaria risk} &= \\beta_0 + \\beta_1 \\text{Income}\\_{\\text{centered}} + \\beta_2 \\widehat{\\text{Net}} + \\epsilon\n\\end{aligned}\n\\]\nInstead of doing these two stages by hand (ugh), we’ll do the 2SLS regression with the iv_robust() function from the estimatr package:\n\nlibrary(estimatr)\n\nmodel_fuzzy <- iv_robust(malaria_risk_fuzzy ~ income_centered + net_fuzzy |\n                           income_centered + below_cutoff,\n                         data = filter(rdd_data,\n                                       income_centered >= -50 & income_centered <= 50))\ntidy(model_fuzzy)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\ndf\noutcome\n\n\n\n\n(Intercept)\n40.7324\n0.6904\n58.994\n0.0000\n39.3784\n42.0864\n2220\nmalaria_risk_fuzzy\n\n\nincome_centered\n-0.0192\n0.0142\n-1.350\n0.1772\n-0.0471\n0.0087\n2220\nmalaria_risk_fuzzy\n\n\nnet_fuzzyTRUE\n-11.2193\n1.3103\n-8.562\n0.0000\n-13.7889\n-8.6497\n2220\nmalaria_risk_fuzzy\n\n\n\n\n\n\nThe effect is slightly larger now (−11.2), but that’s because we are looking at a doubly local ATE: compliers in the bandwidth. But still, it’s close to −10, so that’s good. And we could probably get it closer if we did other mathy shenanigans like adding squared and cubed terms or using nonparametric estimation with rdrobust() in the rdrobust package.\nSave the data.\nThe data works, so let’s get rid of the intermediate columns we don’t need and save it as a CSV file. We’ll make two separate CSV files for fuzzy and sharp, just because.\n\nrdd_data_final_sharp <- rdd_data %>%\n  select(id, income, net = net_sharp, malaria_risk = malaria_risk_sharp)\nhead(rdd_data_final_sharp)\n\n\n\n\n\nid\nincome\nnet\nmalaria_risk\n\n\n\n\n1\n409.5\nTRUE\n38.05\n\n\n2\n520.8\nFALSE\n28.61\n\n\n3\n581.3\nFALSE\n64.75\n\n\n4\n324.1\nTRUE\n25.91\n\n\n5\n532.2\nFALSE\n46.52\n\n\n6\n538.0\nFALSE\n43.20\n\n\n\n\n\n\nrdd_data_final_fuzzy <- rdd_data %>%\n  select(id, income, net = net_fuzzy, malaria_risk = malaria_risk_fuzzy)\nhead(rdd_data_final_fuzzy)\n\n\n\n\n\nid\nincome\nnet\nmalaria_risk\n\n\n\n\n1\n409.5\nFALSE\n47.46\n\n\n2\n520.8\nFALSE\n27.64\n\n\n3\n581.3\nFALSE\n65.52\n\n\n4\n324.1\nTRUE\n23.39\n\n\n5\n532.2\nFALSE\n44.34\n\n\n6\n538.0\nFALSE\n40.18\n\n\n\n\n\n\n\n# Save data\nwrite_csv(rdd_data_final_sharp, \"data/rdd_sharp.csv\")\nwrite_csv(rdd_data_final_fuzzy, \"data/rdd_fuzzy.csv\")\n\n\n\n\nCreating an effect for instrumental variables\n\nDraw a DAG that maps out how all the columns you care about are related.\nAs with diff-in-diff and regression discontinuity, instrumental variables are a design-based approach to causal inference and thus don’t require complicated models (but you can still add control variables!), so their DAGs are simpler. Once again we’ll look at the effect of mosquito nets on malaria risk, but this time we’ll say that we cannot possibly measure all the confounding factors between net use and malaria risk, so we’ll use an instrument to extract the exogeneity from net use.\nAs we talked about in Session 11, good plausible instruments are hard to find: they have to cause bed net use and not be related to malaria risk except through bed net use.\nFor this example, we’ll pretend that free bed nets are distributed from town halls around the country. We’ll use “distance to town hall” as our instrument, since it could arguably maybe work perhaps. Being closer to a town hall makes you more likely to use a net, but being closer to a town halls doesn’t make put you at higher or lower risk for malaria on its own—it does that only because it changes your likelihood of getting a net.\nThis is where the story for the instrument falls apart, actually; in real life, if you live far away from a town hall, you probably live further from health services and live in more rural places with worse mosquito abatement policies, so you’re probably at higher risk of malaria. It’s probably a bad instrument, but just go with it.\nHere’s the DAG:\n\niv_dag <- dagify(mal ~ net + U,\n                 net ~ dist + U,\n                 coords = list(x = c(mal = 4, net = 2, U = 3, dist = 1),\n                               y = c(mal = 1, net = 1, U = 2, dist = 1.5)),\n                 latent = \"U\")\n\nggdag_status(iv_dag) +\n  guides(color = \"none\") +\n  theme_dag()\n\n\n\n\n\n\n\n\nSpecify how those nodes are measured.\nHere’s how we’ll measure these nodes:\n\nMalaria risk: scale from 0–100, mostly around 60, but ranging from 30ish to 90ish. Best to use a Beta distribution.\nNet use: binary 0/1, TRUE/FALSE variable. However, since we want to use other variables that increase the likelihood of using a net, we’ll do some cool tricky stuff with a bed net score, like we did in the observational DAG example earlier.\nDistance: distance to nearest town hall, measured in kilometers, mostly around 3, with a left skewed long tail (i.e. most people live fairly close, some people live far away). Best to use a Beta distribution (to get the skewed shape) that we then rescale.\nUnobserved: who knows?! There are a lot of unknown confounders. We could generate columns like income, age, education, and health, make them mathematically related to malaria risk and net use, and then throw those columns away in the final data so they’re unobserved. That would be fairly easy and intuitive.\nFor the sake of simplicity here, we’ll make a column called “risk factors,” kind of like we did with the “ability” column in the instrumental variables example—it’s a magical column that is unmeasurable, but it’ll open a backdoor path between net use and malaria risk and thus create endogeneity. It’ll be normally distributed around 50, with a standard deviation of 25.\n\nSpecify the relationships between the nodes based on the DAG equations.\nThere are two models in the DAG:\n\nnet ~ dist + U: Net usage is determined by both distance and our magical unobserved risk factor column. Net use is technically binomial, but in order to change the likelihood of net use based on distance to town hall and unobserved stuff, we’ll do the fancy tricky stuff we did in the observational DAG section above: we’ll create a bed net score, increase or decrease that score based on risk factors and distance, scale that score to a 0-1 scale of probabilities, and then draw a binomial 0/1 outcome using those probabilities.\nWe’ll say that a one kilometer increase in the distance to a town halls reduces the bed net score and a one point increase in risk factors reduces the bed net score.\nmal ~ net + U: Malaria risk is determined by both net usage and unkown stuff, or the magical column we’re calling “risk factors.” We’ll say that a one point increase in risk factors increases malaria risk, and that using a mosquito net causes a decrease of 10 points on average. That’s our causal effect.\n\nGenerate random columns that stand alone. Generate related columns using regression math. Consider adding random noise. This is an entirely trial and error process until you get numbers that look good. Rely heavily on plots as you try different coefficients and parameters. Optionally rescale any columns that go out of reasonable bounds. If you rescale, you’ll need to tinker with the coefficients you used since the final effects will also get rescaled.\nFake data time! Here’s some heavily annotated code:\n\n# Make this randomness consistent\nset.seed(1234)\n\n# Simulate 1578 people (just for fun)\nn_people <- 1578\n\niv_data <- tibble(\n  # Make an ID column (not necessary, but nice to have)\n  id = 1:n_people,\n  # Generate magical unobserved risk factor variable: normal, 500 ± 300\n  risk_factors = rnorm(n_people, mean = 100, sd = 25),\n  # Generate distance to town hall variable\n  distance = rbeta(n_people, shape1 = 1, shape2 = 4)\n) %>%\n  # Scale up distance to be 0.1-15 instead of 0-1\n  mutate(distance = rescale(distance, to = c(0.1, 15))) %>%\n  # Generate net variable based on distance, risk factors, and random noise\n  # Note: These -40 and -2 effects are entirely made up and I got them through a\n  # lot of trial and error and rerunning this stupid chunk dozens of times\n  mutate(net_score = 0 +\n           (-40 * distance) +  # Distance effect\n           (-2 * risk_factors) +  # Risk factor effect\n           rnorm(n_people, mean = 0, sd = 50),  # Random noise\n        net_probability = rescale(net_score, to = c(0.15, 1)),\n        # Randomly generate a 0/1 variable using that probability\n        net = rbinom(n_people, 1, net_probability)) %>%\n  # Generate malaria risk variable based on net use, risk factors, and random noise\n  mutate(malaria_risk_base = rbeta(n_people, shape1 = 7, shape2 = 5) * 100,\n         # We're aiming for a -10 net effect, but need to boost it because of rescaling\n         malaria_effect = (-20 * net) + (0.5 * risk_factors),\n         # Make the final malaria risk score\n         malaria_risk = malaria_risk_base + malaria_effect,\n         # Rescale so it doesn't go below 0\n         malaria_risk = rescale(malaria_risk, to = c(5, 80)))\niv_data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\nrisk_factors\ndistance\nnet_score\nnet_probability\nnet\nmalaria_risk_base\nmalaria_effect\nmalaria_risk\n\n\n\n\n1\n69.82\n3.9835\n-202.42\n0.7656\n1\n71.12\n14.9117\n36.461\n\n\n2\n106.94\n2.1409\n-283.72\n0.6860\n1\n75.42\n33.4679\n49.487\n\n\n3\n127.11\n5.4663\n-468.54\n0.5051\n0\n57.43\n63.5555\n56.384\n\n\n4\n41.36\n9.6059\n-414.44\n0.5580\n0\n37.17\n20.6788\n20.396\n\n\n5\n110.73\n4.6612\n-375.94\n0.5957\n0\n38.47\n55.3641\n40.905\n\n\n6\n112.65\n2.2930\n-283.87\n0.6859\n1\n75.71\n36.3257\n51.280\n\n\n7\n85.63\n0.9221\n-215.19\n0.7531\n0\n28.67\n42.8158\n28.170\n\n\n8\n86.33\n12.5336\n-608.47\n0.3681\n1\n50.55\n23.1671\n29.444\n\n\n9\n85.89\n3.1146\n-266.52\n0.7029\n1\n38.36\n22.9444\n22.369\n\n\n10\n77.75\n1.3509\n-156.87\n0.8102\n1\n69.10\n18.8745\n37.566\n\n\n11\n88.07\n2.5810\n-285.12\n0.6847\n1\n68.55\n24.0351\n40.197\n\n\n12\n75.04\n0.6163\n-174.84\n0.7927\n1\n48.00\n17.5202\n24.768\n\n\n13\n80.59\n1.6379\n-271.87\n0.6976\n1\n59.68\n20.2968\n33.010\n\n\n14\n101.61\n6.9385\n-437.69\n0.5353\n1\n72.69\n30.8057\n46.412\n\n\n15\n123.99\n0.4376\n-328.89\n0.6418\n1\n59.68\n41.9937\n45.376\n\n\n16\n97.24\n1.9956\n-341.99\n0.6290\n0\n78.07\n48.6214\n59.637\n\n\n17\n87.22\n1.6507\n-176.91\n0.7906\n0\n71.81\n43.6124\n53.212\n\n\n18\n77.22\n9.4162\n-666.73\n0.3110\n1\n59.99\n18.6101\n32.223\n\n\n19\n79.07\n4.8222\n-320.81\n0.6497\n1\n52.54\n19.5354\n28.508\n\n\n20\n160.40\n3.9122\n-537.28\n0.4378\n1\n84.29\n60.1979\n69.777\n\n\n21\n103.35\n0.4975\n-173.68\n0.7938\n1\n65.38\n31.6761\n42.743\n\n\n22\n87.73\n6.0708\n-403.22\n0.5690\n0\n39.10\n43.8664\n34.714\n\n\n23\n88.99\n3.2976\n-305.99\n0.6642\n1\n58.32\n24.4932\n34.627\n\n\n24\n111.49\n1.2217\n-243.73\n0.7252\n1\n68.33\n35.7449\n46.742\n\n\n25\n82.66\n9.4601\n-531.39\n0.4435\n1\n35.72\n21.3285\n19.939\n\n\n26\n63.79\n2.4248\n-251.31\n0.7178\n1\n62.34\n11.8974\n29.735\n\n\n27\n114.37\n3.2344\n-416.62\n0.5559\n0\n57.55\n57.1844\n52.820\n\n\n28\n74.41\n0.5991\n-165.84\n0.8015\n1\n74.74\n17.2043\n39.829\n\n\n29\n99.62\n5.9526\n-462.75\n0.5107\n0\n83.40\n49.8108\n63.350\n\n\n30\n76.60\n0.3357\n-135.79\n0.8309\n0\n70.18\n38.3006\n49.254\n\n\n31\n127.56\n0.7726\n-341.23\n0.6297\n1\n57.59\n43.7787\n45.200\n\n\n32\n88.11\n7.3160\n-549.94\n0.4254\n1\n80.45\n24.0551\n46.987\n\n\n33\n82.26\n4.8416\n-335.74\n0.6351\n1\n45.06\n21.1320\n25.153\n\n\n34\n87.47\n4.2170\n-276.69\n0.6929\n1\n62.12\n23.7343\n36.360\n\n\n35\n59.27\n3.4109\n-241.50\n0.7274\n1\n34.80\n9.6363\n12.752\n\n\n36\n70.81\n2.0814\n-239.57\n0.7293\n1\n43.21\n15.4048\n20.833\n\n\n37\n45.50\n1.3841\n-147.35\n0.8196\n1\n44.36\n2.7495\n14.276\n\n\n38\n66.48\n1.4041\n-129.99\n0.8366\n1\n67.61\n13.2376\n33.503\n\n\n39\n92.64\n1.3040\n-265.58\n0.7038\n0\n62.93\n46.3213\n49.694\n\n\n40\n88.35\n9.4339\n-551.13\n0.4242\n1\n53.20\n24.1763\n31.527\n\n\n41\n136.24\n3.7214\n-423.65\n0.5490\n0\n74.28\n68.1187\n68.588\n\n\n42\n73.28\n2.7205\n-251.00\n0.7181\n0\n44.51\n36.6420\n33.678\n\n\n43\n78.62\n1.7166\n-171.63\n0.7958\n0\n19.45\n39.3079\n20.916\n\n\n44\n92.98\n2.3937\n-259.70\n0.7096\n1\n51.16\n26.4922\n31.684\n\n\n45\n75.14\n1.4138\n-199.58\n0.7684\n1\n70.09\n17.5707\n37.389\n\n\n46\n75.79\n6.5610\n-493.06\n0.4811\n1\n38.49\n17.8936\n19.560\n\n\n47\n72.32\n2.8389\n-260.69\n0.7086\n1\n60.33\n16.1585\n31.024\n\n\n48\n68.70\n2.0854\n-191.23\n0.7766\n1\n65.99\n14.3502\n33.218\n\n\n49\n86.90\n3.9721\n-317.13\n0.6533\n1\n66.64\n23.4521\n38.777\n\n\n50\n87.58\n0.7205\n-251.38\n0.7177\n1\n75.74\n23.7894\n44.153\n\n\n51\n54.85\n1.0377\n-183.69\n0.7840\n1\n53.97\n7.4246\n22.417\n\n\n52\n85.45\n4.4866\n-385.59\n0.5863\n0\n83.35\n42.7241\n59.283\n\n\n53\n72.28\n4.1813\n-361.43\n0.6100\n1\n73.00\n16.1389\n38.231\n\n\n54\n74.63\n5.1395\n-308.36\n0.6619\n0\n70.76\n37.3130\n49.023\n\n\n55\n95.94\n4.8977\n-342.02\n0.6290\n0\n75.55\n47.9711\n57.827\n\n\n56\n114.08\n3.8129\n-339.26\n0.6317\n1\n45.49\n37.0382\n34.466\n\n\n57\n141.20\n3.5288\n-453.45\n0.5199\n1\n71.65\n50.5977\n57.105\n\n\n58\n80.67\n2.6460\n-275.33\n0.6943\n0\n71.05\n40.3331\n50.907\n\n\n59\n140.15\n9.6365\n-643.53\n0.3337\n0\n59.69\n70.0739\n61.385\n\n\n60\n71.05\n5.4623\n-315.10\n0.6553\n0\n54.04\n35.5274\n38.475\n\n\n61\n116.41\n1.4025\n-290.38\n0.6795\n0\n79.90\n58.2074\n66.139\n\n\n62\n163.72\n3.5117\n-484.23\n0.4897\n1\n66.93\n61.8624\n60.830\n\n\n63\n99.13\n4.3732\n-488.89\n0.4851\n0\n75.29\n49.5655\n58.591\n\n\n64\n83.26\n0.9279\n-213.77\n0.7545\n1\n69.49\n21.6296\n39.359\n\n\n65\n99.81\n8.1216\n-563.69\n0.4119\n1\n51.34\n29.9049\n33.734\n\n\n66\n144.43\n8.0748\n-589.40\n0.3867\n0\n63.75\n72.2136\n64.921\n\n\n67\n71.53\n0.6179\n-190.81\n0.7770\n1\n73.89\n15.7674\n38.525\n\n\n68\n134.20\n4.5059\n-417.92\n0.5546\n0\n60.52\n67.0978\n60.164\n\n\n69\n133.24\n1.7074\n-346.39\n0.6247\n1\n61.85\n46.6196\n49.251\n\n\n70\n108.41\n1.2448\n-307.13\n0.6631\n0\n68.55\n54.2059\n57.389\n\n\n71\n100.17\n5.5844\n-530.65\n0.4443\n0\n64.98\n50.0862\n53.007\n\n\n72\n88.61\n2.8824\n-336.19\n0.6347\n0\n77.51\n44.3066\n56.859\n\n\n73\n90.84\n5.4538\n-379.37\n0.5924\n0\n56.61\n45.4185\n45.580\n\n\n74\n116.21\n0.4402\n-273.25\n0.6963\n1\n78.00\n38.1036\n53.598\n\n\n75\n151.76\n5.1703\n-492.19\n0.4819\n0\n83.92\n75.8784\n78.503\n\n\n76\n96.17\n1.4186\n-374.91\n0.5968\n1\n64.05\n28.0825\n39.936\n\n\n77\n65.23\n7.4790\n-422.73\n0.5499\n1\n62.79\n12.6162\n30.406\n\n\n78\n81.91\n3.6589\n-321.68\n0.6489\n1\n58.32\n20.9552\n32.609\n\n\n79\n106.46\n1.8526\n-302.05\n0.6681\n0\n36.11\n53.2283\n38.345\n\n\n80\n92.07\n5.7337\n-359.76\n0.6116\n1\n54.87\n26.0368\n33.541\n\n\n81\n95.56\n11.6358\n-639.82\n0.3374\n1\n31.57\n27.7776\n21.254\n\n\n82\n95.75\n2.3863\n-277.76\n0.6919\n1\n66.90\n27.8751\n41.445\n\n\n83\n65.69\n4.9935\n-230.38\n0.7383\n0\n31.88\n32.8462\n24.320\n\n\n84\n95.66\n2.5284\n-302.96\n0.6672\n1\n58.17\n27.8277\n36.443\n\n\n85\n121.26\n3.0289\n-328.54\n0.6422\n0\n60.85\n60.6279\n56.664\n\n\n86\n117.44\n6.5204\n-513.00\n0.4615\n1\n64.71\n38.7201\n46.375\n\n\n87\n113.75\n4.4234\n-431.26\n0.5416\n0\n71.20\n56.8750\n60.421\n\n\n88\n89.93\n6.7286\n-406.60\n0.5657\n0\n71.31\n44.9659\n53.699\n\n\n89\n95.21\n1.7134\n-266.36\n0.7030\n0\n55.32\n47.6051\n46.091\n\n\n90\n70.14\n6.0215\n-417.52\n0.5550\n1\n75.26\n15.0684\n38.908\n\n\n91\n98.67\n0.4395\n-231.27\n0.7374\n1\n51.92\n29.3355\n33.738\n\n\n92\n106.38\n4.3207\n-394.74\n0.5773\n1\n61.53\n33.1900\n41.410\n\n\n93\n142.65\n10.1882\n-668.66\n0.3091\n0\n53.97\n71.3246\n58.838\n\n\n94\n125.04\n0.3795\n-264.55\n0.7048\n1\n84.28\n42.5189\n59.694\n\n\n95\n87.61\n4.7224\n-357.94\n0.6134\n1\n63.61\n23.8052\n37.250\n\n\n96\n108.89\n1.7132\n-194.43\n0.7735\n1\n60.77\n34.4444\n41.692\n\n\n97\n71.63\n0.7288\n-260.62\n0.7087\n1\n61.63\n15.8174\n31.566\n\n\n98\n121.96\n2.0913\n-345.61\n0.6254\n1\n67.49\n40.9775\n49.246\n\n\n99\n124.32\n0.5507\n-275.89\n0.6937\n0\n46.15\n62.1615\n49.159\n\n\n100\n153.03\n8.4173\n-711.51\n0.2672\n0\n40.66\n76.5140\n54.209\n\n\n101\n110.36\n9.8297\n-484.07\n0.4899\n1\n32.65\n35.1815\n26.087\n\n\n102\n88.13\n6.9339\n-479.90\n0.4939\n0\n55.77\n44.0660\n44.328\n\n\n103\n101.65\n2.6539\n-258.02\n0.7112\n0\n80.99\n50.8249\n62.554\n\n\n104\n87.44\n6.1738\n-448.58\n0.5246\n1\n61.90\n23.7190\n36.224\n\n\n105\n79.35\n1.6386\n-262.72\n0.7066\n0\n58.47\n39.6750\n43.364\n\n\n106\n104.17\n2.0613\n-340.88\n0.6301\n1\n53.65\n32.0874\n36.292\n\n\n107\n77.59\n1.4267\n-265.00\n0.7044\n0\n70.45\n38.7967\n49.692\n\n\n108\n104.20\n0.4139\n-358.29\n0.6130\n1\n73.50\n32.1023\n47.613\n\n\n109\n108.87\n0.9220\n-215.35\n0.7530\n1\n45.07\n34.4371\n32.743\n\n\n110\n98.70\n4.9122\n-415.26\n0.5572\n0\n33.59\n49.3487\n34.697\n\n\n111\n95.10\n8.5091\n-521.48\n0.4532\n1\n45.78\n27.5508\n29.219\n\n\n112\n83.77\n8.8576\n-536.69\n0.4383\n0\n62.00\n41.8866\n46.635\n\n\n113\n72.26\n5.1057\n-338.37\n0.6325\n1\n40.00\n16.1279\n19.416\n\n\n114\n121.23\n5.4627\n-506.50\n0.4679\n1\n81.35\n40.6159\n56.940\n\n\n115\n100.56\n1.8177\n-284.99\n0.6848\n1\n45.97\n30.2795\n30.883\n\n\n116\n120.78\n3.6000\n-361.57\n0.6098\n0\n60.47\n60.3893\n56.310\n\n\n117\n68.89\n3.8139\n-268.02\n0.7014\n1\n71.98\n14.4464\n36.684\n\n\n118\n104.23\n1.0341\n-252.53\n0.7166\n1\n41.89\n32.1128\n29.602\n\n\n119\n116.83\n0.1429\n-321.05\n0.6495\n1\n61.27\n38.4146\n44.240\n\n\n120\n99.34\n0.9647\n-206.78\n0.7614\n1\n46.11\n29.6715\n30.619\n\n\n121\n95.22\n9.5859\n-541.92\n0.4332\n1\n81.31\n27.6076\n49.504\n\n\n122\n80.45\n7.5646\n-378.34\n0.5934\n1\n73.43\n20.2262\n40.808\n\n\n123\n151.45\n8.6179\n-731.67\n0.2474\n0\n59.59\n75.7270\n64.554\n\n\n124\n118.76\n0.3555\n-236.45\n0.7323\n1\n69.79\n39.3813\n49.650\n\n\n125\n145.61\n4.6998\n-485.28\n0.4887\n0\n73.27\n72.8026\n70.679\n\n\n126\n102.00\n0.2233\n-150.82\n0.8162\n0\n73.26\n51.0007\n58.248\n\n\n127\n84.21\n3.8936\n-315.17\n0.6552\n0\n65.32\n42.1074\n48.653\n\n\n128\n62.17\n8.5904\n-529.69\n0.4452\n1\n78.61\n11.0839\n38.550\n\n\n129\n84.10\n7.5487\n-504.93\n0.4694\n1\n51.49\n22.0488\n29.342\n\n\n130\n105.66\n0.4693\n-202.14\n0.7659\n1\n65.93\n32.8288\n43.714\n\n\n131\n125.34\n1.7424\n-364.07\n0.6074\n0\n74.62\n62.6711\n65.677\n\n\n132\n106.32\n1.5047\n-386.07\n0.5858\n1\n42.17\n33.1594\n30.359\n\n\n133\n70.70\n3.6353\n-193.75\n0.7741\n0\n61.54\n35.3506\n42.650\n\n\n134\n116.72\n2.8348\n-329.65\n0.6411\n1\n90.47\n38.3589\n60.856\n\n\n135\n58.75\n6.2723\n-329.07\n0.6416\n0\n76.93\n29.3737\n48.012\n\n\n136\n90.85\n0.7136\n-248.84\n0.7202\n0\n40.05\n45.4268\n36.146\n\n\n137\n92.10\n5.2604\n-410.92\n0.5615\n1\n35.92\n26.0485\n22.744\n\n\n138\n51.29\n0.1994\n-216.13\n0.7522\n1\n53.04\n5.6469\n20.874\n\n\n139\n123.00\n1.6300\n-228.11\n0.7405\n1\n34.50\n41.5007\n30.743\n\n\n140\n84.43\n0.4183\n-148.17\n0.8188\n0\n62.23\n42.2141\n46.956\n\n\n141\n91.65\n3.7919\n-383.09\n0.5887\n0\n54.62\n45.8245\n44.677\n\n\n142\n134.88\n1.6149\n-322.09\n0.6485\n1\n51.80\n47.4393\n43.986\n\n\n143\n115.92\n0.6414\n-228.69\n0.7399\n1\n60.49\n37.9584\n43.536\n\n\n144\n97.29\n2.7422\n-353.83\n0.6174\n0\n76.83\n48.6446\n58.939\n\n\n145\n112.84\n1.1249\n-318.93\n0.6516\n0\n80.66\n56.4220\n65.554\n\n\n146\n109.98\n0.9609\n-227.85\n0.7407\n0\n85.82\n54.9909\n67.683\n\n\n147\n141.57\n0.8431\n-294.68\n0.6753\n0\n68.33\n70.7857\n66.718\n\n\n148\n106.90\n1.2896\n-225.05\n0.7435\n1\n52.47\n33.4487\n36.394\n\n\n149\n112.66\n4.5089\n-418.20\n0.5544\n1\n54.99\n36.3284\n39.474\n\n\n150\n108.69\n6.3759\n-496.18\n0.4780\n0\n83.00\n54.3444\n65.705\n\n\n151\n90.57\n2.2734\n-222.41\n0.7461\n1\n82.70\n25.2845\n48.973\n\n\n152\n102.44\n6.4101\n-437.10\n0.5359\n0\n49.14\n51.2202\n44.627\n\n\n153\n140.97\n1.9021\n-330.84\n0.6399\n1\n50.91\n50.4843\n45.214\n\n\n154\n78.11\n1.8412\n-339.98\n0.6310\n1\n61.44\n19.0551\n33.306\n\n\n155\n103.04\n4.0718\n-460.38\n0.5131\n1\n50.74\n31.5220\n34.314\n\n\n156\n134.05\n3.4586\n-429.90\n0.5429\n0\n76.36\n67.0266\n69.153\n\n\n157\n94.13\n2.0226\n-278.59\n0.6911\n0\n33.73\n47.0672\n33.479\n\n\n158\n73.67\n0.8528\n-136.24\n0.8304\n1\n50.33\n16.8327\n25.705\n\n\n159\n78.26\n2.5295\n-247.58\n0.7214\n1\n68.95\n19.1277\n37.625\n\n\n160\n90.25\n1.7214\n-282.60\n0.6871\n1\n60.14\n25.1234\n36.023\n\n\n161\n78.82\n4.3937\n-384.37\n0.5875\n1\n54.22\n19.4081\n29.390\n\n\n162\n93.48\n1.2882\n-120.32\n0.8460\n1\n84.51\n26.7420\n50.833\n\n\n163\n89.64\n4.8822\n-329.29\n0.6414\n1\n63.28\n24.8198\n37.639\n\n\n164\n95.42\n1.5579\n-229.78\n0.7389\n1\n37.89\n27.7119\n24.817\n\n\n165\n110.18\n0.5069\n-190.76\n0.7771\n0\n59.48\n55.0882\n52.728\n\n\n166\n115.62\n5.5080\n-458.49\n0.5149\n1\n72.36\n37.8079\n50.220\n\n\n167\n141.96\n3.8449\n-491.54\n0.4825\n0\n81.50\n70.9776\n74.331\n\n\n168\n98.28\n6.5630\n-494.75\n0.4794\n1\n58.49\n29.1413\n37.374\n\n\n169\n91.98\n6.3381\n-490.62\n0.4835\n0\n71.41\n45.9895\n54.339\n\n\n170\n136.78\n3.0506\n-265.94\n0.7035\n0\n57.62\n68.3876\n59.247\n\n\n171\n142.61\n1.9153\n-419.96\n0.5526\n0\n75.96\n71.3041\n71.360\n\n\n172\n101.08\n4.4831\n-417.94\n0.5546\n0\n44.30\n50.5406\n41.483\n\n\n173\n91.68\n5.7242\n-389.79\n0.5822\n0\n38.81\n45.8418\n35.674\n\n\n174\n54.44\n2.0819\n-206.72\n0.7614\n1\n60.30\n7.2221\n25.913\n\n\n175\n135.28\n7.8948\n-671.04\n0.3068\n1\n51.87\n47.6408\n44.144\n\n\n176\n79.06\n6.9590\n-424.25\n0.5484\n0\n53.71\n39.5302\n40.570\n\n\n177\n71.91\n11.3209\n-648.05\n0.3293\n0\n61.74\n35.9530\n43.106\n\n\n178\n176.09\n1.6191\n-481.98\n0.4919\n1\n38.05\n68.0471\n47.898\n\n\n179\n105.88\n7.5154\n-568.08\n0.4076\n0\n55.93\n52.9378\n49.475\n\n\n180\n99.17\n0.1000\n-140.64\n0.8261\n1\n59.35\n29.5843\n38.116\n\n\n181\n31.69\n0.8629\n-105.71\n0.8603\n0\n75.22\n15.8473\n39.331\n\n\n182\n97.51\n4.3760\n-343.84\n0.6272\n1\n57.89\n28.7526\n36.809\n\n\n183\n124.40\n3.5677\n-419.44\n0.5531\n0\n36.71\n62.2004\n43.803\n\n\n184\n110.35\n7.8696\n-539.31\n0.4358\n0\n49.82\n55.1734\n47.267\n\n\n185\n122.81\n2.4890\n-354.69\n0.6165\n0\n64.34\n61.4040\n59.096\n\n\n186\n149.59\n3.5462\n-346.93\n0.6241\n0\n40.10\n74.7967\n52.912\n\n\n187\n129.23\n1.5966\n-171.90\n0.7955\n1\n53.74\n44.6139\n43.485\n\n\n188\n87.28\n0.3178\n-156.42\n0.8107\n1\n55.55\n23.6408\n32.559\n\n\n189\n117.60\n2.4448\n-389.65\n0.5823\n0\n55.17\n58.8023\n52.388\n\n\n190\n95.04\n0.3616\n-225.45\n0.7431\n1\n88.67\n27.5198\n53.649\n\n\n191\n86.55\n1.8130\n-246.29\n0.7227\n0\n72.06\n43.2741\n53.162\n\n\n192\n28.61\n0.5633\n-64.11\n0.9011\n1\n55.25\n-5.6970\n15.668\n\n\n193\n80.26\n1.5264\n-268.29\n0.7011\n1\n62.08\n20.1294\n34.280\n\n\n194\n112.20\n2.8341\n-314.70\n0.6557\n0\n40.79\n56.0977\n42.649\n\n\n195\n154.20\n0.1248\n-285.22\n0.6846\n1\n46.00\n57.1004\n46.188\n\n\n196\n112.52\n3.0963\n-364.84\n0.6066\n1\n54.59\n36.2587\n39.205\n\n\n197\n115.51\n0.7590\n-240.62\n0.7282\n1\n38.36\n37.7526\n30.807\n\n\n198\n75.85\n5.7239\n-473.22\n0.5005\n1\n49.52\n17.9262\n25.868\n\n\n199\n104.07\n5.4569\n-422.19\n0.5505\n1\n72.29\n32.0332\n46.885\n\n\n200\n48.04\n6.7024\n-329.10\n0.6416\n1\n74.20\n4.0220\n32.008\n\n\n201\n112.13\n3.2638\n-378.73\n0.5930\n1\n57.39\n36.0653\n40.694\n\n\n202\n117.42\n3.7550\n-417.39\n0.5552\n1\n43.78\n38.7096\n34.443\n\n\n203\n104.64\n1.3395\n-275.32\n0.6943\n1\n60.86\n32.3189\n40.533\n\n\n204\n117.52\n4.6342\n-330.88\n0.6399\n1\n70.01\n38.7592\n49.422\n\n\n205\n107.79\n9.3680\n-608.27\n0.3683\n1\n65.95\n33.8960\n44.335\n\n\n206\n119.01\n4.1850\n-411.15\n0.5613\n1\n62.37\n39.5058\n45.492\n\n\n207\n146.06\n0.2433\n-368.20\n0.6033\n0\n66.88\n73.0308\n67.171\n\n\n208\n127.81\n1.9759\n-285.42\n0.6844\n1\n55.95\n43.9045\n44.336\n\n\n209\n100.82\n2.5109\n-326.15\n0.6445\n0\n48.26\n50.4083\n43.662\n\n\n210\n72.14\n0.8069\n-99.65\n0.8663\n1\n28.49\n16.0694\n12.820\n\n\n211\n110.45\n0.2603\n-289.58\n0.6803\n0\n65.56\n55.2257\n56.268\n\n\n212\n89.99\n0.2926\n-167.40\n0.7999\n0\n59.64\n44.9971\n47.066\n\n\n213\n137.34\n3.9443\n-513.01\n0.4615\n1\n53.08\n48.6687\n45.419\n\n\n214\n59.82\n5.4820\n-268.51\n0.7009\n0\n54.32\n29.9115\n35.434\n\n\n215\n89.61\n4.5596\n-346.66\n0.6244\n0\n52.30\n44.8031\n42.769\n\n\n216\n110.55\n1.9738\n-247.54\n0.7215\n1\n49.04\n35.2751\n35.483\n\n\n217\n96.21\n6.2162\n-409.71\n0.5627\n1\n78.22\n28.1033\n48.025\n\n\n218\n84.85\n4.7650\n-267.67\n0.7018\n0\n55.92\n42.4231\n43.477\n\n\n219\n92.38\n0.4355\n-104.94\n0.8611\n1\n78.09\n26.1910\n46.862\n\n\n220\n115.74\n0.2391\n-300.88\n0.6692\n1\n67.08\n37.8692\n47.243\n\n\n221\n122.38\n5.7272\n-440.89\n0.5321\n1\n62.69\n41.1896\n46.632\n\n\n222\n116.51\n1.1457\n-317.68\n0.6528\n1\n51.68\n38.2527\n38.685\n\n\n223\n156.84\n4.1885\n-491.77\n0.4823\n0\n51.31\n78.4185\n61.364\n\n\n224\n129.34\n4.1505\n-490.55\n0.4835\n1\n41.37\n44.6687\n36.462\n\n\n225\n107.19\n7.5561\n-514.29\n0.4603\n0\n41.68\n53.5964\n41.731\n\n\n226\n83.51\n0.2566\n-246.69\n0.7223\n1\n53.52\n21.7529\n30.327\n\n\n227\n172.98\n1.1909\n-428.29\n0.5445\n1\n61.31\n66.4893\n60.269\n\n\n228\n116.94\n5.3870\n-449.79\n0.5234\n0\n44.75\n58.4677\n46.254\n\n\n229\n82.89\n0.3704\n-217.14\n0.7512\n1\n64.25\n21.4460\n36.268\n\n\n230\n104.66\n3.1289\n-334.17\n0.6366\n1\n30.22\n32.3312\n23.078\n\n\n231\n91.89\n2.7994\n-245.92\n0.7231\n1\n61.73\n25.9451\n37.396\n\n\n232\n93.13\n1.1079\n-254.32\n0.7148\n0\n73.89\n46.5662\n56.084\n\n\n233\n76.66\n0.8934\n-169.61\n0.7978\n1\n57.01\n18.3312\n30.365\n\n\n234\n102.92\n1.5370\n-281.88\n0.6878\n0\n67.85\n51.4606\n55.430\n\n\n235\n107.98\n0.4187\n-220.09\n0.7483\n1\n38.97\n33.9895\n29.011\n\n\n236\n73.06\n0.2932\n-145.18\n0.8217\n1\n75.12\n16.5307\n39.661\n\n\n237\n19.17\n2.6706\n-111.40\n0.8548\n1\n81.25\n-10.4144\n27.797\n\n\n238\n93.63\n4.5977\n-356.96\n0.6143\n1\n39.16\n26.8141\n25.026\n\n\n239\n100.74\n3.5248\n-423.53\n0.5491\n1\n86.87\n30.3690\n54.250\n\n\n240\n114.86\n2.2698\n-386.87\n0.5850\n0\n56.54\n57.4284\n52.381\n\n\n241\n101.48\n7.5804\n-446.42\n0.5267\n1\n72.31\n30.7392\n46.160\n\n\n242\n110.33\n1.5049\n-318.13\n0.6523\n1\n61.90\n35.1675\n42.749\n\n\n243\n72.56\n0.1538\n-137.78\n0.8289\n1\n50.58\n16.2778\n25.532\n\n\n244\n117.78\n2.8722\n-355.69\n0.6156\n0\n58.48\n58.8897\n54.321\n\n\n245\n117.97\n3.8477\n-382.80\n0.5890\n0\n92.72\n58.9861\n73.895\n\n\n246\n106.29\n1.7241\n-184.41\n0.7833\n1\n79.84\n33.1456\n51.822\n\n\n247\n133.93\n5.7723\n-567.85\n0.4078\n0\n64.50\n66.9659\n62.356\n\n\n248\n110.11\n4.2645\n-325.07\n0.6456\n1\n70.20\n35.0559\n47.420\n\n\n249\n106.61\n3.4756\n-332.34\n0.6384\n0\n63.46\n53.3046\n53.975\n\n\n250\n106.70\n0.7261\n-233.92\n0.7348\n1\n48.83\n33.3505\n34.267\n\n\n251\n110.92\n1.3877\n-312.90\n0.6575\n1\n69.11\n35.4616\n47.027\n\n\n252\n126.50\n2.8421\n-319.80\n0.6507\n1\n44.84\n43.2515\n37.634\n\n\n253\n111.30\n4.3947\n-376.98\n0.5947\n0\n38.89\n55.6524\n41.312\n\n\n254\n116.58\n4.7407\n-413.53\n0.5589\n0\n50.98\n58.2900\n49.706\n\n\n255\n71.59\n1.5318\n-255.81\n0.7134\n1\n56.02\n15.7953\n28.355\n\n\n256\n90.74\n1.9849\n-214.90\n0.7534\n1\n62.28\n25.3688\n37.380\n\n\n257\n136.92\n10.3606\n-705.11\n0.2734\n0\n72.69\n68.4621\n67.875\n\n\n258\n69.40\n4.4871\n-337.08\n0.6338\n0\n56.35\n34.7012\n39.321\n\n\n259\n106.45\n0.5621\n-177.59\n0.7900\n0\n53.48\n53.2259\n48.243\n\n\n260\n110.13\n0.5739\n-210.19\n0.7580\n0\n43.97\n55.0625\n43.870\n\n\n261\n124.40\n1.1893\n-325.18\n0.6454\n1\n31.64\n42.1975\n29.510\n\n\n262\n91.28\n3.0483\n-277.03\n0.6926\n1\n59.15\n25.6390\n35.752\n\n\n263\n103.97\n2.1527\n-337.06\n0.6338\n1\n53.19\n31.9828\n35.973\n\n\n264\n55.92\n9.0347\n-434.95\n0.5380\n1\n86.20\n7.9593\n41.093\n\n\n265\n108.46\n4.5922\n-440.90\n0.5321\n1\n50.11\n34.2325\n35.499\n\n\n266\n83.34\n8.0306\n-578.51\n0.3974\n0\n49.17\n41.6679\n39.200\n\n\n267\n94.03\n5.1470\n-308.77\n0.6615\n0\n55.65\n47.0169\n45.941\n\n\n268\n70.31\n0.5480\n-181.82\n0.7858\n1\n79.42\n15.1529\n41.328\n\n\n269\n109.62\n2.4219\n-282.92\n0.6868\n1\n59.75\n34.8117\n41.320\n\n\n270\n116.66\n3.1955\n-417.72\n0.5548\n1\n53.27\n38.3322\n39.638\n\n\n271\n92.38\n12.7284\n-700.92\n0.2775\n0\n78.56\n46.1923\n58.528\n\n\n272\n145.63\n2.4851\n-357.59\n0.6137\n0\n72.77\n72.8126\n70.401\n\n\n273\n116.76\n0.3557\n-197.54\n0.7704\n0\n75.43\n58.3820\n63.695\n\n\n274\n123.72\n0.9653\n-252.50\n0.7166\n0\n53.65\n61.8579\n53.261\n\n\n275\n151.24\n0.7179\n-302.02\n0.6681\n0\n59.45\n75.6175\n64.407\n\n\n276\n83.72\n4.6276\n-364.15\n0.6073\n0\n56.32\n41.8611\n43.385\n\n\n277\n120.22\n0.9394\n-258.94\n0.7103\n0\n64.23\n60.1077\n58.294\n\n\n278\n124.66\n11.9431\n-689.53\n0.2887\n0\n38.78\n62.3323\n45.053\n\n\n279\n99.85\n4.4219\n-443.49\n0.5296\n1\n62.21\n29.9229\n39.938\n\n\n280\n107.98\n3.1208\n-350.50\n0.6206\n1\n42.83\n33.9882\n31.209\n\n\n281\n74.70\n1.8003\n-256.51\n0.7127\n1\n56.95\n17.3522\n29.775\n\n\n282\n111.75\n1.3399\n-345.39\n0.6257\n1\n36.09\n35.8771\n28.446\n\n\n283\n82.48\n6.0863\n-349.10\n0.6220\n0\n72.57\n41.2379\n52.294\n\n\n284\n120.34\n6.2271\n-433.15\n0.5397\n1\n53.97\n40.1710\n41.081\n\n\n285\n79.71\n5.3981\n-389.65\n0.5823\n0\n71.24\n39.8571\n50.745\n\n\n286\n107.98\n6.7637\n-520.78\n0.4539\n1\n45.99\n33.9925\n33.010\n\n\n287\n78.84\n4.1663\n-270.97\n0.6985\n1\n73.01\n19.4185\n40.109\n\n\n288\n93.86\n1.0616\n-227.96\n0.7406\n1\n46.06\n26.9280\n29.025\n\n\n289\n61.18\n1.9409\n-237.75\n0.7311\n1\n32.47\n10.5893\n11.967\n\n\n290\n103.21\n5.9545\n-467.30\n0.5063\n0\n67.14\n51.6054\n55.104\n\n\n291\n124.64\n4.0662\n-517.45\n0.4572\n0\n43.39\n62.3180\n47.675\n\n\n292\n104.58\n4.5971\n-410.33\n0.5621\n1\n33.71\n32.2906\n25.041\n\n\n293\n55.84\n0.6255\n-23.77\n0.9406\n1\n40.09\n7.9221\n14.790\n\n\n294\n84.49\n1.4610\n-243.43\n0.7255\n1\n36.48\n22.2433\n20.897\n\n\n295\n141.40\n7.3887\n-621.18\n0.3556\n0\n47.71\n70.7005\n54.914\n\n\n296\n145.25\n4.6010\n-431.45\n0.5414\n1\n67.47\n52.6226\n55.874\n\n\n297\n70.62\n0.2585\n-132.45\n0.8342\n1\n84.58\n15.3120\n44.363\n\n\n298\n90.83\n10.7818\n-591.64\n0.3845\n1\n37.67\n25.4162\n23.382\n\n\n299\n108.84\n0.2656\n-257.09\n0.7121\n0\n51.29\n54.4203\n47.677\n\n\n300\n107.98\n2.3728\n-327.06\n0.6436\n0\n52.91\n53.9895\n48.353\n\n\n301\n85.50\n0.8155\n-178.31\n0.7893\n1\n70.99\n22.7505\n40.854\n\n\n302\n76.17\n2.1241\n-291.17\n0.6787\n1\n68.54\n18.0840\n36.796\n\n\n303\n95.51\n2.0576\n-239.69\n0.7291\n1\n73.71\n27.7571\n45.260\n\n\n304\n125.25\n5.8644\n-461.88\n0.5116\n1\n73.29\n42.6226\n53.494\n\n\n305\n100.59\n0.5509\n-270.90\n0.6986\n1\n55.49\n30.2953\n36.319\n\n\n306\n83.77\n12.5429\n-655.53\n0.3220\n1\n69.91\n21.8871\n39.746\n\n\n307\n87.39\n0.1610\n-223.72\n0.7448\n1\n73.04\n23.6953\n42.559\n\n\n308\n140.36\n2.1816\n-364.79\n0.6067\n0\n63.60\n70.1799\n63.676\n\n\n309\n88.83\n5.5543\n-388.26\n0.5837\n0\n48.24\n44.4130\n40.237\n\n\n310\n119.08\n8.4465\n-607.34\n0.3692\n0\n65.65\n59.5397\n58.777\n\n\n311\n136.79\n2.3786\n-420.73\n0.5519\n0\n72.47\n68.3965\n67.717\n\n\n312\n111.09\n3.0205\n-375.34\n0.5963\n0\n77.08\n55.5458\n63.017\n\n\n313\n89.46\n11.8498\n-674.02\n0.3039\n1\n48.56\n24.7285\n29.195\n\n\n314\n99.00\n2.5729\n-313.50\n0.6569\n1\n48.56\n29.5000\n31.917\n\n\n315\n87.69\n7.5546\n-505.25\n0.4691\n0\n69.74\n43.8465\n52.164\n\n\n316\n130.69\n1.5245\n-356.88\n0.6144\n1\n76.91\n45.3465\n57.105\n\n\n317\n96.26\n1.5939\n-218.66\n0.7497\n1\n86.80\n28.1306\n52.932\n\n\n318\n138.75\n3.7322\n-488.34\n0.4857\n0\n52.58\n69.3748\n56.933\n\n\n319\n85.96\n8.4081\n-465.96\n0.5076\n1\n84.41\n22.9798\n48.632\n\n\n320\n83.82\n6.1543\n-383.74\n0.5881\n1\n43.25\n21.9110\n24.566\n\n\n321\n103.58\n10.1194\n-644.42\n0.3329\n1\n28.58\n31.7892\n21.833\n\n\n322\n100.60\n1.1344\n-189.83\n0.7780\n1\n64.43\n30.3024\n41.422\n\n\n323\n87.39\n0.5060\n-203.03\n0.7651\n1\n47.90\n23.6944\n28.233\n\n\n324\n60.47\n3.3612\n-268.19\n0.7012\n1\n56.26\n10.2325\n25.325\n\n\n325\n100.75\n2.3097\n-313.91\n0.6565\n0\n58.08\n50.3758\n49.243\n\n\n326\n82.09\n4.6024\n-342.29\n0.6287\n1\n62.14\n21.0428\n34.836\n\n\n327\n127.07\n2.7056\n-391.30\n0.5807\n1\n64.53\n43.5326\n49.017\n\n\n328\n76.18\n2.5550\n-351.78\n0.6194\n0\n55.92\n38.0914\n41.008\n\n\n329\n128.16\n0.5217\n-327.84\n0.6428\n1\n65.27\n44.0810\n49.750\n\n\n330\n83.77\n2.6029\n-263.90\n0.7055\n1\n58.22\n21.8870\n33.085\n\n\n331\n107.31\n4.0427\n-298.30\n0.6718\n1\n62.17\n33.6559\n42.043\n\n\n332\n122.47\n4.0971\n-372.24\n0.5994\n1\n53.15\n41.2338\n41.222\n\n\n333\n87.03\n0.6527\n-153.33\n0.8137\n1\n62.52\n23.5157\n36.461\n\n\n334\n113.86\n1.8100\n-276.84\n0.6928\n1\n55.62\n36.9305\n40.175\n\n\n335\n97.80\n5.9965\n-393.15\n0.5789\n1\n63.61\n28.9003\n40.154\n\n\n336\n71.62\n2.4363\n-168.67\n0.7987\n1\n54.47\n15.8098\n27.480\n\n\n337\n93.25\n1.6998\n-306.36\n0.6639\n0\n79.31\n46.6240\n59.205\n\n\n338\n140.49\n0.8470\n-396.40\n0.5757\n1\n59.29\n50.2474\n49.859\n\n\n339\n94.65\n1.9321\n-269.37\n0.7001\n1\n58.58\n27.3234\n36.385\n\n\n340\n79.56\n2.6510\n-314.41\n0.6560\n0\n47.59\n39.7777\n37.225\n\n\n341\n98.65\n2.5458\n-384.77\n0.5871\n0\n17.45\n49.3247\n25.485\n\n\n342\n108.25\n2.0262\n-279.58\n0.6901\n1\n55.71\n34.1268\n38.630\n\n\n343\n123.88\n0.9174\n-350.18\n0.6210\n0\n62.54\n61.9416\n58.375\n\n\n344\n128.60\n6.5427\n-362.91\n0.6085\n0\n53.80\n64.2995\n54.735\n\n\n345\n102.51\n3.3794\n-337.32\n0.6336\n1\n57.44\n31.2565\n37.977\n\n\n346\n129.11\n0.1080\n-225.94\n0.7426\n1\n53.70\n44.5572\n43.427\n\n\n347\n80.89\n2.4425\n-221.52\n0.7469\n1\n64.87\n20.4468\n36.053\n\n\n348\n41.39\n2.7249\n-241.02\n0.7278\n1\n30.14\n0.6936\n5.000\n\n\n349\n88.21\n6.9205\n-456.17\n0.5172\n1\n47.25\n24.1040\n28.092\n\n\n350\n87.10\n0.1498\n-234.18\n0.7345\n1\n68.80\n23.5518\n40.065\n\n\n351\n42.10\n8.2904\n-395.85\n0.5762\n0\n48.36\n21.0495\n26.985\n\n\n352\n114.06\n1.9564\n-266.61\n0.7028\n1\n68.71\n37.0309\n47.693\n\n\n353\n80.41\n0.4131\n-183.99\n0.7837\n1\n58.62\n20.2028\n32.352\n\n\n354\n94.35\n0.7754\n-340.80\n0.6302\n1\n47.43\n27.1743\n29.945\n\n\n355\n60.32\n1.1933\n-124.16\n0.8423\n1\n83.65\n10.1612\n40.895\n\n\n356\n113.69\n2.2407\n-345.26\n0.6258\n0\n66.16\n56.8441\n57.531\n\n\n357\n147.28\n2.1743\n-305.08\n0.6651\n0\n69.26\n73.6403\n68.871\n\n\n358\n78.05\n1.5365\n-201.69\n0.7664\n1\n63.48\n19.0240\n34.448\n\n\n359\n97.19\n2.4256\n-316.19\n0.6542\n1\n68.28\n28.5930\n42.641\n\n\n360\n148.72\n10.4714\n-757.75\n0.2219\n0\n63.65\n74.3589\n66.088\n\n\n361\n123.35\n4.6005\n-421.24\n0.5514\n1\n71.47\n41.6727\n51.912\n\n\n362\n147.83\n0.1863\n-362.55\n0.6089\n0\n63.62\n73.9132\n65.815\n\n\n363\n99.87\n1.2215\n-216.73\n0.7516\n0\n68.58\n49.9346\n54.975\n\n\n364\n96.19\n3.1909\n-292.24\n0.6777\n0\n52.88\n48.0967\n44.976\n\n\n365\n87.26\n3.4364\n-302.36\n0.6678\n1\n63.63\n23.6296\n37.160\n\n\n366\n135.86\n6.4238\n-477.34\n0.4965\n1\n33.54\n47.9322\n33.863\n\n\n367\n67.85\n0.6814\n-212.14\n0.7561\n1\n48.18\n13.9270\n22.824\n\n\n368\n107.68\n6.1208\n-506.83\n0.4676\n1\n35.63\n33.8414\n27.022\n\n\n369\n98.84\n4.7194\n-434.60\n0.5383\n1\n58.82\n29.4210\n37.718\n\n\n370\n156.30\n1.0970\n-397.16\n0.5750\n1\n60.61\n58.1480\n55.115\n\n\n371\n84.80\n4.7099\n-367.72\n0.6038\n0\n67.10\n42.3996\n49.838\n\n\n372\n62.27\n3.8955\n-184.56\n0.7831\n1\n53.19\n11.1339\n24.087\n\n\n373\n105.82\n1.0352\n-217.95\n0.7504\n1\n59.90\n32.9079\n40.325\n\n\n374\n99.01\n0.3784\n-164.62\n0.8027\n1\n48.69\n29.5044\n31.991\n\n\n375\n79.02\n0.3013\n-176.51\n0.7910\n1\n74.75\n19.5109\n41.148\n\n\n376\n103.31\n4.7008\n-464.38\n0.5091\n0\n45.96\n51.6536\n43.059\n\n\n377\n93.11\n0.9784\n-189.93\n0.7779\n0\n49.34\n46.5559\n42.084\n\n\n378\n83.03\n6.6008\n-440.38\n0.5326\n1\n45.98\n21.5155\n25.897\n\n\n379\n112.52\n1.6197\n-276.21\n0.6934\n0\n51.38\n56.2604\n48.777\n\n\n380\n91.71\n1.3163\n-187.79\n0.7800\n0\n68.46\n45.8542\n52.578\n\n\n381\n54.13\n2.7099\n-182.24\n0.7854\n1\n43.76\n7.0627\n16.394\n\n\n382\n33.71\n2.4377\n-268.18\n0.7013\n0\n68.73\n16.8532\n36.205\n\n\n383\n85.49\n5.7826\n-510.15\n0.4643\n1\n81.97\n22.7427\n47.111\n\n\n384\n136.35\n5.8613\n-421.98\n0.5507\n1\n58.19\n48.1773\n48.049\n\n\n385\n120.95\n1.7606\n-368.33\n0.6032\n1\n45.78\n40.4766\n36.590\n\n\n386\n130.38\n1.2177\n-359.06\n0.6123\n0\n69.71\n65.1882\n64.314\n\n\n387\n124.56\n0.3478\n-318.94\n0.6516\n1\n51.26\n42.2813\n40.740\n\n\n388\n107.89\n3.3965\n-381.62\n0.5902\n1\n82.33\n33.9471\n53.701\n\n\n389\n62.32\n0.1467\n-163.09\n0.8042\n1\n65.85\n11.1617\n31.319\n\n\n390\n105.14\n1.9700\n-322.81\n0.6478\n1\n68.04\n32.5696\n44.768\n\n\n391\n139.93\n4.3292\n-501.80\n0.4725\n0\n52.15\n69.9654\n57.028\n\n\n392\n15.10\n0.1297\n36.92\n1.0000\n1\n92.54\n-12.4508\n33.073\n\n\n393\n80.47\n1.5235\n-174.09\n0.7934\n0\n71.05\n40.2331\n50.851\n\n\n394\n127.56\n0.7326\n-251.31\n0.7178\n1\n47.25\n43.7808\n39.309\n\n\n395\n113.22\n0.8221\n-287.75\n0.6821\n1\n23.53\n36.6093\n21.701\n\n\n396\n119.73\n1.0914\n-306.85\n0.6634\n1\n22.49\n39.8674\n22.964\n\n\n397\n111.43\n0.9626\n-284.63\n0.6851\n1\n69.62\n35.7137\n47.463\n\n\n398\n113.47\n0.7997\n-260.70\n0.7086\n0\n35.84\n56.7354\n40.188\n\n\n399\n100.37\n7.6708\n-532.22\n0.4427\n1\n70.38\n30.1830\n44.743\n\n\n400\n77.09\n4.9295\n-281.52\n0.6882\n1\n53.81\n18.5439\n28.664\n\n\n401\n69.33\n3.0850\n-313.33\n0.6570\n0\n74.85\n34.6648\n49.844\n\n\n402\n100.90\n8.9078\n-548.66\n0.4266\n0\n88.06\n50.4519\n66.369\n\n\n403\n89.47\n2.9885\n-262.54\n0.7068\n1\n43.29\n24.7326\n26.194\n\n\n404\n77.52\n3.1986\n-282.59\n0.6872\n0\n75.07\n38.7579\n52.303\n\n\n405\n110.44\n2.8865\n-211.76\n0.7565\n1\n67.98\n35.2180\n46.244\n\n\n406\n103.84\n3.7984\n-368.12\n0.6034\n1\n64.71\n31.9181\n42.498\n\n\n407\n136.58\n1.3419\n-398.67\n0.5735\n1\n38.64\n48.2910\n36.975\n\n\n408\n71.96\n9.1878\n-551.74\n0.4236\n0\n52.17\n35.9812\n37.671\n\n\n409\n87.06\n3.1670\n-251.19\n0.7179\n1\n40.23\n23.5276\n23.764\n\n\n410\n98.13\n1.1928\n-176.80\n0.7907\n0\n54.43\n49.0632\n46.410\n\n\n411\n64.81\n4.3879\n-325.35\n0.6453\n1\n48.46\n12.4026\n22.116\n\n\n412\n92.88\n7.8488\n-576.15\n0.3997\n0\n62.86\n46.4412\n49.722\n\n\n413\n82.30\n4.6975\n-283.05\n0.6867\n1\n43.85\n21.1479\n24.469\n\n\n414\n46.31\n0.3409\n-103.57\n0.8624\n1\n59.61\n3.1545\n23.200\n\n\n415\n92.90\n0.3671\n-203.61\n0.7645\n1\n49.79\n26.4520\n30.881\n\n\n416\n86.65\n0.2113\n-232.47\n0.7362\n1\n68.14\n23.3241\n39.556\n\n\n417\n128.33\n0.4022\n-273.59\n0.6960\n0\n64.08\n64.1626\n60.519\n\n\n418\n84.90\n14.1895\n-715.38\n0.2634\n0\n57.71\n42.4491\n44.510\n\n\n419\n113.94\n3.2976\n-303.73\n0.6664\n1\n74.43\n36.9689\n50.919\n\n\n420\n103.57\n4.4369\n-373.24\n0.5984\n1\n51.58\n31.7829\n34.939\n\n\n421\n69.08\n0.3107\n-135.47\n0.8312\n1\n40.51\n14.5392\n18.800\n\n\n422\n109.35\n2.8800\n-268.09\n0.7013\n0\n72.09\n54.6768\n59.679\n\n\n423\n97.35\n4.1534\n-394.15\n0.5779\n1\n73.11\n28.6739\n45.436\n\n\n424\n104.15\n6.3112\n-495.41\n0.4788\n1\n70.77\n32.0758\n46.043\n\n\n425\n116.45\n4.5805\n-442.86\n0.5302\n1\n35.25\n38.2254\n29.302\n\n\n426\n102.85\n2.8058\n-311.44\n0.6589\n1\n53.54\n31.4245\n35.853\n\n\n427\n139.63\n1.3678\n-323.37\n0.6472\n1\n79.76\n49.8145\n61.279\n\n\n428\n102.89\n5.0562\n-402.05\n0.5702\n1\n32.98\n31.4444\n24.146\n\n\n429\n68.65\n0.4129\n-77.69\n0.8878\n1\n48.28\n14.3250\n23.110\n\n\n430\n118.55\n0.3084\n-249.13\n0.7199\n0\n65.97\n59.2733\n58.812\n\n\n431\n69.43\n0.6080\n-141.30\n0.8255\n1\n70.22\n14.7137\n35.835\n\n\n432\n52.03\n3.2489\n-217.65\n0.7507\n1\n59.90\n6.0138\n24.991\n\n\n433\n79.75\n2.9268\n-278.28\n0.6914\n1\n85.09\n19.8758\n47.252\n\n\n434\n81.38\n1.4380\n-186.30\n0.7814\n1\n60.10\n20.6915\n33.471\n\n\n435\n84.81\n4.9669\n-367.78\n0.6037\n1\n58.79\n22.4062\n33.705\n\n\n436\n140.17\n2.2635\n-283.18\n0.6866\n1\n63.84\n50.0845\n52.361\n\n\n437\n140.89\n2.8199\n-428.36\n0.5444\n1\n66.63\n50.4450\n54.152\n\n\n438\n118.15\n0.5251\n-227.28\n0.7413\n1\n58.96\n39.0761\n43.300\n\n\n439\n68.15\n0.8129\n-116.00\n0.8503\n1\n42.99\n14.0771\n19.954\n\n\n440\n100.58\n0.8085\n-262.96\n0.7064\n1\n48.01\n30.2893\n32.054\n\n\n441\n112.18\n0.4482\n-268.30\n0.7011\n1\n71.48\n36.0890\n48.733\n\n\n442\n96.57\n3.4876\n-297.40\n0.6726\n1\n66.26\n28.2872\n41.314\n\n\n443\n104.29\n2.7672\n-324.26\n0.6463\n1\n38.88\n32.1468\n27.908\n\n\n444\n76.38\n1.7964\n-263.04\n0.7063\n1\n81.66\n18.1901\n44.337\n\n\n445\n67.81\n2.8006\n-183.14\n0.7845\n1\n57.04\n13.9047\n27.861\n\n\n446\n135.19\n0.6704\n-365.01\n0.6064\n1\n78.31\n47.5971\n59.187\n\n\n447\n106.68\n0.6032\n-254.72\n0.7144\n0\n44.88\n53.3422\n43.410\n\n\n448\n89.79\n2.3063\n-259.89\n0.7094\n1\n54.05\n24.8950\n32.423\n\n\n449\n108.13\n6.1849\n-567.01\n0.4087\n0\n30.74\n54.0659\n35.760\n\n\n450\n151.56\n4.3758\n-441.55\n0.5315\n1\n54.37\n55.7810\n50.207\n\n\n451\n109.07\n4.3780\n-360.49\n0.6109\n1\n65.80\n34.5333\n44.611\n\n\n452\n135.29\n10.9683\n-683.84\n0.2943\n0\n54.93\n67.6426\n57.288\n\n\n453\n134.19\n0.9640\n-348.61\n0.6225\n0\n39.95\n67.0943\n48.435\n\n\n454\n89.82\n5.5218\n-344.44\n0.6266\n1\n83.44\n24.9103\n49.181\n\n\n455\n119.06\n4.6007\n-393.79\n0.5783\n1\n65.30\n39.5318\n47.178\n\n\n456\n83.72\n4.4310\n-314.33\n0.6561\n1\n58.68\n21.8600\n33.333\n\n\n457\n63.16\n0.8330\n-79.94\n0.8856\n1\n60.74\n11.5793\n28.644\n\n\n458\n69.96\n1.6333\n-213.93\n0.7544\n1\n52.30\n14.9792\n25.773\n\n\n459\n96.28\n8.4348\n-443.45\n0.5296\n1\n57.93\n28.1410\n36.482\n\n\n460\n144.93\n4.6214\n-489.32\n0.4847\n0\n58.10\n72.4633\n61.840\n\n\n461\n102.62\n4.0281\n-320.33\n0.6502\n1\n39.55\n31.3101\n27.812\n\n\n462\n79.93\n4.2018\n-304.46\n0.6657\n1\n65.02\n19.9645\n35.861\n\n\n463\n105.76\n5.0712\n-418.81\n0.5538\n0\n69.90\n52.8797\n57.404\n\n\n464\n117.45\n0.1684\n-264.42\n0.7049\n1\n63.70\n38.7247\n45.801\n\n\n465\n67.62\n2.4605\n-245.92\n0.7231\n0\n46.29\n33.8100\n33.079\n\n\n466\n73.63\n1.7237\n-265.99\n0.7034\n1\n65.20\n16.8165\n34.173\n\n\n467\n51.46\n2.6223\n-194.81\n0.7731\n1\n52.12\n5.7299\n20.398\n\n\n468\n68.26\n2.4681\n-213.53\n0.7548\n1\n53.21\n14.1305\n25.809\n\n\n469\n77.81\n2.8321\n-167.39\n0.7999\n1\n55.25\n18.9070\n29.694\n\n\n470\n92.70\n1.7308\n-292.61\n0.6773\n1\n65.32\n26.3511\n39.672\n\n\n471\n135.25\n7.8377\n-586.76\n0.3893\n0\n54.00\n67.6262\n56.750\n\n\n472\n122.22\n3.3230\n-424.42\n0.5483\n0\n50.00\n61.1080\n50.753\n\n\n473\n106.82\n9.3322\n-622.73\n0.3541\n1\n64.36\n33.4122\n43.149\n\n\n474\n85.83\n0.5775\n-233.31\n0.7354\n0\n45.19\n42.9170\n37.644\n\n\n475\n98.99\n6.6643\n-479.10\n0.4947\n1\n59.06\n29.4974\n37.899\n\n\n476\n113.69\n1.5879\n-182.19\n0.7855\n0\n60.81\n56.8452\n54.485\n\n\n477\n87.40\n4.9641\n-322.46\n0.6481\n0\n32.03\n43.6996\n30.590\n\n\n478\n126.48\n0.1917\n-220.46\n0.7480\n0\n70.92\n63.2384\n63.892\n\n\n479\n127.44\n2.6226\n-400.04\n0.5721\n0\n76.15\n63.7182\n67.145\n\n\n480\n70.84\n2.9045\n-163.74\n0.8035\n1\n79.54\n15.4187\n41.549\n\n\n481\n81.33\n0.4347\n-79.73\n0.8858\n1\n62.64\n20.6636\n34.907\n\n\n482\n130.17\n3.0617\n-424.82\n0.5479\n0\n51.13\n65.0842\n53.666\n\n\n483\n57.82\n2.2726\n-196.25\n0.7717\n0\n63.29\n28.9098\n39.974\n\n\n484\n110.49\n4.7873\n-399.97\n0.5722\n0\n50.29\n55.2464\n47.575\n\n\n485\n105.84\n3.1444\n-443.12\n0.5300\n1\n40.75\n32.9187\n29.415\n\n\n486\n179.90\n1.3506\n-370.18\n0.6014\n0\n49.70\n89.9488\n67.021\n\n\n487\n31.76\n1.8701\n-180.46\n0.7871\n1\n59.05\n-4.1210\n18.731\n\n\n488\n78.98\n0.6285\n-142.21\n0.8246\n0\n78.31\n39.4901\n54.565\n\n\n489\n116.85\n0.9608\n-247.45\n0.7216\n0\n55.99\n58.4254\n52.637\n\n\n490\n141.86\n4.1603\n-429.35\n0.5434\n1\n46.23\n50.9291\n42.802\n\n\n491\n120.99\n3.2753\n-340.40\n0.6305\n0\n70.61\n60.4961\n62.154\n\n\n492\n64.29\n1.7913\n-160.98\n0.8062\n1\n69.70\n12.1454\n34.077\n\n\n493\n155.98\n3.8889\n-449.48\n0.5237\n0\n40.66\n77.9924\n55.054\n\n\n494\n56.07\n7.7212\n-464.67\n0.5089\n0\n40.23\n28.0342\n26.335\n\n\n495\n72.17\n1.4218\n-244.74\n0.7242\n1\n74.98\n16.0873\n39.331\n\n\n496\n98.92\n2.3181\n-334.33\n0.6365\n0\n72.81\n49.4607\n57.115\n\n\n497\n155.64\n5.1811\n-531.86\n0.4431\n1\n78.29\n57.8198\n65.002\n\n\n498\n112.66\n7.4776\n-514.35\n0.4602\n0\n72.70\n56.3290\n60.969\n\n\n499\n118.26\n3.5531\n-405.48\n0.5668\n1\n57.62\n39.1300\n42.569\n\n\n500\n143.20\n0.2171\n-252.71\n0.7164\n1\n58.11\n51.6010\n49.958\n\n\n501\n124.62\n1.9069\n-334.09\n0.6367\n0\n48.81\n62.3097\n50.760\n\n\n502\n69.38\n9.3545\n-605.72\n0.3707\n0\n31.63\n34.6908\n25.223\n\n\n503\n117.74\n2.2067\n-229.15\n0.7395\n0\n63.97\n58.8716\n57.440\n\n\n504\n97.27\n6.2298\n-376.56\n0.5951\n1\n60.41\n28.6348\n38.175\n\n\n505\n144.57\n3.6648\n-344.92\n0.6261\n1\n62.84\n52.2826\n53.040\n\n\n506\n93.91\n0.5772\n-161.98\n0.8052\n0\n42.69\n46.9569\n38.522\n\n\n507\n61.82\n0.3081\n-224.90\n0.7436\n0\n67.35\n30.9112\n43.432\n\n\n508\n112.30\n0.5311\n-248.56\n0.7205\n1\n62.67\n36.1479\n43.750\n\n\n509\n108.86\n0.4143\n-206.61\n0.7615\n0\n47.82\n54.4313\n45.708\n\n\n510\n99.56\n6.3247\n-430.34\n0.5425\n0\n70.13\n49.7797\n55.769\n\n\n511\n73.59\n0.7106\n-139.07\n0.8277\n1\n65.50\n16.7931\n34.329\n\n\n512\n79.03\n3.3993\n-266.45\n0.7030\n1\n46.04\n19.5136\n24.789\n\n\n513\n99.68\n0.2529\n-302.17\n0.6680\n1\n49.28\n29.8422\n32.524\n\n\n514\n125.95\n2.3164\n-347.50\n0.6236\n1\n47.92\n42.9764\n39.233\n\n\n515\n90.89\n1.4121\n-254.11\n0.7150\n0\n36.78\n45.4443\n34.288\n\n\n516\n78.21\n2.1674\n-238.13\n0.7307\n1\n57.03\n19.1069\n30.819\n\n\n517\n32.39\n2.1656\n-225.03\n0.7435\n1\n62.79\n-3.8025\n21.046\n\n\n518\n112.36\n6.0122\n-474.66\n0.4991\n0\n42.33\n56.1781\n43.569\n\n\n519\n110.68\n3.1233\n-314.49\n0.6559\n1\n55.10\n35.3418\n38.973\n\n\n520\n132.73\n0.1038\n-302.98\n0.6672\n1\n47.63\n46.3649\n40.999\n\n\n521\n136.67\n1.8300\n-377.65\n0.5941\n0\n49.46\n68.3340\n54.563\n\n\n522\n96.42\n2.0631\n-255.08\n0.7141\n0\n39.03\n48.2118\n37.150\n\n\n523\n132.46\n3.0428\n-338.69\n0.6322\n0\n37.84\n66.2314\n46.744\n\n\n524\n100.03\n9.4609\n-626.15\n0.3507\n0\n64.89\n50.0164\n52.916\n\n\n525\n83.09\n5.8942\n-343.03\n0.6280\n1\n52.28\n21.5449\n29.502\n\n\n526\n78.80\n1.4263\n-215.42\n0.7529\n1\n28.41\n19.3975\n14.674\n\n\n527\n91.33\n3.7243\n-247.10\n0.7219\n1\n69.10\n25.6632\n41.434\n\n\n528\n105.69\n8.3458\n-434.78\n0.5381\n1\n65.19\n32.8435\n43.300\n\n\n529\n99.31\n5.0563\n-341.75\n0.6292\n1\n72.18\n29.6575\n45.471\n\n\n530\n105.02\n0.3447\n-214.66\n0.7537\n0\n50.62\n52.5110\n46.206\n\n\n531\n104.97\n6.0246\n-431.68\n0.5412\n1\n68.00\n32.4868\n44.700\n\n\n532\n117.86\n0.3750\n-307.38\n0.6629\n1\n64.46\n38.9325\n46.356\n\n\n533\n93.17\n1.5750\n-188.35\n0.7794\n1\n59.11\n26.5852\n36.267\n\n\n534\n140.88\n1.0370\n-234.36\n0.7344\n1\n55.87\n50.4418\n48.017\n\n\n535\n110.94\n9.7437\n-623.19\n0.3536\n1\n63.24\n35.4712\n43.686\n\n\n536\n70.16\n0.5263\n-153.51\n0.8135\n1\n55.79\n15.0808\n27.817\n\n\n537\n93.08\n2.7006\n-317.35\n0.6531\n1\n30.33\n26.5419\n19.840\n\n\n538\n112.90\n0.5289\n-290.13\n0.6798\n1\n63.57\n36.4485\n44.435\n\n\n539\n89.72\n4.1160\n-280.09\n0.6896\n0\n68.44\n44.8618\n52.002\n\n\n540\n108.62\n6.9508\n-565.47\n0.4102\n1\n54.11\n34.3124\n37.822\n\n\n541\n110.86\n6.7320\n-435.22\n0.5377\n1\n44.13\n35.4299\n32.769\n\n\n542\n132.59\n0.8178\n-363.02\n0.6084\n1\n79.46\n46.2935\n59.102\n\n\n543\n83.71\n0.8074\n-211.10\n0.7571\n1\n67.78\n21.8538\n38.512\n\n\n544\n99.58\n2.4288\n-317.33\n0.6531\n1\n48.95\n29.7890\n32.307\n\n\n545\n85.81\n5.6155\n-428.84\n0.5439\n1\n40.94\n22.9038\n23.817\n\n\n546\n71.82\n4.2776\n-302.36\n0.6678\n1\n60.66\n15.9108\n31.067\n\n\n547\n53.78\n1.4370\n-177.56\n0.7900\n1\n66.45\n6.8879\n29.227\n\n\n548\n104.89\n1.1724\n-208.87\n0.7593\n1\n46.79\n32.4441\n32.588\n\n\n549\n115.04\n0.2740\n-197.18\n0.7708\n1\n39.04\n37.5196\n31.061\n\n\n550\n115.98\n11.6786\n-613.09\n0.3635\n0\n68.26\n57.9895\n59.383\n\n\n551\n65.25\n2.1861\n-159.23\n0.8079\n0\n54.15\n32.6251\n36.881\n\n\n552\n71.76\n2.5653\n-259.17\n0.7101\n1\n68.30\n15.8790\n35.402\n\n\n553\n71.47\n4.6172\n-230.89\n0.7378\n1\n56.61\n15.7356\n28.659\n\n\n554\n82.78\n6.6987\n-512.07\n0.4624\n0\n60.34\n41.3916\n45.410\n\n\n555\n104.25\n2.5961\n-269.18\n0.7003\n0\n48.49\n52.1275\n44.774\n\n\n556\n114.86\n0.7869\n-277.62\n0.6920\n1\n43.44\n37.4310\n33.520\n\n\n557\n79.62\n0.4061\n-248.17\n0.7208\n0\n45.99\n39.8121\n36.329\n\n\n558\n28.39\n0.5948\n-30.02\n0.9345\n1\n77.88\n-5.8043\n28.503\n\n\n559\n123.85\n1.0053\n-258.70\n0.7105\n1\n75.59\n41.9228\n54.401\n\n\n560\n115.38\n2.6031\n-333.98\n0.6368\n1\n59.54\n37.6911\n42.841\n\n\n561\n82.48\n2.9179\n-276.52\n0.6931\n1\n73.60\n21.2391\n41.478\n\n\n562\n73.16\n4.1112\n-327.32\n0.6434\n1\n58.16\n16.5792\n30.025\n\n\n563\n92.50\n8.1900\n-527.79\n0.4471\n0\n64.43\n46.2501\n50.511\n\n\n564\n102.70\n2.7426\n-324.98\n0.6456\n1\n74.10\n31.3513\n47.530\n\n\n565\n118.08\n1.2824\n-341.00\n0.6300\n0\n55.94\n59.0400\n52.962\n\n\n566\n134.75\n4.8269\n-452.29\n0.5210\n0\n70.44\n67.3762\n65.977\n\n\n567\n78.78\n5.3367\n-394.19\n0.5779\n1\n78.62\n19.3890\n43.289\n\n\n568\n107.27\n2.4165\n-276.01\n0.6936\n1\n61.93\n33.6340\n41.895\n\n\n569\n133.35\n0.9361\n-342.17\n0.6288\n1\n76.07\n46.6772\n57.386\n\n\n570\n77.47\n6.3590\n-453.42\n0.5199\n0\n58.91\n38.7332\n43.080\n\n\n571\n94.43\n0.5774\n-165.04\n0.8023\n1\n52.97\n27.2155\n33.129\n\n\n572\n55.71\n6.4245\n-484.49\n0.4895\n1\n50.43\n7.8566\n20.645\n\n\n573\n107.19\n0.6356\n-252.76\n0.7164\n0\n71.54\n53.5928\n58.746\n\n\n574\n83.97\n5.3206\n-344.42\n0.6266\n0\n65.60\n41.9851\n48.744\n\n\n575\n76.88\n1.4942\n-272.50\n0.6970\n1\n65.05\n18.4383\n35.011\n\n\n576\n80.50\n2.5024\n-259.66\n0.7096\n1\n66.01\n20.2503\n36.588\n\n\n577\n111.11\n4.0020\n-358.32\n0.6130\n1\n65.43\n35.5563\n44.983\n\n\n578\n45.94\n0.4060\n-187.70\n0.7801\n1\n33.58\n2.9691\n8.257\n\n\n579\n89.36\n2.8302\n-361.20\n0.6102\n0\n58.43\n44.6811\n46.197\n\n\n580\n74.66\n2.0456\n-336.59\n0.6343\n1\n57.23\n17.3285\n29.919\n\n\n581\n75.95\n4.2543\n-316.88\n0.6536\n1\n38.89\n17.9735\n19.835\n\n\n582\n111.87\n5.7452\n-475.30\n0.4985\n0\n85.29\n55.9329\n67.918\n\n\n583\n108.79\n0.1565\n-184.44\n0.7833\n1\n61.05\n34.3969\n41.826\n\n\n584\n97.32\n4.6149\n-484.69\n0.4893\n0\n64.26\n48.6622\n51.785\n\n\n585\n113.44\n2.9823\n-321.01\n0.6495\n1\n70.71\n36.7190\n48.654\n\n\n586\n84.95\n2.3271\n-262.84\n0.7065\n1\n54.07\n22.4737\n31.051\n\n\n587\n49.42\n2.8687\n-200.14\n0.7679\n1\n63.57\n4.7088\n26.340\n\n\n588\n128.86\n5.3881\n-408.30\n0.5641\n1\n61.86\n44.4303\n48.007\n\n\n589\n94.23\n11.0756\n-596.95\n0.3793\n1\n77.13\n27.1163\n46.844\n\n\n590\n90.87\n7.6875\n-459.98\n0.5135\n0\n65.05\n45.4364\n50.400\n\n\n591\n103.94\n1.8608\n-280.21\n0.6895\n1\n67.58\n31.9690\n44.164\n\n\n592\n119.15\n1.1150\n-222.65\n0.7458\n1\n53.81\n39.5742\n40.650\n\n\n593\n110.65\n0.1063\n-202.74\n0.7653\n0\n72.47\n55.3261\n60.262\n\n\n594\n123.18\n1.8376\n-320.78\n0.6497\n1\n47.43\n41.5908\n38.166\n\n\n595\n101.15\n5.0777\n-372.45\n0.5992\n1\n55.71\n30.5767\n36.605\n\n\n596\n87.39\n2.1040\n-308.96\n0.6613\n1\n66.07\n23.6964\n38.586\n\n\n597\n92.49\n0.9836\n-181.46\n0.7862\n1\n83.24\n26.2444\n49.825\n\n\n598\n120.57\n5.8825\n-505.51\n0.4689\n0\n83.25\n60.2864\n69.238\n\n\n599\n78.77\n2.5361\n-268.70\n0.7007\n1\n60.86\n19.3841\n33.162\n\n\n600\n76.16\n2.6141\n-264.77\n0.7046\n1\n49.51\n18.0799\n25.950\n\n\n601\n107.84\n5.7101\n-455.55\n0.5178\n1\n62.70\n33.9185\n42.497\n\n\n602\n115.31\n1.2288\n-401.77\n0.5704\n0\n38.36\n57.6559\n42.150\n\n\n603\n57.72\n0.1917\n-139.37\n0.8274\n0\n67.61\n28.8615\n42.411\n\n\n604\n119.62\n3.3442\n-395.45\n0.5766\n0\n44.33\n59.8087\n46.780\n\n\n605\n100.30\n2.0426\n-288.81\n0.6811\n1\n35.90\n30.1491\n25.070\n\n\n606\n95.47\n3.1250\n-284.23\n0.6855\n0\n53.20\n47.7343\n44.953\n\n\n607\n127.67\n1.6211\n-332.57\n0.6382\n1\n53.22\n43.8369\n42.746\n\n\n608\n136.98\n4.1168\n-529.17\n0.4457\n1\n75.61\n48.4924\n58.160\n\n\n609\n71.31\n2.1693\n-245.89\n0.7231\n1\n77.17\n15.6575\n40.334\n\n\n610\n125.29\n0.3811\n-373.39\n0.5982\n0\n68.76\n62.6457\n62.321\n\n\n611\n84.20\n9.2521\n-556.41\n0.4190\n0\n53.11\n42.0991\n41.690\n\n\n612\n103.31\n4.1601\n-491.77\n0.4823\n1\n62.57\n31.6545\n41.131\n\n\n613\n112.02\n0.2394\n-208.83\n0.7594\n0\n37.94\n56.0116\n40.976\n\n\n614\n103.33\n0.3072\n-195.26\n0.7727\n1\n57.75\n31.6647\n38.386\n\n\n615\n63.43\n1.1802\n-180.77\n0.7869\n1\n69.67\n11.7142\n33.812\n\n\n616\n87.34\n1.3503\n-201.89\n0.7662\n1\n55.53\n23.6700\n32.566\n\n\n617\n138.49\n4.7836\n-539.79\n0.4353\n0\n46.02\n69.2458\n53.120\n\n\n618\n104.32\n12.9401\n-673.84\n0.3040\n1\n67.89\n32.1599\n44.448\n\n\n619\n79.10\n2.0089\n-237.19\n0.7316\n1\n69.95\n19.5522\n38.440\n\n\n620\n83.60\n9.1203\n-511.26\n0.4632\n0\n48.82\n41.8009\n39.077\n\n\n621\n126.44\n0.7685\n-224.74\n0.7438\n0\n35.68\n63.2196\n43.792\n\n\n622\n108.65\n3.3660\n-358.62\n0.6127\n1\n83.90\n34.3260\n54.811\n\n\n623\n77.57\n0.6618\n-62.83\n0.9023\n1\n41.73\n18.7852\n21.918\n\n\n624\n100.16\n2.3700\n-342.83\n0.6282\n1\n44.00\n30.0783\n29.647\n\n\n625\n114.92\n1.8597\n-274.60\n0.6950\n1\n59.48\n37.4584\n42.678\n\n\n626\n143.06\n2.3749\n-320.61\n0.6499\n1\n66.14\n51.5319\n54.496\n\n\n627\n77.96\n7.7259\n-527.39\n0.4474\n0\n59.28\n38.9781\n43.428\n\n\n628\n90.50\n3.4991\n-393.62\n0.5784\n1\n35.35\n25.2507\n21.968\n\n\n629\n124.90\n4.4452\n-474.67\n0.4991\n1\n39.69\n42.4514\n34.241\n\n\n630\n88.52\n7.3822\n-543.40\n0.4318\n1\n68.86\n24.2610\n40.504\n\n\n631\n136.51\n1.9004\n-336.90\n0.6340\n1\n87.60\n48.2533\n64.855\n\n\n632\n126.08\n7.5046\n-518.69\n0.4560\n0\n49.54\n63.0406\n51.595\n\n\n633\n58.52\n0.5355\n-191.23\n0.7766\n1\n62.89\n9.2620\n28.549\n\n\n634\n110.60\n5.1003\n-438.99\n0.5340\n1\n70.06\n35.2995\n47.479\n\n\n635\n64.52\n2.3473\n-268.64\n0.7008\n1\n61.87\n12.2605\n29.679\n\n\n636\n63.38\n0.9817\n-214.52\n0.7538\n1\n83.15\n11.6913\n41.484\n\n\n637\n101.76\n5.0201\n-442.12\n0.5309\n1\n57.69\n30.8803\n37.908\n\n\n638\n101.42\n0.1021\n-240.08\n0.7288\n1\n56.23\n30.7087\n36.978\n\n\n639\n99.18\n1.6824\n-277.49\n0.6921\n0\n70.47\n49.5911\n55.858\n\n\n640\n131.61\n4.0122\n-457.98\n0.5154\n0\n84.88\n65.8035\n73.307\n\n\n641\n107.37\n3.3396\n-287.75\n0.6821\n1\n68.67\n33.6873\n45.768\n\n\n642\n83.17\n3.7535\n-381.12\n0.5907\n1\n38.55\n21.5864\n21.700\n\n\n643\n102.99\n0.5432\n-239.43\n0.7294\n1\n61.00\n31.4949\n40.145\n\n\n644\n87.14\n0.6023\n-202.49\n0.7656\n1\n56.09\n23.5700\n32.830\n\n\n645\n98.30\n3.0135\n-279.41\n0.6903\n1\n69.32\n29.1486\n43.547\n\n\n646\n71.30\n4.3392\n-335.94\n0.6349\n1\n50.31\n15.6499\n25.020\n\n\n647\n97.12\n1.6239\n-308.98\n0.6613\n0\n38.01\n48.5594\n36.767\n\n\n648\n102.57\n7.0011\n-465.08\n0.5085\n1\n55.15\n31.2867\n36.691\n\n\n649\n82.46\n3.3334\n-313.67\n0.6567\n0\n56.98\n41.2282\n43.402\n\n\n650\n101.03\n4.4813\n-320.55\n0.6500\n1\n86.00\n30.5154\n53.836\n\n\n651\n83.78\n6.7743\n-502.22\n0.4721\n1\n54.27\n21.8904\n30.837\n\n\n652\n83.90\n0.9648\n-198.18\n0.7698\n1\n57.22\n21.9499\n32.549\n\n\n653\n94.89\n4.1433\n-388.02\n0.5839\n1\n72.02\n27.4445\n44.119\n\n\n654\n112.27\n3.1759\n-259.97\n0.7093\n1\n63.53\n36.1355\n44.233\n\n\n655\n94.87\n6.1729\n-501.23\n0.4731\n1\n26.23\n27.4333\n18.010\n\n\n656\n104.77\n0.1376\n-168.25\n0.7991\n1\n66.70\n32.3836\n43.899\n\n\n657\n124.25\n5.2956\n-409.53\n0.5628\n0\n60.87\n62.1253\n57.529\n\n\n658\n92.87\n1.2846\n-284.62\n0.6852\n0\n69.11\n46.4342\n53.283\n\n\n659\n97.41\n2.1620\n-329.34\n0.6414\n0\n48.70\n48.7048\n42.940\n\n\n660\n112.78\n1.4263\n-252.94\n0.7162\n1\n44.44\n36.3907\n33.497\n\n\n661\n68.55\n0.8490\n-164.83\n0.8025\n1\n43.32\n14.2730\n20.249\n\n\n662\n113.60\n6.2539\n-508.42\n0.4660\n1\n56.49\n36.7978\n40.596\n\n\n663\n86.63\n1.4587\n-192.77\n0.7751\n1\n48.32\n23.3130\n28.256\n\n\n664\n71.55\n0.4972\n-125.96\n0.8405\n1\n74.85\n15.7744\n39.077\n\n\n665\n55.80\n6.4639\n-366.28\n0.6052\n0\n58.70\n27.9000\n36.782\n\n\n666\n82.13\n0.2246\n-165.86\n0.8014\n0\n55.45\n41.0628\n42.434\n\n\n667\n70.74\n1.1508\n-206.02\n0.7621\n0\n59.22\n35.3725\n41.341\n\n\n668\n70.54\n0.3598\n-115.28\n0.8510\n1\n63.83\n15.2694\n32.510\n\n\n669\n140.68\n12.3813\n-697.68\n0.2807\n0\n46.47\n70.3411\n54.004\n\n\n670\n69.70\n0.7369\n-125.79\n0.8407\n0\n67.73\n34.8482\n45.892\n\n\n671\n124.94\n7.0841\n-557.55\n0.4179\n0\n70.10\n62.4689\n62.986\n\n\n672\n113.63\n1.0788\n-205.09\n0.7630\n0\n52.30\n56.8156\n49.620\n\n\n673\n77.88\n5.1213\n-358.36\n0.6130\n0\n46.68\n38.9401\n36.224\n\n\n674\n84.72\n4.4820\n-337.47\n0.6334\n1\n56.82\n22.3596\n32.555\n\n\n675\n89.75\n0.5301\n-252.10\n0.7170\n0\n58.54\n44.8725\n46.365\n\n\n676\n104.76\n2.2272\n-270.07\n0.6994\n0\n59.82\n52.3801\n51.375\n\n\n677\n91.29\n3.1520\n-313.59\n0.6568\n1\n59.08\n25.6459\n35.713\n\n\n678\n120.67\n1.1518\n-410.99\n0.5614\n1\n38.09\n40.3356\n32.124\n\n\n679\n92.68\n9.1629\n-523.46\n0.4513\n0\n60.72\n46.3414\n48.448\n\n\n680\n45.87\n12.5057\n-529.00\n0.4459\n0\n47.70\n22.9332\n27.685\n\n\n681\n97.59\n0.7735\n-232.41\n0.7363\n1\n61.83\n28.7973\n39.080\n\n\n682\n53.70\n0.4538\n-89.88\n0.8758\n1\n48.06\n6.8505\n18.720\n\n\n683\n123.45\n3.6134\n-414.57\n0.5579\n0\n45.00\n61.7226\n48.251\n\n\n684\n81.31\n0.4564\n-268.25\n0.7012\n0\n29.58\n40.6539\n27.457\n\n\n685\n72.12\n2.9628\n-309.93\n0.6604\n0\n75.97\n36.0595\n51.279\n\n\n686\n85.21\n2.1499\n-247.55\n0.7215\n1\n54.96\n22.6062\n31.634\n\n\n687\n114.63\n3.0825\n-409.21\n0.5632\n1\n65.48\n37.3154\n46.016\n\n\n688\n52.04\n1.2803\n-130.52\n0.8361\n0\n54.48\n26.0180\n33.307\n\n\n689\n106.35\n6.1068\n-441.08\n0.5320\n1\n68.73\n33.1727\n45.505\n\n\n690\n75.69\n4.5562\n-285.34\n0.6845\n1\n47.68\n17.8470\n24.775\n\n\n691\n99.79\n1.2435\n-311.54\n0.6588\n0\n26.07\n49.8936\n30.723\n\n\n692\n116.98\n2.7141\n-284.23\n0.6855\n0\n58.12\n58.4880\n53.888\n\n\n693\n114.24\n7.8133\n-563.24\n0.4123\n0\n46.49\n57.1204\n46.477\n\n\n694\n137.57\n2.2658\n-460.80\n0.5126\n0\n57.09\n68.7870\n59.169\n\n\n695\n103.23\n2.8729\n-320.97\n0.6496\n1\n69.91\n31.6136\n45.292\n\n\n696\n82.47\n7.7763\n-447.36\n0.5258\n0\n50.03\n41.2352\n39.443\n\n\n697\n153.84\n3.3049\n-374.16\n0.5975\n0\n85.50\n76.9213\n80.000\n\n\n698\n92.42\n8.1726\n-530.14\n0.4448\n1\n54.73\n26.2094\n33.557\n\n\n699\n120.19\n1.7527\n-279.35\n0.6903\n0\n66.03\n60.0947\n59.312\n\n\n700\n123.27\n2.9138\n-336.63\n0.6342\n1\n45.08\n41.6374\n36.851\n\n\n701\n111.37\n10.6733\n-650.29\n0.3271\n0\n55.29\n55.6863\n50.676\n\n\n702\n135.64\n1.9602\n-238.97\n0.7299\n1\n65.94\n47.8178\n52.262\n\n\n703\n94.78\n2.8304\n-306.92\n0.6633\n1\n59.31\n27.3876\n36.840\n\n\n704\n69.21\n3.3278\n-290.72\n0.6792\n1\n55.24\n14.6075\n27.234\n\n\n705\n90.98\n1.3993\n-274.00\n0.6956\n0\n64.19\n45.4925\n49.943\n\n\n706\n86.32\n1.7444\n-241.53\n0.7274\n0\n64.52\n43.1598\n48.801\n\n\n707\n108.20\n5.0016\n-424.56\n0.5481\n0\n76.95\n54.1000\n62.121\n\n\n708\n76.67\n7.9169\n-516.77\n0.4578\n1\n34.94\n18.3338\n17.789\n\n\n709\n117.02\n2.4057\n-370.56\n0.6010\n1\n61.25\n38.5101\n44.283\n\n\n710\n70.90\n2.6803\n-194.28\n0.7736\n1\n69.70\n15.4515\n35.961\n\n\n711\n143.89\n0.9717\n-301.96\n0.6682\n1\n67.34\n51.9431\n55.413\n\n\n712\n136.24\n1.9984\n-387.19\n0.5847\n0\n53.00\n68.1205\n56.462\n\n\n713\n88.78\n1.9650\n-249.12\n0.7199\n0\n52.49\n44.3901\n42.644\n\n\n714\n103.50\n9.7269\n-607.80\n0.3687\n0\n47.51\n51.7508\n43.998\n\n\n715\n90.66\n7.0305\n-479.69\n0.4941\n0\n73.72\n45.3294\n55.278\n\n\n716\n69.84\n4.0042\n-312.38\n0.6580\n1\n74.32\n14.9196\n38.287\n\n\n717\n33.47\n4.7303\n-276.94\n0.6927\n1\n66.13\n-3.2668\n23.256\n\n\n718\n99.37\n6.4350\n-430.06\n0.5427\n1\n68.19\n29.6863\n43.209\n\n\n719\n99.14\n2.8248\n-380.45\n0.5913\n1\n62.37\n29.5703\n39.830\n\n\n720\n141.06\n1.6667\n-336.94\n0.6339\n1\n69.43\n50.5295\n55.800\n\n\n721\n50.11\n9.0675\n-407.29\n0.5650\n1\n52.21\n5.0567\n20.068\n\n\n722\n83.45\n5.9920\n-413.22\n0.5592\n1\n79.39\n21.7229\n45.054\n\n\n723\n122.00\n8.2928\n-575.17\n0.4007\n1\n85.14\n41.0005\n59.321\n\n\n724\n108.56\n0.6138\n-299.06\n0.6710\n0\n87.18\n54.2798\n68.051\n\n\n725\n103.04\n0.8431\n-175.88\n0.7916\n0\n43.41\n51.5219\n41.532\n\n\n726\n84.48\n3.3610\n-278.94\n0.6907\n1\n54.46\n22.2405\n31.143\n\n\n727\n105.02\n4.6098\n-438.52\n0.5345\n1\n72.56\n32.5118\n47.312\n\n\n728\n94.10\n7.1197\n-434.94\n0.5380\n0\n58.77\n47.0512\n47.741\n\n\n729\n102.84\n0.8866\n-271.12\n0.6984\n0\n47.29\n51.4208\n43.688\n\n\n730\n85.55\n2.6323\n-212.76\n0.7555\n1\n50.43\n22.7759\n29.152\n\n\n731\n129.71\n2.7258\n-298.08\n0.6720\n1\n51.61\n44.8571\n42.409\n\n\n732\n126.50\n1.0613\n-238.84\n0.7300\n1\n52.18\n43.2492\n41.817\n\n\n733\n133.42\n7.0522\n-492.05\n0.4821\n1\n63.29\n46.7095\n50.120\n\n\n734\n90.82\n2.2953\n-219.64\n0.7488\n1\n41.48\n25.4104\n25.552\n\n\n735\n92.39\n3.3627\n-318.36\n0.6521\n1\n52.88\n26.1958\n32.493\n\n\n736\n91.24\n0.5097\n-293.82\n0.6761\n1\n47.11\n25.6215\n28.881\n\n\n737\n134.35\n0.5487\n-327.36\n0.6433\n1\n67.36\n47.1768\n52.705\n\n\n738\n92.51\n3.9821\n-291.75\n0.6782\n1\n56.02\n26.2535\n34.318\n\n\n739\n102.44\n4.1110\n-411.17\n0.5612\n1\n48.08\n31.2204\n32.625\n\n\n740\n109.53\n3.1697\n-378.78\n0.5930\n1\n57.28\n34.7649\n39.889\n\n\n741\n116.96\n1.8731\n-231.15\n0.7375\n0\n49.13\n58.4777\n48.760\n\n\n742\n93.31\n3.7120\n-372.20\n0.5994\n1\n76.68\n26.6541\n46.322\n\n\n743\n158.65\n4.0024\n-442.23\n0.5308\n0\n47.71\n79.3246\n59.832\n\n\n744\n76.81\n1.4454\n-124.82\n0.8416\n1\n68.60\n18.4063\n37.013\n\n\n745\n64.34\n3.9903\n-269.14\n0.7003\n1\n35.00\n12.1680\n14.308\n\n\n746\n101.06\n0.9489\n-190.33\n0.7775\n1\n50.23\n30.5288\n33.455\n\n\n747\n144.19\n6.1385\n-528.49\n0.4464\n0\n56.17\n72.0930\n60.529\n\n\n748\n101.32\n3.9736\n-350.20\n0.6209\n0\n63.72\n50.6594\n52.615\n\n\n749\n102.74\n2.1871\n-163.33\n0.8039\n1\n77.27\n31.3716\n49.345\n\n\n750\n121.58\n4.7188\n-504.26\n0.4701\n0\n57.16\n60.7900\n54.655\n\n\n751\n97.53\n4.5952\n-361.69\n0.6097\n1\n58.07\n28.7628\n36.917\n\n\n752\n102.59\n0.7193\n-302.11\n0.6680\n1\n48.26\n31.2962\n32.770\n\n\n753\n130.21\n1.5441\n-246.15\n0.7228\n1\n65.93\n45.1061\n50.714\n\n\n754\n102.34\n5.2660\n-417.35\n0.5552\n0\n49.13\n51.1718\n44.595\n\n\n755\n81.20\n3.8737\n-335.00\n0.6358\n0\n76.31\n40.5975\n54.059\n\n\n756\n109.87\n1.4018\n-239.84\n0.7290\n1\n41.03\n34.9366\n30.722\n\n\n757\n72.71\n1.1105\n-86.91\n0.8787\n1\n46.00\n16.3560\n22.963\n\n\n758\n63.54\n0.4939\n-237.10\n0.7317\n0\n71.33\n31.7713\n46.191\n\n\n759\n96.93\n3.3438\n-469.88\n0.5038\n1\n62.09\n28.4661\n39.037\n\n\n760\n72.48\n4.1424\n-316.58\n0.6539\n0\n33.74\n36.2384\n27.312\n\n\n761\n114.52\n2.5486\n-447.77\n0.5254\n0\n60.97\n57.2615\n54.813\n\n\n762\n96.33\n4.0483\n-313.88\n0.6565\n1\n54.61\n28.1632\n34.605\n\n\n763\n80.84\n9.4934\n-549.30\n0.4260\n0\n28.44\n40.4208\n26.671\n\n\n764\n140.57\n4.0071\n-505.41\n0.4690\n0\n44.74\n70.2862\n52.984\n\n\n765\n97.25\n4.7674\n-403.61\n0.5686\n0\n51.48\n48.6257\n44.481\n\n\n766\n135.54\n1.8510\n-293.42\n0.6765\n1\n72.49\n47.7713\n55.968\n\n\n767\n97.16\n1.2860\n-269.67\n0.6998\n1\n39.49\n28.5822\n26.225\n\n\n768\n91.77\n0.3181\n-176.81\n0.7907\n1\n52.24\n25.8840\n31.954\n\n\n769\n109.34\n1.1115\n-200.94\n0.7671\n1\n54.41\n34.6683\n38.197\n\n\n770\n125.75\n5.7622\n-476.18\n0.4976\n1\n55.85\n42.8736\n43.696\n\n\n771\n167.64\n4.4821\n-403.09\n0.5692\n0\n49.27\n83.8222\n63.281\n\n\n772\n74.13\n0.2824\n-141.46\n0.8253\n1\n45.58\n17.0632\n23.131\n\n\n773\n95.41\n4.1348\n-387.78\n0.5842\n0\n56.25\n47.7071\n46.680\n\n\n774\n126.94\n0.1333\n-176.88\n0.7907\n1\n86.86\n43.4721\n61.711\n\n\n775\n108.54\n5.5662\n-421.04\n0.5516\n1\n38.90\n34.2703\n29.128\n\n\n776\n95.32\n11.4798\n-727.02\n0.2520\n0\n70.74\n47.6582\n54.907\n\n\n777\n67.43\n2.4860\n-259.84\n0.7094\n1\n56.74\n13.7143\n27.579\n\n\n778\n93.03\n4.6372\n-314.12\n0.6563\n0\n61.59\n46.5168\n49.043\n\n\n779\n95.38\n11.4410\n-684.35\n0.2938\n0\n46.83\n47.6906\n41.299\n\n\n780\n97.96\n0.2057\n-117.25\n0.8490\n1\n37.09\n28.9778\n25.081\n\n\n781\n140.31\n7.7983\n-579.17\n0.3967\n0\n32.88\n70.1530\n46.151\n\n\n782\n88.45\n5.9200\n-441.23\n0.5318\n1\n47.07\n24.2258\n28.061\n\n\n783\n60.60\n2.5716\n-204.48\n0.7636\n1\n77.93\n10.2994\n37.714\n\n\n784\n112.41\n3.6652\n-304.97\n0.6652\n1\n57.79\n36.2054\n41.002\n\n\n785\n97.20\n10.3945\n-650.26\n0.3271\n1\n65.83\n28.6006\n41.250\n\n\n786\n94.89\n8.6188\n-501.17\n0.4731\n0\n67.20\n47.4457\n52.769\n\n\n787\n115.89\n4.1441\n-367.96\n0.6036\n1\n65.88\n37.9446\n46.604\n\n\n788\n27.33\n3.9884\n-208.02\n0.7602\n0\n52.15\n13.6666\n24.938\n\n\n789\n86.16\n1.1640\n-241.99\n0.7269\n1\n54.98\n23.0793\n31.915\n\n\n790\n96.16\n5.7374\n-456.27\n0.5171\n1\n55.75\n28.0819\n35.208\n\n\n791\n115.13\n1.6782\n-300.07\n0.6700\n1\n53.41\n37.5661\n39.278\n\n\n792\n93.47\n2.5364\n-317.04\n0.6534\n0\n44.28\n46.7374\n39.303\n\n\n793\n74.87\n1.1139\n-183.61\n0.7841\n1\n61.65\n17.4358\n32.501\n\n\n794\n109.31\n3.8431\n-354.36\n0.6169\n0\n74.30\n54.6571\n60.926\n\n\n795\n100.49\n4.2581\n-257.45\n0.7118\n0\n71.38\n50.2431\n56.747\n\n\n796\n102.76\n5.7178\n-456.25\n0.5171\n1\n69.13\n31.3816\n44.711\n\n\n797\n128.91\n2.9745\n-392.76\n0.5793\n0\n52.11\n64.4571\n53.862\n\n\n798\n86.44\n1.1475\n-226.42\n0.7421\n1\n68.48\n23.2222\n39.693\n\n\n799\n68.77\n0.9671\n-182.82\n0.7848\n0\n53.53\n34.3850\n37.531\n\n\n800\n68.00\n2.6454\n-219.51\n0.7489\n1\n46.47\n13.9998\n21.889\n\n\n801\n74.40\n6.3769\n-291.39\n0.6785\n1\n64.42\n17.2008\n33.946\n\n\n802\n65.31\n0.9049\n-157.72\n0.8094\n1\n62.82\n12.6544\n30.442\n\n\n803\n98.77\n9.4391\n-588.64\n0.3875\n1\n71.32\n29.3847\n44.824\n\n\n804\n145.27\n2.7519\n-402.48\n0.5698\n0\n52.21\n72.6370\n58.581\n\n\n805\n97.51\n14.4496\n-702.69\n0.2758\n0\n53.19\n48.7561\n45.533\n\n\n806\n119.43\n8.6267\n-597.26\n0.3790\n0\n58.62\n59.7155\n54.870\n\n\n807\n72.44\n3.4335\n-347.02\n0.6241\n0\n58.34\n36.2175\n41.321\n\n\n808\n94.46\n0.6170\n-226.05\n0.7425\n0\n69.68\n47.2294\n54.061\n\n\n809\n114.15\n0.1786\n-294.88\n0.6751\n0\n50.25\n57.0762\n48.598\n\n\n810\n91.13\n1.0118\n-238.19\n0.7306\n1\n66.89\n25.5630\n40.118\n\n\n811\n119.63\n0.5864\n-233.26\n0.7355\n1\n39.37\n39.8158\n32.561\n\n\n812\n117.35\n1.0884\n-362.42\n0.6090\n0\n70.99\n58.6756\n61.330\n\n\n813\n84.18\n0.1269\n-199.97\n0.7680\n1\n53.50\n22.0909\n30.510\n\n\n814\n80.70\n7.6994\n-470.21\n0.5034\n0\n49.73\n40.3505\n38.770\n\n\n815\n158.95\n11.5342\n-769.77\n0.2101\n1\n65.88\n59.4727\n58.870\n\n\n816\n95.19\n0.1161\n-127.64\n0.8389\n1\n62.62\n27.5931\n38.841\n\n\n817\n100.17\n6.8538\n-414.72\n0.5578\n1\n80.66\n30.0827\n50.546\n\n\n818\n98.64\n1.2887\n-279.83\n0.6898\n1\n61.49\n29.3182\n39.181\n\n\n819\n85.79\n6.6188\n-445.10\n0.5280\n0\n32.35\n42.8974\n30.316\n\n\n820\n76.83\n5.7064\n-464.27\n0.5093\n0\n32.41\n38.4128\n27.792\n\n\n821\n71.61\n5.1511\n-415.86\n0.5567\n0\n52.83\n35.8033\n37.945\n\n\n822\n122.85\n1.0052\n-336.39\n0.6345\n1\n56.59\n41.4245\n43.292\n\n\n823\n75.35\n3.8436\n-293.07\n0.6769\n1\n20.11\n17.6742\n8.963\n\n\n824\n116.69\n1.0584\n-315.21\n0.6552\n0\n49.76\n58.3436\n49.040\n\n\n825\n135.16\n3.2148\n-351.74\n0.6194\n1\n53.15\n47.5824\n44.842\n\n\n826\n128.94\n0.6928\n-268.29\n0.7012\n0\n42.67\n64.4722\n48.493\n\n\n827\n96.53\n1.1635\n-171.42\n0.7960\n1\n49.08\n28.2656\n31.511\n\n\n828\n86.52\n1.8017\n-189.86\n0.7779\n1\n48.88\n23.2585\n28.540\n\n\n829\n73.03\n1.3445\n-194.74\n0.7732\n1\n51.24\n16.5138\n26.043\n\n\n830\n99.54\n4.0819\n-377.43\n0.5943\n0\n57.29\n49.7680\n48.443\n\n\n831\n94.18\n5.6111\n-488.35\n0.4857\n1\n68.92\n27.0923\n42.150\n\n\n832\n103.91\n2.8447\n-295.15\n0.6748\n1\n32.26\n31.9537\n24.026\n\n\n833\n84.90\n1.5624\n-238.78\n0.7300\n1\n49.19\n22.4499\n28.258\n\n\n834\n115.73\n1.6671\n-281.84\n0.6879\n1\n51.75\n37.8629\n38.501\n\n\n835\n117.85\n2.2491\n-336.46\n0.6344\n1\n76.48\n38.9271\n53.202\n\n\n836\n126.90\n2.1308\n-263.22\n0.7061\n1\n36.64\n43.4486\n33.075\n\n\n837\n156.24\n1.4053\n-334.14\n0.6367\n0\n73.85\n78.1219\n74.044\n\n\n838\n104.95\n5.3502\n-391.09\n0.5809\n1\n55.99\n32.4736\n37.847\n\n\n839\n85.61\n2.6048\n-318.18\n0.6523\n1\n60.15\n22.8057\n34.707\n\n\n840\n98.07\n11.0398\n-651.68\n0.3257\n1\n42.66\n29.0335\n28.289\n\n\n841\n59.30\n9.0882\n-519.25\n0.4554\n1\n66.68\n9.6510\n30.930\n\n\n842\n103.25\n3.9996\n-327.60\n0.6431\n0\n31.67\n51.6240\n34.902\n\n\n843\n89.36\n2.7403\n-302.79\n0.6674\n0\n48.38\n44.6791\n40.468\n\n\n844\n110.15\n4.8608\n-381.42\n0.5904\n1\n41.58\n35.0751\n31.115\n\n\n845\n93.28\n8.8742\n-637.85\n0.3393\n0\n50.02\n46.6399\n42.520\n\n\n846\n65.48\n1.5766\n-185.18\n0.7825\n1\n68.51\n12.7377\n33.735\n\n\n847\n100.91\n0.9927\n-296.27\n0.6737\n1\n74.73\n30.4573\n47.381\n\n\n848\n66.17\n4.9740\n-324.33\n0.6463\n0\n65.57\n33.0844\n43.652\n\n\n849\n122.43\n0.4617\n-227.93\n0.7407\n0\n49.87\n61.2126\n50.737\n\n\n850\n54.27\n1.3585\n-190.91\n0.7769\n1\n66.94\n7.1330\n29.644\n\n\n851\n96.45\n1.2001\n-241.17\n0.7277\n0\n66.05\n48.2265\n52.560\n\n\n852\n111.45\n1.6501\n-351.89\n0.6193\n1\n37.69\n35.7248\n29.269\n\n\n853\n62.01\n1.4108\n-215.42\n0.7529\n1\n67.42\n11.0048\n32.123\n\n\n854\n134.98\n0.6710\n-390.61\n0.5814\n1\n49.50\n47.4882\n42.706\n\n\n855\n77.87\n2.1852\n-250.79\n0.7183\n1\n58.83\n18.9333\n31.748\n\n\n856\n87.34\n9.1122\n-555.91\n0.4195\n0\n63.80\n43.6709\n48.681\n\n\n857\n104.08\n6.6168\n-423.50\n0.5492\n0\n62.23\n52.0417\n52.554\n\n\n858\n91.57\n6.3059\n-412.58\n0.5599\n1\n65.46\n25.7857\n39.434\n\n\n859\n74.10\n0.8696\n-183.95\n0.7837\n1\n41.36\n17.0506\n20.718\n\n\n860\n110.23\n7.0051\n-474.20\n0.4995\n1\n37.13\n35.1167\n28.603\n\n\n861\n86.89\n11.2609\n-663.23\n0.3144\n0\n55.50\n43.4472\n43.823\n\n\n862\n112.66\n1.8316\n-290.00\n0.6799\n0\n47.22\n56.3313\n46.444\n\n\n863\n87.38\n1.0865\n-298.68\n0.6714\n0\n62.58\n43.6910\n47.994\n\n\n864\n76.07\n0.1725\n-242.79\n0.7261\n1\n65.81\n18.0344\n35.214\n\n\n865\n97.63\n3.6173\n-292.84\n0.6771\n1\n44.22\n28.8171\n29.052\n\n\n866\n116.24\n2.9145\n-345.07\n0.6260\n1\n45.41\n38.1180\n35.032\n\n\n867\n106.06\n0.1567\n-147.81\n0.8191\n1\n58.63\n33.0290\n39.668\n\n\n868\n98.53\n3.0509\n-327.61\n0.6431\n1\n82.82\n29.2633\n51.309\n\n\n869\n51.31\n1.2485\n-221.39\n0.7471\n0\n44.04\n25.6526\n27.150\n\n\n870\n136.29\n0.9343\n-354.92\n0.6163\n0\n86.48\n68.1430\n75.556\n\n\n871\n99.00\n2.4078\n-217.13\n0.7512\n1\n67.18\n29.5008\n42.528\n\n\n872\n78.40\n4.2947\n-419.54\n0.5530\n0\n38.10\n39.2000\n31.483\n\n\n873\n94.96\n1.9374\n-309.15\n0.6611\n1\n51.15\n27.4789\n32.242\n\n\n874\n106.53\n6.1566\n-395.22\n0.5769\n1\n55.39\n33.2657\n37.958\n\n\n875\n62.04\n1.4451\n-189.65\n0.7781\n1\n70.02\n11.0206\n33.614\n\n\n876\n117.93\n6.0550\n-567.48\n0.4082\n0\n65.40\n58.9664\n58.310\n\n\n877\n106.17\n0.3836\n-242.64\n0.7263\n1\n52.59\n33.0854\n36.260\n\n\n878\n130.07\n1.4157\n-294.42\n0.6756\n1\n63.03\n45.0346\n49.016\n\n\n879\n124.65\n1.6868\n-263.41\n0.7059\n1\n82.48\n42.3255\n58.560\n\n\n880\n86.55\n3.7915\n-374.11\n0.5975\n0\n52.09\n43.2757\n41.779\n\n\n881\n87.74\n2.8164\n-195.29\n0.7726\n1\n64.10\n23.8715\n37.564\n\n\n882\n75.11\n7.9310\n-468.16\n0.5054\n0\n60.95\n37.5560\n43.569\n\n\n883\n90.96\n0.5969\n-177.51\n0.7900\n1\n64.71\n25.4787\n38.830\n\n\n884\n123.61\n8.9292\n-634.50\n0.3426\n1\n59.33\n41.8044\n45.067\n\n\n885\n144.81\n2.1265\n-310.41\n0.6599\n1\n40.40\n52.4026\n40.318\n\n\n886\n123.21\n1.8344\n-253.00\n0.7161\n1\n63.58\n41.6051\n47.379\n\n\n887\n54.25\n0.2762\n-147.37\n0.8195\n1\n59.07\n7.1258\n25.152\n\n\n888\n120.55\n8.0471\n-598.81\n0.3775\n1\n41.07\n40.2735\n33.791\n\n\n889\n125.91\n0.3158\n-302.40\n0.6678\n1\n62.23\n42.9534\n47.377\n\n\n890\n115.44\n1.8314\n-225.70\n0.7428\n0\n82.12\n57.7178\n67.127\n\n\n891\n78.63\n1.2115\n-178.94\n0.7886\n1\n79.99\n19.3134\n44.025\n\n\n892\n126.61\n4.6252\n-427.76\n0.5450\n0\n55.73\n63.3064\n55.270\n\n\n893\n118.24\n0.1649\n-193.45\n0.7744\n1\n85.81\n39.1185\n58.627\n\n\n894\n116.57\n3.2138\n-388.55\n0.5834\n0\n55.74\n58.2832\n52.412\n\n\n895\n90.46\n1.8446\n-268.12\n0.7013\n1\n71.50\n25.2324\n42.559\n\n\n896\n121.15\n1.5156\n-256.47\n0.7127\n0\n75.04\n60.5736\n64.720\n\n\n897\n102.79\n2.0922\n-367.18\n0.6043\n0\n77.76\n51.3949\n61.041\n\n\n898\n98.31\n7.4867\n-463.58\n0.5099\n1\n60.73\n29.1529\n38.654\n\n\n899\n137.18\n3.1890\n-477.49\n0.4963\n1\n71.12\n48.5887\n55.653\n\n\n900\n118.93\n11.6973\n-749.02\n0.2304\n0\n76.66\n59.4653\n65.012\n\n\n901\n28.15\n2.7170\n-147.59\n0.8193\n1\n56.84\n-5.9255\n16.447\n\n\n902\n89.34\n0.1994\n-195.96\n0.7720\n1\n61.50\n24.6682\n36.537\n\n\n903\n62.81\n6.2895\n-347.44\n0.6236\n1\n55.28\n11.4074\n25.436\n\n\n904\n114.72\n0.2110\n-292.29\n0.6776\n1\n54.48\n37.3599\n39.773\n\n\n905\n88.94\n3.3457\n-330.67\n0.6401\n0\n71.05\n44.4675\n53.267\n\n\n906\n122.53\n3.7252\n-400.76\n0.5714\n1\n76.62\n41.2663\n54.615\n\n\n907\n111.70\n0.6437\n-234.45\n0.7343\n1\n33.77\n35.8479\n27.103\n\n\n908\n100.55\n7.3026\n-533.27\n0.4417\n1\n51.60\n30.2755\n34.093\n\n\n909\n97.87\n2.2352\n-169.87\n0.7975\n1\n60.38\n28.9362\n38.334\n\n\n910\n90.97\n4.2626\n-403.19\n0.5691\n1\n51.34\n25.4842\n31.215\n\n\n911\n104.99\n1.7918\n-328.77\n0.6419\n1\n89.14\n32.4938\n56.750\n\n\n912\n72.29\n0.6746\n-176.93\n0.7906\n1\n66.38\n16.1468\n34.464\n\n\n913\n116.82\n3.5102\n-430.62\n0.5422\n1\n49.96\n38.4099\n37.791\n\n\n914\n90.15\n0.8533\n-240.35\n0.7285\n0\n64.21\n45.0736\n49.714\n\n\n915\n81.40\n4.3133\n-319.37\n0.6511\n1\n64.04\n20.7004\n35.725\n\n\n916\n91.85\n1.9709\n-232.57\n0.7361\n1\n74.61\n25.9236\n44.724\n\n\n917\n146.87\n8.5084\n-605.76\n0.3707\n1\n49.25\n53.4334\n45.950\n\n\n918\n56.05\n1.0893\n-196.41\n0.7715\n1\n69.35\n8.0250\n31.524\n\n\n919\n91.28\n2.8769\n-277.96\n0.6917\n0\n66.07\n45.6392\n51.096\n\n\n920\n102.66\n3.6629\n-359.93\n0.6114\n1\n53.31\n31.3324\n35.670\n\n\n921\n86.56\n0.1413\n-222.30\n0.7462\n1\n65.18\n23.2793\n37.846\n\n\n922\n89.72\n9.9858\n-647.21\n0.3301\n0\n47.47\n44.8591\n40.047\n\n\n923\n109.56\n0.2983\n-211.02\n0.7572\n1\n75.37\n34.7794\n50.206\n\n\n924\n105.56\n4.4061\n-455.61\n0.5177\n1\n43.45\n32.7814\n30.873\n\n\n925\n83.16\n5.5841\n-264.90\n0.7045\n1\n58.05\n21.5781\n32.812\n\n\n926\n114.19\n1.5274\n-331.45\n0.6393\n0\n65.08\n57.0929\n57.057\n\n\n927\n104.49\n0.6817\n-188.53\n0.7792\n1\n68.81\n32.2435\n45.023\n\n\n928\n117.16\n1.8443\n-245.56\n0.7234\n1\n47.32\n38.5793\n36.383\n\n\n929\n66.82\n0.3335\n-93.69\n0.8721\n1\n61.87\n13.4092\n30.332\n\n\n930\n80.80\n3.7036\n-251.78\n0.7173\n0\n51.42\n40.4010\n39.761\n\n\n931\n95.18\n6.9973\n-406.66\n0.5657\n1\n41.47\n27.5912\n26.790\n\n\n932\n123.98\n6.5421\n-463.27\n0.5102\n0\n46.97\n61.9881\n49.525\n\n\n933\n86.77\n1.0025\n-208.57\n0.7596\n1\n60.39\n23.3871\n35.177\n\n\n934\n74.18\n5.3591\n-334.83\n0.6360\n1\n49.12\n17.0889\n25.161\n\n\n935\n119.29\n1.6948\n-283.21\n0.6865\n1\n42.18\n39.6468\n34.066\n\n\n936\n111.63\n1.9544\n-334.48\n0.6363\n1\n46.09\n35.8170\n34.112\n\n\n937\n69.36\n2.7682\n-229.50\n0.7391\n0\n64.42\n34.6791\n43.908\n\n\n938\n151.17\n7.8631\n-682.15\n0.2959\n0\n32.60\n75.5835\n49.089\n\n\n939\n137.47\n4.1026\n-461.20\n0.5123\n0\n43.93\n68.7334\n51.641\n\n\n940\n65.28\n8.8191\n-544.19\n0.4310\n0\n60.34\n32.6381\n40.420\n\n\n941\n153.83\n1.1715\n-396.52\n0.5756\n1\n76.58\n56.9172\n63.515\n\n\n942\n56.77\n2.1121\n-231.89\n0.7368\n0\n72.33\n28.3860\n44.828\n\n\n943\n102.55\n6.1526\n-341.40\n0.6296\n1\n77.65\n31.2755\n49.509\n\n\n944\n71.47\n0.6924\n-228.37\n0.7402\n1\n60.54\n15.7340\n30.901\n\n\n945\n90.57\n0.8521\n-226.90\n0.7417\n1\n66.43\n25.2874\n39.700\n\n\n946\n91.28\n0.9091\n-238.41\n0.7304\n0\n79.01\n45.6402\n58.469\n\n\n947\n108.07\n6.3124\n-467.20\n0.5064\n1\n41.80\n34.0361\n30.651\n\n\n948\n71.89\n0.7882\n-260.73\n0.7086\n1\n38.27\n15.9458\n18.324\n\n\n949\n31.07\n0.8513\n-124.27\n0.8422\n1\n49.42\n-4.4631\n13.051\n\n\n950\n97.60\n0.4554\n-270.39\n0.6991\n0\n68.17\n48.8024\n54.094\n\n\n951\n81.33\n2.1620\n-194.39\n0.7735\n1\n50.43\n20.6663\n27.948\n\n\n952\n105.27\n4.0085\n-362.54\n0.6089\n0\n35.57\n52.6348\n37.701\n\n\n953\n78.79\n6.5947\n-362.74\n0.6087\n0\n73.60\n39.3936\n51.827\n\n\n954\n119.81\n12.4185\n-701.95\n0.2765\n0\n59.56\n59.9033\n55.515\n\n\n955\n100.73\n4.6856\n-313.11\n0.6573\n1\n60.99\n30.3648\n39.494\n\n\n956\n115.08\n4.3440\n-435.73\n0.5372\n1\n47.99\n37.5424\n36.174\n\n\n957\n75.13\n10.6844\n-635.81\n0.3413\n0\n53.20\n37.5632\n39.157\n\n\n958\n94.72\n4.1037\n-374.94\n0.5967\n0\n59.65\n47.3583\n48.417\n\n\n959\n108.60\n5.8527\n-441.50\n0.5315\n1\n45.90\n34.3003\n33.138\n\n\n960\n97.77\n5.3320\n-458.66\n0.5147\n1\n65.36\n28.8828\n41.140\n\n\n961\n141.35\n1.4659\n-315.46\n0.6550\n0\n55.04\n70.6755\n59.081\n\n\n962\n50.93\n3.4117\n-271.91\n0.6976\n1\n25.92\n5.4636\n5.314\n\n\n963\n118.90\n3.1558\n-345.27\n0.6258\n1\n77.58\n39.4516\n54.128\n\n\n964\n100.36\n1.9500\n-299.50\n0.6706\n0\n66.46\n50.1802\n53.905\n\n\n965\n123.64\n4.0840\n-352.66\n0.6185\n1\n53.38\n41.8214\n41.688\n\n\n966\n97.53\n3.0854\n-361.28\n0.6101\n0\n48.59\n48.7649\n42.913\n\n\n967\n31.51\n5.0354\n-271.36\n0.6981\n0\n63.83\n15.7531\n32.783\n\n\n968\n110.51\n1.1838\n-299.24\n0.6708\n1\n50.70\n35.2538\n36.414\n\n\n969\n94.54\n13.2486\n-705.79\n0.2728\n1\n52.10\n27.2703\n32.665\n\n\n970\n75.27\n1.9240\n-186.87\n0.7809\n1\n59.19\n17.6331\n31.211\n\n\n971\n83.59\n0.2728\n-149.42\n0.8175\n1\n51.69\n21.7941\n29.308\n\n\n972\n101.39\n0.3653\n-247.98\n0.7210\n1\n55.02\n30.6958\n36.279\n\n\n973\n161.30\n8.7930\n-627.94\n0.3490\n0\n78.47\n80.6508\n78.117\n\n\n974\n104.70\n0.7768\n-217.50\n0.7509\n0\n61.15\n52.3522\n52.115\n\n\n975\n75.51\n3.6040\n-291.29\n0.6786\n1\n51.39\n17.7538\n26.833\n\n\n976\n147.59\n1.9670\n-413.56\n0.5589\n1\n55.88\n53.7951\n49.937\n\n\n977\n89.04\n1.3262\n-193.34\n0.7745\n1\n55.71\n24.5185\n33.150\n\n\n978\n79.26\n0.7870\n-264.50\n0.7049\n0\n54.10\n39.6284\n40.844\n\n\n979\n68.82\n3.0273\n-356.33\n0.6149\n1\n63.52\n14.4096\n31.842\n\n\n980\n83.15\n3.4521\n-327.01\n0.6436\n1\n41.70\n21.5774\n23.491\n\n\n981\n148.38\n1.2281\n-414.32\n0.5582\n1\n58.32\n54.1896\n51.549\n\n\n982\n122.66\n4.2222\n-399.43\n0.5727\n1\n45.70\n41.3320\n37.032\n\n\n983\n118.41\n3.0717\n-278.52\n0.6911\n0\n55.75\n59.2066\n52.946\n\n\n984\n103.67\n1.9857\n-313.25\n0.6571\n0\n74.07\n51.8328\n59.184\n\n\n985\n107.08\n6.5690\n-489.77\n0.4843\n1\n48.39\n33.5390\n34.122\n\n\n986\n114.73\n2.9902\n-311.53\n0.6588\n1\n52.78\n37.3660\n38.808\n\n\n987\n105.40\n3.4559\n-430.82\n0.5420\n0\n64.02\n52.6981\n53.950\n\n\n988\n103.88\n3.2833\n-415.67\n0.5568\n1\n69.38\n31.9382\n45.173\n\n\n989\n123.85\n0.3591\n-170.33\n0.7971\n1\n59.15\n41.9228\n45.031\n\n\n990\n95.85\n0.5394\n-239.66\n0.7292\n1\n44.82\n27.9268\n28.889\n\n\n991\n106.38\n8.0813\n-547.16\n0.4281\n1\n72.58\n33.1875\n47.707\n\n\n992\n77.56\n0.2843\n-101.18\n0.8648\n1\n52.94\n18.7816\n28.306\n\n\n993\n139.60\n1.4089\n-296.91\n0.6731\n0\n57.92\n69.7996\n60.222\n\n\n994\n134.82\n10.1153\n-766.83\n0.2130\n0\n62.00\n67.4095\n61.185\n\n\n995\n54.69\n4.3370\n-224.43\n0.7441\n1\n64.19\n7.3468\n28.196\n\n\n996\n94.59\n6.6737\n-479.72\n0.4941\n0\n64.11\n47.2960\n50.924\n\n\n997\n113.75\n11.9284\n-744.03\n0.2353\n1\n55.51\n36.8732\n40.080\n\n\n998\n112.07\n0.5314\n-329.13\n0.6416\n0\n43.49\n56.0342\n44.151\n\n\n999\n119.02\n2.8724\n-451.43\n0.5218\n0\n39.52\n59.5106\n43.869\n\n\n1000\n88.86\n2.9907\n-292.98\n0.6770\n0\n38.21\n44.4293\n34.528\n\n\n1001\n69.87\n3.8002\n-249.50\n0.7196\n1\n34.76\n14.9333\n15.748\n\n\n1002\n107.54\n1.2670\n-351.39\n0.6198\n0\n61.96\n53.7683\n53.388\n\n\n1003\n61.52\n1.7504\n-271.84\n0.6977\n1\n60.87\n10.7607\n28.254\n\n\n1004\n115.88\n2.2625\n-279.33\n0.6903\n1\n72.06\n37.9421\n50.122\n\n\n1005\n117.57\n0.1283\n-223.90\n0.7446\n1\n66.34\n38.7869\n47.346\n\n\n1006\n52.35\n6.1860\n-328.02\n0.6427\n1\n67.42\n6.1765\n29.372\n\n\n1007\n123.47\n1.1220\n-334.89\n0.6359\n1\n45.55\n41.7365\n37.175\n\n\n1008\n94.39\n0.5576\n-234.36\n0.7344\n1\n83.79\n27.1938\n50.681\n\n\n1009\n83.15\n2.5451\n-337.53\n0.6333\n1\n85.22\n21.5773\n48.295\n\n\n1010\n111.14\n5.8213\n-430.43\n0.5424\n0\n55.54\n55.5723\n50.758\n\n\n1011\n132.02\n1.7600\n-356.82\n0.6145\n0\n52.38\n66.0077\n54.901\n\n\n1012\n139.13\n6.6110\n-584.96\n0.3911\n0\n51.92\n69.5641\n56.667\n\n\n1013\n69.99\n2.7566\n-215.63\n0.7527\n1\n62.49\n14.9932\n31.585\n\n\n1014\n89.06\n6.5206\n-466.66\n0.5069\n1\n72.44\n24.5288\n42.696\n\n\n1015\n103.66\n1.7233\n-235.99\n0.7328\n1\n65.32\n31.8298\n42.799\n\n\n1016\n101.65\n0.5057\n-240.72\n0.7281\n1\n41.14\n30.8252\n28.445\n\n\n1017\n88.87\n7.7904\n-480.90\n0.4930\n0\n47.80\n44.4370\n39.995\n\n\n1018\n41.45\n7.4400\n-366.47\n0.6050\n0\n52.97\n20.7236\n29.426\n\n\n1019\n93.04\n4.1016\n-314.26\n0.6561\n1\n45.31\n26.5202\n28.367\n\n\n1020\n70.45\n7.9074\n-477.14\n0.4966\n0\n39.12\n35.2275\n29.801\n\n\n1021\n100.83\n0.2778\n-161.37\n0.8058\n1\n59.04\n30.4141\n38.410\n\n\n1022\n79.06\n6.6102\n-395.85\n0.5762\n1\n54.95\n19.5285\n29.876\n\n\n1023\n97.06\n0.9527\n-133.06\n0.8336\n1\n72.80\n28.5299\n45.180\n\n\n1024\n81.46\n5.8121\n-455.44\n0.5179\n1\n36.99\n20.7310\n20.325\n\n\n1025\n89.79\n2.0807\n-283.53\n0.6862\n1\n67.44\n24.8957\n40.054\n\n\n1026\n90.56\n4.4086\n-334.90\n0.6359\n1\n52.70\n25.2779\n31.868\n\n\n1027\n133.21\n1.1930\n-327.26\n0.6434\n0\n47.19\n66.6046\n52.281\n\n\n1028\n117.91\n1.8341\n-258.16\n0.7111\n1\n73.76\n38.9555\n51.668\n\n\n1029\n94.19\n3.0762\n-333.14\n0.6377\n0\n63.02\n47.0964\n50.188\n\n\n1030\n69.34\n4.8664\n-350.14\n0.6210\n1\n54.61\n14.6722\n26.916\n\n\n1031\n126.19\n8.4869\n-602.76\n0.3736\n0\n34.11\n63.0942\n42.826\n\n\n1032\n64.09\n4.3889\n-309.47\n0.6608\n1\n73.30\n12.0449\n36.072\n\n\n1033\n70.44\n3.5395\n-277.94\n0.6917\n1\n55.88\n15.2191\n27.947\n\n\n1034\n80.59\n1.4982\n-285.63\n0.6842\n1\n46.03\n20.2974\n25.230\n\n\n1035\n75.69\n6.9117\n-450.12\n0.5231\n0\n82.08\n37.8461\n55.776\n\n\n1036\n77.41\n3.4487\n-239.78\n0.7291\n1\n73.40\n18.7043\n39.921\n\n\n1037\n132.18\n5.0221\n-385.15\n0.5867\n1\n70.25\n46.0900\n53.736\n\n\n1038\n97.35\n3.8131\n-332.68\n0.6381\n1\n58.50\n28.6727\n37.112\n\n\n1039\n82.10\n0.1211\n-246.04\n0.7229\n1\n28.99\n21.0516\n15.945\n\n\n1040\n116.79\n0.7928\n-193.72\n0.7742\n1\n77.58\n38.3965\n53.527\n\n\n1041\n104.94\n7.6343\n-457.87\n0.5155\n1\n47.13\n32.4704\n32.796\n\n\n1042\n69.50\n1.0947\n-184.63\n0.7831\n1\n38.46\n14.7488\n17.755\n\n\n1043\n85.98\n7.8780\n-467.54\n0.5061\n0\n77.45\n42.9879\n56.071\n\n\n1044\n113.34\n0.5659\n-193.72\n0.7742\n1\n59.00\n36.6717\n41.957\n\n\n1045\n148.76\n2.9797\n-374.09\n0.5976\n0\n50.32\n74.3789\n58.499\n\n\n1046\n139.55\n3.3341\n-354.99\n0.6163\n1\n58.46\n49.7743\n49.113\n\n\n1047\n120.94\n7.8133\n-623.09\n0.3537\n1\n47.23\n40.4723\n37.411\n\n\n1048\n99.67\n0.6032\n-290.21\n0.6797\n1\n57.45\n29.8366\n37.173\n\n\n1049\n56.86\n2.7992\n-241.91\n0.7270\n1\n54.24\n8.4276\n23.143\n\n\n1050\n81.73\n0.5532\n-231.70\n0.7370\n0\n57.69\n40.8643\n43.598\n\n\n1051\n94.61\n2.2694\n-233.57\n0.7351\n0\n68.96\n47.3073\n53.694\n\n\n1052\n112.26\n2.6199\n-294.05\n0.6759\n1\n48.84\n36.1276\n35.853\n\n\n1053\n101.48\n0.9630\n-244.44\n0.7245\n1\n69.69\n30.7424\n44.669\n\n\n1054\n101.46\n2.0661\n-322.60\n0.6480\n0\n49.11\n50.7289\n44.328\n\n\n1055\n145.96\n2.5337\n-476.85\n0.4969\n1\n50.79\n52.9795\n46.571\n\n\n1056\n109.69\n2.1659\n-336.65\n0.6342\n1\n72.91\n34.8456\n48.843\n\n\n1057\n92.99\n9.8636\n-654.66\n0.3228\n0\n61.97\n46.4931\n49.243\n\n\n1058\n89.29\n7.4342\n-511.55\n0.4630\n0\n53.77\n44.6435\n43.515\n\n\n1059\n102.38\n4.4635\n-397.16\n0.5750\n0\n76.72\n51.1916\n60.331\n\n\n1060\n79.67\n2.2245\n-248.68\n0.7204\n1\n52.75\n19.8334\n28.797\n\n\n1061\n134.20\n0.3604\n-257.53\n0.7117\n1\n67.93\n47.1024\n52.988\n\n\n1062\n92.81\n3.4170\n-260.72\n0.7086\n0\n78.03\n46.4058\n58.349\n\n\n1063\n86.79\n1.4915\n-219.40\n0.7490\n1\n81.01\n23.3931\n46.934\n\n\n1064\n78.17\n4.9446\n-459.12\n0.5143\n1\n48.83\n19.0873\n26.135\n\n\n1065\n123.40\n2.9263\n-404.04\n0.5682\n1\n45.01\n41.6987\n36.846\n\n\n1066\n68.07\n1.0327\n-137.24\n0.8295\n1\n31.24\n14.0342\n13.230\n\n\n1067\n88.28\n1.9163\n-262.10\n0.7072\n1\n42.15\n24.1408\n25.210\n\n\n1068\n107.81\n6.2853\n-491.75\n0.4823\n0\n65.76\n53.9065\n55.630\n\n\n1069\n97.29\n1.4760\n-204.62\n0.7635\n1\n55.22\n28.6460\n35.229\n\n\n1070\n106.27\n1.1072\n-261.85\n0.7075\n1\n61.03\n33.1349\n41.094\n\n\n1071\n67.10\n7.2842\n-377.02\n0.5947\n0\n65.92\n33.5476\n44.118\n\n\n1072\n89.25\n1.8096\n-266.40\n0.7030\n1\n54.97\n24.6241\n32.788\n\n\n1073\n57.40\n0.9411\n-119.69\n0.8467\n1\n69.67\n8.6986\n32.092\n\n\n1074\n78.95\n1.1757\n-223.77\n0.7447\n1\n78.51\n19.4733\n43.272\n\n\n1075\n128.71\n4.4303\n-409.10\n0.5633\n0\n52.60\n64.3531\n54.087\n\n\n1076\n106.32\n1.1462\n-236.68\n0.7321\n1\n62.13\n33.1604\n41.736\n\n\n1077\n102.13\n0.5168\n-230.62\n0.7380\n1\n65.72\n31.0661\n42.588\n\n\n1078\n76.66\n9.9910\n-485.99\n0.4880\n1\n52.64\n18.3297\n27.877\n\n\n1079\n86.08\n1.0067\n-213.52\n0.7548\n1\n63.63\n23.0398\n36.826\n\n\n1080\n74.59\n8.3729\n-465.44\n0.5081\n0\n80.17\n37.2954\n54.375\n\n\n1081\n101.34\n7.9750\n-472.92\n0.5008\n0\n29.22\n50.6691\n32.957\n\n\n1082\n119.13\n1.2326\n-266.13\n0.7033\n1\n61.30\n39.5642\n44.914\n\n\n1083\n107.48\n2.4359\n-325.96\n0.6447\n1\n26.41\n33.7399\n21.708\n\n\n1084\n84.56\n0.1367\n-247.82\n0.7212\n1\n61.02\n22.2798\n34.903\n\n\n1085\n113.82\n10.4606\n-589.99\n0.3861\n0\n52.33\n56.9098\n49.689\n\n\n1086\n109.70\n5.8893\n-559.52\n0.4160\n1\n70.75\n34.8489\n47.614\n\n\n1087\n121.08\n1.9081\n-288.74\n0.6811\n1\n44.72\n40.5401\n36.023\n\n\n1088\n88.98\n2.8867\n-354.56\n0.6167\n0\n84.91\n44.4922\n61.181\n\n\n1089\n70.52\n2.7284\n-253.56\n0.7156\n0\n51.99\n35.2579\n37.155\n\n\n1090\n97.89\n5.3956\n-415.77\n0.5567\n1\n50.62\n28.9429\n32.774\n\n\n1091\n107.57\n0.8240\n-336.83\n0.6340\n1\n38.73\n33.7847\n28.755\n\n\n1092\n138.98\n0.2945\n-322.29\n0.6483\n0\n73.52\n69.4887\n68.938\n\n\n1093\n98.26\n0.7007\n-288.44\n0.6814\n1\n64.92\n29.1292\n41.032\n\n\n1094\n110.68\n2.6492\n-380.97\n0.5908\n1\n84.30\n35.3380\n55.613\n\n\n1095\n97.92\n1.7345\n-275.52\n0.6941\n1\n61.92\n28.9592\n39.226\n\n\n1096\n153.91\n5.6150\n-556.14\n0.4193\n0\n66.58\n76.9550\n69.237\n\n\n1097\n133.45\n1.8076\n-302.40\n0.6677\n0\n50.81\n66.7246\n54.417\n\n\n1098\n94.19\n2.4016\n-335.36\n0.6355\n0\n47.66\n47.0962\n41.431\n\n\n1099\n96.81\n5.4517\n-451.03\n0.5222\n1\n53.43\n28.4074\n34.071\n\n\n1100\n99.46\n10.8897\n-632.62\n0.3444\n0\n59.88\n49.7289\n49.900\n\n\n1101\n102.83\n1.8544\n-372.70\n0.5989\n0\n40.11\n51.4157\n39.593\n\n\n1102\n85.87\n6.2209\n-429.03\n0.5438\n1\n54.35\n22.9363\n31.475\n\n\n1103\n102.02\n0.6220\n-241.27\n0.7276\n1\n63.53\n31.0088\n41.307\n\n\n1104\n82.61\n0.9017\n-249.00\n0.7200\n0\n63.87\n41.3029\n47.371\n\n\n1105\n72.59\n0.3543\n-186.89\n0.7809\n1\n59.45\n16.2975\n30.597\n\n\n1106\n120.11\n6.5159\n-582.93\n0.3931\n1\n60.93\n40.0555\n44.983\n\n\n1107\n116.42\n0.1935\n-279.65\n0.6900\n1\n48.63\n38.2081\n36.919\n\n\n1108\n85.80\n3.0818\n-314.60\n0.6558\n1\n46.67\n22.8996\n27.078\n\n\n1109\n131.82\n1.9176\n-363.81\n0.6076\n0\n52.64\n65.9098\n54.994\n\n\n1110\n95.19\n0.5854\n-250.59\n0.7185\n1\n52.29\n27.5932\n32.958\n\n\n1111\n92.91\n1.8309\n-366.51\n0.6050\n1\n56.84\n26.4542\n34.900\n\n\n1112\n76.16\n1.0248\n-186.67\n0.7811\n1\n53.08\n18.0791\n27.985\n\n\n1113\n99.39\n9.1414\n-625.86\n0.3510\n0\n66.99\n49.6956\n53.932\n\n\n1114\n96.58\n0.6934\n-233.27\n0.7354\n0\n37.60\n48.2877\n36.378\n\n\n1115\n101.69\n2.1708\n-287.88\n0.6820\n1\n61.12\n30.8440\n39.842\n\n\n1116\n111.13\n2.4185\n-298.88\n0.6712\n1\n51.55\n35.5646\n37.075\n\n\n1117\n122.67\n8.9905\n-610.56\n0.3660\n1\n71.60\n41.3325\n51.793\n\n\n1118\n108.19\n0.7713\n-275.59\n0.6940\n1\n63.62\n34.0926\n43.117\n\n\n1119\n124.81\n2.0445\n-381.03\n0.5908\n1\n59.38\n42.4070\n45.438\n\n\n1120\n126.64\n6.3627\n-455.81\n0.5175\n0\n66.00\n63.3175\n61.131\n\n\n1121\n26.74\n2.6290\n-155.64\n0.8114\n1\n70.43\n-6.6310\n23.790\n\n\n1122\n90.93\n5.7585\n-469.67\n0.5040\n1\n83.86\n25.4653\n49.739\n\n\n1123\n114.25\n1.5551\n-384.23\n0.5876\n0\n38.67\n57.1242\n42.026\n\n\n1124\n72.01\n3.3483\n-254.84\n0.7143\n0\n39.87\n36.0046\n30.672\n\n\n1125\n75.98\n7.9064\n-453.90\n0.5194\n0\n66.35\n37.9919\n46.898\n\n\n1126\n106.84\n7.6401\n-465.20\n0.5083\n0\n48.93\n53.4217\n45.760\n\n\n1127\n88.96\n3.1466\n-249.22\n0.7198\n1\n69.22\n24.4822\n40.830\n\n\n1128\n56.71\n3.7963\n-152.39\n0.8146\n0\n50.84\n28.3564\n32.566\n\n\n1129\n122.65\n3.2123\n-438.14\n0.5348\n0\n48.95\n61.3232\n50.277\n\n\n1130\n78.98\n4.6650\n-405.60\n0.5667\n1\n39.32\n19.4895\n20.947\n\n\n1131\n109.66\n1.6425\n-360.04\n0.6113\n1\n36.44\n34.8293\n28.049\n\n\n1132\n110.31\n9.5259\n-631.20\n0.3458\n0\n65.22\n55.1554\n56.037\n\n\n1133\n138.03\n8.5441\n-579.43\n0.3965\n0\n56.83\n69.0159\n59.155\n\n\n1134\n104.91\n0.2483\n-199.27\n0.7687\n0\n46.79\n52.4571\n43.991\n\n\n1135\n116.64\n0.7604\n-215.03\n0.7533\n1\n68.02\n38.3201\n48.038\n\n\n1136\n128.51\n6.1899\n-572.82\n0.4030\n0\n57.02\n64.2574\n56.550\n\n\n1137\n89.84\n0.9758\n-219.29\n0.7491\n1\n59.17\n24.9202\n35.353\n\n\n1138\n58.61\n2.8419\n-206.75\n0.7614\n1\n84.14\n9.3055\n40.688\n\n\n1139\n103.57\n2.1898\n-286.99\n0.6828\n0\n54.80\n51.7866\n48.177\n\n\n1140\n133.15\n2.8698\n-320.33\n0.6502\n0\n36.82\n66.5739\n46.358\n\n\n1141\n64.84\n3.9399\n-329.17\n0.6415\n0\n41.48\n32.4215\n29.549\n\n\n1142\n125.30\n1.9992\n-299.49\n0.6706\n1\n59.72\n42.6516\n45.773\n\n\n1143\n98.50\n1.2893\n-240.79\n0.7281\n1\n51.46\n29.2484\n33.426\n\n\n1144\n102.49\n3.5686\n-327.27\n0.6434\n1\n54.06\n31.2435\n36.046\n\n\n1145\n91.27\n1.2574\n-311.71\n0.6586\n1\n84.29\n25.6347\n50.080\n\n\n1146\n125.92\n2.2931\n-301.73\n0.6684\n0\n66.96\n62.9607\n61.478\n\n\n1147\n135.60\n2.7539\n-345.19\n0.6259\n1\n42.29\n47.8020\n38.776\n\n\n1148\n139.27\n2.2372\n-361.46\n0.6099\n1\n31.12\n49.6356\n33.455\n\n\n1149\n75.81\n1.1779\n-216.11\n0.7522\n1\n52.23\n17.9075\n27.399\n\n\n1150\n118.98\n1.6206\n-223.95\n0.7446\n1\n50.60\n39.4911\n38.776\n\n\n1151\n90.60\n5.2486\n-400.97\n0.5712\n1\n44.69\n25.2976\n27.314\n\n\n1152\n75.41\n1.7041\n-198.45\n0.7695\n1\n72.53\n17.7074\n38.858\n\n\n1153\n109.75\n7.3703\n-542.01\n0.4331\n0\n31.57\n54.8737\n36.696\n\n\n1154\n99.55\n1.2562\n-258.11\n0.7111\n0\n52.23\n49.7756\n45.563\n\n\n1155\n119.79\n2.2021\n-456.42\n0.5169\n1\n68.07\n39.8966\n48.960\n\n\n1156\n144.81\n1.2121\n-387.45\n0.5845\n1\n81.10\n52.4050\n63.516\n\n\n1157\n125.92\n0.9004\n-228.84\n0.7398\n1\n76.82\n42.9590\n55.692\n\n\n1158\n82.61\n4.6309\n-366.03\n0.6054\n0\n61.51\n41.3039\n46.027\n\n\n1159\n103.49\n0.2059\n-279.68\n0.6900\n0\n53.23\n51.7453\n47.257\n\n\n1160\n135.33\n4.4445\n-526.23\n0.4486\n0\n52.27\n67.6656\n55.782\n\n\n1161\n129.36\n1.3749\n-296.13\n0.6739\n1\n50.27\n44.6805\n41.544\n\n\n1162\n60.38\n8.4328\n-509.26\n0.4652\n1\n74.75\n10.1902\n35.839\n\n\n1163\n123.66\n0.2908\n-129.79\n0.8368\n1\n68.27\n41.8304\n50.178\n\n\n1164\n91.49\n0.2417\n-131.33\n0.8353\n1\n54.91\n25.7436\n33.393\n\n\n1165\n84.37\n0.4721\n-133.39\n0.8332\n1\n46.91\n22.1830\n26.804\n\n\n1166\n72.47\n2.4863\n-238.05\n0.7308\n1\n58.55\n16.2350\n30.049\n\n\n1167\n92.21\n7.6795\n-547.66\n0.4276\n0\n51.75\n46.1026\n43.197\n\n\n1168\n117.22\n3.4730\n-358.89\n0.6124\n1\n51.59\n38.6082\n38.836\n\n\n1169\n135.88\n6.7592\n-510.23\n0.4643\n1\n55.96\n47.9409\n46.645\n\n\n1170\n103.47\n7.8093\n-524.09\n0.4507\n0\n71.36\n51.7363\n57.586\n\n\n1171\n98.17\n2.8075\n-349.00\n0.6221\n1\n41.61\n29.0868\n27.720\n\n\n1172\n94.94\n0.9475\n-147.37\n0.8195\n1\n73.95\n27.4708\n45.230\n\n\n1173\n123.84\n2.5420\n-328.79\n0.6419\n1\n59.81\n41.9225\n45.410\n\n\n1174\n72.97\n7.6938\n-473.82\n0.4999\n0\n61.68\n36.4851\n43.378\n\n\n1175\n106.25\n2.1863\n-294.41\n0.6756\n1\n51.17\n33.1252\n35.469\n\n\n1176\n125.54\n1.3300\n-271.58\n0.6979\n0\n76.05\n62.7703\n66.546\n\n\n1177\n126.55\n2.5646\n-302.22\n0.6679\n0\n48.74\n63.2731\n51.269\n\n\n1178\n110.43\n1.1824\n-362.32\n0.6091\n0\n56.22\n55.2134\n50.935\n\n\n1179\n70.94\n3.8486\n-367.97\n0.6035\n1\n67.77\n15.4704\n34.867\n\n\n1180\n79.47\n7.2945\n-427.68\n0.5451\n1\n61.02\n19.7364\n33.453\n\n\n1181\n81.99\n1.7124\n-202.56\n0.7655\n0\n35.18\n40.9939\n30.841\n\n\n1182\n63.92\n0.4680\n-190.78\n0.7770\n1\n43.82\n11.9591\n19.215\n\n\n1183\n101.00\n1.8127\n-256.48\n0.7127\n1\n43.13\n30.5003\n29.393\n\n\n1184\n130.57\n1.3398\n-399.44\n0.5727\n1\n58.85\n45.2868\n46.781\n\n\n1185\n38.83\n4.9839\n-300.14\n0.6700\n1\n69.69\n-0.5837\n26.816\n\n\n1186\n118.96\n6.5125\n-447.16\n0.5260\n0\n54.00\n59.4798\n52.107\n\n\n1187\n94.93\n3.3087\n-316.04\n0.6544\n0\n73.50\n47.4667\n56.373\n\n\n1188\n80.77\n6.0262\n-364.75\n0.6067\n1\n55.07\n20.3858\n30.434\n\n\n1189\n119.25\n2.0293\n-369.04\n0.6025\n0\n66.72\n59.6251\n59.435\n\n\n1190\n116.21\n5.3601\n-439.82\n0.5332\n0\n61.63\n58.1048\n55.672\n\n\n1191\n102.41\n0.4056\n-297.91\n0.6721\n0\n41.97\n51.2027\n40.529\n\n\n1192\n77.01\n10.0928\n-556.44\n0.4190\n1\n44.80\n18.5045\n23.509\n\n\n1193\n82.38\n2.1318\n-301.18\n0.6689\n1\n54.10\n21.1892\n30.336\n\n\n1194\n59.57\n0.8035\n-239.23\n0.7296\n1\n58.87\n9.7846\n26.554\n\n\n1195\n147.02\n2.8050\n-450.67\n0.5226\n0\n63.56\n73.5112\n65.549\n\n\n1196\n96.11\n2.2743\n-185.05\n0.7827\n0\n40.80\n48.0551\n38.069\n\n\n1197\n81.14\n1.0554\n-229.19\n0.7394\n1\n61.28\n20.5686\n34.077\n\n\n1198\n45.98\n3.4124\n-252.90\n0.7162\n1\n51.98\n2.9881\n18.757\n\n\n1199\n89.26\n7.3835\n-500.45\n0.4738\n1\n85.08\n24.6317\n49.958\n\n\n1200\n86.27\n10.7969\n-639.71\n0.3375\n1\n68.29\n23.1359\n39.533\n\n\n1201\n64.94\n7.4874\n-468.74\n0.5049\n1\n81.16\n12.4711\n40.790\n\n\n1202\n159.60\n3.6651\n-463.77\n0.5097\n0\n40.41\n79.7996\n55.941\n\n\n1203\n121.82\n9.3321\n-624.95\n0.3519\n0\n60.32\n60.9118\n56.524\n\n\n1204\n61.61\n7.1728\n-374.76\n0.5969\n1\n71.73\n10.8042\n34.469\n\n\n1205\n128.35\n1.1736\n-270.01\n0.6995\n1\n63.47\n44.1747\n48.781\n\n\n1206\n126.12\n1.4037\n-286.15\n0.6837\n0\n88.55\n63.0605\n73.839\n\n\n1207\n114.75\n0.1478\n-242.05\n0.7268\n1\n65.04\n37.3729\n45.794\n\n\n1208\n109.98\n3.3312\n-341.38\n0.6296\n1\n36.35\n34.9888\n28.089\n\n\n1209\n103.62\n1.5085\n-211.90\n0.7564\n1\n89.49\n31.8119\n56.563\n\n\n1210\n115.48\n4.1904\n-404.07\n0.5682\n1\n60.44\n37.7395\n43.386\n\n\n1211\n74.18\n0.9482\n-184.24\n0.7835\n1\n61.04\n17.0923\n31.958\n\n\n1212\n83.77\n0.9029\n-293.61\n0.6764\n1\n77.07\n21.8830\n43.827\n\n\n1213\n74.95\n0.1627\n-208.92\n0.7593\n0\n46.59\n37.4749\n35.340\n\n\n1214\n95.85\n2.4776\n-271.78\n0.6977\n0\n59.24\n47.9265\n48.508\n\n\n1215\n103.67\n3.9345\n-439.43\n0.5336\n0\n52.63\n51.8332\n46.968\n\n\n1216\n115.05\n6.4020\n-489.45\n0.4846\n1\n63.99\n37.5257\n45.285\n\n\n1217\n113.23\n3.1199\n-369.46\n0.6021\n0\n36.18\n56.6132\n40.312\n\n\n1218\n136.14\n2.0554\n-312.22\n0.6581\n1\n49.90\n48.0712\n43.267\n\n\n1219\n114.93\n1.6573\n-274.39\n0.6952\n1\n52.72\n37.4664\n38.828\n\n\n1220\n131.41\n11.5195\n-750.30\n0.2292\n0\n71.89\n65.7040\n65.851\n\n\n1221\n127.44\n0.7989\n-239.67\n0.7292\n1\n46.79\n43.7180\n39.011\n\n\n1222\n85.29\n6.8645\n-430.07\n0.5427\n1\n76.40\n22.6442\n43.876\n\n\n1223\n118.78\n0.6409\n-260.33\n0.7089\n0\n48.12\n59.3913\n48.701\n\n\n1224\n111.34\n0.3818\n-179.04\n0.7885\n1\n57.37\n35.6689\n40.457\n\n\n1225\n102.98\n1.2503\n-241.25\n0.7276\n0\n52.73\n51.4897\n46.825\n\n\n1226\n77.42\n5.1032\n-301.70\n0.6684\n0\n73.56\n38.7077\n51.413\n\n\n1227\n114.70\n2.5995\n-341.09\n0.6299\n1\n59.17\n37.3498\n42.440\n\n\n1228\n101.59\n2.7967\n-283.23\n0.6865\n1\n38.05\n30.7966\n26.665\n\n\n1229\n91.13\n4.7299\n-325.92\n0.6447\n1\n46.89\n25.5646\n28.723\n\n\n1230\n123.06\n0.5735\n-302.21\n0.6679\n1\n57.11\n41.5312\n43.650\n\n\n1231\n124.81\n1.2195\n-312.93\n0.6574\n1\n75.93\n42.4041\n54.871\n\n\n1232\n121.84\n5.5705\n-539.69\n0.4354\n0\n51.99\n60.9195\n51.780\n\n\n1233\n34.72\n2.7092\n-183.27\n0.7844\n1\n58.28\n-2.6380\n19.141\n\n\n1234\n77.57\n1.6037\n-255.20\n0.7140\n1\n37.76\n18.7835\n19.652\n\n\n1235\n123.43\n3.0123\n-382.26\n0.5896\n1\n61.41\n41.7154\n46.203\n\n\n1236\n81.37\n2.4969\n-292.87\n0.6771\n1\n48.24\n20.6833\n26.707\n\n\n1237\n110.21\n3.6494\n-385.30\n0.5866\n0\n43.41\n55.1067\n43.577\n\n\n1238\n104.57\n7.5039\n-535.39\n0.4396\n1\n41.52\n32.2864\n29.495\n\n\n1239\n127.69\n0.2197\n-295.07\n0.6749\n1\n70.37\n43.8425\n52.523\n\n\n1240\n82.24\n0.9407\n-223.93\n0.7446\n0\n58.69\n41.1204\n44.311\n\n\n1241\n98.55\n0.8043\n-161.08\n0.8061\n1\n60.80\n29.2775\n38.768\n\n\n1242\n108.62\n6.1239\n-509.62\n0.4648\n0\n51.47\n54.3115\n47.718\n\n\n1243\n131.82\n2.3127\n-311.07\n0.6593\n0\n62.63\n65.9082\n60.690\n\n\n1244\n95.57\n15.0000\n-831.16\n0.1500\n0\n66.94\n47.7827\n52.815\n\n\n1245\n107.26\n1.6931\n-266.85\n0.7026\n1\n63.45\n33.6301\n42.755\n\n\n1246\n66.43\n5.9780\n-417.53\n0.5550\n0\n38.66\n33.2144\n28.392\n\n\n1247\n115.83\n2.2155\n-374.07\n0.5976\n1\n48.30\n37.9131\n36.565\n\n\n1248\n105.17\n4.0364\n-349.52\n0.6216\n1\n41.71\n32.5852\n29.773\n\n\n1249\n115.98\n1.3320\n-295.16\n0.6748\n1\n46.34\n37.9913\n35.492\n\n\n1250\n89.73\n5.8974\n-490.69\n0.4834\n1\n61.20\n24.8666\n36.478\n\n\n1251\n142.13\n3.7472\n-397.87\n0.5743\n1\n71.57\n51.0670\n57.322\n\n\n1252\n96.50\n5.7659\n-452.82\n0.5205\n0\n79.67\n48.2522\n60.335\n\n\n1253\n103.03\n1.5944\n-262.81\n0.7065\n1\n31.12\n31.5142\n23.127\n\n\n1254\n97.36\n10.4556\n-594.92\n0.3813\n1\n61.05\n28.6790\n38.567\n\n\n1255\n121.16\n6.6763\n-569.99\n0.4057\n0\n45.70\n60.5788\n48.002\n\n\n1256\n80.79\n0.1470\n-201.25\n0.7668\n0\n24.26\n40.3944\n24.274\n\n\n1257\n105.04\n2.3215\n-224.45\n0.7441\n0\n55.55\n52.5183\n49.023\n\n\n1258\n114.36\n1.9378\n-275.26\n0.6943\n1\n55.42\n37.1821\n40.208\n\n\n1259\n68.87\n0.1980\n-217.47\n0.7509\n1\n54.25\n14.4345\n26.574\n\n\n1260\n105.69\n0.7901\n-258.73\n0.7105\n0\n40.11\n52.8465\n40.405\n\n\n1261\n85.15\n0.4520\n-245.64\n0.7233\n1\n67.76\n22.5775\n38.917\n\n\n1262\n135.72\n1.1945\n-266.99\n0.7024\n0\n75.07\n67.8601\n68.893\n\n\n1263\n117.62\n4.0553\n-397.80\n0.5743\n0\n68.16\n58.8112\n59.791\n\n\n1264\n56.87\n2.1194\n-213.07\n0.7552\n1\n47.95\n8.4358\n19.563\n\n\n1265\n122.98\n7.2555\n-485.64\n0.4883\n0\n53.06\n61.4911\n52.718\n\n\n1266\n105.44\n2.7618\n-265.78\n0.7036\n1\n40.11\n32.7218\n28.935\n\n\n1267\n85.97\n3.0305\n-407.85\n0.5645\n1\n55.37\n22.9834\n32.087\n\n\n1268\n91.11\n4.7726\n-340.33\n0.6306\n0\n51.26\n45.5552\n42.608\n\n\n1269\n68.20\n2.7709\n-267.22\n0.7022\n0\n57.70\n34.0982\n39.745\n\n\n1270\n109.65\n8.6310\n-529.20\n0.4457\n1\n39.03\n34.8275\n29.520\n\n\n1271\n59.04\n9.4367\n-537.63\n0.4374\n0\n48.49\n29.5185\n31.888\n\n\n1272\n96.49\n5.2285\n-370.73\n0.6008\n0\n85.03\n48.2467\n63.390\n\n\n1273\n111.38\n2.7091\n-374.41\n0.5972\n0\n77.48\n55.6897\n63.327\n\n\n1274\n102.08\n4.3414\n-362.07\n0.6093\n0\n80.95\n51.0423\n62.654\n\n\n1275\n121.48\n2.0448\n-386.56\n0.5853\n0\n63.79\n60.7397\n58.400\n\n\n1276\n101.26\n8.6807\n-545.90\n0.4293\n0\n44.21\n50.6319\n41.484\n\n\n1277\n157.72\n1.2089\n-259.46\n0.7098\n1\n32.65\n58.8618\n39.582\n\n\n1278\n78.51\n3.8518\n-250.42\n0.7186\n1\n43.29\n19.2567\n23.076\n\n\n1279\n138.48\n1.9836\n-311.86\n0.6585\n1\n78.45\n49.2390\n60.201\n\n\n1280\n59.64\n1.4840\n-230.69\n0.7380\n1\n47.91\n9.8192\n20.331\n\n\n1281\n73.07\n1.8637\n-155.13\n0.8119\n0\n54.57\n36.5335\n39.348\n\n\n1282\n77.47\n3.6848\n-259.40\n0.7099\n1\n66.49\n18.7330\n36.000\n\n\n1283\n61.97\n1.6760\n-218.48\n0.7499\n0\n59.85\n30.9861\n39.201\n\n\n1284\n137.12\n3.9849\n-450.22\n0.5230\n1\n44.65\n48.5587\n40.553\n\n\n1285\n125.84\n0.9243\n-319.12\n0.6514\n0\n53.34\n62.9213\n53.692\n\n\n1286\n134.28\n1.3213\n-280.01\n0.6897\n1\n77.40\n47.1408\n58.408\n\n\n1287\n84.78\n1.9509\n-290.81\n0.6791\n1\n51.98\n22.3885\n29.812\n\n\n1288\n102.14\n4.7423\n-411.09\n0.5613\n0\n74.18\n51.0700\n58.816\n\n\n1289\n127.96\n2.2697\n-403.08\n0.5692\n1\n63.83\n43.9813\n48.874\n\n\n1290\n126.51\n1.6247\n-281.73\n0.6880\n1\n62.13\n43.2566\n47.491\n\n\n1291\n114.00\n3.3044\n-435.40\n0.5375\n1\n66.33\n37.0017\n46.319\n\n\n1292\n103.95\n1.8029\n-341.40\n0.6296\n1\n59.03\n31.9768\n39.298\n\n\n1293\n70.90\n6.9013\n-494.58\n0.4796\n1\n60.57\n15.4478\n30.750\n\n\n1294\n107.74\n1.4699\n-305.87\n0.6644\n1\n55.08\n33.8711\n38.125\n\n\n1295\n95.54\n0.4190\n-193.46\n0.7744\n1\n69.41\n27.7688\n42.816\n\n\n1296\n83.64\n3.1368\n-360.87\n0.6105\n0\n44.50\n41.8184\n36.623\n\n\n1297\n139.40\n1.2300\n-253.92\n0.7152\n1\n47.08\n49.7020\n42.586\n\n\n1298\n82.46\n5.8841\n-389.96\n0.5820\n0\n23.43\n41.2325\n24.278\n\n\n1299\n106.07\n4.8471\n-428.44\n0.5443\n1\n68.32\n33.0360\n45.194\n\n\n1300\n112.90\n0.7141\n-251.42\n0.7177\n1\n73.61\n36.4504\n50.154\n\n\n1301\n126.28\n1.4035\n-288.09\n0.6818\n1\n57.07\n43.1394\n44.542\n\n\n1302\n109.18\n2.7473\n-319.62\n0.6509\n1\n68.00\n34.5913\n45.896\n\n\n1303\n149.33\n0.8396\n-319.53\n0.6510\n1\n83.68\n54.6652\n66.280\n\n\n1304\n111.13\n0.1983\n-229.96\n0.7387\n0\n45.40\n55.5642\n44.969\n\n\n1305\n87.79\n0.3246\n-169.57\n0.7978\n1\n74.53\n23.8940\n43.523\n\n\n1306\n102.56\n1.8126\n-283.48\n0.6863\n0\n58.62\n51.2814\n50.063\n\n\n1307\n116.73\n3.4133\n-381.76\n0.5900\n0\n69.85\n58.3641\n60.505\n\n\n1308\n45.24\n9.2482\n-535.47\n0.4395\n0\n65.11\n22.6186\n37.427\n\n\n1309\n97.61\n4.8417\n-327.73\n0.6429\n1\n72.68\n28.8054\n45.269\n\n\n1310\n101.04\n1.0344\n-273.00\n0.6965\n1\n36.06\n30.5191\n25.373\n\n\n1311\n94.03\n5.3070\n-358.45\n0.6129\n0\n91.78\n47.0175\n66.537\n\n\n1312\n101.28\n0.6916\n-259.90\n0.7094\n1\n37.62\n30.6421\n26.334\n\n\n1313\n50.20\n2.5771\n-140.23\n0.8265\n0\n53.84\n25.1024\n32.419\n\n\n1314\n108.66\n3.6440\n-408.29\n0.5641\n0\n69.89\n54.3280\n58.224\n\n\n1315\n100.08\n2.1319\n-310.69\n0.6596\n1\n51.42\n30.0379\n33.851\n\n\n1316\n87.69\n5.6519\n-405.73\n0.5666\n0\n22.53\n43.8446\n25.257\n\n\n1317\n28.39\n3.8255\n-207.81\n0.7604\n1\n66.06\n-5.8052\n21.768\n\n\n1318\n89.72\n3.5451\n-286.66\n0.6832\n1\n63.16\n24.8598\n37.591\n\n\n1319\n102.96\n0.3600\n-140.14\n0.8266\n1\n56.45\n31.4776\n37.541\n\n\n1320\n98.22\n0.6515\n-180.74\n0.7869\n0\n42.66\n49.1105\n39.731\n\n\n1321\n84.78\n0.9000\n-210.75\n0.7575\n0\n63.95\n42.3913\n48.035\n\n\n1322\n108.04\n1.9811\n-299.69\n0.6704\n1\n52.97\n34.0206\n37.005\n\n\n1323\n77.24\n1.8106\n-318.02\n0.6525\n0\n64.84\n38.6189\n46.395\n\n\n1324\n117.48\n1.0631\n-251.46\n0.7176\n0\n47.39\n58.7410\n47.915\n\n\n1325\n120.64\n1.8910\n-284.00\n0.6858\n1\n69.14\n40.3217\n49.813\n\n\n1326\n123.94\n5.6949\n-398.93\n0.5732\n0\n58.95\n61.9693\n56.344\n\n\n1327\n119.97\n1.6985\n-338.33\n0.6326\n1\n69.09\n39.9856\n49.593\n\n\n1328\n91.20\n6.2458\n-494.73\n0.4794\n0\n47.68\n45.5984\n40.592\n\n\n1329\n99.38\n5.5321\n-417.52\n0.5550\n1\n64.69\n29.6882\n41.216\n\n\n1330\n131.13\n9.5058\n-683.34\n0.2947\n0\n64.15\n65.5634\n61.360\n\n\n1331\n115.27\n5.2562\n-501.05\n0.4732\n1\n86.40\n37.6368\n58.124\n\n\n1332\n108.67\n0.4089\n-274.31\n0.6953\n1\n48.46\n34.3360\n34.617\n\n\n1333\n131.98\n1.5709\n-333.14\n0.6376\n1\n63.38\n45.9897\n49.764\n\n\n1334\n84.33\n8.1277\n-472.47\n0.5012\n0\n40.73\n42.1644\n34.670\n\n\n1335\n100.63\n6.0885\n-418.49\n0.5541\n0\n66.23\n50.3158\n53.854\n\n\n1336\n132.54\n2.9279\n-340.16\n0.6308\n1\n59.98\n46.2689\n47.982\n\n\n1337\n93.76\n5.7614\n-424.12\n0.5486\n1\n71.44\n26.8776\n43.461\n\n\n1338\n103.38\n0.8351\n-299.92\n0.6702\n0\n36.78\n51.6875\n37.847\n\n\n1339\n96.33\n2.0901\n-261.38\n0.7079\n0\n46.55\n48.1666\n41.411\n\n\n1340\n130.85\n0.4364\n-265.65\n0.7037\n1\n41.43\n45.4241\n36.928\n\n\n1341\n103.39\n2.6422\n-336.83\n0.6340\n0\n39.14\n51.6928\n39.195\n\n\n1342\n101.68\n2.0053\n-294.46\n0.6755\n0\n61.98\n50.8405\n51.729\n\n\n1343\n82.97\n3.8848\n-330.10\n0.6406\n0\n45.41\n41.4847\n36.954\n\n\n1344\n89.54\n2.9372\n-280.13\n0.6896\n0\n70.87\n44.7692\n53.336\n\n\n1345\n60.77\n4.5799\n-367.73\n0.6038\n1\n59.24\n10.3848\n27.108\n\n\n1346\n110.24\n6.7484\n-484.49\n0.4895\n0\n38.39\n55.1198\n40.723\n\n\n1347\n121.20\n4.3391\n-351.47\n0.6197\n0\n55.37\n60.5975\n53.520\n\n\n1348\n66.57\n0.3833\n-229.69\n0.7389\n1\n59.09\n13.2827\n28.675\n\n\n1349\n110.03\n1.4058\n-307.55\n0.6627\n1\n54.11\n35.0169\n38.225\n\n\n1350\n108.22\n0.2627\n-182.03\n0.7856\n1\n42.24\n34.1117\n30.946\n\n\n1351\n104.88\n2.0816\n-158.10\n0.8090\n1\n68.55\n32.4415\n44.989\n\n\n1352\n101.79\n1.2012\n-275.42\n0.6942\n1\n88.87\n30.8933\n55.689\n\n\n1353\n140.87\n0.1116\n-247.81\n0.7212\n1\n22.64\n50.4367\n29.079\n\n\n1354\n108.33\n0.8628\n-331.23\n0.6395\n1\n59.69\n34.1626\n40.920\n\n\n1355\n135.05\n0.3062\n-327.13\n0.6435\n1\n45.32\n47.5227\n40.345\n\n\n1356\n111.28\n0.5235\n-241.77\n0.7271\n1\n73.06\n35.6377\n49.380\n\n\n1357\n112.18\n9.2756\n-679.57\n0.2984\n0\n38.49\n56.0915\n41.332\n\n\n1358\n86.51\n1.1629\n-189.62\n0.7782\n0\n72.88\n43.2533\n53.616\n\n\n1359\n167.27\n4.0585\n-417.91\n0.5546\n1\n62.14\n63.6363\n59.115\n\n\n1360\n98.50\n1.0421\n-324.34\n0.6463\n1\n72.00\n29.2523\n45.138\n\n\n1361\n87.56\n1.9382\n-179.72\n0.7879\n1\n61.73\n23.7816\n36.165\n\n\n1362\n109.56\n3.0215\n-396.56\n0.5756\n0\n71.01\n54.7802\n59.119\n\n\n1363\n110.23\n3.0751\n-404.12\n0.5682\n1\n54.22\n35.1148\n38.345\n\n\n1364\n118.09\n0.5763\n-319.06\n0.6514\n0\n77.07\n59.0468\n65.009\n\n\n1365\n77.13\n6.5276\n-408.29\n0.5641\n1\n63.76\n18.5634\n34.346\n\n\n1366\n96.57\n2.2638\n-303.38\n0.6668\n0\n54.69\n48.2852\n46.120\n\n\n1367\n139.36\n4.3311\n-455.06\n0.5183\n1\n82.36\n49.6787\n62.684\n\n\n1368\n87.93\n7.4662\n-488.89\n0.4851\n1\n58.41\n23.9635\n34.374\n\n\n1369\n91.10\n3.2309\n-352.68\n0.6185\n0\n81.06\n45.5476\n59.587\n\n\n1370\n115.26\n0.9741\n-252.12\n0.7170\n1\n75.82\n37.6278\n52.084\n\n\n1371\n84.85\n5.1103\n-420.11\n0.5525\n0\n38.08\n42.4246\n33.310\n\n\n1372\n128.36\n3.3246\n-404.08\n0.5682\n1\n67.05\n44.1814\n50.821\n\n\n1373\n110.56\n0.7797\n-279.87\n0.6898\n0\n38.79\n55.2809\n41.041\n\n\n1374\n102.24\n3.6482\n-307.97\n0.6623\n1\n65.56\n31.1194\n42.527\n\n\n1375\n60.21\n3.7124\n-203.73\n0.7644\n1\n75.68\n10.1036\n36.318\n\n\n1376\n91.32\n0.7381\n-238.60\n0.7302\n1\n49.26\n25.6604\n30.127\n\n\n1377\n150.86\n3.7712\n-414.41\n0.5581\n1\n72.90\n55.4287\n60.570\n\n\n1378\n92.85\n7.3087\n-388.54\n0.5834\n0\n40.67\n46.4262\n37.068\n\n\n1379\n116.36\n0.6617\n-233.40\n0.7353\n0\n58.70\n58.1797\n54.041\n\n\n1380\n76.88\n0.2083\n-136.60\n0.8301\n1\n66.35\n18.4407\n35.754\n\n\n1381\n60.23\n3.4460\n-214.43\n0.7539\n1\n45.22\n10.1162\n18.964\n\n\n1382\n117.73\n0.8879\n-286.24\n0.6836\n1\n63.66\n38.8675\n45.864\n\n\n1383\n136.23\n5.9383\n-559.93\n0.4156\n1\n64.97\n48.1166\n51.879\n\n\n1384\n61.39\n3.8564\n-238.05\n0.7308\n1\n57.03\n10.6952\n26.024\n\n\n1385\n121.15\n0.4254\n-269.44\n0.7000\n0\n55.06\n60.5759\n53.333\n\n\n1386\n108.27\n1.1901\n-261.27\n0.7080\n1\n55.99\n34.1367\n38.793\n\n\n1387\n90.85\n2.4261\n-317.96\n0.6525\n1\n66.24\n25.4227\n39.672\n\n\n1388\n143.73\n4.3838\n-578.06\n0.3978\n0\n31.28\n71.8661\n46.213\n\n\n1389\n74.87\n6.1514\n-360.51\n0.6109\n0\n32.29\n37.4357\n27.166\n\n\n1390\n97.06\n4.1096\n-344.25\n0.6268\n0\n60.17\n48.5320\n49.379\n\n\n1391\n116.71\n2.5900\n-346.29\n0.6248\n1\n62.13\n38.3563\n44.700\n\n\n1392\n72.94\n0.2453\n-232.33\n0.7364\n1\n57.21\n16.4691\n29.421\n\n\n1393\n127.65\n3.0289\n-374.80\n0.5969\n0\n69.78\n63.8246\n63.574\n\n\n1394\n97.15\n3.9860\n-388.23\n0.5837\n1\n81.44\n28.5731\n50.129\n\n\n1395\n130.73\n2.0663\n-377.13\n0.5946\n1\n53.00\n45.3644\n43.489\n\n\n1396\n99.42\n0.7127\n-182.90\n0.7848\n0\n66.88\n49.7088\n53.877\n\n\n1397\n81.62\n0.3285\n-132.45\n0.8342\n1\n76.47\n20.8112\n42.870\n\n\n1398\n66.49\n1.9178\n-191.34\n0.7765\n0\n66.05\n33.2436\n44.018\n\n\n1399\n65.67\n8.1741\n-473.56\n0.5002\n1\n55.69\n12.8367\n26.483\n\n\n1400\n96.27\n3.7557\n-338.56\n0.6323\n0\n76.12\n48.1368\n58.245\n\n\n1401\n49.84\n7.6424\n-421.27\n0.5514\n1\n53.94\n4.9216\n20.972\n\n\n1402\n61.01\n12.8716\n-681.02\n0.2970\n1\n59.43\n10.5054\n27.284\n\n\n1403\n149.07\n1.1149\n-363.74\n0.6077\n1\n66.64\n54.5338\n56.489\n\n\n1404\n95.54\n1.2575\n-230.80\n0.7379\n0\n59.76\n47.7710\n48.714\n\n\n1405\n133.94\n3.5824\n-402.24\n0.5700\n0\n40.23\n66.9703\n48.528\n\n\n1406\n141.22\n4.9385\n-471.99\n0.5017\n0\n60.69\n70.6124\n62.265\n\n\n1407\n102.99\n9.9167\n-485.63\n0.4883\n1\n70.34\n31.4936\n45.468\n\n\n1408\n100.09\n6.8045\n-576.54\n0.3993\n0\n59.55\n50.0453\n49.889\n\n\n1409\n104.91\n4.0903\n-456.37\n0.5170\n1\n46.72\n32.4555\n32.552\n\n\n1410\n116.99\n3.2722\n-335.55\n0.6353\n1\n58.77\n38.4967\n42.866\n\n\n1411\n120.03\n3.8848\n-395.87\n0.5762\n0\n81.43\n60.0141\n68.045\n\n\n1412\n49.62\n1.6355\n-151.49\n0.8155\n1\n55.44\n4.8100\n21.767\n\n\n1413\n101.18\n0.1712\n-252.32\n0.7168\n1\n40.22\n30.5924\n27.788\n\n\n1414\n115.33\n0.2476\n-331.88\n0.6389\n1\n60.59\n37.6637\n43.427\n\n\n1415\n95.75\n2.0094\n-263.99\n0.7054\n1\n61.09\n27.8748\n38.133\n\n\n1416\n105.64\n1.2240\n-237.36\n0.7314\n1\n72.11\n32.8220\n47.231\n\n\n1417\n122.31\n0.4522\n-353.28\n0.6179\n1\n60.59\n41.1551\n45.418\n\n\n1418\n96.31\n0.9658\n-172.76\n0.7947\n1\n61.75\n28.1548\n38.669\n\n\n1419\n138.43\n1.3474\n-262.60\n0.7067\n1\n60.26\n49.2148\n49.821\n\n\n1420\n111.32\n3.9926\n-394.78\n0.5773\n1\n46.70\n35.6577\n34.364\n\n\n1421\n60.11\n2.8689\n-180.00\n0.7876\n1\n40.22\n10.0538\n16.078\n\n\n1422\n95.32\n4.6544\n-382.19\n0.5896\n1\n77.84\n27.6604\n47.555\n\n\n1423\n114.19\n2.5161\n-324.55\n0.6461\n1\n75.13\n37.0954\n51.390\n\n\n1424\n104.07\n0.8024\n-209.91\n0.7583\n1\n53.28\n32.0335\n36.053\n\n\n1425\n65.70\n8.3361\n-468.87\n0.5047\n0\n63.00\n32.8502\n42.057\n\n\n1426\n52.90\n0.3250\n-78.26\n0.8872\n1\n85.08\n6.4506\n39.594\n\n\n1427\n98.30\n1.9565\n-300.89\n0.6692\n1\n63.38\n29.1494\n40.166\n\n\n1428\n117.18\n3.4006\n-435.97\n0.5370\n0\n59.98\n58.5913\n55.004\n\n\n1429\n82.30\n2.2562\n-247.88\n0.7211\n0\n70.74\n41.1500\n51.198\n\n\n1430\n109.44\n0.6717\n-143.24\n0.8236\n1\n36.85\n34.7210\n28.220\n\n\n1431\n114.52\n3.5325\n-349.94\n0.6212\n1\n60.02\n37.2595\n42.870\n\n\n1432\n124.37\n1.9658\n-317.11\n0.6533\n1\n61.56\n42.1828\n46.554\n\n\n1433\n114.69\n9.7288\n-731.17\n0.2479\n0\n84.78\n57.3432\n68.432\n\n\n1434\n106.13\n2.6632\n-347.06\n0.6240\n1\n59.83\n33.0660\n40.370\n\n\n1435\n60.85\n3.9445\n-231.97\n0.7367\n1\n86.49\n10.4250\n42.664\n\n\n1436\n87.30\n1.4164\n-249.89\n0.7192\n1\n30.69\n23.6484\n18.397\n\n\n1437\n121.46\n5.4408\n-468.01\n0.5056\n1\n73.10\n40.7285\n52.303\n\n\n1438\n111.30\n8.7379\n-576.72\n0.3991\n0\n61.90\n55.6483\n54.423\n\n\n1439\n77.55\n2.6480\n-289.75\n0.6801\n1\n66.81\n18.7762\n36.208\n\n\n1440\n107.98\n8.0956\n-637.84\n0.3393\n1\n50.09\n33.9876\n35.347\n\n\n1441\n97.65\n3.1464\n-272.59\n0.6969\n1\n63.80\n28.8254\n40.218\n\n\n1442\n131.61\n0.6629\n-325.39\n0.6452\n1\n51.92\n45.8039\n43.127\n\n\n1443\n99.15\n6.1865\n-521.42\n0.4533\n1\n37.44\n29.5749\n25.622\n\n\n1444\n90.30\n1.4551\n-273.15\n0.6964\n0\n62.49\n45.1479\n48.774\n\n\n1445\n93.49\n4.5374\n-367.88\n0.6036\n1\n49.62\n26.7443\n30.949\n\n\n1446\n78.06\n5.4835\n-381.29\n0.5905\n0\n62.87\n39.0321\n45.508\n\n\n1447\n132.32\n6.1476\n-512.65\n0.4619\n1\n75.56\n46.1594\n56.803\n\n\n1448\n104.13\n3.3563\n-304.39\n0.6658\n1\n79.36\n32.0648\n50.936\n\n\n1449\n84.92\n6.2645\n-456.73\n0.5166\n0\n45.73\n42.4599\n37.690\n\n\n1450\n109.97\n0.8039\n-255.48\n0.7137\n0\n67.85\n54.9825\n57.436\n\n\n1451\n121.47\n3.6955\n-453.82\n0.5195\n1\n43.67\n40.7369\n35.535\n\n\n1452\n89.45\n1.4880\n-228.08\n0.7405\n1\n74.74\n24.7261\n44.116\n\n\n1453\n92.36\n0.3447\n-130.29\n0.8363\n1\n34.90\n26.1814\n22.241\n\n\n1454\n98.52\n5.5683\n-362.73\n0.6087\n1\n55.96\n29.2601\n36.000\n\n\n1455\n49.95\n1.0557\n-98.19\n0.8677\n0\n67.33\n24.9766\n40.039\n\n\n1456\n103.89\n5.2150\n-375.88\n0.5958\n0\n38.62\n51.9430\n39.041\n\n\n1457\n101.06\n5.0892\n-360.58\n0.6108\n0\n47.33\n50.5320\n43.202\n\n\n1458\n93.45\n1.9884\n-197.22\n0.7707\n1\n55.02\n26.7245\n34.016\n\n\n1459\n74.47\n3.3791\n-341.58\n0.6294\n1\n66.44\n17.2351\n35.119\n\n\n1460\n126.63\n3.4957\n-241.03\n0.7278\n1\n53.61\n43.3170\n42.670\n\n\n1461\n88.56\n4.6519\n-347.78\n0.6233\n1\n45.66\n24.2801\n27.290\n\n\n1462\n103.38\n3.9521\n-232.86\n0.7358\n0\n68.28\n51.6913\n55.804\n\n\n1463\n152.82\n2.3427\n-291.41\n0.6785\n1\n36.57\n56.4098\n40.422\n\n\n1464\n85.20\n1.8593\n-193.50\n0.7744\n1\n48.09\n22.6021\n27.718\n\n\n1465\n83.28\n2.3525\n-296.30\n0.6737\n1\n73.56\n21.6408\n41.688\n\n\n1466\n103.85\n2.4320\n-277.60\n0.6920\n0\n64.30\n51.9235\n53.671\n\n\n1467\n92.87\n10.4411\n-607.93\n0.3686\n0\n56.31\n46.4326\n45.984\n\n\n1468\n87.68\n0.1469\n-185.48\n0.7822\n1\n67.32\n23.8413\n39.384\n\n\n1469\n110.24\n1.8032\n-151.17\n0.8158\n1\n47.89\n35.1221\n34.741\n\n\n1470\n105.73\n0.3302\n-205.34\n0.7628\n1\n47.58\n32.8670\n33.279\n\n\n1471\n73.13\n4.7385\n-334.02\n0.6368\n1\n81.50\n16.5672\n43.322\n\n\n1472\n65.48\n0.4220\n-143.07\n0.8238\n1\n63.05\n12.7406\n30.621\n\n\n1473\n114.96\n0.9344\n-361.10\n0.6103\n0\n82.26\n57.4779\n67.068\n\n\n1474\n79.01\n5.0193\n-400.63\n0.5716\n1\n60.29\n19.5066\n32.907\n\n\n1475\n76.11\n3.3257\n-364.81\n0.6066\n1\n53.03\n18.0572\n27.943\n\n\n1476\n130.91\n3.3221\n-360.71\n0.6107\n1\n50.50\n45.4527\n42.114\n\n\n1477\n101.90\n5.4273\n-418.92\n0.5537\n1\n58.99\n30.9498\n38.686\n\n\n1478\n86.51\n1.3195\n-282.36\n0.6874\n1\n39.16\n23.2553\n22.998\n\n\n1479\n119.34\n5.2069\n-369.83\n0.6017\n0\n55.02\n59.6692\n52.793\n\n\n1480\n132.61\n8.9315\n-573.51\n0.4023\n0\n71.53\n66.3038\n65.986\n\n\n1481\n124.63\n1.0750\n-268.27\n0.7012\n0\n51.00\n62.3139\n52.009\n\n\n1482\n74.71\n1.8352\n-190.82\n0.7770\n0\n55.82\n37.3535\n40.532\n\n\n1483\n84.85\n2.6178\n-331.07\n0.6397\n0\n67.31\n42.4246\n49.971\n\n\n1484\n107.92\n3.0717\n-357.25\n0.6140\n1\n58.33\n33.9591\n40.027\n\n\n1485\n65.88\n2.1292\n-194.63\n0.7733\n1\n87.77\n12.9414\n44.829\n\n\n1486\n90.45\n3.3388\n-369.36\n0.6022\n1\n55.05\n25.2254\n33.178\n\n\n1487\n99.64\n1.4130\n-120.25\n0.8461\n1\n63.60\n29.8213\n40.671\n\n\n1488\n98.36\n11.3850\n-585.85\n0.3902\n0\n57.51\n49.1823\n48.236\n\n\n1489\n105.59\n0.5769\n-177.95\n0.7896\n1\n56.27\n32.7929\n38.188\n\n\n1490\n104.58\n11.5159\n-667.09\n0.3107\n0\n60.40\n52.2898\n51.656\n\n\n1491\n122.27\n11.2136\n-763.94\n0.2158\n1\n50.53\n41.1333\n39.671\n\n\n1492\n98.67\n3.5710\n-284.40\n0.6854\n1\n37.57\n29.3366\n25.557\n\n\n1493\n79.25\n2.2014\n-175.22\n0.7923\n1\n41.46\n19.6268\n22.245\n\n\n1494\n96.97\n8.1542\n-504.23\n0.4701\n0\n58.87\n48.4871\n48.614\n\n\n1495\n94.76\n0.5269\n-235.40\n0.7333\n0\n47.98\n47.3793\n41.779\n\n\n1496\n100.99\n1.3285\n-225.13\n0.7434\n1\n63.58\n30.4949\n41.047\n\n\n1497\n137.02\n0.1771\n-257.46\n0.7118\n0\n61.81\n68.5124\n61.707\n\n\n1498\n114.17\n5.9799\n-506.99\n0.4674\n0\n84.58\n57.0833\n68.170\n\n\n1499\n144.74\n10.3824\n-735.27\n0.2439\n0\n25.50\n72.3698\n43.210\n\n\n1500\n127.85\n6.8681\n-519.44\n0.4552\n1\n32.70\n43.9256\n31.101\n\n\n1501\n144.85\n3.3618\n-374.55\n0.5971\n1\n59.69\n52.4259\n51.325\n\n\n1502\n65.89\n4.6648\n-205.35\n0.7628\n0\n56.54\n32.9431\n38.426\n\n\n1503\n82.31\n7.5173\n-521.06\n0.4536\n0\n39.35\n41.1570\n33.310\n\n\n1504\n86.09\n4.0348\n-362.19\n0.6092\n0\n41.49\n43.0464\n35.608\n\n\n1505\n92.25\n2.9362\n-234.31\n0.7344\n1\n53.43\n26.1240\n32.768\n\n\n1506\n90.60\n1.1638\n-222.35\n0.7461\n1\n38.94\n25.2978\n24.039\n\n\n1507\n111.46\n4.9296\n-388.44\n0.5835\n0\n48.31\n55.7316\n46.726\n\n\n1508\n68.47\n4.6256\n-365.96\n0.6055\n1\n49.60\n14.2356\n23.808\n\n\n1509\n86.81\n0.1660\n-196.91\n0.7710\n1\n80.64\n23.4067\n46.726\n\n\n1510\n86.08\n4.8458\n-349.74\n0.6214\n1\n50.38\n23.0398\n29.272\n\n\n1511\n90.64\n9.2606\n-598.62\n0.3777\n0\n75.25\n45.3195\n56.148\n\n\n1512\n84.89\n5.0541\n-311.29\n0.6590\n0\n43.81\n42.4450\n36.589\n\n\n1513\n130.08\n1.7178\n-392.31\n0.5797\n0\n40.02\n65.0391\n47.306\n\n\n1514\n119.22\n4.7200\n-385.24\n0.5866\n0\n44.14\n59.6109\n46.558\n\n\n1515\n105.96\n9.1560\n-569.90\n0.4058\n0\n72.18\n52.9794\n58.759\n\n\n1516\n64.62\n10.6843\n-622.37\n0.3544\n0\n53.27\n32.3121\n36.205\n\n\n1517\n173.34\n1.4267\n-318.46\n0.6520\n0\n63.15\n86.6722\n72.816\n\n\n1518\n123.38\n4.1609\n-404.31\n0.5680\n1\n50.36\n41.6878\n39.890\n\n\n1519\n130.85\n2.4649\n-379.96\n0.5918\n1\n52.35\n45.4236\n43.151\n\n\n1520\n52.72\n4.3873\n-252.01\n0.7171\n1\n79.72\n6.3577\n36.489\n\n\n1521\n94.43\n0.8838\n-233.81\n0.7349\n1\n65.30\n27.2169\n40.157\n\n\n1522\n119.20\n3.1014\n-376.57\n0.5951\n1\n55.88\n39.6016\n41.846\n\n\n1523\n109.70\n0.2829\n-264.89\n0.7045\n1\n71.75\n34.8494\n48.185\n\n\n1524\n115.23\n2.9789\n-320.60\n0.6499\n1\n80.28\n37.6142\n54.621\n\n\n1525\n114.76\n4.7880\n-474.54\n0.4992\n1\n66.72\n37.3815\n46.759\n\n\n1526\n89.12\n3.6482\n-316.82\n0.6536\n1\n66.21\n24.5607\n39.162\n\n\n1527\n93.73\n4.3014\n-368.35\n0.6032\n1\n71.16\n26.8654\n43.295\n\n\n1528\n76.84\n0.4375\n-188.28\n0.7795\n1\n71.94\n18.4216\n38.931\n\n\n1529\n127.19\n7.1289\n-505.65\n0.4687\n0\n82.84\n63.5929\n70.888\n\n\n1530\n51.40\n5.6998\n-309.75\n0.6606\n1\n64.59\n5.7005\n27.490\n\n\n1531\n92.98\n2.4837\n-297.91\n0.6721\n1\n81.49\n26.4922\n48.970\n\n\n1532\n120.30\n1.1931\n-262.07\n0.7072\n1\n68.53\n40.1510\n49.371\n\n\n1533\n94.81\n4.3445\n-446.03\n0.5271\n0\n75.71\n47.4037\n57.596\n\n\n1534\n136.27\n0.7850\n-352.07\n0.6191\n1\n70.72\n48.1345\n55.166\n\n\n1535\n121.04\n0.3413\n-251.47\n0.7176\n0\n69.61\n60.5187\n61.593\n\n\n1536\n78.36\n4.7896\n-272.34\n0.6972\n1\n62.39\n19.1783\n33.914\n\n\n1537\n98.50\n11.3143\n-707.64\n0.2710\n0\n66.85\n49.2515\n53.600\n\n\n1538\n100.29\n3.9475\n-438.97\n0.5340\n1\n63.93\n30.1441\n41.044\n\n\n1539\n106.73\n0.8506\n-243.17\n0.7257\n1\n47.58\n33.3639\n33.560\n\n\n1540\n86.80\n6.9843\n-452.43\n0.5208\n1\n57.22\n23.3980\n33.377\n\n\n1541\n84.57\n3.3650\n-374.68\n0.5970\n1\n62.24\n22.2866\n35.604\n\n\n1542\n93.44\n1.6210\n-251.72\n0.7174\n1\n53.17\n26.7203\n32.959\n\n\n1543\n122.81\n5.0090\n-459.94\n0.5135\n1\n70.44\n41.4043\n51.171\n\n\n1544\n128.09\n7.5670\n-550.19\n0.4251\n0\n39.23\n64.0451\n46.289\n\n\n1545\n84.91\n4.6163\n-408.01\n0.5643\n1\n60.57\n22.4560\n34.747\n\n\n1546\n101.38\n1.1172\n-276.61\n0.6930\n1\n27.90\n30.6915\n20.823\n\n\n1547\n74.98\n9.3762\n-558.92\n0.4166\n0\n65.51\n37.4918\n46.131\n\n\n1548\n81.05\n8.1524\n-430.89\n0.5419\n1\n61.79\n20.5228\n34.340\n\n\n1549\n84.71\n7.7896\n-506.73\n0.4677\n0\n55.52\n42.3571\n43.211\n\n\n1550\n67.08\n0.1148\n-157.26\n0.8099\n1\n74.93\n13.5410\n37.850\n\n\n1551\n49.81\n11.9079\n-667.87\n0.3099\n0\n66.26\n24.9073\n39.388\n\n\n1552\n119.20\n11.0556\n-678.45\n0.2995\n0\n48.87\n59.6000\n49.248\n\n\n1553\n110.14\n6.3139\n-504.02\n0.4703\n1\n87.56\n35.0720\n57.322\n\n\n1554\n79.21\n12.9917\n-633.91\n0.3431\n1\n72.88\n19.6036\n40.138\n\n\n1555\n123.95\n1.1196\n-242.95\n0.7260\n1\n66.08\n41.9759\n49.013\n\n\n1556\n145.27\n4.3990\n-485.57\n0.4884\n0\n48.69\n72.6340\n56.576\n\n\n1557\n36.25\n7.7987\n-459.33\n0.5141\n0\n64.66\n18.1248\n34.608\n\n\n1558\n128.76\n4.8412\n-468.90\n0.5047\n1\n66.66\n44.3782\n50.713\n\n\n1559\n130.70\n3.1896\n-389.14\n0.5828\n1\n68.34\n45.3487\n52.223\n\n\n1560\n103.80\n0.8277\n-287.33\n0.6825\n1\n59.87\n31.9013\n39.733\n\n\n1561\n86.92\n4.5739\n-390.27\n0.5817\n1\n66.37\n23.4615\n38.623\n\n\n1562\n72.46\n2.0148\n-202.15\n0.7659\n1\n62.86\n16.2301\n32.501\n\n\n1563\n78.01\n6.6144\n-348.41\n0.6227\n0\n52.76\n39.0034\n39.726\n\n\n1564\n84.08\n10.8556\n-665.79\n0.3119\n0\n76.50\n42.0412\n54.991\n\n\n1565\n47.35\n0.7121\n-150.83\n0.8162\n1\n55.29\n3.6759\n21.034\n\n\n1566\n83.84\n10.2873\n-691.80\n0.2865\n0\n61.85\n41.9218\n46.569\n\n\n1567\n124.67\n0.6752\n-236.89\n0.7319\n1\n48.73\n42.3349\n39.326\n\n\n1568\n81.13\n4.3208\n-303.55\n0.6666\n1\n51.94\n20.5637\n28.751\n\n\n1569\n139.13\n0.9521\n-270.57\n0.6989\n1\n64.40\n49.5651\n52.381\n\n\n1570\n98.75\n1.3223\n-249.30\n0.7197\n1\n47.97\n29.3744\n31.508\n\n\n1571\n102.78\n4.5576\n-414.79\n0.5577\n0\n55.85\n51.3879\n48.547\n\n\n1572\n111.89\n1.6591\n-391.78\n0.5802\n1\n38.36\n35.9434\n29.778\n\n\n1573\n76.52\n7.4887\n-420.83\n0.5518\n1\n62.07\n18.2625\n33.215\n\n\n1574\n80.65\n4.6212\n-285.25\n0.6845\n1\n47.60\n20.3244\n26.142\n\n\n1575\n89.41\n4.5008\n-326.96\n0.6437\n1\n59.11\n24.7055\n35.199\n\n\n1576\n144.32\n0.5237\n-341.34\n0.6296\n1\n38.96\n52.1610\n39.363\n\n\n1577\n110.66\n0.5553\n-281.72\n0.6880\n1\n82.69\n35.3319\n54.695\n\n\n1578\n97.64\n0.3851\n-215.78\n0.7526\n1\n44.70\n28.8191\n29.329\n\n\n\n\n\n\nVerify all relationships with plots and models.\nIs there a relationship between unobserved risk factors and malaria risk? Yep.\n\nggplot(iv_data, aes(x = risk_factors, y = malaria_risk)) +\n  geom_point(aes(color = as.factor(net))) +\n  geom_smooth(method = \"lm\")\n\n\n\n\n\n\n\n\nIs there a relationship between distance to town hall and net use? Yeah, those who live further away are less likely to use a net.\n\nggplot(iv_data, aes(x = distance, fill = as.factor(net))) +\n  geom_density(alpha = 0.7)\n\n\n\n\n\n\n\n\nIs there a relationship between net use and malaria risk? Haha, yeah, that’s a huge highly significant effect. Probably too perfect. We could increase those error bars if we tinker with some of the numbers in the code, but for the sake of this example, we’ll leave them like this.\n\nggplot(iv_data, aes(x = as.factor(net), y = malaria_risk, color = as.factor(net))) +\n  stat_summary(geom = \"pointrange\", fun.data = \"mean_se\")\n\n\n\n\n\n\n\n\nTry it out!\nCool, let’s see if this works. Remember, we can’t actually use the risk_factors column in real life, but we will here just to make sure the effect we built in exists. Here’s the true effect, where using a net causes a decrease of 10.9 malaria risk points\n\nmodel_forbidden <- lm(malaria_risk ~ net + risk_factors, data = iv_data)\ntidy(model_forbidden)\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n20.6197\n0.8728\n23.63\n0\n\n\nnet\n-10.8331\n0.3996\n-27.11\n0\n\n\nrisk_factors\n0.2828\n0.0079\n35.89\n0\n\n\n\n\n\n\nSince we can’t actually use that column, we’ll use distance to town hall as an instrument. We should run this set of models:\n\\[\n\\begin{aligned}\n\\widehat{\\text{Net}} &= \\gamma_0 + \\gamma_1 \\text{Distance to town hall} + \\omega \\\\\\\\\n\\text{Malaria risk} &= \\beta_0 + \\beta_1 \\widehat{\\text{Net}} + \\epsilon\n\\end{aligned}\n\\]\nWe’ll run this 2SLS model with the iv_robust() function from the estimatr package:\n\nlibrary(estimatr)\n\nmodel_iv <- iv_robust(malaria_risk ~ net | distance, data = iv_data)\ntidy(model_iv)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\nconf.low\nconf.high\ndf\noutcome\n\n\n\n\n(Intercept)\n47.202\n1.576\n29.95\n0e+00\n44.11\n50.294\n1576\nmalaria_risk\n\n\nnet\n-8.236\n2.474\n-3.33\n9e-04\n-13.09\n-3.385\n1576\nmalaria_risk\n\n\n\n\n\n\n…and it’s relatively close, I guess, at −8.2. Getting instrumental variables to find exact causal effects is tricky, but I’m fine with this for simulated data.\nSave the data.\nThe data works well enough, so we’ll get rid of the extra intermediate columns and save it as a CSV file. We’ll keep the forbidden risk_factors column just for fun.\n\niv_data_final <- iv_data %>%\n  select(id, net, distance, malaria_risk, risk_factors)\n\nhead(iv_data_final)\n\n\n\n\n\nid\nnet\ndistance\nmalaria_risk\nrisk_factors\n\n\n\n\n1\n1\n3.983\n36.46\n69.82\n\n\n2\n1\n2.141\n49.49\n106.94\n\n\n3\n0\n5.466\n56.38\n127.11\n\n\n4\n0\n9.606\n20.40\n41.36\n\n\n5\n0\n4.661\n40.90\n110.73\n\n\n6\n1\n2.293\n51.28\n112.65\n\n\n\n\n\n\n\n# Save data\nwrite_csv(iv_data_final, \"data/bed_nets_iv.csv\")"
  },
  {
    "objectID": "slides/synthetic-data.html#use-synthetic-data-packages",
    "href": "slides/synthetic-data.html#use-synthetic-data-packages",
    "title": "The ultimate guide to generating synthetic data for causal inference",
    "section": "Use synthetic data packages",
    "text": "Use synthetic data packages\nThere are several R packages that let you generate synthetic data with built-in relationships in a more automatic way. They all work a little differently, and if you’re interested in trying them out, make sure you check the documentation for details.\n\nfabricatr\nThe fabricatr package is a very powerful package for simulating data. It was invented specifically for using in preregistered studies, so it can handle a ton of different data structures like panel data and time series data. You can build in causal effects and force columns to be correlated with each other.\nfabricatr has exceptionally well-written documentation with like a billion detailed examples (see the right sidebar here). This is a gold standard package and you should most definitely check it out.\nHere’s a simple example of simulating a bunch of voters and making older ones more likely to vote:\n\nlibrary(fabricatr)\n\nset.seed(1234)\n\nfake_voters <- fabricate(\n  # Make 100 people\n  N = 100,\n  # Age uniformly distributed between 18 and 85\n  age = round(runif(N, 18, 85)),\n  # Older people more likely to vote\n  turnout = draw_binary(prob = ifelse(age < 40, 0.4, 0.7), N = N)\n)\n\nhead(fake_voters)\n\n\n\n\n\nID\nage\nturnout\n\n\n\n\n001\n26\n0\n\n\n002\n60\n1\n\n\n003\n59\n1\n\n\n004\n60\n1\n\n\n005\n76\n1\n\n\n006\n61\n1\n\n\n\n\n\n\nAnd here’s an example of country-year panel data where there are country-specific and year-specific effects on GDP:\n\nset.seed(1234)\n\npanel_global_data <- fabricate(\n  years = add_level(\n    N = 10,\n    ts_year = 0:9,\n    year_shock = rnorm(N, 0, 0.3)\n  ),\n  countries = add_level(\n    N = 5,\n    base_gdp = runif(N, 15, 22),\n    growth_units = runif(N, 0.25, 0.5),\n    growth_error = runif(N, 0.15, 0.5),\n    nest = FALSE\n  ),\n  country_years = cross_levels(\n    by = join_using(years, countries),\n    gdp_measure = base_gdp + year_shock + (ts_year * growth_units) +\n      rnorm(N, sd = growth_error)\n  )\n) %>%\n  # Scale up the years to be actual years instead of 1, 2, 3, etc.\n  mutate(year = ts_year + 2010)\n\nhead(panel_global_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyears\nts_year\nyear_shock\ncountries\nbase_gdp\ngrowth_units\ngrowth_error\ncountry_years\ngdp_measure\nyear\n\n\n\n\n01\n0\n-0.3621\n1\n17.22\n0.4526\n0.3096\n01\n17.07\n2010\n\n\n02\n1\n0.0832\n1\n17.22\n0.4526\n0.3096\n02\n17.55\n2011\n\n\n03\n2\n0.3253\n1\n17.22\n0.4526\n0.3096\n03\n18.72\n2012\n\n\n04\n3\n-0.7037\n1\n17.22\n0.4526\n0.3096\n04\n17.99\n2013\n\n\n05\n4\n0.1287\n1\n17.22\n0.4526\n0.3096\n05\n19.25\n2014\n\n\n06\n5\n0.1518\n1\n17.22\n0.4526\n0.3096\n06\n19.63\n2015\n\n\n\n\n\n\n\nggplot(panel_global_data, aes(x = year, y = gdp_measure, color = countries)) +\n  geom_line() +\n  labs(x = \"Year\", y = \"Log GDP\", color = \"Countries\")\n\n\n\n\n\n\n\n\nThat all just scratches the surface of what fabricatr can do. Again, check the examples and documentation and play around with it to see what else it can do.\n\n\nwakefield\nThe wakefield package is jokingly named after Andrew Wakefield, the British researcher who invented fake data to show that the MMR vaccine causes autism. This package lets you quickly generate random fake datasets. It has a bunch of pre-set column possibilities, like age, color, Likert scales, political parties, religion, and so on, and you can also use standard R functions like rnorm(), rbinom(), or rbeta(). It also lets you create repeated measures (1st grade score, 2nd grade score, 3rd grade score, etc.) and build correlations between variables.\nYou should definitely look at the documentation to see a ton of examples of how it all works. Here’s a basic example:\n\nlibrary(wakefield)\n\nset.seed(1234)\n\nwakefield_data <- r_data_frame(\n  n = 500,\n  id,\n  treatment = rbinom(1, 0.3),  # 30% chance of being in treatment\n  outcome = rnorm(mean = 500, sd = 100),\n  race,\n  age = age(x = 18:45),\n  sex = sex_inclusive(),\n  survey_question_1 = likert(),\n  survey_question_2 = likert()\n)\nhead(wakefield_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nID\ntreatment\noutcome\nRace\nage\nsex\nsurvey_question_1\nsurvey_question_2\n\n\n\n\n001\n0\n543.7\nWhite\n35\nIntersex\nDisagree\nAgree\n\n\n002\n0\n606.0\nWhite\n38\nMale\nDisagree\nStrongly Disagree\n\n\n003\n0\n545.2\nWhite\n38\nFemale\nNeutral\nStrongly Agree\n\n\n004\n0\n566.3\nBlack\n45\nFemale\nStrongly Agree\nDisagree\n\n\n005\n1\n386.4\nBlack\n41\nMale\nDisagree\nAgree\n\n\n006\n0\n463.0\nHispanic\n20\nFemale\nDisagree\nAgree\n\n\n\n\n\n\n\n\nfaux\nThe faux package does some really neat things. We can create data that has built-in correlations without going through all the math. For instance, let’s say we have 3 variables A, B, and C that are normally distributed with these parameters:\n\nA: mean = 10, sd = 2\nB: mean = 5, sd = 1\nC: mean = 20, sd = 5\n\nWe want A to correlate with B at r = 0.8 (highly correlated), A to correlate with C at r = 0.3 (less correlated), and B to correlate with C at r = 0.4 (moderately correlated). Here’s how to create that data with faux:\n\nlibrary(faux)\n\nset.seed(1234)\n\nfaux_data <- rnorm_multi(n = 100,\n                         mu = c(10, 5, 20),\n                         sd = c(2, 1, 5),\n                         r = c(0.8, 0.3, 0.4),\n                         varnames = c(\"A\", \"B\", \"C\"),\n                         empirical = FALSE)\nhead(faux_data)\n\n\n\n\n\nA\nB\nC\n\n\n\n\n11.742\n5.612\n25.89\n\n\n9.059\n4.177\n18.79\n\n\n9.373\n4.466\n14.57\n\n\n10.913\n5.341\n31.88\n\n\n8.221\n4.039\n18.14\n\n\n10.095\n4.517\n17.43\n\n\n\n\n\n\n# Check averages and standard deviations\nfaux_data %>%\n  # Convert to long/tidy so we can group and summarize\n  pivot_longer(cols = everything(), names_to = \"variable\", values_to = \"value\") %>%\n  group_by(variable) %>%\n  summarize(mean = mean(value),\n            sd = sd(value))\n\n\n\n\n\nvariable\nmean\nsd\n\n\n\n\nA\n10.221\n2.084\n\n\nB\n5.025\n1.002\n\n\nC\n20.771\n5.013\n\n\n\n\n\n\n# Check correlations\ncor(faux_data$A, faux_data$B)\n## [1] 0.808\ncor(faux_data$A, faux_data$C)\n## [1] 0.301\ncor(faux_data$B, faux_data$C)\n## [1] 0.4598\n\nfaux can do a ton of other things too, so make sure you check out the documentation and all the articles with examples here."
  },
  {
    "objectID": "tutorials/R/index.html",
    "href": "tutorials/R/index.html",
    "title": "R",
    "section": "",
    "text": "R Overview"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html",
    "href": "tutorials/R/r-manuals/test.html",
    "title": "R Manuals :: An Introduction to R",
    "section": "",
    "text": "This is an introduction to R (“GNU S”), a language and environment for statistical computing and graphics. R is similar to the award-winning1 S system, which was developed at Bell Laboratories by John Chambers et al. It provides a wide variety of statistical and graphical techniques (linear and nonlinear modelling, statistical tests, time series analysis, classification, clustering, ...).\nThis manual provides information on data types, programming elements, statistical modelling and graphics.\nThis manual is for R, version 4.3.0 Under development.\nCopyright © 1990 W. N. Venables\nCopyright © 1992 W. N. Venables & D. M. Smith\nCopyright © 1997 R. Gentleman & R. Ihaka\nCopyright © 1997, 1998 M. Maechler\nCopyright © 1999–2022 R Core Team\n\nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the R Core Team."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-the-r-environment",
    "href": "tutorials/R/r-manuals/test.html#sec-the-r-environment",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.1 The R environment",
    "text": "1.1 The R environment\nR is an integrated suite of software facilities for data manipulation, calculation and graphical display. Among other things it has\n\nan effective data handling and storage facility,\na suite of operators for calculations on arrays, in particular matrices,\na large, coherent, integrated collection of intermediate tools for data analysis,\ngraphical facilities for data analysis and display either directly at the computer or on hardcopy, and\na well developed, simple and effective programming language (called ‘S’) which includes conditionals, loops, user defined recursive functions and input and output facilities. (Indeed most of the system supplied functions are themselves written in the S language.)\n\nThe term “environment” is intended to characterize it as a fully planned and coherent system, rather than an incremental accretion of very specific and inflexible tools, as is frequently the case with other data analysis software.\nR is very much a vehicle for newly developing methods of interactive data analysis. It has developed rapidly, and has been extended by a large collection of packages. However, most programs written in R are essentially ephemeral, written for a single piece of data analysis."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-related-software-and-documentation",
    "href": "tutorials/R/r-manuals/test.html#sec-related-software-and-documentation",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.2 Related software and documentation",
    "text": "1.2 Related software and documentation\nR can be regarded as an implementation of the S language which was developed at Bell Laboratories by Rick Becker, John Chambers and Allan Wilks, and also forms the basis of the S-PLUS systems.\nThe evolution of the S language is characterized by four books by John Chambers and coauthors. For R, the basic reference is The New S Language: A Programming Environment for Data Analysis and Graphics by Richard A. Becker, John M. Chambers and Allan R. Wilks. The new features of the 1991 release of S are covered in Statistical Models in S edited by John M. Chambers and Trevor J. Hastie. The formal methods and classes of the methods package are based on those described in Programming with Data by John M. Chambers. See References, for precise references.\nThere are now a number of books which describe how to use R for data analysis and statistics, and documentation for S/S-PLUS can typically be used with R, keeping the differences between the S implementations in mind. See What documentation exists for R in the R statistical system FAQ."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-r-and-statistics",
    "href": "tutorials/R/r-manuals/test.html#sec-r-and-statistics",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.3 R and statistics",
    "text": "1.3 R and statistics\nOur introduction to the R environment did not mention statistics, yet many people use R as a statistics system. We prefer to think of it of an environment within which many classical and modern statistical techniques have been implemented. A few of these are built into the base R environment, but many are supplied as packages. There are about 25 packages supplied with R (called “standard” and “recommended” packages) and many more are available through the CRAN family of Internet sites (via https://CRAN.R-project.org) and elsewhere. More details on packages are given later (see Section 13).\nMost classical statistics and much of the latest methodology is available for use with R, but users may need to be prepared to do a little work to find it.\nThere is an important difference in philosophy between S (and hence R) and the other main statistical systems. In S a statistical analysis is normally done as a series of steps, with intermediate results being stored in objects. Thus whereas SAS and SPSS will give copious output from a regression or discriminant analysis, R will give minimal output and store the results in a fit object for subsequent interrogation by further R functions."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-r-and-the-window-system",
    "href": "tutorials/R/r-manuals/test.html#sec-r-and-the-window-system",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.4 R and the window system",
    "text": "1.4 R and the window system\nThe most convenient way to use R is at a graphics workstation running a windowing system. This guide is aimed at users who have this facility. In particular we will occasionally refer to the use of R on an X window system although the vast bulk of what is said applies generally to any implementation of the R environment.\nMost users will find it necessary to interact directly with the operating system on their computer from time to time. In this guide, we mainly discuss interaction with the operating system on UNIX machines. If you are running R under Windows or macOS you will need to make some small adjustments.\nSetting up a workstation to take full advantage of the customizable features of R is a straightforward if somewhat tedious procedure, and will not be considered further here. Users in difficulty should seek local expert help."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-using-r-interactively",
    "href": "tutorials/R/r-manuals/test.html#sec-using-r-interactively",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.5 Using R interactively",
    "text": "1.5 Using R interactively\nWhen you use the R program it issues a prompt when it expects input commands. The default prompt is >, which on UNIX might be the same as the shell prompt, and so it may appear that nothing is happening. However, as we shall see, it is easy to change to a different R prompt if you wish. We will assume that the UNIX shell prompt is $.\nIn using R under UNIX the suggested procedure for the first occasion is as follows:\n\nCreate a separate sub-directory, say work, to hold data files on which you will use R for this problem. This will be the working directory whenever you use R for this particular problem. R     $ mkdir work     $ cd work\nStart the R program with the command R     $ R\nAt this point R commands may be issued (see later).\nTo quit the R program the command is\n> q()\nAt this point you will be asked whether you want to save the data from your R session. On some systems this will bring up a dialog box, and on others you will receive a text prompt to which you can respond yes, no or cancel (a single letter abbreviation will do) to save the data before quitting, quit without saving, or return to the R session. Data which is saved will be available in future R sessions.\n\nFurther R sessions are simple.\n\nMake work the working directory and start the program as before: R     $ cd work     $ R\nUse the R program, terminating with the q() command at the end of the session.\n\nTo use R under Windows the procedure to follow is basically the same. Create a folder as the working directory, and set that in the Start In field in your R shortcut. Then launch R by double clicking on the icon."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-1.6-an-introductory-session",
    "href": "tutorials/R/r-manuals/test.html#sec-1.6-an-introductory-session",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.6 1.6 An introductory session",
    "text": "1.6 1.6 An introductory session\nReaders wishing to get a feel for R at a computer before proceeding are strongly advised to work through the introductory session given in Section 15."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-getting-help-with-functions-and-features",
    "href": "tutorials/R/r-manuals/test.html#sec-getting-help-with-functions-and-features",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.7 Getting help with functions and features",
    "text": "1.7 Getting help with functions and features\nR has an inbuilt help facility similar to the man facility of UNIX. To get more information on any specific named function, for example solve, the command is\n> help(solve)\nAn alternative is\n> ?solve\nFor a feature specified by special characters, the argument must be enclosed in double or single quotes, making it a “character string”: This is also necessary for a few words with syntactic meaning including if, for and function.\n> help(\"[[\")\nEither form of quote mark may be used to escape the other, as in the string \"It's important\". Our convention is to use double quote marks for preference.\nOn most R installations help is available in HTML format by running\n> help.start()\nwhich will launch a Web browser that allows the help pages to be browsed with hyperlinks. On UNIX, subsequent help requests are sent to the HTML-based help system. The ‘Search Engine and Keywords’ link in the page loaded by help.start() is particularly useful as it is contains a high-level concept list which searches though available functions. It can be a great way to get your bearings quickly and to understand the breadth of what R has to offer.\nThe help.search command (alternatively ??) allows searching for help in various ways. For example,\n> ??solve\nTry ?help.search for details and more examples.\nThe examples on a help topic can normally be run by\n> example(topic)\nWindows versions of R have other optional help systems: use\n> ?help\nfor further details."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-r-commands-case-sensitivity-etc.",
    "href": "tutorials/R/r-manuals/test.html#sec-r-commands-case-sensitivity-etc.",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.8 R commands, case sensitivity, etc.",
    "text": "1.8 R commands, case sensitivity, etc.\nTechnically R is an expression language with a very simple syntax. It is case sensitive as are most UNIX based packages, so A and a are different symbols and would refer to different variables. The set of symbols which can be used in R names depends on the operating system and country within which R is being run (technically on the locale in use). Normally all alphanumeric symbols are allowed2 (and in some countries this includes accented letters) plus . and _‘, with the restriction that a name must start with’. or a letter, and if it starts with . the second character must not be a digit. Names are effectively unlimited in length.\nElementary commands consist of either expressions or assignments. If an expression is given as a command, it is evaluated, printed (unless specifically made invisible), and the value is lost. An assignment also evaluates an expression and passes the value to a variable but the result is not automatically printed.\nCommands are separated either by a semi-colon (;), or by a newline. Elementary commands can be grouped together into one compound expression by braces ({’ and ’}). Comments can be put almost3 anywhere, starting with a hashmark (#), everything to the end of the line is a comment.\nIf a command is not complete at the end of a line, R will give a different prompt, by default\n+\non second and subsequent lines and continue to read input until the command is syntactically complete. This prompt may be changed by the user. We will generally omit the continuation prompt and indicate continuation by simple indenting.\nCommand lines entered at the console are limited4 to about 4095 bytes (not characters)."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-recall-and-correction-of-previous-commands",
    "href": "tutorials/R/r-manuals/test.html#sec-recall-and-correction-of-previous-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.9 Recall and correction of previous commands",
    "text": "1.9 Recall and correction of previous commands\nUnder many versions of UNIX and on Windows, R provides a mechanism for recalling and re-executing previous commands. The vertical arrow keys on the keyboard can be used to scroll forward and backward through a command history. Once a command is located in this way, the cursor can be moved within the command using the horizontal arrow keys, and characters can be removed with the DEL key or added with the other keys. More details are provided later: see Section 17 .\nThe recall and editing capabilities under UNIX are highly customizable. You can find out how to do this by reading the manual entry for the readline library.\nAlternatively, the Emacs text editor provides more general support mechanisms (via ESS, Emacs Speaks Statistics) for working interactively with R. See R and Emacs in The R statistical system FAQ."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-executing-commands-from-or-diverting-output-to-a-file",
    "href": "tutorials/R/r-manuals/test.html#sec-executing-commands-from-or-diverting-output-to-a-file",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.10 Executing commands from or diverting output to a file",
    "text": "1.10 Executing commands from or diverting output to a file\nIf commands5 are stored in an external file, say commands.R in the working directory work, they may be executed at any time in an R session with the command\n> source(\"commands.R\")\nFor Windows Source is also available on the File menu. The function sink,\n> sink(\"record.lis\")\nwill divert all subsequent output from the console to an external file, record.lis. The command\n> sink()\nrestores it to the console once again."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-data-permanency-and-removing-objects",
    "href": "tutorials/R/r-manuals/test.html#sec-data-permanency-and-removing-objects",
    "title": "R Manuals :: An Introduction to R",
    "section": "1.11 Data permanency and removing objects",
    "text": "1.11 Data permanency and removing objects\nThe entities that R creates and manipulates are known as objects. These may be variables, arrays of numbers, character strings, functions, or more general structures built from such components.\nDuring an R session, objects are created and stored by name (we discuss this process in the next section). The R command\n> objects()\n(alternatively, ls()) can be used to display the names of (most of) the objects which are currently stored within R. The collection of objects currently stored is called the workspace.\nTo remove objects the function rm is available:\n> rm(x, y, z, ink, junk, temp, foo, bar)\nAll objects created during an R session can be stored permanently in a file for use in future R sessions. At the end of each R session you are given the opportunity to save all the currently available objects. If you indicate that you want to do this, the objects are written to a file called .RData6 in the current directory, and the command lines used in the session are saved to a file called .Rhistory.\nWhen R is started at later time from the same directory it reloads the workspace from this file. At the same time the associated commands history is reloaded.\nIt is recommended that you should use separate working directories for analyses conducted with R. It is quite common for objects with names x and y to be created during an analysis. Names like this are often meaningful in the context of a single analysis, but it can be quite hard to decide what they might be when the several analyses have been conducted in the same directory."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-vectors-and-assignment",
    "href": "tutorials/R/r-manuals/test.html#sec-vectors-and-assignment",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.1 Vectors and assignment",
    "text": "2.1 Vectors and assignment\nR operates on named data structures. The simplest such structure is the numeric vector, which is a single entity consisting of an ordered collection of numbers. To set up a vector named x, say, consisting of five numbers, namely 10.4, 5.6, 3.1, 6.4 and 21.7, use the R command\n> x <- c(10.4, 5.6, 3.1, 6.4, 21.7)\nThis is an assignment statement using the function c() which in this context can take an arbitrary number of vector arguments and whose value is a vector got by concatenating its arguments end to end.7\nA number occurring by itself in an expression is taken as a vector of length one.\nNotice that the assignment operator (<-), which consists of the two characters <’ (“less than”) and ‘- (“minus”) occurring strictly side-by-side and it ’points’ to the object receiving the value of the expression. In most contexts the = operator can be used as an alternative.\nAssignment can also be made using the function assign(). An equivalent way of making the same assignment as above is with:\n> assign(\"x\", c(10.4, 5.6, 3.1, 6.4, 21.7))\nThe usual operator, <-, can be thought of as a syntactic short-cut to this.\nAssignments can also be made in the other direction, using the obvious change in the assignment operator. So the same assignment could be made using\n> c(10.4, 5.6, 3.1, 6.4, 21.7) -> x\nIf an expression is used as a complete command, the value is printed and lost8. So now if we were to use the command\n> 1/x\nthe reciprocals of the five values would be printed at the terminal (and the value of x, of course, unchanged).\nThe further assignment\n> y <- c(x, 0, x)\nwould create a vector y with 11 entries consisting of two copies of x with a zero in the middle place."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-vector-arithmetic",
    "href": "tutorials/R/r-manuals/test.html#sec-vector-arithmetic",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.2 Vector arithmetic",
    "text": "2.2 Vector arithmetic\nVectors can be used in arithmetic expressions, in which case the operations are performed element by element. Vectors occurring in the same expression need not all be of the same length. If they are not, the value of the expression is a vector with the same length as the longest vector which occurs in the expression. Shorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector. In particular a constant is simply repeated. So with the above assignments the command\n> v <- 2*x + y + 1\ngenerates a new vector v of length 11 constructed by adding together, element by element, 2*x repeated 2.2 times, y repeated just once, and 1 repeated 11 times.\nThe elementary arithmetic operators are the usual +, -, *, / and ^ for raising to a power. In addition all of the common arithmetic functions are available. log, exp, sin, cos, tan, sqrt, and so on, all have their usual meaning. max and min select the largest and smallest elements of a vector respectively. range is a function whose value is a vector of length two, namely c(min(x), max(x)). length(x) is the number of elements in x, sum(x) gives the total of the elements in x, and prod(x) their product.\nTwo statistical functions are mean(x) which calculates the sample mean, which is the same as sum(x)/length(x), and var(x) which gives\nsum((x-mean(x))^2)/(length(x)-1)\nor sample variance. If the argument to var() is an n-by-p matrix the value is a p-by-p sample covariance matrix got by regarding the rows as independent p-variate sample vectors.\nsort(x) returns a vector of the same size as x with the elements arranged in increasing order; however there are other more flexible sorting facilities available (see order() or sort.list() which produce a permutation to do the sorting).\nNote that max and min select the largest and smallest values in their arguments, even if they are given several vectors. The parallel maximum and minimum functions pmax and pmin return a vector (of length equal to their longest argument) that contains in each element the largest (smallest) element in that position in any of the input vectors.\nFor most purposes the user will not be concerned if the “numbers” in a numeric vector are integers, reals or even complex. Internally calculations are done as double precision real numbers, or double precision complex numbers if the input data are complex.\nTo work with complex numbers, supply an explicit complex part. Thus\nsqrt(-17)\nwill give NaN and a warning, but\nsqrt(-17+0i)\nwill do the computations as complex numbers."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-generating-regular-sequences",
    "href": "tutorials/R/r-manuals/test.html#sec-generating-regular-sequences",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.3 Generating regular sequences",
    "text": "2.3 Generating regular sequences\nR has a number of facilities for generating commonly used sequences of numbers. For example 1:30 is the vector c(1, 2, …, 29, 30). The colon operator has high priority within an expression, so, for example 2*1:15 is the vector c(2, 4, …, 28, 30). Put n <- 10 and compare the sequences 1:n-1 and 1:(n-1).\nThe construction 30:1 may be used to generate a sequence backwards.\nThe function seq() is a more general facility for generating sequences. It has five arguments, only some of which may be specified in any one call. The first two arguments, if given, specify the beginning and end of the sequence, and if these are the only two arguments given the result is the same as the colon operator. That is seq(2,10) is the same vector as 2:10.\nArguments to seq(), and to many other R functions, can also be given in named form, in which case the order in which they appear is irrelevant. The first two arguments may be named from=``value and to=``value; thus seq(1,30), seq(from=1, to=30) and seq(to=30, from=1) are all the same as 1:30. The next two arguments to seq() may be named by=``value and length=``value, which specify a step size and a length for the sequence respectively. If neither of these is given, the default by=1 is assumed.\nFor example\n> seq(-5, 5, by=.2) -> s3\ngenerates in s3 the vector c(-5.0, -4.8, -4.6, …, 4.6, 4.8, 5.0). Similarly\n> s4 <- seq(length=51, from=-5, by=.2)\ngenerates the same vector in s4.\nThe fifth argument may be named along=``vector, which is normally used as the only argument to create the sequence 1, 2, …, length(``vector), or the empty sequence if the vector is empty (as it can be).\nA related function is rep() which can be used for replicating an object in various complicated ways. The simplest form is\n> s5 <- rep(x, times=5)\nwhich will put five copies of x end-to-end in s5. Another useful version is\n> s6 <- rep(x, each=5)\nwhich repeats each element of x five times before moving on to the next."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-logical-vectors",
    "href": "tutorials/R/r-manuals/test.html#sec-logical-vectors",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.4 Logical vectors",
    "text": "2.4 Logical vectors\nAs well as numerical vectors, R allows manipulation of logical quantities. The elements of a logical vector can have the values TRUE, FALSE, and NA (for “not available”, see below). The first two are often abbreviated as T and F, respectively. Note however that T and F are just variables which are set to TRUE and FALSE by default, but are not reserved words and hence can be overwritten by the user. Hence, you should always use TRUE and FALSE.\nLogical vectors are generated by conditions. For example\n> temp <- x > 13\nsets temp as a vector of the same length as x with values FALSE corresponding to elements of x where the condition is not met and TRUE where it is.\nThe logical operators are <, <=, >, >=, == for exact equality and != for inequality. In addition if c1 and c2 are logical expressions, then c1 & c2 is their intersection (“and”), c1 | c2 is their union (“or”), and !c1 is the negation of c1.\nLogical vectors may be used in ordinary arithmetic, in which case they are coerced into numeric vectors, FALSE becoming 0 and TRUE becoming 1. However there are situations where logical vectors and their coerced numeric counterparts are not equivalent, for example see the next subsection."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-missing-values",
    "href": "tutorials/R/r-manuals/test.html#sec-missing-values",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.5 Missing values",
    "text": "2.5 Missing values\nIn some cases the components of a vector may not be completely known. When an element or value is “not available” or a “missing value” in the statistical sense, a place within a vector may be reserved for it by assigning it the special value NA. In general any operation on an NA becomes an NA. The motivation for this rule is simply that if the specification of an operation is incomplete, the result cannot be known and hence is not available.\nThe function is.na(x) gives a logical vector of the same size as x with value TRUE if and only if the corresponding element in x is NA.\n> z <- c(1:3,NA);  ind <- is.na(z)\nNotice that the logical expression x == NA is quite different from is.na(x) since NA is not really a value but a marker for a quantity that is not available. Thus x == NA is a vector of the same length as x all of whose values are NA as the logical expression itself is incomplete and hence undecidable.\nNote that there is a second kind of “missing” values which are produced by numerical computation, the so-called Not a Number, NaN, values. Examples are\n> 0/0\nor\n> Inf - Inf\nwhich both give NaN since the result cannot be defined sensibly.\nIn summary, is.na(xx) is TRUE both for NA and NaN values. To differentiate these, is.nan(xx) is only TRUE for NaNs.\nMissing values are sometimes printed as <NA> when character vectors are printed without quotes."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-character-vectors",
    "href": "tutorials/R/r-manuals/test.html#sec-character-vectors",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.6 Character vectors",
    "text": "2.6 Character vectors\nCharacter quantities and character vectors are used frequently in R, for example as plot labels. Where needed they are denoted by a sequence of characters delimited by the double quote character, e.g., \"x-values\", \"New iteration results\".\nCharacter strings are entered using either matching double (\") or single (') quotes, but are printed using double quotes (or sometimes without quotes). They use C-style escape sequences, using \\ as the escape character, so \\ is entered and printed as \\\\, and inside double quotes \" is entered as \\\". Other useful escape sequences are \\n, newline, \\t, tab and \\b, backspace—see ?Quotes for a full list.\nCharacter vectors may be concatenated into a vector by the c() function; examples of their use will emerge frequently.\nThe paste() function takes an arbitrary number of arguments and concatenates them one by one into character strings. Any numbers given among the arguments are coerced into character strings in the evident way, that is, in the same way they would be if they were printed. The arguments are by default separated in the result by a single blank character, but this can be changed by the named argument, sep=``string, which changes it to string, possibly empty.\nFor example\n> labs <- paste(c(\"X\",\"Y\"), 1:10, sep=\"\")\nmakes labs into the character vector\nc(\"X1\", \"Y2\", \"X3\", \"Y4\", \"X5\", \"Y6\", \"X7\", \"Y8\", \"X9\", \"Y10\")\nNote particularly that recycling of short lists takes place here too; thus c(\"X\", \"Y\") is repeated 5 times to match the sequence 1:10. 9"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-index-vectors-selecting-and-modifying-subsets-of-a-data-set",
    "href": "tutorials/R/r-manuals/test.html#sec-index-vectors-selecting-and-modifying-subsets-of-a-data-set",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.7 Index vectors; selecting and modifying subsets of a data set",
    "text": "2.7 Index vectors; selecting and modifying subsets of a data set\nSubsets of the elements of a vector may be selected by appending to the name of the vector an index vector in square brackets. More generally any expression that evaluates to a vector may have subsets of its elements similarly selected by appending an index vector in square brackets immediately after the expression.\nSuch index vectors can be any of four distinct types.\n\nA logical vector. In this case the index vector is recycled to the same length as the vector from which elements are to be selected. Values corresponding to TRUE in the index vector are selected and those corresponding to FALSE are omitted. For example\n> y <- x[!is.na(x)]\ncreates (or re-creates) an object y which will contain the non-missing values of x, in the same order. Note that if x has missing values, y will be shorter than x. Also\n> (x+1)[(!is.na(x)) & x>0] -> z\ncreates an object z and places in it the values of the vector x+1 for which the corresponding value in x was both non-missing and positive.\nA vector of positive integral quantities. In this case the values in the index vector must lie in the set {1, 2, …, length(x)}. The corresponding elements of the vector are selected and concatenated, in that order, in the result. The index vector can be of any length and the result is of the same length as the index vector. For example x[6] is the sixth component of x and\n> x[1:10]\nselects the first 10 elements of x (assuming length(x) is not less than 10). Also\n> c(\"x\",\"y\")[rep(c(1,2,2,1), times=4)]\n(an admittedly unlikely thing to do) produces a character vector of length 16 consisting of \"x\", \"y\", \"y\", \"x\" repeated four times.\nA vector of negative integral quantities. Such an index vector specifies the values to be excluded rather than included. Thus\n> y <- x[-(1:5)]\ngives y all but the first five elements of x.\nA vector of character strings. This possibility only applies where an object has a names attribute to identify its components. In this case a sub-vector of the names vector may be used in the same way as the positive integral labels in item 2 further above.\n> fruit <- c(5, 10, 1, 20)\n> names(fruit) <- c(\"orange\", \"banana\", \"apple\", \"peach\")\n> lunch <- fruit[c(\"apple\",\"orange\")]\nThe advantage is that alphanumeric names are often easier to remember than numeric indices. This option is particularly useful in connection with data frames, as we shall see later.\n\nAn indexed expression can also appear on the receiving end of an assignment, in which case the assignment operation is performed only on those elements of the vector. The expression must be of the form vector[``index_vector] as having an arbitrary expression in place of the vector name does not make much sense here.\nFor example\n> x[is.na(x)] <- 0\nreplaces any missing values in x by zeros and\n> y[y < 0] <- -y[y < 0]\nhas the same effect as\n> y <- abs(y)"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-other-types-of-objects",
    "href": "tutorials/R/r-manuals/test.html#sec-other-types-of-objects",
    "title": "R Manuals :: An Introduction to R",
    "section": "2.8 Other types of objects",
    "text": "2.8 Other types of objects\nVectors are the most important type of object in R, but there are several others which we will meet more formally in later sections.\n\nmatrices or more generally arrays are multi-dimensional generalizations of vectors. In fact, they are vectors that can be indexed by two or more indices and will be printed in special ways. @#sec-arrays-and-matrices.\nfactors provide compact ways to handle categorical data. See\n\n\n\nlists are a general form of vector in which the various elements need not be of the same type, and are often themselves vectors or lists. Lists provide a convenient way to return the results of a statistical computation. See Section 6.1.\ndata frames are matrix-like structures, in which the columns can be of different types. Think of data frames as ‘data matrices’ with one row per observational unit but with (possibly) both numerical and categorical variables. Many experiments are best described by data frames: the treatments are categorical but the response is numeric. See Section 6.3.\nfunctions are themselves objects in R which can be stored in the project’s workspace. This provides a simple and convenient way to extend R. See Section 10 ."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-intrinsic-attributes:-mode-and-length",
    "href": "tutorials/R/r-manuals/test.html#sec-intrinsic-attributes:-mode-and-length",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.1 Intrinsic attributes: mode and length",
    "text": "3.1 Intrinsic attributes: mode and length\nThe entities R operates on are technically known as objects. Examples are vectors of numeric (real) or complex values, vectors of logical values and vectors of character strings. These are known as “atomic” structures since their components are all of the same type, or mode, namely numeric10, complex, logical, character and raw.\nVectors must have their values all of the same mode. Thus any given vector must be unambiguously either logical, numeric, complex, character or raw. (The only apparent exception to this rule is the special “value” listed as NA for quantities not available, but in fact there are several types of NA). Note that a vector can be empty and still have a mode. For example the empty character string vector is listed as character(0) and the empty numeric vector as numeric(0).\nR also operates on objects called lists, which are of mode list. These are ordered sequences of objects which individually can be of any mode. lists are known as “recursive” rather than atomic structures since their components can themselves be lists in their own right.\nThe other recursive structures are those of mode function and expression. Functions are the objects that form part of the R system along with similar user written functions, which we discuss in some detail later. Expressions as objects form an advanced part of R which will not be discussed in this guide, except indirectly when we discuss formulae used with modeling in R.\nBy the mode of an object we mean the basic type of its fundamental constituents. This is a special case of a “property” of an object. Another property of every object is its length. The functions mode(``object) and length(``object) can be used to find out the mode and length of any defined structure 11.\nFurther properties of an object are usually provided by attributes(``object), see Getting and setting attributes. Because of this, mode and length are also called “intrinsic attributes” of an object.\nFor example, if z is a complex vector of length 100, then in an expression mode(z) is the character string \"complex\" and length(z) is 100.\nR caters for changes of mode almost anywhere it could be considered sensible to do so, (and a few where it might not be). For example with\n> z <- 0:9\nwe could put\n> digits <- as.character(z)\nafter which digits is the character vector c(\"0\", \"1\", \"2\", …, \"9\"). A further coercion, or change of mode, reconstructs the numerical vector again:\n> d <- as.integer(digits)\nNow d and z are the same.12 There is a large collection of functions of the form as.``something() for either coercion from one mode to another, or for investing an object with some other attribute it may not already possess. The reader should consult the different help files to become familiar with them."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-changing-the-length-of-an-object",
    "href": "tutorials/R/r-manuals/test.html#sec-changing-the-length-of-an-object",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.2 Changing the length of an object",
    "text": "3.2 Changing the length of an object\nAn “empty” object may still have a mode. For example\n> e <- numeric()\nmakes e an empty vector structure of mode numeric. Similarly character() is a empty character vector, and so on. Once an object of any size has been created, new components may be added to it simply by giving it an index value outside its previous range. Thus\n> e[3] <- 17\nnow makes e a vector of length 3, (the first two components of which are at this point both NA). This applies to any structure at all, provided the mode of the additional component(s) agrees with the mode of the object in the first place.\nThis automatic adjustment of lengths of an object is used often, for example in the scan() function for input. (see The scan() function.)\nConversely to truncate the size of an object requires only an assignment to do so. Hence if alpha is an object of length 10, then\n> alpha <- alpha[2 * 1:5]\nmakes it an object of length 5 consisting of just the former components with even index. (The old indices are not retained, of course.) We can then retain just the first three values by\n> length(alpha) <- 3\nand vectors can be extended (by missing values) in the same way."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-getting-and-setting-attributes",
    "href": "tutorials/R/r-manuals/test.html#sec-getting-and-setting-attributes",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.3 Getting and setting attributes",
    "text": "3.3 Getting and setting attributes\nThe function attributes(``object) returns a list of all the non-intrinsic attributes currently defined for that object. The function attr(``object, ``name) can be used to select a specific attribute. These functions are rarely used, except in rather special circumstances when some new attribute is being created for some particular purpose, for example to associate a creation date or an operator with an R object. The concept, however, is very important.\nSome care should be exercised when assigning or deleting attributes since they are an integral part of the object system used in R.\nWhen it is used on the left hand side of an assignment it can be used either to associate a new attribute with object or to change an existing one. For example\n> attr(z, \"dim\") <- c(10,10)\nallows R to treat z as if it were a 10-by-10 matrix."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-the-class-of-an-object",
    "href": "tutorials/R/r-manuals/test.html#sec-the-class-of-an-object",
    "title": "R Manuals :: An Introduction to R",
    "section": "3.4 The class of an object",
    "text": "3.4 The class of an object\nAll objects in R have a class, reported by the function class. For simple vectors this is just the mode, for example \"numeric\", \"logical\", \"character\" or \"list\", but \"matrix\", \"array\", \"factor\" and \"data.frame\" are other possible values.\nA special attribute known as the class of the object is used to allow for an object-oriented style13 of programming in R. For example if an object has class \"data.frame\", it will be printed in a certain way, the plot() function will display it graphically in a certain way, and other so-called generic functions such as summary() will react to it as an argument in a way sensitive to its class.\nTo remove temporarily the effects of class, use the function unclass(). For example if winter has the class \"data.frame\" then\n> winter\nwill print it in data frame form, which is rather like a matrix, whereas\n> unclass(winter)\nwill print it as an ordinary list. Only in rather special situations do you need to use this facility, but one is when you are learning to come to terms with the idea of class and generic functions.\nGeneric functions and classes will be discussed further in Object orientation, but only briefly."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-4.1-a-specific-example",
    "href": "tutorials/R/r-manuals/test.html#sec-4.1-a-specific-example",
    "title": "R Manuals :: An Introduction to R",
    "section": "4.1 4.1 A specific example",
    "text": "4.1 4.1 A specific example\nSuppose, for example, we have a sample of 30 tax accountants from all the states and territories of Australia14 and their individual state of origin is specified by a character vector of state mnemonics as\n> state <- c(\"tas\", \"sa\",  \"qld\", \"nsw\", \"nsw\", \"nt\",  \"wa\",  \"wa\",\n             \"qld\", \"vic\", \"nsw\", \"vic\", \"qld\", \"qld\", \"sa\",  \"tas\",\n             \"sa\",  \"nt\",  \"wa\",  \"vic\", \"qld\", \"nsw\", \"nsw\", \"wa\",\n             \"sa\",  \"act\", \"nsw\", \"vic\", \"vic\", \"act\")\nNotice that in the case of a character vector, “sorted” means sorted in alphabetical order.\nA factor is similarly created using the factor() function:\n> statef <- factor(state)\nThe print() function handles factors slightly differently from other objects:\n> statef\n [1] tas sa  qld nsw nsw nt  wa  wa  qld vic nsw vic qld qld sa\n[16] tas sa  nt  wa  vic qld nsw nsw wa  sa  act nsw vic vic act\nLevels:  act nsw nt qld sa tas vic wa\nTo find out the levels of a factor the function levels() can be used.\n> levels(statef)\n[1] \"act\" \"nsw\" \"nt\"  \"qld\" \"sa\"  \"tas\" \"vic\" \"wa\"\n\n\n\n• The function tapply() and ragged arrays\n  \n\n\n\n• Ordered factors"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#the-function-tapply-and-ragged-arrays-sec-the-function-tapply-and-ragged-arrays",
    "href": "tutorials/R/r-manuals/test.html#the-function-tapply-and-ragged-arrays-sec-the-function-tapply-and-ragged-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "4.2 The function tapply() and ragged arrays {#sec-the-function-tapply()-and-ragged-arrays}",
    "text": "4.2 The function tapply() and ragged arrays {#sec-the-function-tapply()-and-ragged-arrays}\nTo continue the previous example, suppose we have the incomes of the same tax accountants in another vector (in suitably large units of money)\n> incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,\n               61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,\n               59, 46, 58, 43)\nTo calculate the sample mean income for each state we can now use the special function tapply():\n> incmeans <- tapply(incomes, statef, mean)\ngiving a means vector with the components labelled by the levels\n   act    nsw     nt    qld     sa    tas    vic     wa\n44.500 57.333 55.500 53.600 55.000 60.500 56.000 52.250\nThe function tapply() is used to apply a function, here mean(), to each group of components of the first argument, here incomes, defined by the levels of the second component, here statef15, as if they were separate vector structures. The result is a structure of the same length as the levels attribute of the factor containing the results. The reader should consult the help document for more details.\nSuppose further we needed to calculate the standard errors of the state income means. To do this we need to write an R function to calculate the standard error for any given vector. Since there is an builtin function var() to calculate the sample variance, such a function is a very simple one liner, specified by the assignment:\n> stdError <- function(x) sqrt(var(x)/length(x))\n(Writing functions will be considered later in Section 10 . Note that R’s a builtin function sd() is something different.) After this assignment, the standard errors are calculated by\n> incster <- tapply(incomes, statef, stdError)\nand the values calculated are then\n> incster\nact    nsw  nt    qld     sa tas   vic     wa\n1.5 4.3102 4.5 4.1061 2.7386 0.5 5.244 2.6575\nAs an exercise you may care to find the usual 95% confidence limits for the state mean incomes. To do this you could use tapply() once more with the length() function to find the sample sizes, and the qt() function to find the percentage points of the appropriate t-distributions. (You could also investigate R’s facilities for t-tests.)\nThe function tapply() can also be used to handle more complicated indexing of a vector by multiple categories. For example, we might wish to split the tax accountants by both state and sex. However in this simple instance (just one factor) what happens can be thought of as follows. The values in the vector are collected into groups corresponding to the distinct entries in the factor. The function is then applied to each of these groups individually. The value is a vector of function results, labelled by the levels attribute of the factor.\nThe combination of a vector and a labelling factor is an example of what is sometimes called a ragged array, since the subclass sizes are possibly irregular. When the subclass sizes are all the same the indexing may be done implicitly and much more efficiently, as we see in the next section."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-ordered-factors",
    "href": "tutorials/R/r-manuals/test.html#sec-ordered-factors",
    "title": "R Manuals :: An Introduction to R",
    "section": "4.3 Ordered factors",
    "text": "4.3 Ordered factors\nThe levels of factors are stored in alphabetical order, or in the order they were specified to factor if they were specified explicitly.\nSometimes the levels will have a natural ordering that we want to record and want our statistical analysis to make use of. The ordered() function creates such ordered factors but is otherwise identical to factor. For most purposes the only difference between ordered and unordered factors is that the former are printed showing the ordering of the levels, but the contrasts generated for them in fitting linear models are different."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-arrays",
    "href": "tutorials/R/r-manuals/test.html#sec-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.1 Arrays",
    "text": "5.1 Arrays\nAn array can be considered as a multiply subscripted collection of data entries, for example numeric. R allows simple facilities for creating and handling arrays, and in particular the special case of matrices.\nA dimension vector is a vector of non-negative integers. If its length is k then the array is k-dimensional, e.g. a matrix is a 2-dimensional array. The dimensions are indexed from one up to the values given in the dimension vector.\nA vector can be used by R as an array only if it has a dimension vector as its dim attribute. Suppose, for example, z is a vector of 1500 elements. The assignment\n> dim(z) <- c(3,5,100)\ngives it the dim attribute that allows it to be treated as a 3 by 5 by 100 array.\nOther functions such as matrix() and array() are available for simpler and more natural looking assignments, as we shall see in The array() function.\nThe values in the data vector give the values in the array in the same order as they would occur in FORTRAN, that is “column major order,” with the first subscript moving fastest and the last subscript slowest.\nFor example if the dimension vector for an array, say a, is c(3,4,2) then there are 3 * 4 * 2 = 24 entries in a and the data vector holds them in the order a[1,1,1], a[2,1,1], …, a[2,4,2], a[3,4,2].\nArrays can be one-dimensional: such arrays are usually treated in the same way as vectors (including when printing), but the exceptions can cause confusion."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-array-indexing.-subsections-of-an-array",
    "href": "tutorials/R/r-manuals/test.html#sec-array-indexing.-subsections-of-an-array",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.2 Array indexing. Subsections of an array",
    "text": "5.2 Array indexing. Subsections of an array\nIndividual elements of an array may be referenced by giving the name of the array followed by the subscripts in square brackets, separated by commas.\nMore generally, subsections of an array may be specified by giving a sequence of index vectors in place of subscripts; however if any index position is given an empty index vector, then the full range of that subscript is taken.\nContinuing the previous example, a[2,,] is a 4 * 2 array with dimension vector c(4,2) and data vector containing the values\nc(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],\n  a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])\nin that order. a[,,] stands for the entire array, which is the same as omitting the subscripts entirely and using a alone.\nFor any array, say Z, the dimension vector may be referenced explicitly as dim(Z) (on either side of an assignment).\nAlso, if an array name is given with just one subscript or index vector, then the corresponding values of the data vector only are used; in this case the dimension vector is ignored. This is not the case, however, if the single index is not a vector but itself an array, as we next discuss."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-index-matrices",
    "href": "tutorials/R/r-manuals/test.html#sec-index-matrices",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.3 Index matrices",
    "text": "5.3 Index matrices\nAs well as an index vector in any subscript position, a matrix may be used with a single index matrix in order either to assign a vector of quantities to an irregular collection of elements in the array, or to extract an irregular collection as a vector.\nA matrix example makes the process clear. In the case of a doubly indexed array, an index matrix may be given consisting of two columns and as many rows as desired. The entries in the index matrix are the row and column indices for the doubly indexed array. Suppose for example we have a 4 by 5 array X and we wish to do the following:\n\nExtract elements X[1,3], X[2,2] and X[3,1] as a vector structure, and\nReplace these entries in the array X by zeroes.\n\nIn this case we need a 3 by 2 subscript array, as in the following example.\n> x <- array(1:20, dim=c(4,5))   # Generate a 4 by 5 array.\n> x\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n> i <- array(c(1:3,3:1), dim=c(3,2))\n> i                             # i is a 3 by 2 index array.\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    2\n[3,]    3    1\n> x[i]                          # Extract those elements\n[1] 9 6 3\n> x[i] <- 0                     # Replace those elements by zeros.\n> x\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    0   13   17\n[2,]    2    0   10   14   18\n[3,]    0    7   11   15   19\n[4,]    4    8   12   16   20\n>\nNegative indices are not allowed in index matrices. NA and zero values are allowed: rows in the index matrix containing a zero are ignored, and rows containing an NA produce an NA in the result.\nAs a less trivial example, suppose we wish to generate an (unreduced) design matrix for a block design defined by factors blocks (b levels) and varieties (v levels). Further suppose there are n plots in the experiment. We could proceed as follows:\n> Xb <- matrix(0, n, b)\n> Xv <- matrix(0, n, v)\n> ib <- cbind(1:n, blocks)\n> iv <- cbind(1:n, varieties)\n> Xb[ib] <- 1\n> Xv[iv] <- 1\n> X <- cbind(Xb, Xv)\nTo construct the incidence matrix, N say, we could use\n> N <- crossprod(Xb, Xv)\nHowever a simpler direct way of producing this matrix is to use table():\n> N <- table(blocks, varieties)\nIndex matrices must be numerical: any other form of matrix (e.g. a logical or character matrix) supplied as a matrix is treated as an indexing vector."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#the-array-function-sec-the-array-function",
    "href": "tutorials/R/r-manuals/test.html#the-array-function-sec-the-array-function",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.4 The array() function {#sec-the-array()-function}",
    "text": "5.4 The array() function {#sec-the-array()-function}\nAs well as giving a vector structure a dim attribute, arrays can be constructed from vectors by the array function, which has the form\n> Z <- array(data_vector, dim_vector)\nFor example, if the vector h contains 24 or fewer, numbers then the command\n> Z <- array(h, dim=c(3,4,2))\nwould use h to set up 3 by 4 by 2 array in Z. If the size of h is exactly 24 the result is the same as\n> Z <- h ; dim(Z) <- c(3,4,2)\nHowever if h is shorter than 24, its values are recycled from the beginning again to make it up to size 24 (see The recycling rule) but dim(h) <- c(3,4,2) would signal an error about mismatching length. As an extreme but common example\n> Z <- array(0, c(3,4,2))\nmakes Z an array of all zeros.\nAt this point dim(Z) stands for the dimension vector c(3,4,2), and Z[1:24] stands for the data vector as it was in h, and Z[] with an empty subscript or Z with no subscript stands for the entire array as an array.\nArrays may be used in arithmetic expressions and the result is an array formed by element-by-element operations on the data vector. The dim attributes of operands generally need to be the same, and this becomes the dimension vector of the result. So if A, B and C are all similar arrays, then\n> D <- 2*A*B + C + 1\nmakes D a similar array with its data vector being the result of the given element-by-element operations. However the precise rule concerning mixed array and vector calculations has to be considered a little more carefully.\n\n5.4.1 Mixed vector and array arithmetic. The recycling rule\nThe precise rule affecting element by element mixed calculations with vectors and arrays is somewhat quirky and hard to find in the references. From experience we have found the following to be a reliable guide.\n\nThe expression is scanned from left to right.\nAny short vector operands are extended by recycling their values until they match the size of any other operands.\nAs long as short vectors and arrays only are encountered, the arrays must all have the same dim attribute or an error results.\nAny vector operand longer than a matrix or array operand generates an error.\nIf array structures are present and no error or coercion to vector has been precipitated, the result is an array structure with the common dim attribute of its array operands."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-the-outer-product-of-two-arrays",
    "href": "tutorials/R/r-manuals/test.html#sec-the-outer-product-of-two-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.5 The outer product of two arrays",
    "text": "5.5 The outer product of two arrays\nAn important operation on arrays is the outer product. If a and b are two numeric arrays, their outer product is an array whose dimension vector is obtained by concatenating their two dimension vectors (order is important), and whose data vector is got by forming all possible products of elements of the data vector of a with those of b. The outer product is formed by the special operator %o%:\n> ab <- a %o% b\nAn alternative is\n> ab <- outer(a, b, \"*\")\nThe multiplication function can be replaced by an arbitrary function of two variables. For example if we wished to evaluate the function f(x; y) = cos(y)/(1 + x^2) over a regular grid of values with x- and y-coordinates defined by the R vectors x and y respectively, we could proceed as follows:\n> f <- function(x, y) cos(y)/(1 + x^2)\n> z <- outer(x, y, f)\nIn particular the outer product of two ordinary vectors is a doubly subscripted array (that is a matrix, of rank at most 1). Notice that the outer product operator is of course non-commutative. Defining your own R functions will be considered further in Section 10 .\n\n5.5.1 An example: Determinants of 2 by 2 single-digit matrices\nAs an artificial but cute example, consider the determinants of 2 by 2 matrices [a, b; c, d] where each entry is a non-negative integer in the range 0, 1, …, 9, that is a digit.\nThe problem is to find the determinants, ad - bc, of all possible matrices of this form and represent the frequency with which each value occurs as a high density plot. This amounts to finding the probability distribution of the determinant if each digit is chosen independently and uniformly at random.\nA neat way of doing this uses the outer() function twice:\n> d <- outer(0:9, 0:9)\n> fr <- table(outer(d, d, \"-\"))\n> plot(fr, xlab=\"Determinant\", ylab=\"Frequency\")\nNotice that plot() here uses a histogram like plot method, because it “sees” that fr is of class \"table\". The “obvious” way of doing this problem with for loops, to be discussed in Loops and conditional execution, is so inefficient as to be impractical.\nIt is also perhaps surprising that about 1 in 20 such matrices is singular."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-generalized-transpose-of-an-array",
    "href": "tutorials/R/r-manuals/test.html#sec-generalized-transpose-of-an-array",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.6 Generalized transpose of an array",
    "text": "5.6 Generalized transpose of an array\nThe function aperm(a, perm) may be used to permute an array, a. The argument perm must be a permutation of the integers {1, …, k}, where k is the number of subscripts in a. The result of the function is an array of the same size as a but with old dimension given by perm[j] becoming the new j-th dimension. The easiest way to think of this operation is as a generalization of transposition for matrices. Indeed if A is a matrix, (that is, a doubly subscripted array) then B given by\n> B <- aperm(A, c(2,1))\nis just the transpose of A. For this special case a simpler function t() is available, so we could have used B <- t(A)."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-matrix-facilities",
    "href": "tutorials/R/r-manuals/test.html#sec-matrix-facilities",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.7 Matrix facilities",
    "text": "5.7 Matrix facilities\nAs noted above, a matrix is just an array with two subscripts. However it is such an important special case it needs a separate discussion. R contains many operators and functions that are available only for matrices. For example t(X) is the matrix transpose function, as noted above. The functions nrow(A) and ncol(A) give the number of rows and columns in the matrix A respectively.\n\n5.7.1 Matrix multiplication\nThe operator %*% is used for matrix multiplication. An n by 1 or 1 by n matrix may of course be used as an n-vector if in the context such is appropriate. Conversely, vectors which occur in matrix multiplication expressions are automatically promoted either to row or column vectors, whichever is multiplicatively coherent, if possible, (although this is not always unambiguously possible, as we see later).\nIf, for example, A and B are square matrices of the same size, then\n> A * B\nis the matrix of element by element products and\n> A %*% B\nis the matrix product. If x is a vector, then\n> x %*% A %*% x\nis a quadratic form.16\nThe function crossprod() forms “crossproducts”, meaning that crossprod(X, y) is the same as t(X) %*% y but the operation is more efficient. If the second argument to crossprod() is omitted it is taken to be the same as the first.\nThe meaning of diag() depends on its argument. diag(v), where v is a vector, gives a diagonal matrix with elements of the vector as the diagonal entries. On the other hand diag(M), where M is a matrix, gives the vector of main diagonal entries of M. This is the same convention as that used for diag() in MATLAB. Also, somewhat confusingly, if k is a single numeric value then diag(k) is the k by k identity matrix!\n\n\n5.7.2 Linear equations and inversion\nSolving linear equations is the inverse of matrix multiplication. When after\n> b <- A %*% x\nonly A and b are given, the vector x is the solution of that linear equation system. In R,\n> solve(A,b)\nsolves the system, returning x (up to some accuracy loss). Note that in linear algebra, formally x = A^{-1} %*% b where A^{-1} denotes the inverse of A, which can be computed by\nsolve(A)\nbut rarely is needed. Numerically, it is both inefficient and potentially unstable to compute x <- solve(A) %*% b instead of solve(A,b).\nThe quadratic form  x %*% A^{-1} %*% x   which is used in multivariate computations, should be computed by something like17 x %*% solve(A,x), rather than computing the inverse of A.\n\n\n5.7.3 Eigenvalues and eigenvectors\nThe function eigen(Sm) calculates the eigenvalues and eigenvectors of a symmetric matrix Sm. The result of this function is a list of two components named values and vectors. The assignment\n> ev <- eigen(Sm)\nwill assign this list to ev. Then ev$val is the vector of eigenvalues of Sm and ev$vec is the matrix of corresponding eigenvectors. Had we only needed the eigenvalues we could have used the assignment:\n> evals <- eigen(Sm)$values\nevals now holds the vector of eigenvalues and the second component is discarded. If the expression\n> eigen(Sm)\nis used by itself as a command the two components are printed, with their names. For large matrices it is better to avoid computing the eigenvectors if they are not needed by using the expression\n> evals <- eigen(Sm, only.values = TRUE)$values\n\n\n5.7.4 Singular value decomposition and determinants\nThe function svd(M) takes an arbitrary matrix argument, M, and calculates the singular value decomposition of M. This consists of a matrix of orthonormal columns U with the same column space as M, a second matrix of orthonormal columns V whose column space is the row space of M and a diagonal matrix of positive entries D such that M = U %*% D %*% t(V). D is actually returned as a vector of the diagonal elements. The result of svd(M) is actually a list of three components named d, u and v, with evident meanings.\nIf M is in fact square, then, it is not hard to see that\n> absdetM <- prod(svd(M)$d)\ncalculates the absolute value of the determinant of M. If this calculation were needed often with a variety of matrices it could be defined as an R function\n> absdet <- function(M) prod(svd(M)$d)\nafter which we could use absdet() as just another R function. As a further trivial but potentially useful example, you might like to consider writing a function, say tr(), to calculate the trace of a square matrix. [Hint: You will not need to use an explicit loop. Look again at the diag() function.]\nR has a builtin function det to calculate a determinant, including the sign, and another, determinant, to give the sign and modulus (optionally on log scale),\n\n\n5.7.5 Least squares fitting and the QR decomposition\nThe function lsfit() returns a list giving results of a least squares fitting procedure. An assignment such as\n> ans <- lsfit(X, y)\ngives the results of a least squares fit where y is the vector of observations and X is the design matrix. See the help facility for more details, and also for the follow-up function ls.diag() for, among other things, regression diagnostics. Note that a grand mean term is automatically included and need not be included explicitly as a column of X. Further note that you almost always will prefer using lm(.) (see Linear models) to lsfit() for regression modelling.\nAnother closely related function is qr() and its allies. Consider the following assignments\n> Xplus <- qr(X)\n> b <- qr.coef(Xplus, y)\n> fit <- qr.fitted(Xplus, y)\n> res <- qr.resid(Xplus, y)\nThese compute the orthogonal projection of y onto the range of X in fit, the projection onto the orthogonal complement in res and the coefficient vector for the projection in b, that is, b is essentially the result of the MATLAB ‘backslash’ operator.\nIt is not assumed that X has full column rank. Redundancies will be discovered and removed as they are found.\nThis alternative is the older, low-level way to perform least squares calculations. Although still useful in some contexts, it would now generally be replaced by the statistical models features, as will be discussed in Statistical models in R."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#forming-partitioned-matrices-cbind-and-rbind-sec-forming-partitioned-matrices-cbind-and-rbind",
    "href": "tutorials/R/r-manuals/test.html#forming-partitioned-matrices-cbind-and-rbind-sec-forming-partitioned-matrices-cbind-and-rbind",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.8 Forming partitioned matrices, cbind() and rbind() {#sec-forming-partitioned-matrices-cbind()-and-rbind()}",
    "text": "5.8 Forming partitioned matrices, cbind() and rbind() {#sec-forming-partitioned-matrices-cbind()-and-rbind()}\nAs we have already seen informally, matrices can be built up from other vectors and matrices by the functions cbind() and rbind(). Roughly cbind() forms matrices by binding together matrices horizontally, or column-wise, and rbind() vertically, or row-wise.\nIn the assignment\n> X <- cbind(arg_1, arg_2, arg_3, …)\nthe arguments to cbind() must be either vectors of any length, or matrices with the same column size, that is the same number of rows. The result is a matrix with the concatenated arguments arg_1, arg_2, … forming the columns.\nIf some of the arguments to cbind() are vectors they may be shorter than the column size of any matrices present, in which case they are cyclically extended to match the matrix column size (or the length of the longest vector if no matrices are given).\nThe function rbind() does the corresponding operation for rows. In this case any vector argument, possibly cyclically extended, are of course taken as row vectors.\nSuppose X1 and X2 have the same number of rows. To combine these by columns into a matrix X, together with an initial column of 1s we can use\n> X <- cbind(1, X1, X2)\nThe result of rbind() or cbind() always has matrix status. Hence cbind(x) and rbind(x) are possibly the simplest ways explicitly to allow the vector x to be treated as a column or row matrix respectively."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#the-concatenation-function-c-with-arrays-sec-the-concatenation-function-c-with-arrays",
    "href": "tutorials/R/r-manuals/test.html#the-concatenation-function-c-with-arrays-sec-the-concatenation-function-c-with-arrays",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.9 The concatenation function, c(), with arrays {#sec-the-concatenation-function-c()-with-arrays}",
    "text": "5.9 The concatenation function, c(), with arrays {#sec-the-concatenation-function-c()-with-arrays}\nIt should be noted that whereas cbind() and rbind() are concatenation functions that respect dim attributes, the basic c() function does not, but rather clears numeric objects of all dim and dimnames attributes. This is occasionally useful in its own right.\nThe official way to coerce an array back to a simple vector object is to use as.vector()\n> vec <- as.vector(X)\nHowever a similar result can be achieved by using c() with just one argument, simply for this side-effect:\n> vec <- c(X)\nThere are slight differences between the two, but ultimately the choice between them is largely a matter of style (with the former being preferable)."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-frequency-tables-from-factors",
    "href": "tutorials/R/r-manuals/test.html#sec-frequency-tables-from-factors",
    "title": "R Manuals :: An Introduction to R",
    "section": "5.10 Frequency tables from factors",
    "text": "5.10 Frequency tables from factors\nRecall that a factor defines a partition into groups. Similarly a pair of factors defines a two way cross classification, and so on. The function table() allows frequency tables to be calculated from equal length factors. If there are k factor arguments, the result is a k-way array of frequencies.\nSuppose, for example, that statef is a factor giving the state code for each entry in a data vector. The assignment\n> statefr <- table(statef)\ngives in statefr a table of frequencies of each state in the sample. The frequencies are ordered and labelled by the levels attribute of the factor. This simple case is equivalent to, but more convenient than,\n> statefr <- tapply(statef, statef, length)\nFurther suppose that incomef is a factor giving a suitably defined “income class” for each entry in the data vector, for example with the cut() function:\n> factor(cut(incomes, breaks = 35+10*(0:7))) -> incomef\nThen to calculate a two-way table of frequencies:\n> table(incomef,statef)\n         statef\nincomef   act nsw nt qld sa tas vic wa\n  (35,45]   1   1  0   1  0   0   1  0\n  (45,55]   1   1  1   1  2   0   1  3\n  (55,65]   0   3  1   3  2   2   2  1\n  (65,75]   0   1  0   0  0   0   1  0\nExtension to higher-way frequency tables is immediate."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-lists",
    "href": "tutorials/R/r-manuals/test.html#sec-lists",
    "title": "R Manuals :: An Introduction to R",
    "section": "6.1 Lists",
    "text": "6.1 Lists\nAn R list is an object consisting of an ordered collection of objects known as its components.\nThere is no particular need for the components to be of the same mode or type, and, for example, a list could consist of a numeric vector, a logical value, a matrix, a complex vector, a character array, a function, and so on. Here is a simple example of how to make a list:\n> Lst <- list(name=\"Fred\", wife=\"Mary\", no.children=3,\n              child.ages=c(4,7,9))\nComponents are always numbered and may always be referred to as such. Thus if Lst is the name of a list with four components, these may be individually referred to as Lst[[1]], Lst[[2]], Lst[[3]] and Lst[[4]]. If, further, Lst[[4]] is a vector subscripted array then Lst[[4]][1] is its first entry.\nIf Lst is a list, then the function length(Lst) gives the number of (top level) components it has.\nComponents of lists may also be named, and in this case the component may be referred to either by giving the component name as a character string in place of the number in double square brackets, or, more conveniently, by giving an expression of the form\n> name$component_name\nfor the same thing.\nThis is a very useful convention as it makes it easier to get the right component if you forget the number.\nSo in the simple example given above:\nLst$name is the same as Lst[[1]] and is the string \"Fred\",\nLst$wife is the same as Lst[[2]] and is the string \"Mary\",\nLst$child.ages[1] is the same as Lst[[4]][1] and is the number 4.\nAdditionally, one can also use the names of the list components in double square brackets, i.e., Lst[[\"name\"]] is the same as Lst$name. This is especially useful, when the name of the component to be extracted is stored in another variable as in\n> x <- \"name\"; Lst[[x]]\nIt is very important to distinguish Lst[[1]] from Lst[1]. [[``…]] is the operator used to select a single element, whereas [``…] is a general subscripting operator. Thus the former is the first object in the list Lst, and if it is a named list the name is not included. The latter is a sublist of the list Lst consisting of the first entry only. If it is a named list, the names are transferred to the sublist.\nThe names of components may be abbreviated down to the minimum number of letters needed to identify them uniquely. Thus Lst$coefficients may be minimally specified as Lst$coe and Lst$covariance as Lst$cov.\nThe vector of names is in fact simply an attribute of the list like any other and may be handled as such. Other structures besides lists may, of course, similarly be given a names attribute also."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-constructing-and-modifying-lists",
    "href": "tutorials/R/r-manuals/test.html#sec-constructing-and-modifying-lists",
    "title": "R Manuals :: An Introduction to R",
    "section": "6.2 Constructing and modifying lists",
    "text": "6.2 Constructing and modifying lists\nNew lists may be formed from existing objects by the function list(). An assignment of the form\n> Lst <- list(name_1=object_1, …, name_m=object_m)\nsets up a list Lst of m components using object_1, …, object_m for the components and giving them names as specified by the argument names, (which can be freely chosen). If these names are omitted, the components are numbered only. The components used to form the list are copied when forming the new list and the originals are not affected.\nLists, like any subscripted object, can be extended by specifying additional components. For example\n> Lst[5] <- list(matrix=Mat)\n\n6.2.1 Concatenating lists\nWhen the concatenation function c() is given list arguments, the result is an object of mode list also, whose components are those of the argument lists joined together in sequence.\n> list.ABC <- c(list.A, list.B, list.C)\nRecall that with vector objects as arguments the concatenation function similarly joined together all arguments into a single vector structure. In this case all other attributes, such as dim attributes, are discarded."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-data-frames",
    "href": "tutorials/R/r-manuals/test.html#sec-data-frames",
    "title": "R Manuals :: An Introduction to R",
    "section": "6.3 Data frames",
    "text": "6.3 Data frames\nA data frame is a list with class \"data.frame\". There are restrictions on lists that may be made into data frames, namely\n\nThe components must be vectors (numeric, character, or logical), factors, numeric matrices, lists, or other data frames.\nMatrices, lists, and data frames provide as many variables to the new data frame as they have columns, elements, or variables, respectively.\nVector structures appearing as variables of the data frame must all have the same length, and matrix structures must all have the same number of rows.\n\nA data frame may for many purposes be regarded as a matrix with columns possibly of differing modes and attributes. It may be displayed in matrix form, and its rows and columns extracted using matrix indexing conventions.\n\n6.3.1 Making data frames\nObjects satisfying the restrictions placed on the columns (components) of a data frame may be used to form one using the function data.frame:\n> accountants <- data.frame(home=statef, loot=incomes, shot=incomef)\nA list whose components conform to the restrictions of a data frame may be coerced into a data frame using the function as.data.frame()\nThe simplest way to construct a data frame from scratch is to use the read.table() function to read an entire data frame from an external file. This is discussed further in Reading data from files.\n\n\n6.3.2 attach() and detach() {#sec-attach()-and-detach()}\nThe $ notation, such as accountants$home, for list components is not always very convenient. A useful facility would be somehow to make the components of a list or data frame temporarily visible as variables under their component name, without the need to quote the list name explicitly each time.\nThe attach() function takes a ‘database’ such as a list or data frame as its argument. Thus suppose lentils is a data frame with three variables lentils$u, lentils$v, lentils$w. The attach\n> attach(lentils)\nplaces the data frame in the search path at position 2, and provided there are no variables u, v or w in position 1, u, v and w are available as variables from the data frame in their own right. At this point an assignment such as\n> u <- v+w\ndoes not replace the component u of the data frame, but rather masks it with another variable u in the working directory at position 1 on the search path. To make a permanent change to the data frame itself, the simplest way is to resort once again to the $ notation:\n> lentils$u <- v+w\nHowever the new value of component u is not visible until the data frame is detached and attached again.\nTo detach a data frame, use the function\n> detach()\nMore precisely, this statement detaches from the search path the entity currently at position 2. Thus in the present context the variables u, v and w would be no longer visible, except under the list notation as lentils$u and so on. Entities at positions greater than 2 on the search path can be detached by giving their number to detach, but it is much safer to always use a name, for example by detach(lentils) or detach(\"lentils\")\n\nNote: In R lists and data frames can only be attached at position 2 or above, and what is attached is a copy of the original object. You can alter the attached values via assign, but the original list or data frame is unchanged.\n\n\n\n6.3.3 Working with data frames\nA useful convention that allows you to work with many different problems comfortably together in the same working directory is\n\ngather together all variables for any well defined and separate problem in a data frame under a suitably informative name;\nwhen working with a problem attach the appropriate data frame at position 2, and use the working directory at level 1 for operational quantities and temporary variables;\nbefore leaving a problem, add any variables you wish to keep for future reference to the data frame using the $ form of assignment, and then detach();\nfinally remove all unwanted variables from the working directory and keep it as clean of left-over temporary variables as possible.\n\nIn this way it is quite simple to work with many problems in the same directory, all of which have variables named x, y and z, for example.\n\n\n6.3.4 Attaching arbitrary lists\nattach() is a generic function that allows not only directories and data frames to be attached to the search path, but other classes of object as well. In particular any object of mode \"list\" may be attached in the same way:\n> attach(any.old.list)\nAnything that has been attached can be detached by detach, by position number or, preferably, by name.\n\n\n6.3.5 Managing the search path\nThe function search shows the current search path and so is a very useful way to keep track of which data frames and lists (and packages) have been attached and detached. Initially it gives\n> search()\n[1] \".GlobalEnv\"   \"Autoloads\"    \"package:base\"\nwhere .GlobalEnv is the workspace.18\nAfter lentils is attached we have\n> search()\n[1] \".GlobalEnv\"   \"lentils\"      \"Autoloads\"    \"package:base\"\n> ls(2)\n[1] \"u\" \"v\" \"w\"\nand as we see ls (or objects) can be used to examine the contents of any position on the search path.\nFinally, we detach the data frame and confirm it has been removed from the search path.\n> detach(\"lentils\")\n> search()\n[1] \".GlobalEnv\"   \"Autoloads\"    \"package:base\""
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#the-read.table-function-sec-the-read.table-function",
    "href": "tutorials/R/r-manuals/test.html#the-read.table-function-sec-the-read.table-function",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.1 The read.table() function {#sec-the-read.table()-function}",
    "text": "7.1 The read.table() function {#sec-the-read.table()-function}\nTo read an entire data frame directly, the external file will normally have a special form.\n\nThe first line of the file should have a name for each variable in the data frame.\nEach additional line of the file has as its first item a row label and the values for each variable.\n\nIf the file has one fewer item in its first line than in its second, this arrangement is presumed to be in force. So the first few lines of a file to be read as a data frame might look as follows.\n\n\n\n\n\n\n\n\nInput file form with names and row labels:\n\n     Price    Floor     Area   Rooms     Age  Cent.heat\n01   52.00    111.0      830     5       6.2      no\n02   54.75    128.0      710     5       7.5      no\n03   57.50    101.0     1000     5       4.2      no\n04   57.50    131.0      690     6       8.8      no\n05   59.75     93.0      900     5       1.9     yes\n...\n\n\n\n\n\nBy default numeric items (except row labels) are read as numeric variables and non-numeric variables, such as Cent.heat in the example, as character variables. This can be changed if necessary.\nThe function read.table() can then be used to read the data frame directly\n> HousePrice <- read.table(\"houses.data\")\nOften you will want to omit including the row labels directly and use the default labels. In this case the file may omit the row label column as in the following.\n\n\n\n\n\n\n\n\nInput file form without row labels:\n\nPrice    Floor     Area   Rooms     Age  Cent.heat\n52.00    111.0      830     5       6.2      no\n54.75    128.0      710     5       7.5      no\n57.50    101.0     1000     5       4.2      no\n57.50    131.0      690     6       8.8      no\n59.75     93.0      900     5       1.9     yes\n...\n\n\n\n\n\nThe data frame may then be read as\n> HousePrice <- read.table(\"houses.data\", header=TRUE)\nwhere the header=TRUE option specifies that the first line is a line of headings, and hence, by implication from the form of the file, that no explicit row labels are given."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#the-scan-function-sec-the-scan-function",
    "href": "tutorials/R/r-manuals/test.html#the-scan-function-sec-the-scan-function",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.2 The scan() function {#sec-the-scan()-function}",
    "text": "7.2 The scan() function {#sec-the-scan()-function}\nSuppose the data vectors are of equal length and are to be read in parallel. Further suppose that there are three vectors, the first of mode character and the remaining two of mode numeric, and the file is input.dat. The first step is to use scan() to read in the three vectors as a list, as follows\n> inp <- scan(\"input.dat\", list(\"\",0,0))\nThe second argument is a dummy list structure that establishes the mode of the three vectors to be read. The result, held in inp, is a list whose components are the three vectors read in. To separate the data items into three separate vectors, use assignments like\n> label <- inp[[1]]; x <- inp[[2]]; y <- inp[[3]]\nMore conveniently, the dummy list can have named components, in which case the names can be used to access the vectors read in. For example\n> inp <- scan(\"input.dat\", list(id=\"\", x=0, y=0))\nIf you wish to access the variables separately they may either be re-assigned to variables in the working frame:\n> label <- inp$id; x <- inp$x; y <- inp$y\nor the list may be attached at position 2 of the search path (see Attaching arbitrary lists).\nIf the second argument is a single value and not a list, a single vector is read in, all components of which must be of the same mode as the dummy value.\n> X <- matrix(scan(\"light.dat\", 0), ncol=5, byrow=TRUE)\nThere are more elaborate input facilities available and these are detailed in the manuals."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-accessing-builtin-datasets",
    "href": "tutorials/R/r-manuals/test.html#sec-accessing-builtin-datasets",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.3 Accessing builtin datasets",
    "text": "7.3 Accessing builtin datasets\nAround 100 datasets are supplied with R (in package datasets), and others are available in packages (including the recommended packages supplied with R). To see the list of datasets currently available use\ndata()\nAll the datasets supplied with R are available directly by name. However, many packages still use the obsolete convention in which data was also used to load datasets into R, for example\ndata(infert)\nand this can still be used with the standard packages (as in this example). In most cases this will load an R object of the same name. However, in a few cases it loads several objects, so see the on-line help for the object to see what to expect.\n\n7.3.1 7.3.1 Loading data from other R packages\nTo access data from a particular package, use the package argument, for example\ndata(package=\"rpart\")\ndata(Puromycin, package=\"datasets\")\nIf a package has been attached by library, its datasets are automatically included in the search.\nUser-contributed packages can be a rich source of datasets."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-editing-data",
    "href": "tutorials/R/r-manuals/test.html#sec-editing-data",
    "title": "R Manuals :: An Introduction to R",
    "section": "7.4 Editing data",
    "text": "7.4 Editing data\nWhen invoked on a data frame or matrix, edit brings up a separate spreadsheet-like environment for editing. This is useful for making small changes once a data set has been read. The command\n> xnew <- edit(xold)\nwill allow you to edit your data set xold, and on completion the changed object is assigned to xnew. If you want to alter the original dataset xold, the simplest way is to use fix(xold), which is equivalent to xold <- edit(xold).\nUse\n> xnew <- edit(data.frame())\nto enter new data via the spreadsheet interface."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-r-as-a-set-of-statistical-tables",
    "href": "tutorials/R/r-manuals/test.html#sec-r-as-a-set-of-statistical-tables",
    "title": "R Manuals :: An Introduction to R",
    "section": "8.1 R as a set of statistical tables",
    "text": "8.1 R as a set of statistical tables\nOne convenient use of R is to provide a comprehensive set of statistical tables. Functions are provided to evaluate the cumulative distribution function P(X <= x), the probability density function and the quantile function (given q, the smallest x such that P(X <= x) > q), and to simulate from the distribution.\n\n\n\n\n\nDistribution\nR name\nadditional arguments\n\n\n\n\nbeta\nbeta\nshape1, shape2, ncp\n\n\nbinomial\nbinom\nsize, prob\n\n\nCauchy\ncauchy\nlocation, scale\n\n\nchi-squared\nchisq\ndf, ncp\n\n\nexponential\nexp\nrate\n\n\nF\nf\ndf1, df2, ncp\n\n\ngamma\ngamma\nshape, scale\n\n\ngeometric\ngeom\nprob\n\n\nhypergeometric\nhyper\nm, n, k\n\n\nlog-normal\nlnorm\nmeanlog, sdlog\n\n\nlogistic\nlogis\nlocation, scale\n\n\nnegative binomial\nnbinom\nsize, prob\n\n\nnormal\nnorm\nmean, sd\n\n\nPoisson\npois\nlambda\n\n\nsigned rank\nsignrank\nn\n\n\nStudent’s t\nt\ndf, ncp\n\n\nuniform\nunif\nmin, max\n\n\nWeibull\nweibull\nshape, scale\n\n\nWilcoxon\nwilcox\nm, n\n\n\n\n\n\nPrefix the name given here by ‘d’ for the density, ‘p’ for the CDF, ‘q’ for the quantile function and ‘r’ for simulation (random deviates). The first argument is x for d``xxx, q for p``xxx, p for q``xxx and n for r``xxx (except for rhyper, rsignrank and rwilcox, for which it is nn). In not quite all cases is the non-centrality parameter ncp currently available: see the on-line help for details.\nThe p``xxx and q``xxx functions all have logical arguments lower.tail and log.p and the d``xxx ones have log. This allows, e.g., getting the cumulative (or “integrated”) hazard function, H(t) = - log(1 - F(t)), by\n - pxxx(t, ..., lower.tail = FALSE, log.p = TRUE)\nor more accurate log-likelihoods (by d``xxx(..., log = TRUE)), directly.\nIn addition there are functions ptukey and qtukey for the distribution of the studentized range of samples from a normal distribution, and dmultinom and rmultinom for the multinomial distribution. Further distributions are available in contributed packages, notably SuppDists.\nHere are some examples\n> ## 2-tailed p-value for t distribution\n> 2*pt(-2.43, df = 13)\n> ## upper 1% point for an F(2, 7) distribution\n> qf(0.01, 2, 7, lower.tail = FALSE)\nSee the on-line help on RNG for how random-number generation is done in R."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-examining-the-distribution-of-a-set-of-data",
    "href": "tutorials/R/r-manuals/test.html#sec-examining-the-distribution-of-a-set-of-data",
    "title": "R Manuals :: An Introduction to R",
    "section": "8.2 Examining the distribution of a set of data",
    "text": "8.2 Examining the distribution of a set of data\nGiven a (univariate) set of data we can examine its distribution in a large number of ways. The simplest is to examine the numbers. Two slightly different summaries are given by summary and fivenum and a display of the numbers by stem (a “stem and leaf” plot).\n> attach(faithful)\n> summary(eruptions)\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.\n  1.600   2.163   4.000   3.488   4.454   5.100\n> fivenum(eruptions)\n[1] 1.6000 2.1585 4.0000 4.4585 5.1000\n> stem(eruptions)\n\n  The decimal point is 1 digit(s) to the left of the |\n\n  16 | 070355555588\n  18 | 000022233333335577777777888822335777888\n  20 | 00002223378800035778\n  22 | 0002335578023578\n  24 | 00228\n  26 | 23\n  28 | 080\n  30 | 7\n  32 | 2337\n  34 | 250077\n  36 | 0000823577\n  38 | 2333335582225577\n  40 | 0000003357788888002233555577778\n  42 | 03335555778800233333555577778\n  44 | 02222335557780000000023333357778888\n  46 | 0000233357700000023578\n  48 | 00000022335800333\n  50 | 0370\nA stem-and-leaf plot is like a histogram, and R has a function hist to plot histograms.\n> hist(eruptions)\n## make the bins smaller, make a plot of density\n> hist(eruptions, seq(1.6, 5.2, 0.2), prob=TRUE)\n> lines(density(eruptions, bw=0.1))\n> rug(eruptions) # show the actual data points\nMore elegant density plots can be made by density, and we added a line produced by density in this example. The bandwidth bw was chosen by trial-and-error as the default gives too much smoothing (it usually does for “interesting” densities). (Better automated methods of bandwidth choice are available, and in this example bw = \"SJ\" gives a good result.)\n\n\n\nimages/hist\n\n\nWe can plot the empirical cumulative distribution function by using the function ecdf.\n> plot(ecdf(eruptions), do.points=FALSE, verticals=TRUE)\nThis distribution is obviously far from any standard distribution. How about the right-hand mode, say eruptions of longer than 3 minutes? Let us fit a normal distribution and overlay the fitted CDF.\n> long <- eruptions[eruptions > 3]\n> plot(ecdf(long), do.points=FALSE, verticals=TRUE)\n> x <- seq(3, 5.4, 0.01)\n> lines(x, pnorm(x, mean=mean(long), sd=sqrt(var(long))), lty=3)\n\n\n\nimages/ecdf\n\n\nQuantile-quantile (Q-Q) plots can help us examine this more carefully.\npar(pty=\"s\")       # arrange for a square figure region\nqqnorm(long); qqline(long)\nwhich shows a reasonable fit but a shorter right tail than one would expect from a normal distribution. Let us compare this with some simulated data from a t distribution\n\n\n\nimages/QQ\n\n\nx <- rt(250, df = 5)\nqqnorm(x); qqline(x)\nwhich will usually (if it is a random sample) show longer tails than expected for a normal. We can make a Q-Q plot against the generating distribution by\nqqplot(qt(ppoints(250), df = 5), x, xlab = \"Q-Q plot for t dsn\")\nqqline(x)\nFinally, we might want a more formal test of agreement with normality (or not). R provides the Shapiro-Wilk test\n> shapiro.test(long)\n\n         Shapiro-Wilk normality test\n\ndata:  long\nW = 0.9793, p-value = 0.01052\nand the Kolmogorov-Smirnov test\n> ks.test(long, \"pnorm\", mean = mean(long), sd = sqrt(var(long)))\n\n         One-sample Kolmogorov-Smirnov test\n\ndata:  long\nD = 0.0661, p-value = 0.4284\nalternative hypothesis: two.sided\n(Note that the distribution theory is not valid here as we have estimated the parameters of the normal distribution from the same sample.)"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-one--and-two-sample-tests",
    "href": "tutorials/R/r-manuals/test.html#sec-one--and-two-sample-tests",
    "title": "R Manuals :: An Introduction to R",
    "section": "8.3 One- and two-sample tests",
    "text": "8.3 One- and two-sample tests\nSo far we have compared a single sample to a normal distribution. A much more common operation is to compare aspects of two samples. Note that in R, all “classical” tests including the ones used below are in package stats which is normally loaded.\nConsider the following sets of data on the latent heat of the fusion of ice (cal/gm) from Rice (1995, p.490)\nMethod A: 79.98 80.04 80.02 80.04 80.03 80.03 80.04 79.97\n          80.05 80.03 80.02 80.00 80.02\nMethod B: 80.02 79.94 79.98 79.97 79.97 80.03 79.95 79.97\nBoxplots provide a simple graphical comparison of the two samples.\nA <- scan()\n79.98 80.04 80.02 80.04 80.03 80.03 80.04 79.97\n80.05 80.03 80.02 80.00 80.02\n\nB <- scan()\n80.02 79.94 79.98 79.97 79.97 80.03 79.95 79.97\n\nboxplot(A, B)\nwhich indicates that the first group tends to give higher results than the second.\n\n\n\nimages/ice\n\n\nTo test for the equality of the means of the two examples, we can use an unpaired t-test by\n> t.test(A, B)\n\n         Welch Two Sample t-test\n\ndata:  A and B\nt = 3.2499, df = 12.027, p-value = 0.00694\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.01385526 0.07018320\nsample estimates:\nmean of x mean of y\n 80.02077  79.97875\nwhich does indicate a significant difference, assuming normality. By default the R function does not assume equality of variances in the two samples. We can use the F test to test for equality in the variances, provided that the two samples are from normal populations.\n> var.test(A, B)\n\n         F test to compare two variances\n\ndata:  A and B\nF = 0.5837, num df = 12, denom df =  7, p-value = 0.3938\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n 0.1251097 2.1052687\nsample estimates:\nratio of variances\n         0.5837405\nwhich shows no evidence of a significant difference, and so we can use the classical t-test that assumes equality of the variances.\n> t.test(A, B, var.equal=TRUE)\n\n         Two Sample t-test\n\ndata:  A and B\nt = 3.4722, df = 19, p-value = 0.002551\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.01669058 0.06734788\nsample estimates:\nmean of x mean of y\n 80.02077  79.97875\nAll these tests assume normality of the two samples. The two-sample Wilcoxon (or Mann-Whitney) test only assumes a common continuous distribution under the null hypothesis.\n> wilcox.test(A, B)\n\n         Wilcoxon rank sum test with continuity correction\n\ndata:  A and B\nW = 89, p-value = 0.007497\nalternative hypothesis: true location shift is not equal to 0\n\nWarning message:\nCannot compute exact p-value with ties in: wilcox.test(A, B)\nNote the warning: there are several ties in each sample, which suggests strongly that these data are from a discrete distribution (probably due to rounding).\nThere are several ways to compare graphically the two samples. We have already seen a pair of boxplots. The following\n> plot(ecdf(A), do.points=FALSE, verticals=TRUE, xlim=range(A, B))\n> plot(ecdf(B), do.points=FALSE, verticals=TRUE, add=TRUE)\nwill show the two empirical CDFs, and qqplot will perform a Q-Q plot of the two samples. The Kolmogorov-Smirnov test is of the maximal vertical distance between the two ecdf’s, assuming a common continuous distribution:\n> ks.test(A, B)\n\n         Two-sample Kolmogorov-Smirnov test\n\ndata:  A and B\nD = 0.5962, p-value = 0.05919\nalternative hypothesis: two-sided\n\nWarning message:\ncannot compute correct p-values with ties in: ks.test(A, B)"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-grouped-expressions",
    "href": "tutorials/R/r-manuals/test.html#sec-grouped-expressions",
    "title": "R Manuals :: An Introduction to R",
    "section": "9.1 Grouped expressions",
    "text": "9.1 Grouped expressions\nR is an expression language in the sense that its only command type is a function or expression which returns a result. Even an assignment is an expression whose result is the value assigned, and it may be used wherever any expression may be used; in particular multiple assignments are possible.\nCommands may be grouped together in braces, {``expr_1; ``…; ``expr_m}, in which case the value of the group is the result of the last expression in the group evaluated. Since such a group is also an expression it may, for example, be itself included in parentheses and used as part of an even larger expression, and so on."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-control-statements",
    "href": "tutorials/R/r-manuals/test.html#sec-control-statements",
    "title": "R Manuals :: An Introduction to R",
    "section": "9.2 Control statements",
    "text": "9.2 Control statements\n\n9.2.1 Conditional execution: if statements {#sec-conditional-execution:-if-statements}\nThe language has available a conditional construction of the form\n> if (expr_1) expr_2 else expr_3\nwhere expr_1 must evaluate to a single logical value and the result of the entire expression is then evident.\nThe “short-circuit” operators && and || are often used as part of the condition in an if statement. Whereas & and | apply element-wise to vectors, && and || apply to vectors of length one, and only evaluate their second argument if necessary.\nThere is a vectorized version of the if/else construct, the ifelse function. This has the form ifelse(condition, a, b) and returns a vector of the same length as condition, with elements a[i] if condition[i] is true, otherwise b[i] (where a and b are recycled as necessary).\n\n\n9.2.2 Repetitive execution: for loops, repeat and while {#sec-repetitive-execution:-for-loops-repeat-and-while}\nThere is also a for loop construction which has the form\n> for (name in expr_1) expr_2\nwhere name is the loop variable. expr_1 is a vector expression, (often a sequence like 1:20), and expr_2 is often a grouped expression with its sub-expressions written in terms of the dummy name. expr_2 is repeatedly evaluated as name ranges through the values in the vector result of expr_1.\nAs an example, suppose ind is a vector of class indicators and we wish to produce separate plots of y versus x within classes. One possibility here is to use coplot(),20 which will produce an array of plots corresponding to each level of the factor. Another way to do this, now putting all plots on the one display, is as follows:\n> xc <- split(x, ind)\n> yc <- split(y, ind)\n> for (i in 1:length(yc)) {\n    plot(xc[[i]], yc[[i]])\n    abline(lsfit(xc[[i]], yc[[i]]))\n  }\n(Note the function split() which produces a list of vectors obtained by splitting a larger vector according to the classes specified by a factor. This is a useful function, mostly used in connection with boxplots. See the help facility for further details.)\n\nWarning: for() loops are used in R code much less often than in compiled languages. Code that takes a ‘whole object’ view is likely to be both clearer and faster in R.\n\nOther looping facilities include the\n> repeat expr\nstatement and the\n> while (condition) expr\nstatement.\nThe break statement can be used to terminate any loop, possibly abnormally. This is the only way to terminate repeat loops.\nThe next statement can be used to discontinue one particular cycle and skip to the “next”.\nControl statements are most often used in connection with functions which are discussed in Section 10 , and where more examples will emerge."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-simple-examples",
    "href": "tutorials/R/r-manuals/test.html#sec-simple-examples",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.1 Simple examples",
    "text": "10.1 Simple examples\nAs a first example, consider a function to calculate the two sample t-statistic, showing “all the steps”. This is an artificial example, of course, since there are other, simpler ways of achieving the same end.\nThe function is defined as follows:\n> twosam <- function(y1, y2) {\n    n1  <- length(y1); n2  <- length(y2)\n    yb1 <- mean(y1);   yb2 <- mean(y2)\n    s1  <- var(y1);    s2  <- var(y2)\n    s <- ((n1-1)*s1 + (n2-1)*s2)/(n1+n2-2)\n    tst <- (yb1 - yb2)/sqrt(s*(1/n1 + 1/n2))\n    tst\n  }\nWith this function defined, you could perform two sample t-tests using a call such as\n> tstat <- twosam(data$male, data$female); tstat\nAs a second example, consider a function to emulate directly the MATLAB backslash command, which returns the coefficients of the orthogonal projection of the vector y onto the column space of the matrix, X. (This is ordinarily called the least squares estimate of the regression coefficients.) This would ordinarily be done with the qr() function; however this is sometimes a bit tricky to use directly and it pays to have a simple function such as the following to use it safely.\nThus given a n by 1 vector y and an n by p matrix X then X \\ y is defined as (X’X)^{-}X’y, where (X’X)^{-} is a generalized inverse of X'X.\n> bslash <- function(X, y) {\n  X <- qr(X)\n  qr.coef(X, y)\n}\nAfter this object is created it may be used in statements such as\n> regcoeff <- bslash(Xmat, yvar)\nand so on.\nThe classical R function lsfit() does this job quite well, and more21. It in turn uses the functions qr() and qr.coef() in the slightly counterintuitive way above to do this part of the calculation. Hence there is probably some value in having just this part isolated in a simple to use function if it is going to be in frequent use. If so, we may wish to make it a matrix binary operator for even more convenient use."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-defining-new-binary-operators",
    "href": "tutorials/R/r-manuals/test.html#sec-defining-new-binary-operators",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.2 Defining new binary operators",
    "text": "10.2 Defining new binary operators\nHad we given the bslash() function a different name, namely one of the form\n%anything%\nit could have been used as a binary operator in expressions rather than in function form. Suppose, for example, we choose ! for the internal character. The function definition would then start as\n> \"%!%\" <- function(X, y) { … }\n(Note the use of quote marks.) The function could then be used as X %!% y. (The backslash symbol itself is not a convenient choice as it presents special problems in this context.)\nThe matrix multiplication operator, %*%, and the outer product matrix operator %o% are other examples of binary operators defined in this way."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-named-arguments-and-defaults",
    "href": "tutorials/R/r-manuals/test.html#sec-named-arguments-and-defaults",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.3 Named arguments and defaults",
    "text": "10.3 Named arguments and defaults\nAs first noted in Generating regular sequences, if arguments to called functions are given in the “name=``object” form, they may be given in any order. Furthermore the argument sequence may begin in the unnamed, positional form, and specify named arguments after the positional arguments.\nThus if there is a function fun1 defined by\n> fun1 <- function(data, data.frame, graph, limit) {\n    [function body omitted]\n  }\nthen the function may be invoked in several ways, for example\n> ans <- fun1(d, df, TRUE, 20)\n> ans <- fun1(d, df, graph=TRUE, limit=20)\n> ans <- fun1(data=d, limit=20, graph=TRUE, data.frame=df)\nare all equivalent.\nIn many cases arguments can be given commonly appropriate default values, in which case they may be omitted altogether from the call when the defaults are appropriate. For example, if fun1 were defined as\n> fun1 <- function(data, data.frame, graph=TRUE, limit=20) { … }\nit could be called as\n> ans <- fun1(d, df)\nwhich is now equivalent to the three cases above, or as\n> ans <- fun1(d, df, limit=10)\nwhich changes one of the defaults.\nIt is important to note that defaults may be arbitrary expressions, even involving other arguments to the same function; they are not restricted to be constants as in our simple example here."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#the-sec-the--argument",
    "href": "tutorials/R/r-manuals/test.html#the-sec-the--argument",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.4 The ‘…{#sec-the-’…’-argument}",
    "text": "10.4 The ‘…{#sec-the-’…’-argument}\nAnother frequent requirement is to allow one function to pass on argument settings to another. For example many graphics functions use the function par() and functions like plot() allow the user to pass on graphical parameters to par() to control the graphical output. (See The par() function, for more details on the par() function.) This can be done by including an extra argument, literally ‘…’, of the function, which may then be passed on. An outline example is given below.\nfun1 <- function(data, data.frame, graph=TRUE, limit=20, ...) {\n  [omitted statements]\n  if (graph)\n    par(pch=\"*\", ...)\n  [more omissions]\n}\nLess frequently, a function will need to refer to components of ‘…’. The expression list(...) evaluates all such arguments and returns them in a named list, while ..1, ..2, etc. evaluate them one at a time, with ‘..n’ returning the n’th unmatched argument."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-assignments-within-functions",
    "href": "tutorials/R/r-manuals/test.html#sec-assignments-within-functions",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.5 Assignments within functions",
    "text": "10.5 Assignments within functions\nNote that any ordinary assignments done within the function are local and temporary and are lost after exit from the function. Thus the assignment X <- qr(X) does not affect the value of the argument in the calling program.\nTo understand completely the rules governing the scope of R assignments the reader needs to be familiar with the notion of an evaluation frame. This is a somewhat advanced, though hardly difficult, topic and is not covered further here.\nIf global and permanent assignments are intended within a function, then either the “superassignment” operator, <<- or the function assign() can be used. See the help document for details."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-more-advanced-examples",
    "href": "tutorials/R/r-manuals/test.html#sec-more-advanced-examples",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.6 More advanced examples",
    "text": "10.6 More advanced examples\n\n10.6.1 Efficiency factors in block designs\nAs a more complete, if a little pedestrian, example of a function, consider finding the efficiency factors for a block design. (Some aspects of this problem have already been discussed in Index matrices.)\nA block design is defined by two factors, say blocks (b levels) and varieties (v levels). If R and K are the v by v and b by b replications and block size matrices, respectively, and N is the b by v incidence matrix, then the efficiency factors are defined as the eigenvalues of the matrix E = I_v - R^{-1/2}N’K^{-1}NR^{-1/2} = I_v - A’A, where A = K^{-1/2}NR^{-1/2}. One way to write the function is given below.\n> bdeff <- function(blocks, varieties) {\n    blocks <- as.factor(blocks)             # minor safety move\n    b <- length(levels(blocks))\n    varieties <- as.factor(varieties)       # minor safety move\n    v <- length(levels(varieties))\n    K <- as.vector(table(blocks))           # remove dim attr\n    R <- as.vector(table(varieties))        # remove dim attr\n    N <- table(blocks, varieties)\n    A <- 1/sqrt(K) * N * rep(1/sqrt(R), rep(b, v))\n    sv <- svd(A)\n    list(eff=1 - sv$d^2, blockcv=sv$u, varietycv=sv$v)\n}\nIt is numerically slightly better to work with the singular value decomposition on this occasion rather than the eigenvalue routines.\nThe result of the function is a list giving not only the efficiency factors as the first component, but also the block and variety canonical contrasts, since sometimes these give additional useful qualitative information.\n\n\n10.6.2 Dropping all names in a printed array\nFor printing purposes with large matrices or arrays, it is often useful to print them in close block form without the array names or numbers. Removing the dimnames attribute will not achieve this effect, but rather the array must be given a dimnames attribute consisting of empty strings. For example to print a matrix, X\n> temp <- X\n> dimnames(temp) <- list(rep(\"\", nrow(X)), rep(\"\", ncol(X)))\n> temp; rm(temp)\nThis can be much more conveniently done using a function, no.dimnames(), shown below, as a “wrap around” to achieve the same result. It also illustrates how some effective and useful user functions can be quite short.\nno.dimnames <- function(a) {\n  ## Remove all dimension names from an array for compact printing.\n  d <- list()\n  l <- 0\n  for(i in dim(a)) {\n    d[[l <- l + 1]] <- rep(\"\", i)\n  }\n  dimnames(a) <- d\n  a\n}\nWith this function defined, an array may be printed in close format using\n> no.dimnames(X)\nThis is particularly useful for large integer arrays, where patterns are the real interest rather than the values.\n\n\n10.6.3 Recursive numerical integration\nFunctions may be recursive, and may themselves define functions within themselves. Note, however, that such functions, or indeed variables, are not inherited by called functions in higher evaluation frames as they would be if they were on the search path.\nThe example below shows a naive way of performing one-dimensional numerical integration. The integrand is evaluated at the end points of the range and in the middle. If the one-panel trapezium rule answer is close enough to the two panel, then the latter is returned as the value. Otherwise the same process is recursively applied to each panel. The result is an adaptive integration process that concentrates function evaluations in regions where the integrand is farthest from linear. There is, however, a heavy overhead, and the function is only competitive with other algorithms when the integrand is both smooth and very difficult to evaluate.\nThe example is also given partly as a little puzzle in R programming.\narea <- function(f, a, b, eps = 1.0e-06, lim = 10) {\n  fun1 <- function(f, a, b, fa, fb, a0, eps, lim, fun) {\n    ## function ‘fun1’ is only visible inside ‘area’\n    d <- (a + b)/2\n    h <- (b - a)/4\n    fd <- f(d)\n    a1 <- h * (fa + fd)\n    a2 <- h * (fd + fb)\n    if(abs(a0 - a1 - a2) < eps || lim == 0)\n      return(a1 + a2)\n    else {\n      return(fun(f, a, d, fa, fd, a1, eps, lim - 1, fun) +\n             fun(f, d, b, fd, fb, a2, eps, lim - 1, fun))\n    }\n  }\n  fa <- f(a)\n  fb <- f(b)\n  a0 <- ((fa + fb) * (b - a))/2\n  fun1(f, a, b, fa, fb, a0, eps, lim, fun1)\n}"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-scope",
    "href": "tutorials/R/r-manuals/test.html#sec-scope",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.7 Scope",
    "text": "10.7 Scope\nThe discussion in this section is somewhat more technical than in other parts of this document. However, it details one of the major differences between S-PLUS and R.\nThe symbols which occur in the body of a function can be divided into three classes; formal parameters, local variables and free variables. The formal parameters of a function are those occurring in the argument list of the function. Their values are determined by the process of binding the actual function arguments to the formal parameters. Local variables are those whose values are determined by the evaluation of expressions in the body of the functions. Variables which are not formal parameters or local variables are called free variables. Free variables become local variables if they are assigned to. Consider the following function definition.\nf <- function(x) {\n  y <- 2*x\n  print(x)\n  print(y)\n  print(z)\n}\nIn this function, x is a formal parameter, y is a local variable and z is a free variable.\nIn R the free variable bindings are resolved by first looking in the environment in which the function was created. This is called lexical scope. First we define a function called cube.\ncube <- function(n) {\n  sq <- function() n*n\n  n*sq()\n}\nThe variable n in the function sq is not an argument to that function. Therefore it is a free variable and the scoping rules must be used to ascertain the value that is to be associated with it. Under static scope (S-PLUS) the value is that associated with a global variable named n. Under lexical scope (R) it is the parameter to the function cube since that is the active binding for the variable n at the time the function sq was defined. The difference between evaluation in R and evaluation in S-PLUS is that S-PLUS looks for a global variable called n while R first looks for a variable called n in the environment created when cube was invoked.\n## first evaluation in S\nS> cube(2)\nError in sq(): Object \"n\" not found\nDumped\nS> n <- 3\nS> cube(2)\n[1] 18\n## then the same function evaluated in R\nR> cube(2)\n[1] 8\nLexical scope can also be used to give functions mutable state. In the following example we show how R can be used to mimic a bank account. A functioning bank account needs to have a balance or total, a function for making withdrawals, a function for making deposits and a function for stating the current balance. We achieve this by creating the three functions within account and then returning a list containing them. When account is invoked it takes a numerical argument total and returns a list containing the three functions. Because these functions are defined in an environment which contains total, they will have access to its value.\nThe special assignment operator, <<-, is used to change the value associated with total. This operator looks back in enclosing environments for an environment that contains the symbol total and when it finds such an environment it replaces the value, in that environment, with the value of right hand side. If the global or top-level environment is reached without finding the symbol total then that variable is created and assigned to there. For most users <<- creates a global variable and assigns the value of the right hand side to it22. Only when <<- has been used in a function that was returned as the value of another function will the special behavior described here occur.\nopen.account <- function(total) {\n  list(\n    deposit = function(amount) {\n      if(amount <= 0)\n        stop(\"Deposits must be positive!\\n\")\n      total <<- total + amount\n      cat(amount, \"deposited.  Your balance is\", total, \"\\n\\n\")\n    },\n    withdraw = function(amount) {\n      if(amount > total)\n        stop(\"You don't have that much money!\\n\")\n      total <<- total - amount\n      cat(amount, \"withdrawn.  Your balance is\", total, \"\\n\\n\")\n    },\n    balance = function() {\n      cat(\"Your balance is\", total, \"\\n\\n\")\n    }\n  )\n}\n\nross <- open.account(100)\nrobert <- open.account(200)\n\nross$withdraw(30)\nross$balance()\nrobert$balance()\n\nross$deposit(50)\nross$balance()\nross$withdraw(500)"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-customizing-the-environment",
    "href": "tutorials/R/r-manuals/test.html#sec-customizing-the-environment",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.8 Customizing the environment",
    "text": "10.8 Customizing the environment\nUsers can customize their environment in several different ways. There is a site initialization file and every directory can have its own special initialization file. Finally, the special functions .First and .Last can be used.\nThe location of the site initialization file is taken from the value of the R_PROFILE environment variable. If that variable is unset, the file Rprofile.site in the R home subdirectory etc is used. This file should contain the commands that you want to execute every time R is started under your system. A second, personal, profile file named .Rprofile23 can be placed in any directory. If R is invoked in that directory then that file will be sourced. This file gives individual users control over their workspace and allows for different startup procedures in different working directories. If no .Rprofile file is found in the startup directory, then R looks for a .Rprofile file in the user’s home directory and uses that (if it exists). If the environment variable R_PROFILE_USER is set, the file it points to is used instead of the .Rprofile files.\nAny function named .First() in either of the two profile files or in the .RData image has a special status. It is automatically performed at the beginning of an R session and may be used to initialize the environment. For example, the definition in the example below alters the prompt to $ and sets up various other useful things that can then be taken for granted in the rest of the session.\nThus, the sequence in which files are executed is, Rprofile.site, the user profile, .RData and then .First(). A definition in later files will mask definitions in earlier files.\n> .First <- function() {\n  options(prompt=\"$ \", continue=\"+\\t\")  # $ is the prompt\n  options(digits=5, length=999)         # custom numbers and printout\n  x11()                                 # for graphics\n  par(pch = \"+\")                        # plotting character\n  source(file.path(Sys.getenv(\"HOME\"), \"R\", \"mystuff.R\"))\n                                        # my personal functions\n  library(MASS)                         # attach a package\n}\nSimilarly a function .Last(), if defined, is (normally) executed at the very end of the session. An example is given below.\n> .Last <- function() {\n  graphics.off()                        # a small safety measure.\n  cat(paste(date(),\"\\nAdios\\n\"))        # Is it time for lunch?\n}"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-classes-generic-functions-and-object-orientation",
    "href": "tutorials/R/r-manuals/test.html#sec-classes-generic-functions-and-object-orientation",
    "title": "R Manuals :: An Introduction to R",
    "section": "10.9 Classes, generic functions and object orientation",
    "text": "10.9 Classes, generic functions and object orientation\nThe class of an object determines how it will be treated by what are known as generic functions. Put the other way round, a generic function performs a task or action on its arguments specific to the class of the argument itself. If the argument lacks any class attribute, or has a class not catered for specifically by the generic function in question, there is always a default action provided.\nAn example makes things clearer. The class mechanism offers the user the facility of designing and writing generic functions for special purposes. Among the other generic functions are plot() for displaying objects graphically, summary() for summarizing analyses of various types, and anova() for comparing statistical models.\nThe number of generic functions that can treat a class in a specific way can be quite large. For example, the functions that can accommodate in some fashion objects of class \"data.frame\" include\n[     [[<-    any    as.matrix\n[<-   mean    plot   summary\nA currently complete list can be got by using the methods() function:\n> methods(class=\"data.frame\")\nConversely the number of classes a generic function can handle can also be quite large. For example the plot() function has a default method and variants for objects of classes \"data.frame\", \"density\", \"factor\", and more. A complete list can be got again by using the methods() function:\n> methods(plot)\nFor many generic functions the function body is quite short, for example\n> coef\nfunction (object, ...)\nUseMethod(\"coef\")\nThe presence of UseMethod indicates this is a generic function. To see what methods are available we can use methods()\n> methods(coef)\n[1] coef.aov*         coef.Arima*       coef.default*     coef.listof*\n[5] coef.nls*         coef.summary.nls*\n\n   Non-visible functions are asterisked\nIn this example there are six methods, none of which can be seen by typing its name. We can read these by either of\n> getAnywhere(\"coef.aov\")\nA single object matching 'coef.aov' was found\nIt was found in the following places\n  registered S3 method for coef from namespace stats\n  namespace:stats\nwith value\n\nfunction (object, ...)\n{\n    z <- object$coef\n    z[!is.na(z)]\n}\n\n> getS3method(\"coef\", \"aov\")\nfunction (object, ...)\n{\n    z <- object$coef\n    z[!is.na(z)]\n}\nA function named gen.``cl will be invoked by the generic gen for class cl, so do not name functions in this style unless they are intended to be methods.\nThe reader is referred to the R Language Definition for a more complete discussion of this mechanism."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-defining-statistical-models-formulae",
    "href": "tutorials/R/r-manuals/test.html#sec-defining-statistical-models-formulae",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.1 Defining statistical models; formulae",
    "text": "11.1 Defining statistical models; formulae\nThe template for a statistical model is a linear regression model with independent, homoscedastic errors\n\ny_i = sum_{j=0}^p beta_j x_{ij} + e_i,     i = 1, …, n,\n\nwhere the e_i are NID(0, sigma^2). In matrix terms this would be written\n\ny = X  beta + e\n\nwhere the y is the response vector, X is the model matrix or design matrix and has columns x_0, x_1, …, x_p, the determining variables. Very often x_0 will be a column of ones defining an intercept term.\n\n11.1.1 Examples\nBefore giving a formal specification, a few examples may usefully set the picture.\nSuppose y, x, x0, x1, x2, … are numeric variables, X is a matrix and A, B, C, … are factors. The following formulae on the left side below specify statistical models as described on the right.\ny ~ x\ny ~ 1 + x\n: Both imply the same simple linear regression model of y on x. The first has an implicit intercept term, and the second an explicit one.\ny ~ 0 + x\ny ~ -1 + x\ny ~ x - 1\n: Simple linear regression of y on x through the origin (that is, without an intercept term).\n\nlog(y) ~ x1 + x2\n\nMultiple regression of the transformed variable, log(y), on x1 and x2 (with an implicit intercept term).\n\n\ny ~ poly(x,2)\ny ~ 1 + x + I(x^2)\n: Polynomial regression of y on x of degree 2. The first form uses orthogonal polynomials, and the second uses explicit powers, as basis.\n\ny ~ X + poly(x,2)\n\nMultiple regression y with model matrix consisting of the matrix X as well as polynomial terms in x to degree 2.\n\ny ~ A\n\nSingle classification analysis of variance model of y, with classes determined by A.\n\ny ~ A + x\n\nSingle classification analysis of covariance model of y, with classes determined by A, and with covariate x.\n\n\ny ~ A*B\ny ~ A + B + A:B\ny ~ B %in% A\ny ~ A/B\n: Two factor non-additive model of y on A and B. The first two specify the same crossed classification and the second two specify the same nested classification. In abstract terms all four specify the same model subspace.\ny ~ (A + B + C)^2\ny ~ A*B*C - A:B:C\n: Three factor experiment but with a model containing main effects and two factor interactions only. Both formulae specify the same model.\ny ~ A * x\ny ~ A/x\ny ~ A/(1 + x) - 1\n: Separate simple linear regression models of y on x within the levels of A, with different codings. The last form produces explicit estimates of as many different intercepts and slopes as there are levels in A.\n\ny ~ A*B + Error(C)\n\nAn experiment with two treatment factors, A and B, and error strata determined by factor C. For example a split plot experiment, with whole plots (and hence also subplots), determined by factor C.\n\n\nThe operator ~ is used to define a model formula in R. The form, for an ordinary linear model, is\nresponse ~ op_1 term_1 op_2 term_2 op_3 term_3 …\nwhere\n\nresponse\n\nis a vector or matrix, (or expression evaluating to a vector or matrix) defining the response variable(s).\n\nop_i\n\nis an operator, either + or -, implying the inclusion or exclusion of a term in the model, (the first is optional).\n\nterm_i\n\nis either\n\na vector or matrix expression, or 1,\na factor, or\na formula expression consisting of factors, vectors or matrices connected by formula operators.\n\nIn all cases each term defines a collection of columns either to be added to or removed from the model matrix. A 1 stands for an intercept column and is by default included in the model matrix unless explicitly removed.\n\n\nThe formula operators are similar in effect to the Wilkinson and Rogers notation used by such programs as Glim and Genstat. One inevitable change is that the operator .’ becomes ’: since the period is a valid name character in R.\nThe notation is summarized below (based on Chambers & Hastie, 1992, p.29):\n\nY~ ``M\n\nY is modeled as M.\n\nM_1+ ``M_2\n\nInclude M_1 and M_2.\n\nM_1- ``M_2\n\nInclude M_1 leaving out terms of M_2.\n\nM_1: ``M_2\n\nThe tensor product of M_1 and M_2. If both terms are factors, then the “subclasses” factor.\n\nM_1%in% ``M_2\n\nSimilar to M_1:``M_2, but with a different coding.\n\nM_1* ``M_2\n\nM_1+ ``M_2+ ``M_1:``M_2.\n\nM_1/ ``M_2\n\nM_1+ ``M_2%in% ``M_1.\n\nM^``n\n\nAll terms in M together with “interactions” up to order n\n\nI(``M)\n\nInsulate M. Inside M all operators have their normal arithmetic meaning, and that term appears in the model matrix.\n\n\nNote that inside the parentheses that usually enclose function arguments all operators have their normal arithmetic meaning. The function I() is an identity function used to allow terms in model formulae to be defined using arithmetic operators.\nNote particularly that the model formulae specify the columns of the model matrix, the specification of the parameters being implicit. This is not the case in other contexts, for example in specifying nonlinear models.\n\n\n11.1.2 Contrasts\nWe need at least some idea how the model formulae specify the columns of the model matrix. This is easy if we have continuous variables, as each provides one column of the model matrix (and the intercept will provide a column of ones if included in the model).\nWhat about a k-level factor A? The answer differs for unordered and ordered factors. For unordered factors k - 1 columns are generated for the indicators of the second, …, kth levels of the factor. (Thus the implicit parameterization is to contrast the response at each level with that at the first.) For ordered factors the k - 1 columns are the orthogonal polynomials on 1, …, k, omitting the constant term.\nAlthough the answer is already complicated, it is not the whole story. First, if the intercept is omitted in a model that contains a factor term, the first such term is encoded into k columns giving the indicators for all the levels. Second, the whole behavior can be changed by the options setting for contrasts. The default setting in R is\noptions(contrasts = c(\"contr.treatment\", \"contr.poly\"))\nThe main reason for mentioning this is that R and S have different defaults for unordered factors, S using Helmert contrasts. So if you need to compare your results to those of a textbook or paper which used S-PLUS, you will need to set\noptions(contrasts = c(\"contr.helmert\", \"contr.poly\"))\nThis is a deliberate difference, as treatment contrasts (R’s default) are thought easier for newcomers to interpret.\nWe have still not finished, as the contrast scheme to be used can be set for each term in the model using the functions contrasts and C.\nWe have not yet considered interaction terms: these generate the products of the columns introduced for their component terms.\nAlthough the details are complicated, model formulae in R will normally generate the models that an expert statistician would expect, provided that marginality is preserved. Fitting, for example, a model with an interaction but not the corresponding main effects will in general lead to surprising results, and is for experts only."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-linear-models",
    "href": "tutorials/R/r-manuals/test.html#sec-linear-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.2 Linear models",
    "text": "11.2 Linear models\nThe basic function for fitting ordinary multiple models is lm(), and a streamlined version of the call is as follows:\n> fitted.model <- lm(formula, data = data.frame)\nFor example\n> fm2 <- lm(y ~ x1 + x2, data = production)\nwould fit a multiple regression model of y on x1 and x2 (with implicit intercept term).\nThe important (but technically optional) parameter data = production specifies that any variables needed to construct the model should come first from the production data frame. This is the case regardless of whether data frame production has been attached on the search path or not."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-generic-functions-for-extracting-model-information",
    "href": "tutorials/R/r-manuals/test.html#sec-generic-functions-for-extracting-model-information",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.3 Generic functions for extracting model information",
    "text": "11.3 Generic functions for extracting model information\nThe value of lm() is a fitted model object; technically a list of results of class \"lm\". Information about the fitted model can then be displayed, extracted, plotted and so on by using generic functions that orient themselves to objects of class \"lm\". These include\nadd1    deviance   formula      predict  step\nalias   drop1      kappa        print    summary\nanova   effects    labels       proj     vcov\ncoef    family     plot         residuals\nA brief description of the most commonly used ones is given below.\n\nanova(``object_1, ``object_2)\nCompare a submodel with an outer model and produce an analysis of variance table.\ncoef(``object)\nExtract the regression coefficient (matrix).\nLong form: coefficients(``object).\ndeviance(``object)\nResidual sum of squares, weighted if appropriate.\nformula(``object)\nExtract the model formula.\nplot(``object)\nProduce four plots, showing residuals, fitted values and some diagnostics.\npredict(``object, newdata=``data.frame)\nThe data frame supplied must have variables specified with the same labels as the original. The value is a vector or matrix of predicted values corresponding to the determining variable values in data.frame.\nprint(``object)\nPrint a concise version of the object. Most often used implicitly.\nresiduals(``object)\nExtract the (matrix of) residuals, weighted as appropriate.\nShort form: resid(``object).\nstep(``object)\nSelect a suitable model by adding or dropping terms and preserving hierarchies. The model with the smallest value of AIC (Akaike’s An Information Criterion) discovered in the stepwise search is returned.\nsummary(``object)\nPrint a comprehensive summary of the results of the regression analysis.\nvcov(``object)\nReturns the variance-covariance matrix of the main parameters of a fitted model object."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-analysis-of-variance-and-model-comparison",
    "href": "tutorials/R/r-manuals/test.html#sec-analysis-of-variance-and-model-comparison",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.4 Analysis of variance and model comparison",
    "text": "11.4 Analysis of variance and model comparison\nThe model fitting function aov(``formula, data=``data.frame) operates at the simplest level in a very similar way to the function lm(), and most of the generic functions listed in the table in Generic functions for extracting model information apply.\nIt should be noted that in addition aov() allows an analysis of models with multiple error strata such as split plot experiments, or balanced incomplete block designs with recovery of inter-block information. The model formula\nresponse ~ mean.formula + Error(strata.formula)\nspecifies a multi-stratum experiment with error strata defined by the strata.formula. In the simplest case, strata.formula is simply a factor, when it defines a two strata experiment, namely between and within the levels of the factor.\nFor example, with all determining variables factors, a model formula such as that in:\n> fm <- aov(yield ~ v + n*p*k + Error(farms/blocks), data=farm.data)\nwould typically be used to describe an experiment with mean model v + n*p*k and three error strata, namely “between farms”, “within farms, between blocks” and “within blocks”.\n\n11.4.1 ANOVA tables\nNote also that the analysis of variance table (or tables) are for a sequence of fitted models. The sums of squares shown are the decrease in the residual sums of squares resulting from an inclusion of that term in the model at that place in the sequence. Hence only for orthogonal experiments will the order of inclusion be inconsequential.\nFor multistratum experiments the procedure is first to project the response onto the error strata, again in sequence, and to fit the mean model to each projection. For further details, see Chambers & Hastie (1992).\nA more flexible alternative to the default full ANOVA table is to compare two or more models directly using the anova() function.\n> anova(fitted.model.1, fitted.model.2, …)\nThe display is then an ANOVA table showing the differences between the fitted models when fitted in sequence. The fitted models being compared would usually be an hierarchical sequence, of course. This does not give different information to the default, but rather makes it easier to comprehend and control."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-updating-fitted-models",
    "href": "tutorials/R/r-manuals/test.html#sec-updating-fitted-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.5 Updating fitted models",
    "text": "11.5 Updating fitted models\nThe update() function is largely a convenience function that allows a model to be fitted that differs from one previously fitted usually by just a few additional or removed terms. Its form is\n> new.model <- update(old.model, new.formula)\nIn the new.formula the special name consisting of a period, ., only, can be used to stand for “the corresponding part of the old model formula”. For example,\n> fm05 <- lm(y ~ x1 + x2 + x3 + x4 + x5, data = production)\n> fm6  <- update(fm05, . ~ . + x6)\n> smf6 <- update(fm6, sqrt(.) ~ .)\nwould fit a five variate multiple regression with variables (presumably) from the data frame production, fit an additional model including a sixth regressor variable, and fit a variant on the model where the response had a square root transform applied.\nNote especially that if the data= argument is specified on the original call to the model fitting function, this information is passed on through the fitted model object to update() and its allies.\nThe name ‘.’ can also be used in other contexts, but with slightly different meaning. For example\n> fmfull <- lm(y ~ . , data = production)\nwould fit a model with response y and regressor variables all other variables in the data frame production.\nOther functions for exploring incremental sequences of models are add1(), drop1() and step(). The names of these give a good clue to their purpose, but for full details see the on-line help."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-generalized-linear-models",
    "href": "tutorials/R/r-manuals/test.html#sec-generalized-linear-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.6 Generalized linear models",
    "text": "11.6 Generalized linear models\nGeneralized linear modeling is a development of linear models to accommodate both non-normal response distributions and transformations to linearity in a clean and straightforward way. A generalized linear model may be described in terms of the following sequence of assumptions:\n\nThere is a response, y, of interest and stimulus variables x_1, x_2, …, whose values influence the distribution of the response.\nThe stimulus variables influence the distribution of y through a single linear function, only. This linear function is called the linear predictor, and is usually written\n\neta = beta_1 x_1 + beta_2 x_2 + … + beta_p x_p,\n\nhence x_i has no influence on the distribution of y if and only if beta_i is zero.\nThe distribution of y is of the form\n\nf_Y(y; mu, phi)\n  = exp((A/phi) * (y lambda(mu) - gamma(lambda(mu))) + tau(y, phi))\n\nwhere phi is a scale parameter (possibly known), and is constant for all observations, A represents a prior weight, assumed known but possibly varying with the observations, and $\\mu$ is the mean of y. So it is assumed that the distribution of y is determined by its mean and possibly a scale parameter as well.\nThe mean, mu, is a smooth invertible function of the linear predictor:\n\nmu = m(eta),    eta = m^{-1}(mu) = ell(mu)\n\nand this inverse function, ell(), is called the link function.\n\nThese assumptions are loose enough to encompass a wide class of models useful in statistical practice, but tight enough to allow the development of a unified methodology of estimation and inference, at least approximately. The reader is referred to any of the current reference works on the subject for full details, such as McCullagh & Nelder (1989) or Dobson (1990).\n\n11.6.1 Families\nThe class of generalized linear models handled by facilities supplied in R includes gaussian, binomial, poisson, inverse gaussian and gamma response distributions and also quasi-likelihood models where the response distribution is not explicitly specified. In the latter case the variance function must be specified as a function of the mean, but in other cases this function is implied by the response distribution.\nEach response distribution admits a variety of link functions to connect the mean with the linear predictor. Those automatically available are shown in the following table:\n\n\n\n\n\nFamily name\nLink functions\n\n\n\n\nbinomial\nlogit, probit, log, cloglog\n\n\ngaussian\nidentity, log, inverse\n\n\nGamma\nidentity, inverse, log\n\n\ninverse.gaussian\n1/mu^2, identity, inverse, log\n\n\npoisson\nidentity, log, sqrt\n\n\nquasi\nlogit, probit, cloglog, identity, inverse, log, 1/mu^2, sqrt\n\n\n\n\n\nThe combination of a response distribution, a link function and various other pieces of information that are needed to carry out the modeling exercise is called the family of the generalized linear model.\n\n\n11.6.2 The glm() function {#sec-the-glm()-function}\nSince the distribution of the response depends on the stimulus variables through a single linear function only, the same mechanism as was used for linear models can still be used to specify the linear part of a generalized model. The family has to be specified in a different way.\nThe R function to fit a generalized linear model is glm() which uses the form\n> fitted.model <- glm(formula, family=family.generator, data=data.frame)\nThe only new feature is the family.generator, which is the instrument by which the family is described. It is the name of a function that generates a list of functions and expressions that together define and control the model and estimation process. Although this may seem a little complicated at first sight, its use is quite simple.\nThe names of the standard, supplied family generators are given under “Family Name” in the table in Families. Where there is a choice of links, the name of the link may also be supplied with the family name, in parentheses as a parameter. In the case of the quasi family, the variance function may also be specified in this way.\nSome examples make the process clear.\n\n\n11.6.3 The gaussian family {#sec-the-gaussian-family}\nA call such as\n> fm <- glm(y ~ x1 + x2, family = gaussian, data = sales)\nachieves the same result as\n> fm <- lm(y ~ x1+x2, data=sales)\nbut much less efficiently. Note how the gaussian family is not automatically provided with a choice of links, so no parameter is allowed. If a problem requires a gaussian family with a nonstandard link, this can usually be achieved through the quasi family, as we shall see later.\n\n\n11.6.4 The binomial family {#sec-the-binomial-family}\nConsider a small, artificial example, from Silvey (1970).\nOn the Aegean island of Kalythos the male inhabitants suffer from a congenital eye disease, the effects of which become more marked with increasing age. Samples of islander males of various ages were tested for blindness and the results recorded. The data is shown below:\nThe problem we consider is to fit both logistic and probit models to this data, and to estimate for each model the LD50, that is the age at which the chance of blindness for a male inhabitant is 50%.\nIf y is the number of blind at age x and n the number tested, both models have the form y ~ B(n, F(beta_0 + beta_1 x)) where for the probit case, F(z) = Phi(z) is the standard normal distribution function, and in the logit case (the default), F(z) = e^z/(1+e^z). In both cases the LD50 is LD50 = - beta_0/beta_1 that is, the point at which the argument of the distribution function is zero.\nThe first step is to set the data up as a data frame\n> kalythos <- data.frame(x = c(20,35,45,55,70), n = rep(50,5),\n                         y = c(6,17,26,37,44))\nTo fit a binomial model using glm() there are three possibilities for the response:\n\nIf the response is a vector it is assumed to hold binary data, and so must be a 0/1 vector.\nIf the response is a two-column matrix it is assumed that the first column holds the number of successes for the trial and the second holds the number of failures.\nIf the response is a factor, its first level is taken as failure (0) and all other levels as ‘success’ (1).\n\nHere we need the second of these conventions, so we add a matrix to our data frame:\n> kalythos$Ymat <- cbind(kalythos$y, kalythos$n - kalythos$y)\nTo fit the models we use\n> fmp <- glm(Ymat ~ x, family = binomial(link=probit), data = kalythos)\n> fml <- glm(Ymat ~ x, family = binomial, data = kalythos)\nSince the logit link is the default the parameter may be omitted on the second call. To see the results of each fit we could use\n> summary(fmp)\n> summary(fml)\nBoth models fit (all too) well. To find the LD50 estimate we can use a simple function:\n> ld50 <- function(b) -b[1]/b[2]\n> ldp <- ld50(coef(fmp)); ldl <- ld50(coef(fml)); c(ldp, ldl)\nThe actual estimates from this data are 43.663 years and 43.601 years respectively.\n\n\n11.6.5 Poisson models\nWith the Poisson family the default link is the log, and in practice the major use of this family is to fit surrogate Poisson log-linear models to frequency data, whose actual distribution is often multinomial. This is a large and important subject we will not discuss further here. It even forms a major part of the use of non-gaussian generalized models overall.\nOccasionally genuinely Poisson data arises in practice and in the past it was often analyzed as gaussian data after either a log or a square-root transformation. As a graceful alternative to the latter, a Poisson generalized linear model may be fitted as in the following example:\n> fmod <- glm(y ~ A + B + x, family = poisson(link=sqrt),\n              data = worm.counts)\n\n\n11.6.6 Quasi-likelihood models\nFor all families the variance of the response will depend on the mean and will have the scale parameter as a multiplier. The form of dependence of the variance on the mean is a characteristic of the response distribution; for example for the poisson distribution Var(y) = mu.\nFor quasi-likelihood estimation and inference the precise response distribution is not specified, but rather only a link function and the form of the variance function as it depends on the mean. Since quasi-likelihood estimation uses formally identical techniques to those for the gaussian distribution, this family provides a way of fitting gaussian models with non-standard link functions or variance functions, incidentally.\nFor example, consider fitting the non-linear regression y = theta_1 z_1 / (z_2 - theta_2) + e which may be written alternatively as y = 1 / (beta_1 x_1 + beta_2 x_2) + e where x_1 = z_2/z_1, x_2 = -1/z_1, beta_1 = 1/theta_1, and beta_2 = theta_2/theta_1. Supposing a suitable data frame to be set up we could fit this non-linear regression as\n> nlfit <- glm(y ~ x1 + x2 - 1,\n               family = quasi(link=inverse, variance=constant),\n               data = biochem)\nThe reader is referred to the manual and the help document for further information, as needed."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-nonlinear-least-squares-and-maximum-likelihood-models",
    "href": "tutorials/R/r-manuals/test.html#sec-nonlinear-least-squares-and-maximum-likelihood-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.7 Nonlinear least squares and maximum likelihood models",
    "text": "11.7 Nonlinear least squares and maximum likelihood models\nCertain forms of nonlinear model can be fitted by Generalized Linear Models (glm()). But in the majority of cases we have to approach the nonlinear curve fitting problem as one of nonlinear optimization. R’s nonlinear optimization routines are optim(), nlm() and nlminb(), We seek the parameter values that minimize some index of lack-of-fit, and they do this by trying out various parameter values iteratively. Unlike linear regression for example, there is no guarantee that the procedure will converge on satisfactory estimates. All the methods require initial guesses about what parameter values to try, and convergence may depend critically upon the quality of the starting values.\n\n11.7.1 Least squares\nOne way to fit a nonlinear model is by minimizing the sum of the squared errors (SSE) or residuals. This method makes sense if the observed errors could have plausibly arisen from a normal distribution.\nHere is an example from Bates & Watts (1988), page 51. The data are:\n> x <- c(0.02, 0.02, 0.06, 0.06, 0.11, 0.11, 0.22, 0.22, 0.56, 0.56,\n         1.10, 1.10)\n> y <- c(76, 47, 97, 107, 123, 139, 159, 152, 191, 201, 207, 200)\nThe fit criterion to be minimized is:\n> fn <- function(p) sum((y - (p[1] * x)/(p[2] + x))^2)\nIn order to do the fit we need initial estimates of the parameters. One way to find sensible starting values is to plot the data, guess some parameter values, and superimpose the model curve using those values.\n> plot(x, y)\n> xfit <- seq(.02, 1.1, .05)\n> yfit <- 200 * xfit/(0.1 + xfit)\n> lines(spline(xfit, yfit))\nWe could do better, but these starting values of 200 and 0.1 seem adequate. Now do the fit:\n> out <- nlm(fn, p = c(200, 0.1), hessian = TRUE)\nAfter the fitting, out$minimum is the SSE, and out$estimate are the least squares estimates of the parameters. To obtain the approximate standard errors (SE) of the estimates we do:\n> sqrt(diag(2*out$minimum/(length(y) - 2) * solve(out$hessian)))\nThe 2 which is subtracted in the line above represents the number of parameters. A 95% confidence interval would be the parameter estimate +/- 1.96 SE. We can superimpose the least squares fit on a new plot:\n> plot(x, y)\n> xfit <- seq(.02, 1.1, .05)\n> yfit <- 212.68384222 * xfit/(0.06412146 + xfit)\n> lines(spline(xfit, yfit))\nThe standard package stats provides much more extensive facilities for fitting non-linear models by least squares. The model we have just fitted is the Michaelis-Menten model, so we can use\n> df <- data.frame(x=x, y=y)\n> fit <- nls(y ~ SSmicmen(x, Vm, K), df)\n> fit\nNonlinear regression model\n  model:  y ~ SSmicmen(x, Vm, K)\n   data:  df\n          Vm            K\n212.68370711   0.06412123\n residual sum-of-squares:  1195.449\n> summary(fit)\n\nFormula: y ~ SSmicmen(x, Vm, K)\n\nParameters:\n    Estimate Std. Error t value Pr(>|t|)\nVm 2.127e+02  6.947e+00  30.615 3.24e-11\nK  6.412e-02  8.281e-03   7.743 1.57e-05\n\nResidual standard error: 10.93 on 10 degrees of freedom\n\nCorrelation of Parameter Estimates:\n      Vm\nK 0.7651\n\n\n11.7.2 Maximum likelihood\nMaximum likelihood is a method of nonlinear model fitting that applies even if the errors are not normal. The method finds the parameter values which maximize the log likelihood, or equivalently which minimize the negative log-likelihood. Here is an example from Dobson (1990), pp. 108–111. This example fits a logistic model to dose-response data, which clearly could also be fit by glm(). The data are:\n> x <- c(1.6907, 1.7242, 1.7552, 1.7842, 1.8113,\n         1.8369, 1.8610, 1.8839)\n> y <- c( 6, 13, 18, 28, 52, 53, 61, 60)\n> n <- c(59, 60, 62, 56, 63, 59, 62, 60)\nThe negative log-likelihood to minimize is:\n> fn <- function(p)\n   sum( - (y*(p[1]+p[2]*x) - n*log(1+exp(p[1]+p[2]*x))\n           + log(choose(n, y)) ))\nWe pick sensible starting values and do the fit:\n> out <- nlm(fn, p = c(-50,20), hessian = TRUE)\nAfter the fitting, out$minimum is the negative log-likelihood, and out$estimate are the maximum likelihood estimates of the parameters. To obtain the approximate SEs of the estimates we do:\n> sqrt(diag(solve(out$hessian)))\nA 95% confidence interval would be the parameter estimate +/- 1.96 SE."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-some-non-standard-models",
    "href": "tutorials/R/r-manuals/test.html#sec-some-non-standard-models",
    "title": "R Manuals :: An Introduction to R",
    "section": "11.8 Some non-standard models",
    "text": "11.8 Some non-standard models\nWe conclude this chapter with just a brief mention of some of the other facilities available in R for special regression and data analysis problems.\n\n Mixed models. The recommended nlme package provides functions lme() and nlme() for linear and non-linear mixed-effects models, that is linear and non-linear regressions in which some of the coefficients correspond to random effects. These functions make heavy use of formulae to specify the models.\n Local approximating regressions. The loess() function fits a nonparametric regression by using a locally weighted regression. Such regressions are useful for highlighting a trend in messy data or for data reduction to give some insight into a large data set.\nFunction loess is in the standard package stats, together with code for projection pursuit regression.\n Robust regression. There are several functions available for fitting regression models in a way resistant to the influence of extreme outliers in the data. Function lqs in the recommended package MASS provides state-of-art algorithms for highly-resistant fits. Less resistant but statistically more efficient methods are available in packages, for example function rlm in package MASS.\n Additive models. This technique aims to construct a regression function from smooth additive functions of the determining variables, usually one for each determining variable. Functions avas and ace in package acepack and functions bruto and mars in package mda provide some examples of these techniques in user-contributed packages to R. An extension is Generalized Additive Models, implemented in user-contributed packages gam and mgcv.\n Tree-based models. Rather than seek an explicit global linear model for prediction or interpretation, tree-based models seek to bifurcate the data, recursively, at critical points of the determining variables in order to partition the data ultimately into groups that are as homogeneous as possible within, and as heterogeneous as possible between. The results often lead to insights that other data analysis methods tend not to yield.\nModels are again specified in the ordinary linear model form. The model fitting function is tree(), but many other generic functions such as plot() and text() are well adapted to displaying the results of a tree-based model fit in a graphical way.\nTree models are available in R via the user-contributed packages rpart and tree."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-high-level-plotting-commands",
    "href": "tutorials/R/r-manuals/test.html#sec-high-level-plotting-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.1 High-level plotting commands",
    "text": "12.1 High-level plotting commands\nHigh-level plotting functions are designed to generate a complete plot of the data passed as arguments to the function. Where appropriate, axes, labels and titles are automatically generated (unless you request otherwise.) High-level plotting commands always start a new plot, erasing the current plot if necessary.\n\n12.1.1 The plot() function {#sec-the-plot()-function}\nOne of the most frequently used plotting functions in R is the plot() function. This is a generic function: the type of plot produced is dependent on the type or class of the first argument.\nplot(``x, ``y)\nplot(``xy)\n: If x and y are vectors, plot(``x, ``y) produces a scatterplot of y against x. The same effect can be produced by supplying one argument (second form) as either a list containing two elements x and y or a two-column matrix.\n\nplot(``x)\n\nIf x is a time series, this produces a time-series plot. If x is a numeric vector, it produces a plot of the values in the vector against their index in the vector. If x is a complex vector, it produces a plot of imaginary versus real parts of the vector elements.\n\n\nplot(``f)\nplot(``f, ``y)\n: f is a factor object, y is a numeric vector. The first form generates a bar plot of f; the second form produces boxplots of y for each level of f.\nplot(``df)\nplot(~ ``expr)\nplot(``y~ ``expr)\n: df is a data frame, y is any object, expr is a list of object names separated by + (e.g., a + b + c). The first two forms produce distributional plots of the variables in a data frame (first form) or of a number of named objects (second form). The third form plots y against every object named in expr.\n\n\n12.1.2 Displaying multivariate data\nR provides two very useful functions for representing multivariate data. If X is a numeric matrix or data frame, the command\n> pairs(X)\nproduces a pairwise scatterplot matrix of the variables defined by the columns of X, that is, every column of X is plotted against every other column of X and the resulting n(n-1) plots are arranged in a matrix with plot scales constant over the rows and columns of the matrix.\nWhen three or four variables are involved a coplot may be more enlightening. If a and b are numeric vectors and c is a numeric vector or factor object (all of the same length), then the command\n> coplot(a ~ b | c)\nproduces a number of scatterplots of a against b for given values of c. If c is a factor, this simply means that a is plotted against b for every level of c. When c is numeric, it is divided into a number of conditioning intervals and for each interval a is plotted against b for values of c within the interval. The number and position of intervals can be controlled with given.values= argument to coplot()—the function co.intervals() is useful for selecting intervals. You can also use two given variables with a command like\n> coplot(a ~ b | c + d)\nwhich produces scatterplots of a against b for every joint conditioning interval of c and d.\nThe coplot() and pairs() function both take an argument panel= which can be used to customize the type of plot which appears in each panel. The default is points() to produce a scatterplot but by supplying some other low-level graphics function of two vectors x and y as the value of panel= you can produce any type of plot you wish. An example panel function useful for coplots is panel.smooth().\n\n\n12.1.3 Display graphics\nOther high-level graphics functions produce different types of plots. Some examples are:\nqqnorm(x)\nqqline(x)\nqqplot(x, y)\n: \nDistribution-comparison plots. The first form plots the numeric\nvector `x` against the expected Normal order scores (a normal scores\nplot) and the second adds a straight line to such a plot by drawing\na line through the distribution and data quartiles. The third form\nplots the quantiles of `x` against those of `y` to compare their\nrespective distributions.\nhist(x)\nhist(x, nclass=``n)\nhist(x, breaks=``b, …)\n: \nProduces a histogram of the numeric vector `x`. A sensible number of\nclasses is usually chosen, but a recommendation can be given with\nthe `nclass=` argument. Alternatively, the breakpoints can be\nspecified exactly with the `breaks=` argument. If the\n`probability=TRUE` argument is given, the bars represent relative\nfrequencies divided by bin width instead of counts.\n\ndotchart(x, …)\n\n\nConstructs a dotchart of the data in x. In a dotchart the y-axis gives a labelling of the data in x and the x-axis gives its value. For example it allows easy visual selection of all data entries with values lying in specified ranges.\n\n\nimage(x, y, z, …)\ncontour(x, y, z, …)\npersp(x, y, z, …)\n: \nPlots of three variables. The `image` plot draws a grid of\nrectangles using different colours to represent the value of `z`,\nthe `contour` plot draws contour lines to represent the value of\n`z`, and the `persp` plot draws a 3D surface.\n\n\n12.1.4 Arguments to high-level plotting functions\nThere are a number of arguments which may be passed to high-level graphics functions, as follows:\n\nadd=TRUE\n\nForces the function to act as a low-level graphics function, superimposing the plot on the current plot (some functions only).\n\naxes=FALSE\n\nSuppresses generation of axes—useful for adding your own custom axes with the axis() function. The default, axes=TRUE, means include axes.\n\n\nlog=\"x\"\nlog=\"y\"\nlog=\"xy\"\n: Causes the x, y or both axes to be logarithmic. This will work for many, but not all, types of plot.\n\ntype=\n\nThe type= argument controls the type of plot produced, as follows:\n\ntype=\"p\"\n\nPlot individual points (the default)\n\ntype=\"l\"\n\nPlot lines\n\ntype=\"b\"\n\nPlot points connected by lines (both)\n\ntype=\"o\"\n\nPlot points overlaid by lines\n\ntype=\"h\"\n\nPlot vertical lines from points to the zero axis (high-density)\n\n\ntype=\"s\"\ntype=\"S\"\n: Step-function plots. In the first form, the top of the vertical defines the point; in the second, the bottom.\n\ntype=\"n\"\n\nNo plotting at all. However axes are still drawn (by default) and the coordinate system is set up according to the data. Ideal for creating plots with subsequent low-level graphics functions.\n\n\n\n\nxlab=``string\nylab=``string\n: Axis labels for the x and y axes. Use these arguments to change the default labels, usually the names of the objects used in the call to the high-level plotting function.\n\nmain=``string\n\nFigure title, placed at the top of the plot in a large font.\n\nsub=``string\n\nSub-title, placed just below the x-axis in a smaller font."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-low-level-plotting-commands",
    "href": "tutorials/R/r-manuals/test.html#sec-low-level-plotting-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.2 Low-level plotting commands",
    "text": "12.2 Low-level plotting commands\nSometimes the high-level plotting functions don’t produce exactly the kind of plot you desire. In this case, low-level plotting commands can be used to add extra information (such as points, lines or text) to the current plot.\nSome of the more useful low-level plotting functions are:\npoints(x, y)\nlines(x, y)\n: \nAdds points or connected lines to the current plot. `plot()`'s\n`type=` argument can also be passed to these functions (and defaults\nto `\"p\"` for `points()` and `\"l\"` for `lines()`.)\n\ntext(x, y, labels, …)\n\n\nAdd text to a plot at points given by x, y. Normally labels is an integer or character vector in which case labels[i] is plotted at point (x[i], y[i]). The default is 1:length(x).\nNote: This function is often used in the sequence\n> plot(x, y, type=\"n\"); text(x, y, names)\nThe graphics parameter type=\"n\" suppresses the points but sets up the axes, and the text() function supplies special characters, as specified by the character vector names for the points.\n\n\nabline(a, b)\nabline(h=``y)\nabline(v=``x)\nabline(``lm.obj)\n: \nAdds a line of slope `b` and intercept `a` to the current plot.\n`h=``y`{.variable} may be used to specify *y*-coordinates for the\nheights of horizontal lines to go across a plot, and\n`v=``x`{.variable} similarly for the *x*-coordinates for vertical\nlines. Also `lm.obj`{.variable} may be list with a `coefficients`\ncomponent of length 2 (such as the result of model-fitting\nfunctions,) which are taken as an intercept and slope, in that\norder.\n\npolygon(x, y, …)\n\n\nDraws a polygon defined by the ordered vertices in (x, y) and (optionally) shade it in with hatch lines, or fill it if the graphics device allows the filling of figures.\n\nlegend(x, y, legend, …)\n\n\nAdds a legend to the current plot at the specified position. Plotting characters, line styles, colors etc., are identified with the labels in the character vector legend. At least one other argument v (a vector the same length as legend) with the corresponding values of the plotting unit must also be given, as follows:\n\nlegend( , fill=``v)\n\nColors for filled boxes\n\nlegend( , col=``v)\n\nColors in which points or lines will be drawn\n\nlegend( , lty=``v)\n\nLine styles\n\nlegend( , lwd=``v)\n\nLine widths\n\nlegend( , pch=``v)\n\nPlotting characters (character vector)\n\n\n\ntitle(main, sub)\n\n\nAdds a title main to the top of the current plot in a large font and (optionally) a sub-title sub at the bottom in a smaller font.\n\naxis(side, …)\n\n\nAdds an axis to the current plot on the side given by the first argument (1 to 4, counting clockwise from the bottom.) Other arguments control the positioning of the axis within or beside the plot, and tick positions and labels. Useful for adding custom axes after calling plot() with the axes=FALSE argument.\n\n\nLow-level plotting functions usually require some positioning information (e.g., x and y coordinates) to determine where to place the new plot elements. Coordinates are given in terms of user coordinates which are defined by the previous high-level graphics command and are chosen based on the supplied data.\nWhere x and y arguments are required, it is also sufficient to supply a single argument being a list with elements named x and y. Similarly a matrix with two columns is also valid input. In this way functions such as locator() (see below) may be used to specify positions on a plot interactively.\n\n12.2.1 Mathematical annotation\nIn some cases, it is useful to add mathematical symbols and formulae to a plot. This can be achieved in R by specifying an expression rather than a character string in any one of text, mtext, axis, or title. For example, the following code draws the formula for the Binomial probability function:\n> text(x, y, expression(paste(bgroup(\"(\", atop(n, x), \")\"), p^x, q^{n-x})))\nMore information, including a full listing of the features available can obtained from within R using the commands:\n> help(plotmath)\n> example(plotmath)\n> demo(plotmath)\n\n\n12.2.2 Hershey vector fonts\nIt is possible to specify Hershey vector fonts for rendering text when using the text and contour functions. There are three reasons for using the Hershey fonts:\n\nHershey fonts can produce better output, especially on a computer screen, for rotated and/or small text.\nHershey fonts provide certain symbols that may not be available in the standard fonts. In particular, there are zodiac signs, cartographic symbols and astronomical symbols.\nHershey fonts provide Cyrillic and Japanese (Kana and Kanji) characters.\n\nMore information, including tables of Hershey characters can be obtained from within R using the commands:\n> help(Hershey)\n> demo(Hershey)\n> help(Japanese)\n> demo(Japanese)"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-interacting-with-graphics",
    "href": "tutorials/R/r-manuals/test.html#sec-interacting-with-graphics",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.3 Interacting with graphics",
    "text": "12.3 Interacting with graphics\nR also provides functions which allow users to extract or add information to a plot using a mouse. The simplest of these is the locator() function:\n\nlocator(n, type)\n\n\nWaits for the user to select locations on the current plot using the left mouse button. This continues until n (default 512) points have been selected, or another mouse button is pressed. The type argument allows for plotting at the selected points and has the same effect as for high-level graphics commands; the default is no plotting. locator() returns the locations of the points selected as a list with two components x and y.\n\n\nlocator() is usually called with no arguments. It is particularly useful for interactively selecting positions for graphic elements such as legends or labels when it is difficult to calculate in advance where the graphic should be placed. For example, to place some informative text near an outlying point, the command\n> text(locator(1), \"Outlier\", adj=0)\nmay be useful. (locator() will be ignored if the current device, such as postscript does not support interactive pointing.)\n\nidentify(x, y, labels)\n\n\nAllow the user to highlight any of the points defined by x and y (using the left mouse button) by plotting the corresponding component of labels nearby (or the index number of the point if labels is absent). Returns the indices of the selected points when another button is pressed.\n\n\nSometimes we want to identify particular points on a plot, rather than their positions. For example, we may wish the user to select some observation of interest from a graphical display and then manipulate that observation in some way. Given a number of (x, y) coordinates in two numeric vectors x and y, we could use the identify() function as follows:\n> plot(x, y)\n> identify(x, y)\nThe identify() functions performs no plotting itself, but simply allows the user to move the mouse pointer and click the left mouse button near a point. If there is a point near the mouse pointer it will be marked with its index number (that is, its position in the x/y vectors) plotted nearby. Alternatively, you could use some informative string (such as a case name) as a highlight by using the labels argument to identify(), or disable marking altogether with the plot = FALSE argument. When the process is terminated (see above), identify() returns the indices of the selected points; you can use these indices to extract the selected points from the original vectors x and y."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-using-graphics-parameters",
    "href": "tutorials/R/r-manuals/test.html#sec-using-graphics-parameters",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.4 Using graphics parameters",
    "text": "12.4 Using graphics parameters\nWhen creating graphics, particularly for presentation or publication purposes, R’s defaults do not always produce exactly that which is required. You can, however, customize almost every aspect of the display using graphics parameters. R maintains a list of a large number of graphics parameters which control things such as line style, colors, figure arrangement and text justification among many others. Every graphics parameter has a name (such as col, which controls colors,) and a value (a color number, for example.)\nA separate list of graphics parameters is maintained for each active device, and each device has a default set of parameters when initialized. Graphics parameters can be set in two ways: either permanently, affecting all graphics functions which access the current device; or temporarily, affecting only a single graphics function call.\n\n12.4.1 Permanent changes: The par() function {#sec-permanent-changes:-the-par()-function}\nThe par() function is used to access and modify the list of graphics parameters for the current graphics device.\n\npar()\n\nWithout arguments, returns a list of all graphics parameters and their values for the current device.\n\npar(c(\"col\", \"lty\"))\n\nWith a character vector argument, returns only the named graphics parameters (again, as a list.)\n\npar(col=4, lty=2)\n\nWith named arguments (or a single list argument), sets the values of the named graphics parameters, and returns the original values of the parameters as a list.\n\n\nSetting graphics parameters with the par() function changes the value of the parameters permanently, in the sense that all future calls to graphics functions (on the current device) will be affected by the new value. You can think of setting graphics parameters in this way as setting “default” values for the parameters, which will be used by all graphics functions unless an alternative value is given.\nNote that calls to par() always affect the global values of graphics parameters, even when par() is called from within a function. This is often undesirable behavior—usually we want to set some graphics parameters, do some plotting, and then restore the original values so as not to affect the user’s R session. You can restore the initial values by saving the result of par() when making changes, and restoring the initial values when plotting is complete.\n> oldpar <- par(col=4, lty=2)\n  … plotting commands …\n> par(oldpar)\nTo save and restore all settable24 graphical parameters use\n> oldpar <- par(no.readonly=TRUE)\n  … plotting commands …\n> par(oldpar)\n\n\n12.4.2 Temporary changes: Arguments to graphics functions\nGraphics parameters may also be passed to (almost) any graphics function as named arguments. This has the same effect as passing the arguments to the par() function, except that the changes only last for the duration of the function call. For example:\n> plot(x, y, pch=\"+\")\nproduces a scatterplot using a plus sign as the plotting character, without changing the default plotting character for future plots.\nUnfortunately, this is not implemented entirely consistently and it is sometimes necessary to set and reset graphics parameters using par()."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-graphics-parameters-list",
    "href": "tutorials/R/r-manuals/test.html#sec-graphics-parameters-list",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.5 Graphics parameters list",
    "text": "12.5 Graphics parameters list\nThe following sections detail many of the commonly-used graphical parameters. The R help documentation for the par() function provides a more concise summary; this is provided as a somewhat more detailed alternative.\nGraphics parameters will be presented in the following form:\n\nname=``value\n\nA description of the parameter’s effect. name is the name of the parameter, that is, the argument name to use in calls to par() or a graphics function. value is a typical value you might use when setting the parameter.\n\n\nNote that axes is not a graphics parameter but an argument to a few plot methods: see xaxt and yaxt.\n\n12.5.1 Graphical elements\nR plots are made up of points, lines, text and polygons (filled regions.) Graphical parameters exist which control how these graphical elements are drawn, as follows:\n\npch=\"+\"\n\nCharacter to be used for plotting points. The default varies with graphics drivers, but it is usually a circle. Plotted points tend to appear slightly above or below the appropriate position unless you use \".\" as the plotting character, which produces centered points.\n\npch=4\n\nWhen pch is given as an integer between 0 and 25 inclusive, a specialized plotting symbol is produced. To see what the symbols are, use the command\n> legend(locator(1), as.character(0:25), pch = 0:25)\nThose from 21 to 25 may appear to duplicate earlier symbols, but can be coloured in different ways: see the help on points and its examples.\nIn addition, pch can be a character or a number in the range 32:255 representing a character in the current font.\n\nlty=2\n\nLine types. Alternative line styles are not supported on all graphics devices (and vary on those that do) but line type 1 is always a solid line, line type 0 is always invisible, and line types 2 and onwards are dotted or dashed lines, or some combination of both.\n\nlwd=2\n\nLine widths. Desired width of lines, in multiples of the “standard” line width. Affects axis lines as well as lines drawn with lines(), etc. Not all devices support this, and some have restrictions on the widths that can be used.\n\ncol=2\n\nColors to be used for points, lines, text, filled regions and images. A number from the current palette (see ?palette) or a named colour.\n\n\ncol.axis\ncol.lab\ncol.main\ncol.sub\n: The color to be used for axis annotation, x and y labels, main and sub-titles, respectively.\n\nfont=2\n\nAn integer which specifies which font to use for text. If possible, device drivers arrange so that 1 corresponds to plain text, 2 to bold face, 3 to italic, 4 to bold italic and 5 to a symbol font (which include Greek letters).\n\n\nfont.axis\nfont.lab\nfont.main\nfont.sub\n: The font to be used for axis annotation, x and y labels, main and sub-titles, respectively.\n\nadj=-0.1\n\nJustification of text relative to the plotting position. 0 means left justify, 1 means right justify and 0.5 means to center horizontally about the plotting position. The actual value is the proportion of text that appears to the left of the plotting position, so a value of -0.1 leaves a gap of 10% of the text width between the text and the plotting position.\n\ncex=1.5\n\nCharacter expansion. The value is the desired size of text characters (including plotting characters) relative to the default text size.\n\n\ncex.axis\ncex.lab\ncex.main\ncex.sub\n: The character expansion to be used for axis annotation, x and y labels, main and sub-titles, respectively.\n\n\n12.5.2 Axes and tick marks\nMany of R’s high-level plots have axes, and you can construct axes yourself with the low-level axis() graphics function. Axes have three main components: the axis line (line style controlled by the lty graphics parameter), the tick marks (which mark off unit divisions along the axis line) and the tick labels (which mark the units.) These components can be customized with the following graphics parameters.\n\nlab=c(5, 7, 12)\n\nThe first two numbers are the desired number of tick intervals on the x and y axes respectively. The third number is the desired length of axis labels, in characters (including the decimal point.) Choosing a too-small value for this parameter may result in all tick labels being rounded to the same number!\n\nlas=1\n\nOrientation of axis labels. 0 means always parallel to axis, 1 means always horizontal, and 2 means always perpendicular to the axis.\n\nmgp=c(3, 1, 0)\n\nPositions of axis components. The first component is the distance from the axis label to the axis position, in text lines. The second component is the distance to the tick labels, and the final component is the distance from the axis position to the axis line (usually zero). Positive numbers measure outside the plot region, negative numbers inside.\n\ntck=0.01\n\nLength of tick marks, as a fraction of the size of the plotting region. When tck is small (less than 0.5) the tick marks on the x and y axes are forced to be the same size. A value of 1 gives grid lines. Negative values give tick marks outside the plotting region. Use tck=0.01 and mgp=c(1,-1.5,0) for internal tick marks.\n\n\nxaxs=\"r\"\nyaxs=\"i\"\n: Axis styles for the x and y axes, respectively. With styles \"i\" (internal) and \"r\" (the default) tick marks always fall within the range of the data, however style \"r\" leaves a small amount of space at the edges.\n\n\n12.5.3 Figure margins\nA single plot in R is known as a figure and comprises a plot region surrounded by margins (possibly containing axis labels, titles, etc.) and (usually) bounded by the axes themselves.\nA typical figure is\n\n\n\nimages/fig11\n\n\nGraphics parameters controlling figure layout include:\n\nmai=c(1, 0.5, 0.5, 0)\n\nWidths of the bottom, left, top and right margins, respectively, measured in inches.\n\nmar=c(4, 2, 2, 1)\n\nSimilar to mai, except the measurement unit is text lines.\n\n\nmar and mai are equivalent in the sense that setting one changes the value of the other. The default values chosen for this parameter are often too large; the right-hand margin is rarely needed, and neither is the top margin if no title is being used. The bottom and left margins must be large enough to accommodate the axis and tick labels. Furthermore, the default is chosen without regard to the size of the device surface: for example, using the postscript() driver with the height=4 argument will result in a plot which is about 50% margin unless mar or mai are set explicitly. When multiple figures are in use (see below) the margins are reduced, however this may not be enough when many figures share the same page.\n\n\n12.5.4 Multiple figure environment\nR allows you to create an n by m array of figures on a single page. Each figure has its own margins, and the array of figures is optionally surrounded by an outer margin, as shown in the following figure.\n\n\n\nimages/fig12\n\n\nThe graphical parameters relating to multiple figures are as follows:\nmfcol=c(3, 2)\nmfrow=c(2, 4)\n: Set the size of a multiple figure array. The first value is the number of rows; the second is the number of columns. The only difference between these two parameters is that setting mfcol causes figures to be filled by column; mfrow fills by rows.\nThe layout in the Figure could have been created by setting\n`mfrow=c(3,2)`; the figure shows the page after four plots have been\ndrawn.\n\nSetting either of these can reduce the base size of symbols and text\n(controlled by `par(\"cex\")` and the pointsize of the device). In a\nlayout with exactly two rows and columns the base size is reduced by\na factor of 0.83: if there are three or more of either rows or\ncolumns, the reduction factor is 0.66.\n\nmfg=c(2, 2, 3, 2)\n\nPosition of the current figure in a multiple figure environment. The first two numbers are the row and column of the current figure; the last two are the number of rows and columns in the multiple figure array. Set this parameter to jump between figures in the array. You can even use different values for the last two numbers than the true values for unequally-sized figures on the same page.\n\nfig=c(4, 9, 1, 4)/10\n\nPosition of the current figure on the page. Values are the positions of the left, right, bottom and top edges respectively, as a percentage of the page measured from the bottom left corner. The example value would be for a figure in the bottom right of the page. Set this parameter for arbitrary positioning of figures within a page. If you want to add a figure to a current page, use new=TRUE as well (unlike S).\n\n\noma=c(2, 0, 3, 0)\nomi=c(0, 0, 0.8, 0)\n: Size of outer margins. Like mar and mai, the first measures in text lines and the second in inches, starting with the bottom margin and working clockwise.\nOuter margins are particularly useful for page-wise titles, etc. Text can be added to the outer margins with the mtext() function with argument outer=TRUE. There are no outer margins by default, however, so you must create them explicitly using oma or omi.\nMore complicated arrangements of multiple figures can be produced by the split.screen() and layout() functions, as well as by the grid and lattice packages."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-device-drivers",
    "href": "tutorials/R/r-manuals/test.html#sec-device-drivers",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.6 Device drivers",
    "text": "12.6 Device drivers\nR can generate graphics (of varying levels of quality) on almost any type of display or printing device. Before this can begin, however, R needs to be informed what type of device it is dealing with. This is done by starting a device driver. The purpose of a device driver is to convert graphical instructions from R (“draw a line,” for example) into a form that the particular device can understand.\nDevice drivers are started by calling a device driver function. There is one such function for every device driver: type help(Devices) for a list of them all. For example, issuing the command\n> postscript()\ncauses all future graphics output to be sent to the printer in PostScript format. Some commonly-used device drivers are:\n\nX11()\n\n\nFor use with the X11 window system on Unix-alikes\n\nwindows()\n\n\nFor use on Windows\n\nquartz()\n\n\nFor use on macOS\n\npostscript()\n\n\nFor printing on PostScript printers, or creating PostScript graphics files.\n\npdf()\n\n\nProduces a PDF file, which can also be included into PDF files.\n\npng()\n\n\nProduces a bitmap PNG file. (Not always available: see its help page.)\n\njpeg()\n\n\nProduces a bitmap JPEG file, best used for image plots. (Not always available: see its help page.)\n\n\nWhen you have finished with a device, be sure to terminate the device driver by issuing the command\n> dev.off()\nThis ensures that the device finishes cleanly; for example in the case of hardcopy devices this ensures that every page is completed and has been sent to the printer. (This will happen automatically at the normal end of a session.)\n\n12.6.1 PostScript diagrams for typeset documents\nBy passing the file argument to the postscript() device driver function, you may store the graphics in PostScript format in a file of your choice. The plot will be in landscape orientation unless the horizontal=FALSE argument is given, and you can control the size of the graphic with the width and height arguments (the plot will be scaled as appropriate to fit these dimensions.) For example, the command\n> postscript(\"file.ps\", horizontal=FALSE, height=5, pointsize=10)\nwill produce a file containing PostScript code for a figure five inches high, perhaps for inclusion in a document. It is important to note that if the file named in the command already exists, it will be overwritten. This is the case even if the file was only created earlier in the same R session.\nMany usages of PostScript output will be to incorporate the figure in another document. This works best when encapsulated PostScript is produced: R always produces conformant output, but only marks the output as such when the onefile=FALSE argument is supplied. This unusual notation stems from S-compatibility: it really means that the output will be a single page (which is part of the EPSF specification). Thus to produce a plot for inclusion use something like\n> postscript(\"plot1.eps\", horizontal=FALSE, onefile=FALSE,\n             height=8, width=6, pointsize=10)\n\n\n12.6.2 Multiple graphics devices\nIn advanced use of R it is often useful to have several graphics devices in use at the same time. Of course only one graphics device can accept graphics commands at any one time, and this is known as the current device. When multiple devices are open, they form a numbered sequence with names giving the kind of device at any position.\nThe main commands used for operating with multiple devices, and their meanings are as follows:\n\nX11()\n\n[UNIX]\n\n\nwindows()\nwin.printer()\nwin.metafile()\n: [Windows]\n\nquartz()\n\n[macOS]\n\n\npostscript()\npdf()\npng()\njpeg()\ntiff()\nbitmap()\n…\n: Each new call to a device driver function opens a new graphics device, thus extending by one the device list. This device becomes the current device, to which graphics output will be sent.\n\ndev.list()\n\n\nReturns the number and name of all active devices. The device at position 1 on the list is always the null device which does not accept graphics commands at all.\n\n\ndev.next()\ndev.prev()\n: \nReturns the number and name of the graphics device next to, or\nprevious to the current device, respectively.\n\ndev.set(which=``k)\n\n\nCan be used to change the current graphics device to the one at position k of the device list. Returns the number and label of the device.\n\ndev.off(``k)\n\n\nTerminate the graphics device at point k of the device list. For some devices, such as postscript devices, this will either print the file immediately or correctly complete the file for later printing, depending on how the device was initiated.\n\n\ndev.copy(device, …, which=``k)\ndev.print(device, …, which=``k)\n: Make a copy of the device k. Here device is a device function, such as postscript, with extra arguments, if needed, specified by ‘…’. dev.print is similar, but the copied device is immediately closed, so that end actions, such as printing hardcopies, are immediately performed.\n\ngraphics.off()\n\nTerminate all graphics devices on the list, except the null device."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-dynamic-graphics",
    "href": "tutorials/R/r-manuals/test.html#sec-dynamic-graphics",
    "title": "R Manuals :: An Introduction to R",
    "section": "12.7 Dynamic graphics",
    "text": "12.7 Dynamic graphics\nR does not have builtin capabilities for dynamic or interactive graphics, e.g. rotating point clouds or to “brushing” (interactively highlighting) points. However, extensive dynamic graphics facilities are available in the system GGobi by Swayne, Cook and Buja available from\n\nhttp://ggobi.org/\n\nand these can be accessed from R via the package rggobi, described at http://ggobi.org/rggobi.html.\nAlso, package rgl provides ways to interact with 3D plots, for example of surfaces."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-standard-packages",
    "href": "tutorials/R/r-manuals/test.html#sec-standard-packages",
    "title": "R Manuals :: An Introduction to R",
    "section": "13.1 Standard packages",
    "text": "13.1 Standard packages\nThe standard (or base) packages are considered part of the R source code. They contain the basic functions that allow R to work, and the datasets and standard statistical and graphical functions that are described in this manual. They should be automatically available in any R installation. See R packages in R FAQ, for a complete list."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-contributed-packages-and-cran",
    "href": "tutorials/R/r-manuals/test.html#sec-contributed-packages-and-cran",
    "title": "R Manuals :: An Introduction to R",
    "section": "13.2 Contributed packages and CRAN",
    "text": "13.2 Contributed packages and CRAN\nThere are thousands of contributed packages for R, written by many different authors. Some of these packages implement specialized statistical methods, others give access to data or hardware, and others are designed to complement textbooks. Some (the recommended packages) are distributed with every binary distribution of R. Most are available for download from CRAN (https://CRAN.R-project.org/ and its mirrors) and other repositories such as Bioconductor (https://www.bioconductor.org/). The R FAQ contains a list of CRAN packages current at the time of release, but the collection of available packages changes very frequently."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-namespaces",
    "href": "tutorials/R/r-manuals/test.html#sec-namespaces",
    "title": "R Manuals :: An Introduction to R",
    "section": "13.3 Namespaces",
    "text": "13.3 Namespaces\nPackages have namespaces, which do three things: they allow the package writer to hide functions and data that are meant only for internal use, they prevent functions from breaking when a user (or other package writer) picks a name that clashes with one in the package, and they provide a way to refer to an object within a particular package.\nFor example, t() is the transpose function in R, but users might define their own function named t. Namespaces prevent the user’s definition from taking precedence, and breaking every function that tries to transpose a matrix.\nThere are two operators that work with namespaces. The double-colon operator :: selects definitions from a particular namespace. In the example above, the transpose function will always be available as base::t, because it is defined in the base package. Only functions that are exported from the package can be retrieved in this way.\nThe triple-colon operator ::: may be seen in a few places in R code: it acts like the double-colon operator but also allows access to hidden objects. Users are more likely to use the getAnywhere() function, which searches multiple packages.\nPackages are often inter-dependent, and loading one may cause others to be automatically loaded. The colon operators described above will also cause automatic loading of the associated package. When packages with namespaces are loaded automatically they are not added to the search list."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-files-and-directories",
    "href": "tutorials/R/r-manuals/test.html#sec-files-and-directories",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.1 Files and directories",
    "text": "14.1 Files and directories\nThere are many functions to manipulate files and directories. Here are pointers to some of the more commonly used ones.\nTo create an (empty) file or directory, use file.create or dir.create. (These are the analogues of the POSIX utilities touch and mkdir.) For temporary files and directories in the R session directory see tempfile.\nFiles can be removed by either file.remove or unlink: the latter can remove directory trees.\nFor directory listings use list.files (also available as dir) or list.dirs. These can select files using a regular expression: to select by wildcards use Sys.glob.\nMany types of information on a filepath (including for example if it is a file or directory) can be found by file.info.\nThere are several ways to find out if a file ‘exists’ (a file can exist on the filesystem and not be visible to the current user). There are functions file.exists, file.access and file_test with various versions of this test: file_test is a version of the POSIX test command for those familiar with shell scripting.\nFunction file.copy is the R analogue of the POSIX command cp.\nChoosing files can be done interactively by file.choose: the Windows port has the more versatile functions choose.files and choose.dir and there are similar functions in the tcltk package: tk_choose.files and tk_choose.dir.\nFunctions file.show and file.edit will display and edit one or more files in a way appropriate to the R port, using the facilities of a console (such as RGui on Windows or R.app on macOS) if one is in use.\nThere is some support for links in the filesystem: see functions file.link and Sys.readlink."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-filepaths",
    "href": "tutorials/R/r-manuals/test.html#sec-filepaths",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.2 Filepaths",
    "text": "14.2 Filepaths\nWith a few exceptions, R relies on the underlying OS functions to manipulate filepaths. Some aspects of this are allowed to depend on the OS, and do, even down to the version of the OS. There are POSIX standards for how OSes should interpret filepaths and many R users assume POSIX compliance: but Windows does not claim to be compliant and other OSes may be less than completely compliant.\nThe following are some issues which have been encountered with filepaths.\n\nPOSIX filesystems are case-sensitive, so foo.png and Foo.PNG are different files. However, the defaults on Windows and macOS are to be case-insensitive, and FAT filesystems (commonly used on removable storage) are not normally case-sensitive (and all filepaths may be mapped to lower case).\nAlmost all the Windows’ OS services support the use of slash or backslash as the filepath separator, and R converts the known exceptions to the form required by Windows.\nThe behaviour of filepaths with a trailing slash is OS-dependent. Such paths are not valid on Windows and should not be expected to work. POSIX-2008 requires such paths to match only directories, but earlier versions allowed them to also match files. So they are best avoided.\nMultiple slashes in filepaths such as /abc//def are valid on POSIX filesystems and treated as if there was only one slash. They are usually accepted by Windows’ OS functions. However, leading double slashes may have a different meaning.\nWindows’ UNC filepaths (such as \\\\server\\dir1\\dir2\\file and \\\\?\\UNC\\server\\dir1\\dir2\\file) are not supported, but they may work in some R functions. POSIX filesystems are allowed to treat a leading double slash specially.\nWindows allows filepaths containing drives and relative to the current directory on a drive, e.g. d:foo/bar refers to d:/a/b/c/foo/bar if the current directory on drive d: is /a/b/c. It is intended that these work, but the use of absolute paths is safer.\n\nFunctions basename and dirname select parts of a file path: the recommended way to assemble a file path from components is file.path. Function pathexpand does ‘tilde expansion’, substituting values for home directories (the current user’s, and perhaps those of other users).\nOn filesystems with links, a single file can be referred to by many filepaths. Function normalizePath will find a canonical filepath.\nWindows has the concepts of short (‘8.3’) and long file names: normalizePath will return an absolute path using long file names and shortPathName will return a version using short names. The latter does not contain spaces and uses backslash as the separator, so is sometimes useful for exporting names from R.\nFile permissions are a related topic. R has support for the POSIX concepts of read/write/execute permission for owner/group/all but this may be only partially supported on the filesystem, so for example on Windows only read-only files (for the account running the R session) are recognized. Access Control Lists (ACLs) are employed on several filesystems, but do not have an agreed standard and R has no facilities to control them. Use Sys.chmod to change permissions."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-system-commands",
    "href": "tutorials/R/r-manuals/test.html#sec-system-commands",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.3 System commands",
    "text": "14.3 System commands\nFunctions system and system2 are used to invoke a system command and optionally collect its output. system2 is a little more general but its main advantage is that it is easier to write cross-platform code using it.\nsystem behaves differently on Windows from other OSes (because the API C call of that name does). Elsewhere it invokes a shell to run the command: the Windows port of R has a function shell to do that.\nTo find out if the OS includes a command, use Sys.which, which attempts to do this in a cross-platform way (unfortunately it is not a standard OS service).\nFunction shQuote will quote filepaths as needed for commands in the current OS."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-compression-and-archives",
    "href": "tutorials/R/r-manuals/test.html#sec-compression-and-archives",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.4 Compression and Archives",
    "text": "14.4 Compression and Archives\nRecent versions of R have extensive facilities to read and write compressed files, often transparently. Reading of files in R is to a very large extent done by connections, and the file function which is used to open a connection to a file (or a URL) and is able to identify the compression used from the ‘magic’ header of the file.\nThe type of compression which has been supported for longest is gzip compression, and that remains a good general compromise. Files compressed by the earlier Unix compress utility can also be read, but these are becoming rare. Two other forms of compression, those of the bzip2 and xz utilities are also available. These generally achieve higher rates of compression (depending on the file, much higher) at the expense of slower decompression and much slower compression.\nThere is some confusion between xz and lzma compression (see https://en.wikipedia.org/wiki/Xz and https://en.wikipedia.org/wiki/LZMA): R can read files compressed by most versions of either.\nFile archives are single files which contain a collection of files, the most common ones being ‘tarballs’ and zip files as used to distribute R packages. R can list and unpack both (see functions untar and unzip) and create both (for zip with the help of an external program)."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-b.1-invoking-r-from-the-command-line",
    "href": "tutorials/R/r-manuals/test.html#sec-b.1-invoking-r-from-the-command-line",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.5 B.1 Invoking R from the command line",
    "text": "14.5 B.1 Invoking R from the command line\nWhen working at a command line on UNIX or Windows, the command ‘R’ can be used both for starting the main R program in the form\n\nR [options] [<infile] [>outfile],\n\nor, via the R CMD interface, as a wrapper to various R tools (e.g., for processing files in R documentation format or manipulating add-on packages) which are not intended to be called “directly”.\nAt the Windows command-line, Rterm.exe is preferred to R.\nYou need to ensure that either the environment variable TMPDIR is unset or it points to a valid place to create temporary files and directories.\nMost options control what happens at the beginning and at the end of an R session. The startup mechanism is as follows (see also the on-line help for topic ‘Startup’ for more information, and the section below for some Windows-specific details).\n\nUnless --no-environ was given, R searches for user and site files to process for setting environment variables. The name of the site file is the one pointed to by the environment variable R_ENVIRON; if this is unset, R_HOME/etc/Renviron.site is used (if it exists). The user file is the one pointed to by the environment variable R_ENVIRON_USER if this is set; otherwise, files .Renviron in the current or in the user’s home directory (in that order) are searched for. These files should contain lines of the form ‘name=``value’. (See help(\"Startup\") for a precise description.) Variables you might want to set include R_PAPERSIZE (the default paper size), R_PRINTCMD (the default print command) and R_LIBS (specifies the list of R library trees searched for add-on packages).\nThen R searches for the site-wide startup profile unless the command line option --no-site-file was given. The name of this file is taken from the value of the R_PROFILE environment variable. If that variable is unset, the default R_HOME/etc/Rprofile.site is used if this exists.\nThen, unless --no-init-file was given, R searches for a user profile and sources it. The name of this file is taken from the environment variable R_PROFILE_USER; if unset, a file called .Rprofile in the current directory or in the user’s home directory (in that order) is searched for.\nIt also loads a saved workspace from file .RData in the current directory if there is one (unless --no-restore or --no-restore-data was specified).\nFinally, if a function .First() exists, it is executed. This function (as well as .Last() which is executed at the end of the R session) can be defined in the appropriate startup profiles, or reside in .RData.\n\nIn addition, there are options for controlling the memory available to the R process (see the on-line help for topic ‘Memory’ for more information). Users will not normally need to use these unless they are trying to limit the amount of memory used by R.\nR accepts the following command-line options.\n--help\n-h\n: Print short help message to standard output and exit successfully.\n\n--version\n\nPrint version information to standard output and exit successfully.\n\n--encoding=``enc\n\nSpecify the encoding to be assumed for input from the console or stdin. This needs to be an encoding known to iconv: see its help page. (--encoding ``enc is also accepted.) The input is re-encoded to the locale R is running in and needs to be representable in the latter’s encoding (so e.g. you cannot re-encode Greek text in a French locale unless that locale uses the UTF-8 encoding).\n\nRHOME\n\nPrint the path to the R “home directory” to standard output and exit successfully. Apart from the front-end shell script and the man page, R installation puts everything (executables, packages, etc.) into this directory.\n\n\n--save\n--no-save\n: Control whether data sets should be saved or not at the end of the R session. If neither is given in an interactive session, the user is asked for the desired behavior when ending the session with q(); in non-interactive use one of these must be specified or implied by some other option (see below).\n\n--no-environ\n\nDo not read any user file to set environment variables.\n\n--no-site-file\n\nDo not read the site-wide profile at startup.\n\n--no-init-file\n\nDo not read the user’s profile at startup.\n\n\n--restore\n--no-restore\n--no-restore-data\n: Control whether saved images (file .RData in the directory where R was started) should be restored at startup or not. The default is to restore. (--no-restore implies all the specific --no-restore-* options.)\n\n--no-restore-history\n\nControl whether the history file (normally file .Rhistory in the directory where R was started, but can be set by the environment variable R_HISTFILE) should be restored at startup or not. The default is to restore.\n\n--no-Rconsole\n\n(Windows only) Prevent loading the Rconsole file at startup.\n\n--vanilla\n\nCombine --no-save, --no-environ, --no-site-file, --no-init-file and --no-restore. Under Windows, this also includes --no-Rconsole.\n\n\n-f ``file\n--file=``file\n: (not Rgui.exe) Take input from file: ‘-’ means stdin. Implies --no-save unless --save has been set. On a Unix-alike, shell metacharacters should be avoided in file (but spaces are allowed).\n\n-e ``expression\n\n(not Rgui.exe) Use expression as an input line. One or more -e options can be used, but not together with -f or --file. Implies --no-save unless --save has been set. (There is a limit of 10,000 bytes on the total length of expressions used in this way. Expressions containing spaces or shell metacharacters will need to be quoted.)\n\n--no-readline\n\n(UNIX only) Turn off command-line editing via readline. This is useful when running R from within Emacs using the ESS (“Emacs Speaks Statistics”) package. See Section 17 , for more information. Command-line editing is enabled for default interactive use (see --interactive). This option also affects tilde-expansion: see the help for path.expand.\n\n\n--min-vsize=``N\n--min-nsize=``N\n: For expert use only: set the initial trigger sizes for garbage collection of vector heap (in bytes) and cons cells (number) respectively. Suffix ‘M’ specifies megabytes or millions of cells respectively. The defaults are 6Mb and 350k respectively and can also be set by environment variables R_NSIZE and R_VSIZE.\n\n--max-ppsize=``N\n\nSpecify the maximum size of the pointer protection stack as N locations. This defaults to 10000, but can be increased to allow large and complicated calculations to be done. Currently the maximum value accepted is 100000.\n\n\n--quiet\n--silent\n-q\n: Do not print out the initial copyright and welcome messages.\n\n--no-echo\n\nMake R run as quietly as possible. This option is intended to support programs which use R to compute results for them. It implies --quiet and --no-save.\n\n--interactive\n\n(UNIX only) Assert that R really is being run interactively even if input has been redirected: use if input is from a FIFO or pipe and fed from an interactive program. (The default is to deduce that R is being run interactively if and only if stdin is connected to a terminal or pty.) Using -e, -f or --file asserts non-interactive use even if --interactive is given.\nNote that this does not turn on command-line editing.\n\n--ess\n\n(Windows only) Set Rterm up for use by R-inferior-mode in ESS, including asserting interactive use (without the command-line editor) and no buffering of stdout.\n\n--verbose\n\nPrint more information about progress, and in particular set R’s option verbose to TRUE. R code uses this option to control the printing of diagnostic messages.\n\n\n--debugger=``name\n-d ``name\n: (UNIX only) Run R through debugger name. For most debuggers (the exceptions are valgrind and recent versions of gdb), further command line options are disregarded, and should instead be given when starting the R executable from inside the debugger.\n--gui=``type\n-g ``type\n: (UNIX only) Use type as graphical user interface (note that this also includes interactive graphics). Currently, possible values for type are ‘X11’ (the default) and, provided that ‘Tcl/Tk’ support is available, ‘Tk’. (For back-compatibility, ‘x11’ and ‘tk’ are accepted.)\n\n--arch=``name\n\n(UNIX only) Run the specified sub-architecture.\n\n--args\n\nThis flag does nothing except cause the rest of the command line to be skipped: this can be useful to retrieve values from it with commandArgs(TRUE).\n\n\nNote that input and output can be redirected in the usual way (using ‘<’ and ‘>’), but the line length limit of 4095 bytes still applies. Warning and error messages are sent to the error channel (stderr).\nThe command R CMD allows the invocation of various tools which are useful in conjunction with R, but not intended to be called “directly”. The general form is\nR CMD command args\nwhere command is the name of the tool and args the arguments passed on to it.\nCurrently, the following tools are available.\n\nBATCH\n\nRun R in batch mode. Runs R --restore --save with possibly further options (see ?BATCH).\n\nCOMPILE\n\n(UNIX only) Compile C, C++, Fortran … files for use with R.\n\nSHLIB\n\nBuild shared library for dynamic loading.\n\nINSTALL\n\nInstall add-on packages.\n\nREMOVE\n\nRemove add-on packages.\n\nbuild\n\nBuild (that is, package) add-on packages.\n\ncheck\n\nCheck add-on packages.\n\nLINK\n\n(UNIX only) Front-end for creating executable programs.\n\nRprof\n\nPost-process R profiling files.\n\n\nRdconv\nRd2txt\n: Convert Rd format to various other formats, including HTML, LaTeX, plain text, and extracting the examples. Rd2txt can be used as shorthand for Rd2conv -t txt.\n\nRd2pdf\n\nConvert Rd format to PDF.\n\nStangle\n\nExtract S/R code from Sweave or other vignette documentation\n\nSweave\n\nProcess Sweave or other vignette documentation\n\nRdiff\n\nDiff R output ignoring headers etc\n\nconfig\n\nObtain configuration information\n\njavareconf\n\n(Unix only) Update the Java configuration variables\n\nrtags\n\n(Unix only) Create Emacs-style tag files from C, R, and Rd files\n\nopen\n\n(Windows only) Open a file via Windows’ file associations\n\ntexify\n\n(Windows only) Process (La)TeX files with R’s style files\n\n\nUse\nR CMD command --help\nto obtain usage information for each of the tools accessible via the R CMD interface.\nIn addition, you can use options --arch=, --no-environ, --no-init-file, --no-site-file and --vanilla between R and CMD: these affect any R processes run by the tools. (Here --vanilla is equivalent to --no-environ --no-site-file --no-init-file.) However, note that R CMD does not of itself use any R startup files (in particular, neither user nor site Renviron files), and all of the R processes run by these tools (except BATCH) use --no-restore. Most use --vanilla and so invoke no R startup files: the current exceptions are INSTALL, REMOVE, Sweave and SHLIB (which uses --no-site-file --no-init-file).\nR CMD cmd args\nfor any other executable cmd on the path or given by an absolute filepath: this is useful to have the same environment as R or the specific commands run under, for example to run ldd or pdflatex. Under Windows cmd can be an executable or a batch file, or if it has extension .sh or .pl the appropriate interpreter (if available) is called to run it."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-b.2-invoking-r-under-windows",
    "href": "tutorials/R/r-manuals/test.html#sec-b.2-invoking-r-under-windows",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.6 B.2 Invoking R under Windows",
    "text": "14.6 B.2 Invoking R under Windows\nThere are two ways to run R under Windows. Within a terminal window (e.g. cmd.exe or a more capable shell), the methods described in the previous section may be used, invoking by R.exe or more directly by Rterm.exe. For interactive use, there is a console-based GUI (Rgui.exe).\nThe startup procedure under Windows is very similar to that under UNIX, but references to the ‘home directory’ need to be clarified, as this is not always defined on Windows. If the environment variable R_USER is defined, that gives the home directory. Next, if the environment variable HOME is defined, that gives the home directory. After those two user-controllable settings, R tries to find system defined home directories. It first tries to use the Windows \"personal\" directory (typically My Documents in recent versions of Windows). If that fails, and environment variables HOMEDRIVE and HOMEPATH are defined (and they normally are) these define the home directory. Failing all those, the home directory is taken to be the starting directory.\nYou need to ensure that either the environment variables TMPDIR, TMP and TEMP are either unset or one of them points to a valid place to create temporary files and directories.\nEnvironment variables can be supplied as ‘name=``value’ pairs on the command line.\nIf there is an argument ending .RData (in any case) it is interpreted as the path to the workspace to be restored: it implies --restore and sets the working directory to the parent of the named file. (This mechanism is used for drag-and-drop and file association with RGui.exe, but also works for Rterm.exe. If the named file does not exist it sets the working directory if the parent directory exists.)\nThe following additional command-line options are available when invoking RGui.exe.\n--mdi\n--sdi\n--no-mdi\n: Control whether Rgui will operate as an MDI program (with multiple child windows within one main window) or an SDI application (with multiple top-level windows for the console, graphics and pager). The command-line setting overrides the setting in the user’s Rconsole file.\n\n--debug\n\nEnable the “Break to debugger” menu item in Rgui, and trigger a break to the debugger during command line processing.\n\n\nUnder Windows with R CMD you may also specify your own .bat, .exe, .sh or .pl file. It will be run under the appropriate interpreter (Perl for .pl) with several environment variables set appropriately, including R_HOME, R_OSTYPE, PATH, BSTINPUTS and TEXINPUTS. For example, if you already have latex.exe on your path, then\nR CMD latex.exe mydoc\nwill run LaTeX on mydoc.tex, with the path to R’s share/texmf macros appended to TEXINPUTS. (Unfortunately, this does not help with the MiKTeX build of LaTeX, but R CMD texify mydoc will work in that case.)"
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-b.3-invoking-r-under-macos",
    "href": "tutorials/R/r-manuals/test.html#sec-b.3-invoking-r-under-macos",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.7 B.3 Invoking R under macOS",
    "text": "14.7 B.3 Invoking R under macOS\nThere are two ways to run R under macOS. Within a Terminal.app window by invoking R, the methods described in the first subsection apply. There is also console-based GUI (R.app) that by default is installed in the Applications folder on your system. It is a standard double-clickable macOS application.\nThe startup procedure under macOS is very similar to that under UNIX, but R.app does not make use of command-line arguments. The ‘home directory’ is the one inside the R.framework, but the startup and current working directory are set as the user’s home directory unless a different startup directory is given in the Preferences window accessible from within the GUI."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-b.4-scripting-with-r",
    "href": "tutorials/R/r-manuals/test.html#sec-b.4-scripting-with-r",
    "title": "R Manuals :: An Introduction to R",
    "section": "14.8 B.4 Scripting with R",
    "text": "14.8 B.4 Scripting with R\nIf you just want to run a file foo.R of R commands, the recommended way is to use R CMD BATCH foo.R. If you want to run this in the background or as a batch job use OS-specific facilities to do so: for example in most shells on Unix-alike OSes R CMD BATCH foo.R & runs a background job.\nYou can pass parameters to scripts via additional arguments on the command line: for example (where the exact quoting needed will depend on the shell in use)\nR CMD BATCH \"--args arg1 arg2\" foo.R &\nwill pass arguments to a script which can be retrieved as a character vector by\nargs <- commandArgs(TRUE)\nThis is made simpler by the alternative front-end Rscript, which can be invoked by\nRscript foo.R arg1 arg2\nand this can also be used to write executable script files like (at least on Unix-alikes, and in some Windows shells)\n#! /path/to/Rscript\nargs <- commandArgs(TRUE)\n...\nq(status=<exit status code>)\nIf this is entered into a text file runfoo and this is made executable (by chmod 755 runfoo), it can be invoked for different arguments by\nrunfoo arg1 arg2\nFor further options see help(\"Rscript\"). This writes R output to stdout and stderr, and this can be redirected in the usual way for the shell running the command.\nIf you do not wish to hardcode the path to Rscript but have it in your path (which is normally the case for an installed R except on Windows, but e.g. macOS users may need to add /usr/local/bin to their path), use\n#! /usr/bin/env Rscript\n...\nAt least in Bourne and bash shells, the #! mechanism does not allow extra arguments like #! /usr/bin/env Rscript --vanilla.\nOne thing to consider is what stdin() refers to. It is commonplace to write R scripts with segments like\nchem <- scan(n=24)\n2.90 3.10 3.40 3.40 3.70 3.70 2.80 2.50 2.40 2.40 2.70 2.20\n5.28 3.37 3.03 3.03 28.95 3.77 3.40 2.20 3.50 3.60 3.70 3.70\nand stdin() refers to the script file to allow such traditional usage. If you want to refer to the process’s stdin, use \"stdin\" as a file connection, e.g. scan(\"stdin\", ...).\nAnother way to write executable script files (suggested by François Pinard) is to use a here document like\n#!/bin/sh\n[environment variables can be set here]\nR --no-echo [other options] <<EOF\n\n   R program goes here...\n\nEOF\nbut here stdin() refers to the program source and \"stdin\" will not be usable.\nShort scripts can be passed to Rscript on the command-line via the -e flag. (Empty scripts are not accepted.)\nNote that on a Unix-alike the input filename (such as foo.R) should not contain spaces nor shell metacharacters."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-c.1-preliminaries",
    "href": "tutorials/R/r-manuals/test.html#sec-c.1-preliminaries",
    "title": "R Manuals :: An Introduction to R",
    "section": "17.1 Preliminaries",
    "text": "17.1 Preliminaries\nWhen the GNU readline library is available at the time R is configured for compilation under UNIX, an inbuilt command line editor allowing recall, editing and re-submission of prior commands is used. Note that other versions of readline exist and may be used by the inbuilt command line editor: this is most common on macOS. You can find out which version (if any) is available by running extSoftVersion() in an R session.\nIt can be disabled (useful for usage with ESS 25) using the startup option --no-readline.\nWindows versions of R have somewhat simpler command-line editing: see ‘Console’ under the ‘Help’ menu of the GUI, and the file README.Rterm for command-line editing under Rterm.exe.\nWhen using R with GNU26 readline capabilities, the functions described below are available, as well as others (probably) documented in man readline or info readline on your system.\nMany of these use either Control or Meta characters. Control characters, such as Control-m, are obtained by holding the CTRL down while you press the m key, and are written as C-m below. Meta characters, such as Meta-b, are typed by holding down META27 and pressing b, and written as M-b in the following. If your terminal does not have a META key enabled, you can still type Meta characters using two-character sequences starting with ESC. Thus, to enter M-b, you could type ESCb. The ESC character sequences are also allowed on terminals with real Meta keys. Note that case is significant for Meta characters.\nSome but not all versions28 of readline will recognize resizing of the terminal window so this is best avoided."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-c.2-editing-actions",
    "href": "tutorials/R/r-manuals/test.html#sec-c.2-editing-actions",
    "title": "R Manuals :: An Introduction to R",
    "section": "17.2 Editing actions",
    "text": "17.2 Editing actions\nThe R program keeps a history of the command lines you type, including the erroneous lines, and commands in your history may be recalled, changed if necessary, and re-submitted as new commands. In Emacs-style command-line editing any straight typing you do while in this editing phase causes the characters to be inserted in the command you are editing, displacing any characters to the right of the cursor. In vi mode character insertion mode is started by M-i or M-a, characters are typed and insertion mode is finished by typing a further ESC. (The default is Emacs-style, and only that is described here: for vi mode see the readline documentation.)\nPressing the RET command at any time causes the command to be re-submitted.\nOther editing actions are summarized in the following table."
  },
  {
    "objectID": "tutorials/R/r-manuals/test.html#sec-c.3-command-line-editor-summary",
    "href": "tutorials/R/r-manuals/test.html#sec-c.3-command-line-editor-summary",
    "title": "R Manuals :: An Introduction to R",
    "section": "17.3 Command-line editor summary",
    "text": "17.3 Command-line editor summary\n\n17.3.1 Command recall and vertical motion\n\nC-p\n\nGo to the previous command (backwards in the history).\n\nC-n\n\nGo to the next command (forwards in the history).\n\nC-r text\n\nFind the last command with the text string in it. This can be cancelled by C-g (and on some versions of R by C-c).\n\n\nOn most terminals, you can also use the up and down arrow keys instead of C-p and C-n, respectively.\n\n\n17.3.2 Horizontal motion of the cursor\n\nC-a\n\nGo to the beginning of the command.\n\nC-e\n\nGo to the end of the line.\n\nM-b\n\nGo back one word.\n\nM-f\n\nGo forward one word.\n\nC-b\n\nGo back one character.\n\nC-f\n\nGo forward one character.\n\n\nOn most terminals, you can also use the left and right arrow keys instead of C-b and C-f, respectively.\n\n\n17.3.3 Editing and re-submission\n\ntext\n\nInsert text at the cursor.\n\nC-f text\n\nAppend text after the cursor.\n\nDEL\n\nDelete the previous character (left of the cursor).\n\nC-d\n\nDelete the character under the cursor.\n\nM-d\n\nDelete the rest of the word under the cursor, and “save” it.\n\nC-k\n\nDelete from cursor to end of command, and “save” it.\n\nC-y\n\nInsert (yank) the last “saved” text here.\n\nC-t\n\nTranspose the character under the cursor with the next.\n\nM-l\n\nChange the rest of the word to lower case.\n\nM-c\n\nChange the rest of the word to upper case.\n\nRET\n\nRe-submit the command to R.\n\n\nThe final RET terminates the command line editing sequence.\nThe readline key bindings can be customized in the usual way via a ~/.inputrc file. These customizations can be conditioned on application R, that is by including a section like\n$if R\n  \"\\C-xd\": \"q('no')\\n\"\n$endif"
  },
  {
    "objectID": "tutorials/python/index.html",
    "href": "tutorials/python/index.html",
    "title": "python",
    "section": "",
    "text": "Python"
  }
]