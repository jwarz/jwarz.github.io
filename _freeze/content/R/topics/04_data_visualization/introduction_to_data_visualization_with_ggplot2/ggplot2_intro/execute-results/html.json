{
  "hash": "693e2cc83d085bb7917e80b7d4465ff8",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Data Visualization with ggplot2\"\nauthor: \"Joschka Schwarz\"\n---\n\n\n\n\nThe ability to produce meaningful and beautiful data visualizations is an essential part of your skill set as a data scientist. This course, the first R data visualization tutorial in the series, introduces you to the principles of good visualizations and the grammar of graphics plotting concepts implemented in the ggplot2 package. ggplot2 has become the go-to tool for flexible and professional plots in R. Here, we’ll examine the first three essential layers for making a plot - Data, Aesthetics and Geometries. By the end of the course you will be able to make complex exploratory plots.\n\n# 1. Introduction\n\nIn this chapter we’ll get you into the right frame of mind for developing meaningful visualizations with R. You’ll understand that as a communications tool, visualizations require you to think about your audience first. You’ll also be introduced to the basics of ggplot2 - the 7 different grammatical elements (layers) and aesthetic mappings.\n\n### Introduction\n\nTheory. Coming soon ...\n\n**1. Introduction**\n\nHi and welcome the first course in DataCamp's data visualization with ggplot2 series!\n\n**2. Your instructor - Rick Scavetta**\n\nMy name is Rick Scavetta and I'll be the instructor for this series.I've been training scientists on how to better understand and visualize their data since 2012. I'm very excited to bring my experience to DataCamp.So what is data viz?\n\n**3. Data visualization &amp; data science**\n\nData visualization is an essential skill for data scientists. It combines statistics and design in meaningful and appropriate ways.On the one hand, data vis is a form of graphical data analysis, emphasizing accurate representation and interpretation of data.On the other hand, data vis relies on good design choices, not only to make our plots attractive, but to also aid both the understanding and communication of results.On top of that, there is an element of creativity, since at it's heart, data vis is a form of visual communication.\n\n**4. Exploratory versus explanatory**\n\nIt's important to understand the distinction between exploratory and explanatory visualizations.Exploratory visualizations are easily-generated, data-heavy and intended for a small specialist audience, for example yourself and your colleagues - their primary purpose is graphical data analysis.Explanatory visualizations are labor-intensive, data-specific and intended for a broader audience, e.g. in publications or presentations - they are part of the communications process.As a data scientist, it's essential that you can quickly explore data, but you'll also be tasked with explaining your results to stake-holders.Good design begins with thinking about the audience - and sometimes that just means ourselves.\n\n**5. MASS::mammals**\n\nThis data set contains the average brain and body weights of 62 land mammals. To understand the relationship here, the most obvious first step is to make a scatter plot, like this one.\n\n**6. A scatter plot**\n\nTwo mammals, the African and Asian Elephants have both very large brain and body weights, leading to a positive skew on both axes.\n\n**7. Explore with a linear model**\n\nHere, applying a linear model is a poor choice since a few extreme values have a large influence.\n\n**8. Explore: fine-tuning**\n\nA log transformation of both variables allows for a better fit.So, although we began with a rough exploratory plot, that informed us about our data and lead us to a meaningful result.\n\n**9. Publication-ready plot**\n\nIn the end, we'd probably want a cleaned-up explanatory plot.\n\n**10. Anscombe's plots**\n\nHere's a classic example from Francis Anscombe, first published in 1973. When we imagine a linear model, as presented on this anonymous plot, we imagine that we are describing data that looks\n\n**11. Anscombe's plots**\n\nsomething like this. But this same model could be describing a very different set of data\n\n**12. Anscombe's plots**\n\nsuch as a parabolic relationship.\n\n**13. Anscombe's plots**\n\nwhich calls for a different model.\n\n**14. Anscombe's plots**\n\nor data in which an extreme value has a large effect.\n\n**15. Anscombe's plots**\n\nwhich becomes clear when the outlier is removed. And sometimes\n\n**16. Anscombe's plots**\n\nthe model may be describing a relationship where in fact there is none at all\n\n**17. Anscombe's plots**\n\nbecause some extreme values may be incorrect.\n\n**18. Anscombe's plots**\n\nIf we relied solely on the numerical output without plotting our data, we'd have missed distinct and interesting underlying trends.We can see that data viz is rooted in statistics and graphical data analysis, but it's also a creative process that involves some amount of trial and error.\n\n**19. Let's practice!**\n\nAlright, enough examples, let's get our fingers moving with some exercises.\n\n## Explore and explain\n\nIn this video we made the distinction between plots for exploring and plots for explaining data. Which of the following are exploratory plots typically *NOT*?\n\n> *Question*\n> ---\n> ???<br>\n> <br>\n> ⬜ Meant for a specialist audience.<br>\n> ⬜ Data-heavy.<br>\n> ✅ Pretty.<br>\n> ⬜ Rough first drafts.<br>\n> ⬜ Part of our data science toolkit as graphical data analysis.<br>\n\nExactly. You're not concerned with beautiful at this point. However, the plots should be meaningful and conform to best practices so that you do not mislead yourself!\n\n### Drawing your first plot\n\nTo get a first feel for `ggplot2`, let's try to run some basic `ggplot2` commands. The `mtcars` dataset contains information on 32 cars from a 1973 issue of Motor Trend magazine. This dataset is small, intuitive, and contains a variety of continuous and categorical variables.\n\n**Steps**\n\n1. Load the `ggplot2` package using `library()`.\n2. Use `str()` to explore the structure of the `mtcars` dataset.\n3. Hit submit. This will execute the example code on the right. See if you can understand what `ggplot` does with the data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the ggplot2 package\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'ggplot2'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked _by_ '.GlobalEnv':\n#> \n#>     scale_color_ordinal, scale_colour_ordinal, scale_fill_ordinal\n```\n:::\n\n```{.r .cell-code}\n# Explore the mtcars data frame with str()\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t32 obs. of  11 variables:\n#>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n#>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n#>  $ disp: num  160 160 108 258 360 ...\n#>  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n#>  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n#>  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n#>  $ qsec: num  16.5 17 18.6 19.4 17 ...\n#>  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n#>  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n#>  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n#>  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n:::\n\n```{.r .cell-code}\n# Execute the following command\np <- ggplot(mtcars, aes(cyl, mpg)) +\n  geom_point()\n```\n:::\n\n\nPhenomenal plotting! Notice that `ggplot2` treats `cyl` as a continuous variable. You get a plot, but it's not quite right, because it gives the impression that there is such a thing as a 5 or 7-cylinder car, which there is not.\n\n## Data columns types affect plot types\n\nThe plot from the previous exercise wasn't really satisfying. Although `cyl` (the number of cylinders) is categorical, you probably noticed that it is classified as numeric in `mtcars`. This is really misleading because the representation in the plot doesn't match the actual data type. You'll have to explicitly tell `ggplot2` that `cyl` is a categorical variable.\n\n**Steps**\n\n1. Change the `ggplot()` command by wrapping `factor()` around `cyl`.\n2. Hit submit and see if the resulting plot is better this time.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the ggplot2 package\nlibrary(ggplot2)\n\n# Change the command below so that cyl is treated as factor\nggplot(mtcars, aes(factor(cyl), mpg)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nStellar scatterplotting! Notice that `ggplot2` treats `cyl` as a factor. This time the x-axis does not contain variables like 5 or 7, only the values that are present in the dataset.\n\n## The grammar of graphics\n\nTheory. Coming soon ...\n\n**1. The grammar of graphics**\n\nThe first step in thinking creatively about data visualization is to appreciate that graphics are built upon an underlying grammar.\n\n**2. The quick brown fox jumps over the lazy dog**\n\nTo begin, let's consider one of the most well-known sentences in English.The quick brown fox jumps over the lazy dog.\n\n**3. The quick brown fox jumps over the lazy dog**\n\nEvery word in the sentence has a clear grammatical definition and when we write text, we take great care to choose the grammatical elements so that we communicate a very specific message.If we changed any of the grammatical elements of this sentence it would change the meaning, sometimes subtly, sometimes dramatically.\n\n**4. Grammar of graphics**\n\nThe same concept holds true for data visualization - graphics are built on an underlying grammar.The grammar of graphics is a plotting framework developed by Leland Wilkinson and published in his 1999 book, *The Grammar of Graphics*.There are two key things to note about the grammar of graphics.First, graphics are made up of distinct layers of grammatical elements, and second, meaningful plots are built around appropriate aesthetic mappings.To continue our analogy to written grammar, the layers are like the adjectives and nouns and the aesthetic mappings are like the grammatical rules for how to assemble that vocabulary.\n\n**5. The three essential grammatical elements**\n\nLet's explore grammatical elements first. There are three essential grammatical elements: data, aesthetics, and geometries.The data is obviously the data which we want to plot. the aesthetics layer refers to the scales onto which we will map our data, and the geom layer refers to the actual shape the data will take in the plot.\n\n**6. Course 1: core competency**\n\nThe rest are optional layers. This includes the theme layer, which controls all the non-data ink.In this course, we'll cover these first four layers which will comprise your core competency.\n\n**7. The seven grammatical elements**\n\nIn the next course we'll explore the remaining grammatical elements: the statistics, coordinates and facets layers.\n\n**8. Jargon for each element**\n\nThis diagram gives an example of some of the terms we'll encounter in each element. Whenever we make a plot we are choosing among these options and many others not displayed.By the end of this course you'll be able to generate meaningful and publication-quality exploratory plots using the first four layers.\n\n**9. Course 2: Tools for EDA**\n\nOnce we've covered the remaining three layers in the second course, we'll be using data viz as a tool for exploratory data analysis.\n\n**10. Let's practice!**\n\nLet's head over to the exercises and explore one of the datasets that you'll be using throughout the two courses.\n\n### Mapping data columns to aesthetics\n\nLet's dive a little deeper into the three main topics in this course: The data, aesthetics, and geom layers. We'll get to making pretty plots in the last chapter with the themes layer.\n\nWe'll continue working on the 32 cars in the `mtcars` data frame.\n\nConsider how the examples and concepts we discuss throughout these courses apply to your own data-sets!\n\n**Steps**\n\n1. Add a color aesthetic mapped to the displacement of the car engine: inside <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/aes\">`aes()`</a>, add a `color` argument equal to `disp`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Edit to add a color aesthetic mapped to disp\nggplot(mtcars, aes(wt, mpg, color = disp)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. This time, map `disp` to the `size` aesthetic.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Change the color aesthetic to a size aesthetic\nggplot(mtcars, aes(wt, mpg, size = disp)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nLegendary! Notice that a legend for the color and size scales was automatically generated.\n\n### Understanding variables\n\nIn the previous exercise you saw that `disp` can be mapped onto a color gradient or onto a continuous size scale.\n\nAnother argument of <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/aes\">`aes()`</a> is the `shape` of the points. There are a finite number of shapes which <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/ggplot\">`ggplot()`</a> can automatically assign to the points. However, if you try this command in the console:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt, mpg, shape = disp)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n```\n#> Error in `geom_point()`:\n#> ! Problem while computing aesthetics.\n#> ℹ Error occurred in the 1st layer.\n#> Caused by error in `scale_f()`:\n#> ! A continuous variable cannot be mapped to the shape aesthetic\n#> ℹ choose a different aesthetic or use `scale_shape_binned()`\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nIt gives an error. What does this mean?\n\n> *Question*\n> ---\n> ???<br>\n> <br>\n> ⬜ `shape` is not a defined argument.<br>\n> ✅ `shape` only makes sense with categorical data, and `disp` is continuous.<br>\n> ⬜ `shape` only makes sense with continuous data, and `disp` is categorical.<br>\n> ⬜ `shape` is not a variable in your dataset.<br>\n> ⬜ `shape` has to be defined as a function.<br>\n\nCorrect. The error message 'A continuous variable can not be mapped to shape', means that shape doesn't exist on a continuous scale here.\n\n## ggplot2 layers\n\nTheory. Coming soon ...\n\n**1. ggplot2 layers**\n\nNow that we have some idea about the different grammatical elements of graphics, let's see how this works in practice.\n\n**2. ggplot2 package**\n\nThe grammar of graphic is implemented in R using the ggplot2 package.There are two key functions that ggplot2 serves. First, we construct plots by layering grammatical elements on top of each other. Second, we use aesthetic mappings to bridge the link between data and it's visual interpretation.We are going to go through each grammatical element in depth in this and the next course. Here I'll introduce a data set which will be used throughout the videos and we'll go over some simple examples.\n\n**3. Data**\n\nThe bottom layer is the data element. Obviously we need some data to plot. I'm going to use several different data sets in the course videos,\n\n**4. Iris dataset**\n\none of which is the classic iris data set collected by Edgar Anderson in the 1930s and thereafter popularized by Ronald Fisher. The data set contains information on three iris species, setosa, versicolor, and virginica. Four measurements were taken from each plant - the petal length and width and the sepal length and width. You're probably familiar with petals, they're the colorful part of a flower. Sepals are the outer leaves of the flower, they are typically green, but in this case they're also colorful. There are 50 specimens of each species.\n\n**5. Iris dataset**\n\nThe data is stored in an object called iris, there are five variables: the species and one for each of the properties which were measured.\n\n**6. Aesthetics**\n\nThe next layer we'll add is the aesthetics element, which tells us which scales we should map our data onto. This is where the second main component of the grammar of graphics comes into play. On top of layering the grammatical elements, it's here that we establish our aesthetic mappings.\n\n**7. Iris aesthetics**\n\nIn this case we are going to make a scatter plot so we're going to map Sepal-dot-Length onto the X aesthetic and Sepal-dot-Width onto the Y aesthetic.\n\n**8. Geometries**\n\nThe next element is the geometry element. This allows us to choose how the plot will look.\n\n**9. Iris geometries**\n\nAfter we've established our three essential layers, we have enough instructions to make a basic scatter plot. It's pretty rough, so to get a more meaningful and cleaner visualization, we'll have to use the other layers.\n\n**10. Themes**\n\nThe next layer we'll look at is the themes element. It controls all the non-data ink on our plot.\n\n**11. Iris themes**\n\nWhich allows us to get a nice looking, meaningful and publication-quality plot directly in R.\n\n**12. Let's practice!**\n\nWe'll discuss the remaining grammatical elements in the next course.For now, let's begin by exploring these concepts in the exercises.\n\n## Adding geometries\n\nThe `diamonds` dataset contains details of 1,000 diamonds. Among the variables included are `carat` (a measurement of the diamond's size) and `price`.\n\nYou'll use two common geom layer functions:\n\n\n* <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_point\">`geom_point()`</a> adds points (as in a scatter plot).\n* <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_smooth\">`geom_smooth()`</a> adds a smooth trend curve.\nAs you saw previously, these are added using the `+` operator.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data, aes(x, y)) +\n  geom_*()\n```\n:::\n\n\nWhere `*` is the specific geometry needed.\n\n**Steps**\n\n1. Explore the `diamonds` data frame with the <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\">`str()`</a> function.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Explore the diamonds data frame with str()\nstr(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> tibble [53,940 × 10] (S3: tbl_df/tbl/data.frame)\n#>  $ carat  : num [1:53940] 0.23 0.21 0.23 0.29 0.31 0.24 0.24 0.26 0.22 0.23 ...\n#>  $ cut    : Ord.factor w/ 5 levels \"Fair\"<\"Good\"<..: 5 4 2 4 2 3 3 3 1 3 ...\n#>  $ color  : Ord.factor w/ 7 levels \"D\"<\"E\"<\"F\"<\"G\"<..: 2 2 2 6 7 7 6 5 2 5 ...\n#>  $ clarity: Ord.factor w/ 8 levels \"I1\"<\"SI2\"<\"SI1\"<..: 2 3 5 4 2 6 7 3 4 5 ...\n#>  $ depth  : num [1:53940] 61.5 59.8 56.9 62.4 63.3 62.8 62.3 61.9 65.1 59.4 ...\n#>  $ table  : num [1:53940] 55 61 65 58 58 57 57 55 61 61 ...\n#>  $ price  : int [1:53940] 326 326 327 334 335 336 336 337 337 338 ...\n#>  $ x      : num [1:53940] 3.95 3.89 4.05 4.2 4.34 3.94 3.95 4.07 3.87 4 ...\n#>  $ y      : num [1:53940] 3.98 3.84 4.07 4.23 4.35 3.96 3.98 4.11 3.78 4.05 ...\n#>  $ z      : num [1:53940] 2.43 2.31 2.31 2.63 2.75 2.48 2.47 2.53 2.49 2.39 ...\n```\n:::\n:::\n\n\n2. Edit the plot code to add a point geom. Use the `+` operator to add <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_point\">`geom_point()`</a> to the <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/ggplot\">`ggplot()`</a> command.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add geom_point() with +\nggplot(diamonds, aes(carat, price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add a smooth geom to the plot. Use the `+` operator to add <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_smooth\">`geom_smooth()`</a>.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add geom_smooth() with +\nggplot(diamonds, aes(carat, price)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nLovely layering! If you had executed the command without adding a `+`, it would produce an error message 'No layers in plot' because you are missing the third essential layer - the geom layer.\n\n### Changing one geom or every geom\n\nIf you have multiple geoms, then mapping an aesthetic to data variable inside the call to `ggplot()` will change *all* the geoms. It is also possible to make changes to *individual* geoms by passing arguments to the `geom_*()` functions.\n\n`geom_point()` has an `alpha` argument that controls the opacity of the points. A value of `1` (the default) means that the points are totally opaque; a value of `0` means the points are totally transparent (and therefore invisible). Values in between specify transparency.\n\nThe plot you drew last time is provided in the script.\n\n**Steps**\n\n1. Edit the plot code to map the `color` aesthetic to the `clarity` data variable.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Map the color aesthetic to clarity\nggplot(diamonds, aes(carat, price, color = clarity)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Make the points translucent by setting the `alpha` argument to `0.4`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Make the points 40% opaque\nggplot(diamonds, aes(carat, price, color = clarity)) +\n  geom_point(alpha = 0.4) +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nSmooth work! `geom_point()` + `geom_smooth()` is a common combination.\n\n### Saving plots as variables\n\nPlots can be saved as variables, which can be added two later on using the `+` operator. This is really useful if you want to make multiple related plots from a common base.\n\n**Steps**\n\n1. Using the `diamonds` dataset, plot the `price` (y-axis) versus the `carat` (x-axis), assigning to `plt_price_vs_carat`.\n2. Using `geom_point()`, add a point layer to `plt_price_vs_carat`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Draw a ggplot\nplt_price_vs_carat <- ggplot(\n  # Use the diamonds dataset\n  diamonds,\n  # For the aesthetics, map x to carat and y to price\n  aes(carat, price)\n)\n\n# Add a point layer to plt_price_vs_carat\nplt_price_vs_carat + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add an `alpha` argument to the point layer to make the points 20% opaque, assigning to `plt_price_vs_carat_transparent`.\n4. Type the plot's variable name (`plt_price_vs_carat_transparent`) to display it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# From previous step\nplt_price_vs_carat <- ggplot(diamonds, aes(carat, price))\n\n# Edit this to make points 20% opaque: plt_price_vs_carat_transparent\nplt_price_vs_carat_transparent <- plt_price_vs_carat + geom_point(alpha = 0.2)\n\n# See the plot\nplt_price_vs_carat_transparent\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Inside `geom_point()`, call `aes()` and map `color` to `clarity`, assigning to `plt_price_vs_carat_by_clarity`.\n6. Type the plot's variable name (`plt_price_vs_carat_by_clarity`) to display it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# From previous step\nplt_price_vs_carat <- ggplot(diamonds, aes(carat, price))\n\n# Edit this to map color to clarity\n# Assign the updated plot to a new object\nplt_price_vs_carat_by_clarity <- plt_price_vs_carat + geom_point(aes(color = clarity))\n\n# See the plot\nplt_price_vs_carat_by_clarity\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nSuper saving of plotting steps! By assigning parts of plots to a variable then reusing that variable in other plots, it makes it really clear how much those plots have in common.\n\n# 2. Aesthetics\n\nAesthetic mappings are the cornerstone of the grammar of graphics plotting concept. This is where the magic happens - converting continuous and categorical data into visual scales that provide access to a large amount of information in a very short time. In this chapter you’ll understand how to choose the best aesthetic mappings for your data.\n\n## Visible aesthetics\n\nTheory. Coming soon ...\n\n**1. Visible aesthetics**\n\nIn this section we'll explore aesthetics, and understand how they are distinct from attributes.\n\n**2. Mapping onto the X and Y axes**\n\nIn ggplot2, the mapping of aesthetics elements is a key concept to master.So what do we mean by mapping? This becomes clear when we understand that our beloved X and Y axes on a straightforward scatter plot are aesthetics. They define the position of dots on a common scale, like this example we saw in the previous chapter.The sepal length is mapped onto the X axis and the sepal width is mapped onto the Y axis.Here, we'll focus on the most common visual aesthetics and but we'll encounter more throughout the courses.When making multivariate plots we'll use aesthetics appropriately to maximize the number of variables we can add to a plot.\n\n**3. Mapping onto color**\n\nFor example, the variable Species can be mapped onto the color aesthetic, which colors the points according to the species from which they came.\n\n**4. Mapping onto the color aesthetic**\n\nThat is, we map a variable from our dataframe onto one of the visible aesthetics.We call a column in our dataframe to be mapped onto a visible aesthetic. That's why we made such a big deal about data structure earlier. Each mapped variable is its own column variable in the data frame.\n\n**5. Mapping onto the color aesthetic**\n\nImportantly, we call aesthetics in the aes function. We could have also called aesthetics in the geom layer\n\n**6. Mapping onto the color aesthetic in geom**\n\nas shown here, and get the same result.This is typically only done if we don't want all layers to inherit the same aesthetics or we're mixing different data sources. In general, try to keep your data and aesthetics layer in the same ggplot function definition.\n\n**7. Typical visible aesthetics**\n\nIn addition to the X and Y axes and color, typical visible aesthetics include\n\n**8. Typical visible aesthetics**\n\nfill, which is distinct from\n\n**9. Typical visible aesthetics**\n\ncolor in that color usually, but not always, refers to the outline of a shape.\n\n**10. Typical visible aesthetics**\n\nSize adjusts the area or radius of points, the thickness of lines and the font size of text.\n\n**11. Typical visible aesthetics**\n\nalpha refers to alpha-blending, which adjusts the transparency of a shape.\n\n**12. Typical visible aesthetics**\n\nline type refers to the dash pattern of a line and\n\n**13. Typical visible aesthetics**\n\nlabels are direct labels of an item, directly on the plot. Like printing an item's name on a scatter plot instead of just drawing a point. Direct labeling of points is an extension of axis labels for categorical data in that they are unambiguous, and\n\n**14. Typical visible aesthetics**\n\nShape refers to the shape of a point.Many of these aesthetics function as both aesthetic mappings as well as attributes, and one of the most common mistakes beginners make is confusing the two or overwriting aesthetic mappings with fixed attributes. Our goal here is to not only show you how to use them correctly but appropriately for the plot's type and purpose.Just like our two main variable types, there are visible aesthetics for continuous and categorical data which we'll explore in the next video,\n\n**15. Let's Practice**\n\nfor now, let's head over to the exercises and take a look at how aesthetics work.\n\n### All about aesthetics: color, shape and size\n\nIn the video you saw 9 visible aesthetics. Let's apply them to a categorical variable &mdash; the cylinders in `mtcars`, `cyl`.\n\nThese are the aesthetics you can consider within <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/aes\">`aes()`</a> in this chapter: `x`, `y`, `color`, `fill`, `size`, `alpha`, `labels` and `shape`.\n\nOne common convention is that you don't name the `x` and `y` arguments to `aes()`, since they almost always come first, but you do name other arguments.\n\nIn the following exercise the `fcyl` column is categorical. It is `cyl` transformed into a `factor`.\n\n**Steps**\n\n1. Map `mpg` onto the `x` aesthetic, and `fcyl` onto the `y`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Map x to mpg and y to fcyl\nmtcars <- mtcars |> \n  dplyr::mutate(fcyl = factor(cyl))\n\nmtcars |> \n  ggplot(aes(mpg, fcyl)) +\n    geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Swap the mappings of the first plot: `fcyl` onto the `x` aesthetic, and `mpg` onto the `y`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Swap mpg and fcyl\nggplot(mtcars, aes(fcyl, mpg)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Map `wt` onto `x`, `mpg` onto `y`, and `fcyl` onto `color`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Map x to wt, y to mpg and color to fcyl\nggplot(mtcars, aes(wt, mpg, color = fcyl)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Modify the point layer of the previous plot by changing the `shape` argument to `1` and increasing the `size` to `4`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt, mpg, color = fcyl)) +\n  # Set the shape and size of the points\n  geom_point(shape = 1, size = 4)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nAstounding aestheticism! Head over to the next exercise for some more aesthetics!\n\n### All about aesthetics: color vs. fill\n\nTypically, the `color` aesthetic changes the *outline*  of a geom and the `fill` aesthetic changes the *inside*. `geom_point()` is an exception: you use `color` (not `fill`) for the point color. However, some shapes have special behavior.\n\nThe default `geom_point()` uses `shape = 19`: a solid circle. An alternative is `shape = 21`: a circle that allow you to use *both* `fill` for the inside *and* `color` for the outline. This is lets you to map two aesthetics to each point.\n\nAll shape values are described on the <a href=\"https://www.rdocumentation.org/packages/graphics/topics/points\">`points()`</a> help page.\n\n`fcyl` and `fam` are the `cyl` and `am` columns converted to factors, respectively.\n\n**Steps**\n\n1. Change the aesthetics so that `fcyl` maps to `fill` rather than `color`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Map fcyl to fill\nggplot(mtcars, aes(wt, mpg, fill = fcyl)) +\n  geom_point(shape = 1, size = 4)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. In `geom_point()` change the `shape` argument to `21` and add an `alpha` argument set to `0.6`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt, mpg, fill = fcyl)) +\n  # Change point shape; set alpha\n  geom_point(shape = 21, size = 4, alpha = 0.6)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. In the `ggplot()` aesthetics, map `fam` to `color`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmtcars <- mtcars |> \n            dplyr::mutate(fam = factor(am))\n\n# Map color to fam\nggplot(mtcars, aes(wt, mpg, fill = fcyl, color = fam)) +\n  geom_point(shape = 21, size = 4, alpha = 0.6)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nShapely coding! Notice that mapping a categorical variable onto fill doesn't change the colors, although a legend is generated! This is because the default shape for points only has a color attribute and not a fill attribute! Use fill when you have another shape (such as a bar), or when using a point that does have a fill and a color attribute, such as `shape = 21`, which is a circle with an outline. Any time you use a solid color, make sure to use alpha blending to account for over plotting.\n\n### All about aesthetics: comparing aesthetics\n\nNow that you've got some practice with using attributes, be careful of a major pitfall: these attributes can overwrite the aesthetics of your plot!\n\n**Steps**\n\n1. Using `mtcars`, create a plot base layer, `plt_mpg_vs_wt`. Map `mpg` onto `y` and `wt` onto `x`.\n2. Add a point layer, mapping the categorical no. of cylinders, `fcyl`, onto `size`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Establish the base layer\nplt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))\n\n# Map fcyl to size\nplt_mpg_vs_wt +\n  geom_point(aes(size = fcyl))  \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using size for a discrete variable is not advised.\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Change the mapping. This time `fcyl` should be mapped onto `alpha`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Base layer\nplt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))\n\n# Map fcyl to alpha, not size\nplt_mpg_vs_wt +\n  geom_point(aes(alpha = fcyl))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Change the mapping again. This time `fycl` should be mapped onto `shape`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Base layer\nplt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))\n\n# Map fcyl to shape, not alpha\nplt_mpg_vs_wt +\n  geom_point(aes(shape = fcyl))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Swap the geom layer: change points to text.\n6. Change the mapping again. This time `fycl` should be mapped onto `label`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Base layer\nplt_mpg_vs_wt <- ggplot(mtcars, aes(wt, mpg))\n\n# Use text layer and map fcyl to label\nplt_mpg_vs_wt +\n  geom_text(aes(label = fcyl))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNice! Which aesthetic do you think is the clearest for categorical data?\n\n## Aesthetics for categorical & continuous variables\n\nMany of the aesthetics can accept either continuous or categorical variables, but some are restricted to categorical data. Which aesthetics are only applicable to categorical data?\n\n> *Question*\n> ---\n> ???<br>\n> <br>\n> ⬜ `color` &amp; `fill`<br>\n> ⬜ `alpha` &amp; `size`<br>\n> ✅ `label` &amp; `shape`<br>\n> ⬜ `alpha` &amp; `label`<br>\n> ⬜ `x` &amp; `y`<br>\n\nGreat! `label` and `shape` are only applicable to categorical data.\n\n## Using attributes\n\nTheory. Coming soon ...\n<p class=\"dc-cookie-banner-text\">                DataCamp and our partners use cookies and similar technologies to improve your learning experience, offer data science content relevant to your interests, improve the site and to show more relevant advertisements. You can change your mind at any time.            \n\n\n\n**1. Using attributes**\n\nIn the last exercises you learned a fundamental concept of ggplot2: aesthetic mappings.Colloquially, when we say aesthetics we're describing how something looks, but now you know that in ggplot2, we're talking about aesthetic mappings.If we talk about how something looks, we refer to its attributes. One of the most confusing parts of ggplot2 is that all our visible aesthetics also exist as attributes.\n\n**2. Aesthetics? Attributes!**\n\nso it's easy to mix up the two!Attributes are always called in the geom layer (which we'll discuss in more detail in the next chapter).For example, to change the color of these points to red, we'd just set the plot's attribute using the color argument in the geom layer.\n\n**3. Aesthetics? Attributes!**\n\nFor example, it's color attribute is set by the color argument, its size by the size argument\n\n**4. Aesthetics? Attributes!**\n\nand its shape by the shape argument. The distinction between aesthetics and attributes is subtle but important. Mixing the two is a very common mistake.\n\n**5. Let's practice!**\n\nOK, let's wrap up with some exercises on setting attributes.\n\n### All about attributes: color, shape, size and alpha\n\nThis time you'll use these arguments to set *attributes* of the plot, not map variables onto *aesthetics*.\n\nYou can specify colors in R using **hex codes**: a hash followed by two hexadecimal numbers each for red, green, and blue (`\"#RRGGBB\"`). Hexadecimal is base-16 counting. You have 0 to 9, and A representing 10 up to F representing 15. Pairs of hexadecimal numbers give you a range from 0 to 255. `\"#000000\"` is \"black\" (no color), `\"#FFFFFF\"` means \"white\", and `\"#00FFFF\" is cyan (mixed green and blue).\n\nA hexadecimal color variable, `my_blue` has been defined for you.\n\n**Steps**\n\n1. Set the point color to `my_blue` and the alpha to `0.6`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# A hexadecimal color\nmy_blue <- \"#4ABEFF\"\n\nggplot(mtcars, aes(wt, mpg)) +\n  # Set the point color to my_blue\n  geom_point(color = my_blue, alpha = 0.6)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Change the `color` mapping to a `fill` mapping. That is, `fcyl` should be mapped onto `fill`.\n3. Set the `color` of the points to `my_blue`, point `size` to `10` and the point `shape` to `1`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# A hexadecimal color\nmy_blue <- \"#4ABEFF\"\n\n# Change the color mapping to a fill mapping\nggplot(mtcars, aes(wt, mpg, fill = fcyl)) +\n  # Set point size to 10; shape to 1\n  geom_point(color = my_blue, size = 10, shape = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nHunky-dory hex specs! `ggplot2` lets you control these attributes in many ways to customize your plots.\n\n### All about attributes: conflicts with aesthetics\n\nIn the videos you saw that you can use all the aesthetics as attributes. Let's see how this works with the aesthetics you used in the previous exercises: `x`, `y`, `color`, `fill`, `size`, `alpha`, `label` and `shape`.\n\nIn this exercise you will set all kinds of attributes of the points!\n\nYou will continue to work with `mtcars`.\n\n**Steps**\n\n1. Add a point layer, setting `alpha`, the transparency, to `0.5`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt, mpg, color = fcyl)) +\n  # Add point layer with alpha 0.5\n  geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Add a text layer, setting the `label` to the rownames of the dataset `mtcars`, and the `color` to `\"red\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt, mpg, color = fcyl)) +\n  # Add text layer with label rownames(mtcars) and color red\n  geom_text(label = rownames(mtcars), color = 'red')\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add a point layer, setting the `shape` to `24` and the `color` to `\"yellow\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(wt, mpg, color = fcyl)) +\n  # Add points layer with shape 24 and color yellow\n  geom_point(shape = 24, color = 'yellow')\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNA\n\n### Going all out\n\nIn this exercise, you will gradually add more aesthetics layers to the plot. You're still working with the `mtcars` dataset, but this time you're using more features of the cars. Each of the columns is described on the <a href=\"https://www.rdocumentation.org/packages/datasets/topics/mtcars\">`mtcars`</a> help page. Columns `fcyl` and `fam` have been added (as before) as categorical versions of `cyl` and `am` respectively.\n\nNotice that adding more aesthetic mappings to your plot is not always a good idea! You may just increase complexity and decrease readability.\n\n**Steps**\n\n1. Use `mtcars` to draw a plot of `qsec` vs. `mpg`, colored by `fcyl`.\n2. Add a point layer.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 3 aesthetics: qsec vs. mpg, colored by fcyl\nggplot(mtcars, aes(mpg, qsec, color = fcyl)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add another aesthetic: map `fam` onto `shape`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 4 aesthetics: add a mapping of shape to fam\nggplot(mtcars, aes(mpg, qsec, color = fcyl, shape = fam)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Add another two aesthetics: map `hp` *divided by* `wt` onto `size`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 5 aesthetics: add a mapping of size to hp / wt\nggplot(mtcars, aes(mpg, qsec, color = fcyl, shape = fam, size = hp / wt)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThat's a pretty slick plot! Between the x and y dimensions, the color, shape, and size of the points, your plot displays five dimensions of the dataset!\n\n## Modifying aesthetics\n\nTheory. Coming soon ...\n\n**1. Modifying Aesthetics**\n\nNow that we know what aesthetics are and have some idea about choosing them appropriately, let's explore how to modify them.\n\n**2. Positions**\n\nA common adjustment is the position.Position specifies how ggplot will adjust for overlapping bars or points on a single layer.For example, we have identity, dodge, stack, fill, jitter, jitterdodge, and nudge. Let's take a look.\n\n**3. position = \"identity\" (default)**\n\nThe most straightforward position is identity, which we've actually already seen. It's the default position for our scatter plots. \"Identity\" means that the value in the data frame is exactly where the value will be positioned in the plot. This basically means, don't do anything, just put the information where the data says to put the information.\n\n**4. position = \"identity\" (default)**\n\nWe could have written it explicitly, but it's not necessary. There is an issue with the precision in this data set. Our sepals were measured to the nearest millimeter. So although we only have 150 points, there is too much overplotting to distinguish them.  To solve this, we need to add some random noise on both the x and y axes to see regions of high density - which is referred to as \"jittering\".\n\n**5. position = \"jitter\"**\n\n\"jitter\" can be used as an argument, but each position type can also be accessed as a function. For example,\n\n**6. position_jitter()**\n\nposition jitter can be defined in a function before we call our plot, as shown here. This has two advantages.\n\n**7. position_jitter()**\n\nNow we can set specific arguments for the position, such as the width, which defines how much random noise should be added, and it allows us to use this parameter throughout our plotting functions so that we can maintain consistency across plots. This is available for all position attributes.We'll explore the other positions in the exercises.\n\n**8. Scale functions**\n\nRecall that each of the aesthetics is a scale which we mapped data onto, so color is just a scale, like x and y are scales. Appropriately enough, we can access all the scales with the scale underscore functions. The second part of the function defines which scale we want to modify. All the aesthetics we saw earlier have an associated scale function. The third part must match the type of data we are using. Here discrete means we are working with categorical data.\n\n**9. Scale functions**\n\nThat means we have to choose our axis dependent on the type of data we have. Here, we'll consider the continuous x aesthetic and the categorical color aesthetic.Just as an aside, before we move on - don't let the naming conventions confuse you. Categorical variables are also called factors, discrete and qualitative depending on their context and who you're talking to.\n\n**10. scale_*_*()**\n\nThere are many arguments for the scale functions.The first argument is always the name of the scale, after that most common are limits, breaks, expand and labels.\n\n**11. The limits argument**\n\nlimits describe the scale's range.\n\n**12. The breaks argument**\n\nbreaks control the tick mark positions.\n\n**13. The expand argument**\n\nexpand is a numeric vector of length two, giving a multiplicative and additive constant used to expand the range of the scales so that there is a small gap between the data and the axes.\n\n**14. The labels argument**\n\nand labels adjust the category names.\n\n**15. labs()**\n\nNote that if we just want to quickly change the axis labels, we can do this with the labs function.\n\n**16. Let's try it out!**\n\nAlright, now let's try it out in the exercises.\n\n### Updating aesthetic labels\n\nIn this exercise, you'll modify some aesthetics to make a bar plot of the number of cylinders for cars with different types of transmission.\n\nYou'll also make use of some functions for improving the appearance of the plot.\n\n\n* <a href=\"https://www.rdocumentation.org/packages/ggplot2/topics/labs\">`labs()`</a> to set the x- and y-axis labels. It takes strings for each argument.\n* <a href=\"https://www.rdocumentation.org/packages/ggplot2/topics/scale_manual\">`scale_color_manual()`</a> defines properties of the color scale (i.e. axis). The first argument sets the legend title. `values` is a named vector of colors to use.\n**Steps**\n\n1. Set the x-axis label to `\"Number of Cylinders\"`, and the y-axis label to `\"Count\"` using the `x` and `y` arguments of <a href=\"https://www.rdocumentation.org/packages/ggplot2/topics/labs\">`labs()`</a>, respectively.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  geom_bar() +\n  # Set the axis labels\n  labs(x = \"Number of Cylinders\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-35-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Implement a custom fill color scale using <a href=\"https://www.rdocumentation.org/packages/ggplot2/topics/scale_manual\">`scale_fill_manual()`</a>. Set the first argument to `\"Transmission\"`, and `values` to `palette`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npalette <- c(automatic = \"#377EB8\", manual = \"#E41A1C\")\n\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  geom_bar() +\n  labs(x = \"Number of Cylinders\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n  # Set the fill color scale\n  scale_fill_manual(\"Transmission\", values = palette)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> <ggproto object: Class ScaleDiscrete, Scale, gg>\n#>     aesthetics: fill\n#>     axis_order: function\n#>     break_info: function\n#>     break_positions: function\n#>     breaks: waiver\n#>     call: call\n#>     clone: function\n#>     dimension: function\n#>     drop: TRUE\n#>     expand: waiver\n#>     get_breaks: function\n#>     get_breaks_minor: function\n#>     get_labels: function\n#>     get_limits: function\n#>     guide: legend\n#>     is_discrete: function\n#>     is_empty: function\n#>     labels: waiver\n#>     limits: function\n#>     make_sec_title: function\n#>     make_title: function\n#>     map: function\n#>     map_df: function\n#>     n.breaks.cache: NULL\n#>     na.translate: TRUE\n#>     na.value: grey50\n#>     name: Transmission\n#>     palette: function\n#>     palette.cache: NULL\n#>     position: left\n#>     range: <ggproto object: Class RangeDiscrete, Range, gg>\n#>         range: NULL\n#>         reset: function\n#>         train: function\n#>         super:  <ggproto object: Class RangeDiscrete, Range, gg>\n#>     rescale: function\n#>     reset: function\n#>     scale_name: manual\n#>     train: function\n#>     train_df: function\n#>     transform: function\n#>     transform_df: function\n#>     super:  <ggproto object: Class ScaleDiscrete, Scale, gg>\n```\n:::\n:::\n\n\n3. Modify the code to set the `position` to `dodge` so that the bars for transmissions are displayed side by side.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npalette <- c(automatic = \"#377EB8\", manual = \"#E41A1C\")\n\n# Set the position\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  geom_bar(position = 'dodge') +\n  labs(x = \"Number of Cylinders\", y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-37-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n  scale_fill_manual(\"Transmission\", values = palette)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> <ggproto object: Class ScaleDiscrete, Scale, gg>\n#>     aesthetics: fill\n#>     axis_order: function\n#>     break_info: function\n#>     break_positions: function\n#>     breaks: waiver\n#>     call: call\n#>     clone: function\n#>     dimension: function\n#>     drop: TRUE\n#>     expand: waiver\n#>     get_breaks: function\n#>     get_breaks_minor: function\n#>     get_labels: function\n#>     get_limits: function\n#>     guide: legend\n#>     is_discrete: function\n#>     is_empty: function\n#>     labels: waiver\n#>     limits: function\n#>     make_sec_title: function\n#>     make_title: function\n#>     map: function\n#>     map_df: function\n#>     n.breaks.cache: NULL\n#>     na.translate: TRUE\n#>     na.value: grey50\n#>     name: Transmission\n#>     palette: function\n#>     palette.cache: NULL\n#>     position: left\n#>     range: <ggproto object: Class RangeDiscrete, Range, gg>\n#>         range: NULL\n#>         reset: function\n#>         train: function\n#>         super:  <ggproto object: Class RangeDiscrete, Range, gg>\n#>     rescale: function\n#>     reset: function\n#>     scale_name: manual\n#>     train: function\n#>     train_df: function\n#>     transform: function\n#>     transform_df: function\n#>     super:  <ggproto object: Class ScaleDiscrete, Scale, gg>\n```\n:::\n:::\n\n\nPremier positioning! Choosing the right `position` argument is an important part of making a good plot.\n\n### Setting a dummy aesthetic\n\nIn the last chapter you saw that all the visible aesthetics can serve as attributes and aesthetics, but I very conveniently left out x and y. That's because although you can make univariate plots (such as histograms, which you'll get to in the next chapter), a y-axis will always be provided, even if you didn't ask for it.\n\nYou can make univariate plots in `ggplot2`, but you will need to add a fake y axis by mapping `y` to zero.\n\nWhen using setting y-axis limits, you can specify the limits as separate arguments, or as a single numeric vector. That is, `ylim(lo, hi)` or `ylim(c(lo, hi))`.\n\n**Steps**\n\n1. Using `mtcars`, plot `0` vs. `mpg`.\n2. Make a scatter plot and add `\"jitter\"` to it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot 0 vs. mpg\nggplot(mtcars, aes(mpg, 0)) +\n  # Add jitter\n  geom_point(position=\"jitter\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Use `ylim()` to set the limits on the y-axis from `-2` to `2`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg, 0)) +\n  geom_jitter() +\n  # Set the y-axis limits from -2 to 2\n  ylim(-2, 2)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGreat work! The best way to make your plot depends on a lot of different factors and sometimes `ggplot2` might not be the best choice.\n\n## Aesthetics best practices\n\nTheory. Coming soon ...\n\n**1. Aesthetics best practices**\n\nNow that we know what visual aesthetics are, how do we choose the right one?\n\n**2. Which aesthetics?**\n\nThere is some creativity involved, but there are some helpful guidelines.This chapter is informed by the seminal work of cartographer Jacques Bertin, who published The Semiology of Graphics in 1967 and William Cleveland, whose research on perception was summarized in two books.\n\n**3. Form follows function**\n\nThe best data viz serves a purpose - that is, form follows function. So what is the function in data viz?Well, it depends on your audience.You may just want to confirm expectations and begin analyzing your data, or you may want to inform a specific reader and persuade them with your results.\n\n**4. Form follows function**\n\nFirst and foremost, our function is the accurate and efficient representation of data. Beautiful is nice, but it's a secondary priority here. If data is not accurately and efficiently presented, it's junk.The function is never to misrepresent or obscure our data. We can avoid this by always considering the intended audience and purpose of our plots.So how do we do this?\n\n**5. Calculating statistics**\n\nLet's look at a simple example. In this data set, I have two continuous variables, x &amp; y, y is a function of x. There are two groups, A and B.\n\n**6. Calculating statistics**\n\nIt's pretty difficult to obtain summary statistics just by looking at the data.\n\n**7. Extracting information from Data**\n\nSo we have two choices, numeric summaries, which are precise but offer a poor overview, or data visualization, which is imprecise but is great for overviews.\n\n**8. Encoding numbers into plots**\n\nTo make a plot, we encode data in numbers and text into a visual medium.That's what we do with aesthetic mappings.\n\n**9. Various aesthetic mappings**\n\nThese plots differ in their aesthetic mappings and other values that we'll explore throughout the courses.\n\n**10. Decoding to data**\n\nThese visuals are then decoded to form an image of the original data. It's inherently imprecise - kind of like translating between two languages.\n\n**11. The best choices for aesthetics**\n\nWe consider the best choices to be those which are both efficient, in that they are faster than numeric summaries, and accurate, in that they minimize this information loss.\n\n**12. Aesthetics - continuous variables**\n\nThe choice of aesthetic mapping depends on the type of variable.The scatter plot is so easy to understand because it maps data as position on a common scale.\n\n**13. Aesthetics - continuous variables**\n\nImagine if we switch the aesthetic mappings for x and color. This is possible, but is neither accurate nor efficient.In the worst case scenario, there is no way to see the relationship between these three variables, and in the best case, our reader will interpret the plot in an unintended way.\n\n**14. Efficiency of decoding**\n\nThere are many choices for mapping continuous variables. For example, position on unaligned scales, as in having many plots with different scales but the same data type\n\n**15. Three iris scatter plots**\n\nlike this example where we had three plots from the iris wide2 data frame, one for each of our iris species\n\n**16. Three iris scatter plots, unaligned y-axes**\n\non unaligned y axes, is less efficient and makes it difficult to compare plots compared to\n\n**17. Single faceted plot, common y-axis**\n\nan aligned scale.\n\n**18. Decoding categorical**\n\nThere are also a variety of choices for categorical data.\n\n**19. Aesthetics - categorical variables**\n\nColor is often used to good effect for a categorical variables.But efficiency and accuracy are not only functions of aesthetic mappings. This plot suffers from over-plotting since not every point is visible. Over-plotting is an issue whenever we have points, like in a scatter plot.\n\n**20. Aesthetics - categorical variables**\n\nWe'll see lots of examples of over-plotting and how to deal with it in the exercises. Here, we'll want to adjust position to add some random noise, and attributes, which we've already seen.\n\n**21. Now it's your turn**\n\nLet's head over to the exercises and play around with these concepts further.\n\n### Appropriate mappings\n\nIncorrect aesthetic mapping causes confusion or misleads the audience.\n\nTypically, the **dependent** variable is mapped onto the the **y**-axis and the **independent** variable is mapped onto the **x**-axis.\n\nIn the `ToothGrowth` data set, we have three variables:\n\n\n|Variable |Description                |\n|:--------|:--------------------------|\n|`len`    |Tooth length               |\n|`supp`   |Supplement type (VC or OJ) |\n|`dose`   |Dose in milligrams/day     |\n\nFrom the six possible ways to map three variables, one solution is shown in the viewer. Which of the remaining five would actually be a better solution?\n\n> *Question*\n> ---\n> ???<br>\n> <br>\n> ✅ `x = supp, y = len, color = dose`<br>\n> ⬜ `x = dose, y = supp, color = len`<br>\n> ⬜ `x = len, y = dose, color = supp`<br>\n> ⬜ `x = len, y = supp, color = dose`<br>\n> ⬜ `x = supp, y = dose, color = len`<br>\n\nThat's correct!\n\n# 3. Geometries\n\nA plot’s geometry dictates what visual elements will be used. In this chapter, we’ll familiarize you with the geometries used in the three most common plot types you’ll encounter - scatter plots, bar charts and line plots. We’ll look at a variety of different ways to construct these plots.\n\n## Scatter plots\n\nTheory. Coming soon ...\n\n**1. Scatter plots**\n\nThe third essential layer is the geometry layer. This determines how the plot actually looks.We've already seen many geometries in action - so let's take a closer look.\n\n**2. 48 geometries**\n\nAt present there are almost 50 different geometries to choose from, although there are some redundancies. They can all be accessed using its own geom_ function.As the domain specialist, it's your job to choose the best geom, but there are some useful guidelines.\n\n**3. Common plot types**\n\nLet's begin with scatter plots.\n\n**4. Scatter plots**\n\nEach geom is associated with specific aesthetic mappings, some of which are essential. To use geom_point, we need the x and y aesthetics.\n\n**5. Scatter plots**\n\nIn addition to the essential aesthetics, we can also choose optional aesthetics, like alpha, color, fill, shape, size or stroke. These are all also attribute settings, as we discussed earlier.\n\n**6. Geom-specific aesthetic mappings**\n\nWe can specify both geom-specific data and aesthetics. This allows us to control the information for each layer independently.\n\n**7. iris demo**\n\nImagine I have a data frame which contains summary statistics, such as the mean, for each of my variables. In this case it's the average sepal width and length for each of the three iris species. ggplot2 can actually take care of the statistics for us, we don't need to calculate it ourselves beforehand, but let's see how to use it if we have.To show all the individual points and have the mean of the x and y plotted on top, I could add another geom_point layer accessing this data set.\n\n**8. iris plot**\n\nIn this plot one geom_point layer inherits the data and aesthetics from the parent ggplot function, and in the other I specify a different data set. Note that the aesthetics are inherited, as per the first geom function. I've changed the shape and the size attributes of the points so that they are distinguishable from the background points.\n\n**9. Shape attribute values**\n\nThe possible values are shown here.15 is a solid square.Numbers 21 - 25 are not simply repeats of earlier codes, these shapes have both fill and color, which can be controlled independently.\n\n**10. Example**\n\nFor example, I can have a black fill and use a stroke of 2 for a thick outline. The color aesthetic is still inherited from the parental layer. Imagine I wanted to have crosshairs marking where each mean value appears on the plot.\n\n**11. On-the-fly stats by ggplot2**\n\nIt's not fair to plot the mean without some measure of spread, like the standard deviation. We'll get into that in the next course when we discuss the stats layer.\n\n**12. position = \"jitter\"**\n\nRecall that in the last chapter we used the position argument to change the position from identity to jitter.\n\n**13. geom_jitter()**\n\nWe could have also done this with the geom_jitter function directly. geom_jitter is just a wrapper for geom_points with position set to jitter.\n\n**14. Don't forget to adjust alpha**\n\nOn top of jittering, we would also need to deal with overplotting of points by adjusting the alpha-blending, which works great as an attribute. This helps us to see regions of high density.\n\n**15. Hollow circles also help**\n\nYet another way to deal with overplotting is to change the symbol to a hollow circle, which is shape 1. Both of these options help with visual communication because they aid in perception. We can more accurately and quickly see what the data is actually showing, even if the jittering adds some random noise to both axes!It's always recommended to optimize the shape, size and alpha blending of points in a scatter plot.\n\n**16. Let's practice!**\n\nLet's head over to the exercises to understand what overplotting is and how to deal with it.\n\n### Overplotting 1: large datasets\n\nScatter plots (using `geom_point()`) are intuitive, easily understood, and very common, but we must *always* consider **overplotting**, particularly in the following four situations:\n\n1. Large datasets\n2. Aligned values on a single axis\n3. Low-precision data\n4. Integer data\n\nTypically, *alpha* blending (i.e. adding transparency) is recommended when using solid shapes. Alternatively, you can use opaque, hollow shapes.\n\nSmall points are suitable for large datasets with regions of high density (lots of overlapping).\n\nLet's use the `diamonds` dataset to practice dealing with the large dataset case.\n\n**Steps**\n\n1. Add a points layer to the base plot.\n\n    * Set the point transparency to `0.5`.\n    * Set `shape = \".\"`, the point size of 1 pixel.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot price vs. carat, colored by clarity\nplt_price_vs_carat_by_clarity <- ggplot(diamonds, aes(carat, price, color = clarity))\n\n# Add a point layer with tiny points\nplt_price_vs_carat_by_clarity + geom_point(alpha = 0.5, shape = \".\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-40-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Update the point shape to remove the line outlines by setting `shape` to `16`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot price vs. carat, colored by clarity\nplt_price_vs_carat_by_clarity <- ggplot(diamonds, aes(carat, price, color = clarity))\n\n# Set transparency to 0.5\nplt_price_vs_carat_by_clarity + geom_point(alpha = 0.5, shape = 16)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-41-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNA\n\n### Overplotting 2: Aligned values\n\nLet's take a look at another case where we should be aware of overplotting: Aligning values on a single axis.\n\nThis occurs when one axis is continuous and the other is categorical, which can be overcome with some form of jittering.\n\nIn the `mtcars` data set, `fam` and `fcyl` are categorical variants of `cyl` and `am`.\n\n**Steps**\n\n1. Create a base plot `plt_mpg_vs_fcyl_by_fam` of `fcyl` by `mpg`, colored by `fam`.\n2. Add a points layer to the base plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot base\nplt_mpg_vs_fcyl_by_fam <- ggplot(mtcars, aes(fcyl, mpg, color = fam))\n\n# Default points are shown for comparison\nplt_mpg_vs_fcyl_by_fam + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-42-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add some jittering by using `position_jitter()`, setting the `width` to `0.3`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot base\nplt_mpg_vs_fcyl_by_fam <- ggplot(mtcars, aes(fcyl, mpg, color = fam))\n\n# Default points are shown for comparison\nplt_mpg_vs_fcyl_by_fam + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-43-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Alter the point positions by jittering, width 0.3\nplt_mpg_vs_fcyl_by_fam + geom_point(position = position_jitter(width = 0.3))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-43-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Alternatively, use `position_jitterdodge()`. Set `jitter.width` and `dodge.width` to `0.3` to separate subgroups further.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot base\nplt_mpg_vs_fcyl_by_fam <- ggplot(mtcars, aes(fcyl, mpg, color = fam))\n\n# Default points are shown for comparison\nplt_mpg_vs_fcyl_by_fam + geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-44-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Now jitter and dodge the point positions\nplt_mpg_vs_fcyl_by_fam + geom_point(position = position_jitterdodge(jitter.width = 0.3, dodge.width = 0.3))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-44-2.png){fig-align='center' width=672}\n:::\n:::\n\n\nJubilant jitters! These are some simple ways of dealing with overplotting, but you'll encounter more ideas througout the `ggplot2` courses when we encounter atypical geoms.\n\n### Overplotting 3: Low-precision data\n\nYou already saw how to deal with overplotting when using <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_point\">`geom_point()`</a> in two cases:\n\n1. Large datasets\n2. Aligned values on a single axis\n3. Low-precision data\n\nWe used `position = 'jitter'` inside <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_point\">`geom_point()`</a> or <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_jitter\">`geom_jitter()`</a>.\n\nLet's take a look at another case:\n\n<ol start=\"3\">\n* Low-precision data\nThis results from low-resolution measurements like in the iris dataset, which is measured to 1mm precision (see viewer). It's similar to case 2, but in this case we can jitter on both the x and y axis.\n\n**Steps**\n\n1. Change the points layer into a jitter layer.\n2. Reduce the jitter layer's width by setting the `width` argument to `0.1`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +\n  # Swap for jitter layer with width 0.1\n  geom_jitter(alpha = 0.5, width = 0.1)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-45-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Let's use a different approach:\n\n    * Within `geom_point()`, set `position` to `\"jitter\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +\n  # Set the position to jitter\n  geom_point(alpha = 0.5, position = \"jitter\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-46-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Provide an alternative specification: \n\n    * Have the `position` argument call `position_jitter()` with a `width` of `0.1`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) +\n  # Use a jitter position function with width 0.1\n  geom_point(alpha = 0.5, position = position_jitter(width = 0.1))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-47-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! Notice that `jitter` can be a geom itself (i.e. `geom_jitter()`), an argument in `geom_point()` (i.e. `position = \"jitter\"`), or a position function, (i.e. `position_jitter()`).\n\n### Overplotting 4: Integer data\n\nLet's take a look at the last case of dealing with overplotting:\n\n<ol start=\"4\">\n* Integer data\nThis can be type `integer` (i.e. 1 ,2, 3…) or categorical (i.e. class `factor`) variables. `factor` is just a special class of type `integer`.\n\nYou'll typically have a small, defined number of intersections between two variables, which is similar to case 3, but you may miss it if you don't realize that integer and factor data are the same as low precision data.\n\nThe `Vocab` dataset provided contains the years of education and vocabulary test scores from respondents to US General Social Surveys from 1972-2004.\n\n**Steps**\n\n1. Examine the `Vocab` dataset using `str()`.\n2. Using `Vocab`, draw a plot of `vocabulary` vs `education`.\n3. Add a point layer.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# data\nlibrary(car, warn.conflicts = F, quietly = T)\ndata(Vocab)\n\n# Examine the structure of Vocab\nstr(Vocab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t30351 obs. of  4 variables:\n#>  $ year      : num  1974 1974 1974 1974 1974 ...\n#>  $ sex       : Factor w/ 2 levels \"Female\",\"Male\": 2 2 1 1 1 2 2 2 1 1 ...\n#>  $ education : num  14 16 10 10 12 16 17 10 12 11 ...\n#>  $ vocabulary: num  9 9 9 5 8 8 9 5 3 5 ...\n#>  - attr(*, \"na.action\")= 'omit' Named int [1:32115] 1 2 3 4 5 6 7 8 9 10 ...\n#>   ..- attr(*, \"names\")= chr [1:32115] \"19720001\" \"19720002\" \"19720003\" \"19720004\" ...\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot vocabulary vs. education\nggplot(Vocab, aes(education, vocabulary)) +\n  # Add a point layer\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-49-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Replace the point layer with a jitter layer.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(Vocab, aes(education, vocabulary)) +\n  # Change to a jitter layer\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-50-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Set the jitter transparency to `0.2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(Vocab, aes(education, vocabulary)) +\n  # Set the transparency to 0.2\n  geom_jitter(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-51-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n6. Set the shape of the jittered points to hollow circles, (shape `1`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(Vocab, aes(education, vocabulary)) +\n  # Set the shape to 1\n  geom_jitter(alpha = 0.2, shape = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-52-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! Notice how jittering and alpha blending serves as a great solution to the overplotting problem here. Setting the `shape` to `1` didn't really help, but it was useful in the previous exercises when you had less data. You need to consider each plot individually. You'll encounter this dataset again when you look at bar plots.\n\n## Histograms\n\nTheory. Coming soon ...\n\n**1. Histograms**\n\nIn this section we'll take a look at the typical uses of bar plots and their associated geoms.\n\n**2. Common plot types**\n\nA histogram is a special type of bar plot that shows the binned distribution of a continuous variable.\n\n**3. Histograms**\n\nHere, we only need a single aesthetic: X, a continuous variable. geom_histogram plots a a binned version of our data.A message lets you know what happened. This geom is associated with a specific statistic, stat_bin. The bin argument took the default value of 30.\n\n**4. Default of 30 even bins**\n\nThis is a good starting point, but we don't need to settle for defaults! Let's change it and see what happens.\n\n**5. Intuitive and meaningful bin widths**\n\nChanging the binwidth argument to 0-point-1 gives us a more intuitive impression of our data. Note that there is no space between the bars. That emphasizes that this is a representation of an underlying continuous distribution.\n\n**6. Re-position tick marks**\n\nThat's also why the labels on the x axis shouldn't fall directly on the bars, but between the bars. They represent intervals and not actual values.Setting the center argument to half that of the binwidth does the trick.\n\n**7. Different Species**\n\nRemember that we have three species in our data set? We can fill the bars according to each species. This makes it clear that we have three histograms in the same plotting space.There is a perceptual problem here, because it is not immediately clear if the bars are overlapping or if they are stacked on top of each other.\n\n**8. Default position is \"stack\"**\n\nThe default position is stack. In some cases, this may not be clear, so don't risk confusing your viewer with stacked bars.We have some alternative positions we can use.\n\n**9. position = \"dodge\"**\n\nWe can \"dodge\" our bars, which is a data viz term that simply means to off-set set each data point in a given category. That works but the number of categories really makes it difficult to see what's happening. We'll encounter dodging again in several situations throughout these courses where it can be used to good effect.\n\n**10. position = \"fill\"**\n\nThe fill position normalizes each bin to represent the proportion of all observations in each bin. The y axis label didn't change, but it should say proportion, not count.\n\n**11. Final Slide**\n\nAlright, let's head over to the exercises and take a look at histograms in action.\n\n### Drawing histograms\n\nRecall that histograms cut up a continuous variable into discrete bins and, by default, maps the internally calculated `count` variable (the number of observations in each bin) onto the y aesthetic. An internal variable called `density` can be accessed by using the `..` notation, i.e. `..density..`. Plotting this variable will show the relative frequency, which is the height times the width of each bin.\n\n**Steps**\n\n1. Using `mtcars`, map `mpg` onto the x aesthetic.\n2. Add a histogram layer using `geom_histogram()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot mpg\nggplot(mtcars, aes(mpg)) +\n  # Add a histogram layer\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-53-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Set the histogram `binwidth` to `1`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg)) +\n  # Set the binwidth to 1\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-54-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Map `y` to the internal variable `..density..` to show frequency densities.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Map y to ..density..\nggplot(mtcars, aes(mpg, ..density..)) +\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `after_stat(density)` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-55-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Set the `fill` color of the histogram bars to `datacamp_light_blue`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndatacamp_light_blue <- \"#51A8C9\"\n\nggplot(mtcars, aes(mpg, ..density..)) +\n  # Set the fill color to datacamp_light_blue\n  geom_histogram(binwidth = 1, fill = datacamp_light_blue)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-56-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! Histograms are one of the most common exploratory plots for continuous data. If you want to use density on the y-axis be sure to set your binwidth to an intuitive value.\n\n### Positions in histograms\n\nHere, we'll examine the various ways of applying positions to histograms. <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_histogram\">`geom_histogram()`</a>, a special case of <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_bar\">`geom_bar()`</a>, has a `position` argument that can take on the following values:\n\n\n* `stack` (the default): Bars for different groups are stacked on top of each other.\n* `dodge`: Bars for different groups are placed side by side.\n* `fill`: Bars for different groups are shown as proportions.\n* `identity`: Plot the values as they appear in the dataset.\n**Steps**\n\n1. Update the aesthetics so that the fill color of the bars is determined by `fam`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Update the aesthetics so the fill color is by fam\nggplot(mtcars, aes(mpg, fill = fam)) +\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-57-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Update the histogram layer to position the bars side-by-side, that is, `\"dodge\"`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg, fill = fam)) +\n  # Change the position to dodge\n  geom_histogram(binwidth = 1, position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-58-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Update the histogram layer so the bars' positions `\"fill\"` the y-axis.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg, fill = fam)) +\n  # Change the position to fill\n  geom_histogram(binwidth = 1, position = \"fill\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Removed 16 rows containing missing values (`geom_bar()`).\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-59-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Update the histogram layer so bars are top of each other, using the `\"identity\"` position. So each bar can be seen, set `alpha` to `0.4`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg, fill = fam)) +\n  # Change the position to identity, with transparency 0.4\n  geom_histogram(binwidth = 1, position = \"identity\", alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-60-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! Now proceed with line plots!\n\n## Bar plots\n\nTheory. Coming soon ...\n\n**1. Bar plots**\n\nIn the last video, we saw that histograms are a specialized version of bar plots, where we have binned a continuous X-axis.\n\n**2. Bar Plots, with a categorical X-axis**\n\nClassic bar plots refer to a categorical X-axis. Here we need to use either geom_bar or geom_col.\n\n**3. Bar Plots, with a categorical X-axis**\n\ngeom_bar will count the number of cases in each category of the variable mapped to the x-axis, whereas geom_col will just plot the actual value it finds in the data set.\n\n**4. Bar Plots, with a categorical X-axis**\n\nAll the positions we just looked at are available in bar plots. You will encounter two types of bar plots in wide-spread use. Depicting either absolute counts or distributions. Let's take a look at them in turn.\n\n**5. Habits of mammals**\n\nWe'll use a data set containing information on the REM sleep time and eating habits of a variety of mammals.\n\n**6. Bar plot**\n\nIn this bar plot, we've split our data set according to eating behavior and simply asked how many observations we have in each category.Notice that something very similar to what happened with geom_histogram has happened here. The data was counted and that count was plotted, so once again there were some statistics which occurred under the hood, in this case there was a default value of \"bin\" set for the stat argument.These kind of plots are useful in getting a quick visual output, but we often see another type of bar plot, one which tries to depict the distribution of a data set. Let's consider a scenario similar to what we saw with the point geom - that we have a data set with the summary values already calculated.\n\n**7. Plotting distributions instead of absolute counts**\n\nOften times this is the case - you will have descriptive statistics already calculated, but remember that we can make ggplot do this on the fly.\n\n**8. Plotting distributions**\n\nIf we want to plot the average sepal width for each species, we can map the avg column in our dataset onto the y aesthetic. In this case we need to use geom_col.If we want to add error bars, there is another geom for that, appropriately called geom_errorbar. Here we again need to specify some aesthetics specific to this geom, namely ymin and ymax. On top of that I've set the width of the error bar tips to be narrow and I've made the fill of the bars themselves gray, so that we can see the error bars.This is the kind of plot that you'll typically see in scientific publications, but it's pretty terrible. There is a special name in the data vis community for these types of plots - they're called dynamite plots, as in Wile E Coyote and the Roadrunner and a giant stick of Acme dynamite. They are strongly discouraged for many reasons, which we'll explore in the data vis best practices chapter at the end of the second course.\n\n**9. Let's practice!**\n\nLet's head over to the exercises and take a look at bar plots in action\n\n### Position in bar and col plots\n\nLet's see how the `position` argument changes <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_bar\">`geom_bar()`</a>.\n\nWe have three position options:\n\n\n* `stack`: The default\n* `dodge`: Preferred\n* `fill`: To show proportions\nWhile we will be using `geom_bar()` here, note that the function <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/geom_col\">`geom_col()`</a> is just `geom_bar()` where both the `position` and `stat` arguments are set to `\"identity\"`. It is used when we want the heights of the bars to represent the exact values in the data.\n\nIn this exercise, you'll draw the total count of cars having a given number of cylinders (`fcyl`), according to manual or automatic transmission type (`fam`).\n\n**Steps**\n\n1. Using `mtcars`, plot `fcyl`, filled by `fam`.\n2. Add a bar layer using `geom_bar()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot fcyl, filled by fam\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  # Add a bar layer\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-61-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Set the bar `position` argument to `\"fill\"`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  # Set the position to \"fill\"\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-62-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Change the bar `position` argument to `\"dodge\"`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  # Change the position to \"dodge\"\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-63-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! Different kinds of plots need different `position` arguments, so it's important to be familiar with this attribute.\n\n### Overlapping bar plots\n\nYou can customize bar plots further by adjusting the dodging so that your bars partially overlap each other. Instead of using `position = \"dodge\"`, you're going to use `position_dodge()`, like you did with `position_jitter()` in the the previous exercises. Here, you'll save this as an object, `posn_d`, so that you can easily reuse it.\n\nRemember, the reason you want to use `position_dodge()` (and `position_jitter()`) is to specify *how much* dodging (or jittering) you want.\n\nFor this example, you'll use the `mtcars` dataset.\n\n**Steps**\n\n1. Use the functional form of the bar position: replace `\"dodge\"` with a call to `position_dodge()`.\n2. Set its `width` to `0.2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(cyl, fill = fam)) +\n  # Change position to use the functional form, with width 0.2\n  geom_bar(position = position_dodge(width = 0.2))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-64-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Set the bar transparency level of the bars to `0.6`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(cyl, fill = fam)) +\n  # Set the transparency to 0.6\n  geom_bar(position = position_dodge(width = 0.2), alpha = 0.6)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-65-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! By using these position functions, you can customize your plot to suit your needs.\n\n### Bar plots: sequential color palette\n\nIn this bar plot, we'll fill each segment according to an ordinal variable. The best way to do that is with a sequential color palette.\n\nHere's an example of using a sequential color palette with the `mtcars` dataset:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(fcyl, fill = fam)) +\n  geom_bar() +\n  scale_fill_brewer(palette = \"Set1\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-66-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nIn the exercise, you'll use similar code on the the `Vocab` dataset. Both datasets are **ordinal**.\n\n**Steps**\n\n1. Plot the `Vocab` dataset, mapping `education` onto `x` and `vocabulary` onto `fill`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot education, filled by vocabulary\nggplot(Vocab, aes(education, fill = vocabulary))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-67-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Add a bar layer, setting `position` to `\"fill\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot education, filled by vocabulary\nggplot(Vocab, aes(education, fill = vocabulary)) +\n  # Add a bar layer with position \"fill\"\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: fill\n#> ℹ This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-68-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add a brewer fill scale, using the default palette (don't pass any arguments). Notice how this generates a warning message and an incomplete plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot education, filled by vocabulary\nggplot(Vocab, aes(education, fill = vocabulary)) +\n  # Add a bar layer with position \"fill\"\n  geom_bar(position = \"fill\") +\n  # Add a brewer fill scale with default palette\n  scale_fill_brewer()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The following aesthetics were dropped during statistical transformation: fill\n#> ℹ This can happen when ggplot fails to infer the correct grouping structure in\n#>   the data.\n#> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n#>   variable into a factor?\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-69-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! However, the plot is not complete! Let's fix this in the next exercise.\n\n## Line plots\n\nTheory. Coming soon ...\n\n**1. Line plots**\n\nLine plots are another very common plot type.\n\n**2. Common plot types**\n\nWe'll take a look at two examples of lines plots in situations in which they are very well-suited - time series.\n\n**3. Beaver**\n\nIn this first example our data set contains temperature measurements of a beaver in 10 minute intervals over 16-point-5 hours. The time variable is in a proper time format, which can be handled very well with ggplot2.\n\n**4. Beaver**\n\nOur basic line plot follows the syntax we've see so far. This is the simplest case scenario. Let's look at adding additional variables. In this case the transponder in our beaver also measured if the beaver was active or not.\n\n**5. Beaver**\n\nWe can directly color each segment of our line according to another variable which is set as a color aesthetic.\n\n**6. The fish catch dataset**\n\nIn the fish data set we have the global catch of 7 varieties of salmon over a 60 year period.\n\n**7. Linetype aesthetic**\n\nWhen we have multiple lines, we have to consider which aesthetic is more appropriate in allowing us to distinguish individual trends.Using linetype makes it difficult to distinguish individual species.\n\n**8. Size aesthetic**\n\nUsing size is even worse! Don't forget to use your common sense here.\n\n**9. Color aesthetic**\n\nUsing color allows for easily distinguishable groups.There are a couple other ways of showing lines.\n\n**10. Aesthetics for categorical variables**\n\nThe most salient choice is color, when available, since it allows the easiest way of distinguishing between each series.\n\n**11. Fill aesthetic with geom_area()**\n\nFor example, we could have used an area fill, with geom_area, which defaults to position \"stack\", so instead of overlapping time series, they are added together at each point.This kind of works in this situation, it really depends on how many time series you have and if that is what you want to communicate.\n\n**12. Using position = \"fill\"**\n\nIf we use position\"fill\" we'll get a proportion the total capture for each fish at each time-point. Note that we'd need to change the y axis label since these are no longer counts! This kind of plot is pretty popular in looking at proportional trends over time. A difficulty with this kind of plot is that only the bottom and top groups are actually drawn on a common scale, all the other ones are irregular shapes so they can be a bit difficult to decipher.\n\n**13. geom_ribbon()**\n\nThe final type of plot we'll look at is when we would want to have overlapping areas plots. In this case we'd have to use geom ribbon and force the y-min to be 0. We need to set the alpha level so that we can see the overlap. There is still a challenge in deciphering all the time series, in particularly at the bottom, where there are many overlapping series.\n\n**14. Let's practice!**\n\nWe'll explore line plots in the following exercises, which will bring our discussion of the first three essential layers of ggplot2 to a close. By now you have a good core knowledge to build a wide variety of plots.I'll see you in the next chapter where we'll talk about making clean explanatory plots by using the themes layer!\n\n### Basic line plots\n\nHere, we'll use the `economics` dataset to make some line plots. The dataset contains a time series for unemployment and population statistics from the Federal Reserve Bank of St. Louis in the United States. The data is contained in the `ggplot2` package.\n\nTo begin with, you can look at how the median unemployment time and the unemployment rate (the number of unemployed people as a proportion of the population) change over time.\n\n**Steps**\n\n1. Print the head of the `economics` dataset.\n2. Plot `unemploy` vs. `date` as a line plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Print the head of economics\nhead(economics)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"date\"],\"name\":[1],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"pce\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pop\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"psavert\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"uempmed\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"unemploy\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1967-07-01\",\"2\":\"506.7\",\"3\":\"198712\",\"4\":\"12.6\",\"5\":\"4.5\",\"6\":\"2944\"},{\"1\":\"1967-08-01\",\"2\":\"509.8\",\"3\":\"198911\",\"4\":\"12.6\",\"5\":\"4.7\",\"6\":\"2945\"},{\"1\":\"1967-09-01\",\"2\":\"515.6\",\"3\":\"199113\",\"4\":\"11.9\",\"5\":\"4.6\",\"6\":\"2958\"},{\"1\":\"1967-10-01\",\"2\":\"512.2\",\"3\":\"199311\",\"4\":\"12.9\",\"5\":\"4.9\",\"6\":\"3143\"},{\"1\":\"1967-11-01\",\"2\":\"517.4\",\"3\":\"199498\",\"4\":\"12.8\",\"5\":\"4.7\",\"6\":\"3066\"},{\"1\":\"1967-12-01\",\"2\":\"525.1\",\"3\":\"199657\",\"4\":\"11.8\",\"5\":\"4.8\",\"6\":\"3018\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# Using economics, plot unemploy vs. date\nggplot(economics, aes(date, unemploy)) +\n  # Make it a line plot\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-70-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Adjust the y-axis aesthetic of the plot so that it represents the proportion of the `pop`ulation that is `unemploy`ed.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Change the y-axis to the proportion of the population that is unemployed\nggplot(economics, aes(date, unemploy / pop)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-71-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! In the next exercise, we'll make more complicated line plots.\n\n### Multiple time series\n\nWe already saw how the form of your data affects how you can plot it. Let's explore that further with multiple time series. Here, it's important that all lines are on the same scale, and if possible, on the same plot.\n\n`fish.species` contains the global capture rates of seven salmon species from 1950-2010. Each variable (column) is a Salmon species and each observation (row) is one year. `fish.tidy` contains the same data, but in three columns: `Species`, `Year`, and `Capture` (i.e. one variable per column).\n\n**Steps**\n\n1. Use `str()` in the console to examine the structure of both `fish.species` and `fish.tidy`.\n2. Plot only the `Rainbow` salmon time series with `geom_line()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# data\nfish.species <- readRDS(\"data/fish.species.rds\")\nfish.tidy    <- readRDS(\"data/fish.tidy.rds\")\n\n# Plot the Rainbow Salmon time series\nggplot(fish.species, aes(x = Year, y = Rainbow)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-72-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Plot only the `Pink` salmon time series with `geom_line()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot the Rainbow Salmon time series\nggplot(fish.species, aes(x = Year, y = Rainbow)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-73-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot the Pink Salmon time series\nggplot(fish.species, aes(x = Year, y = Pink)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-73-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Now try and plot all time series in a single plot.\n\n    * Plot the `fish.tidy` dataset, mapping `Year` to `x` and `Capture` to `y`.\n    * `group` by fish species within the aesthetics of `geom_line()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot the Rainbow Salmon time series\nggplot(fish.species, aes(x = Year, y = Rainbow)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-74-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot the Pink Salmon time series\nggplot(fish.species, aes(x = Year, y = Pink)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-74-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot multiple time-series by grouping by species\nggplot(fish.tidy, aes(Year, Capture)) +\n  geom_line(aes(group = Species))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-74-3.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Let's add color to the previous plot to distinguish between the different time series.\n\n    * Plot the `fish.tidy` dataset again, this time making sure to `color` by `Species`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot the Rainbow Salmon time series\nggplot(fish.species, aes(x = Year, y = Rainbow)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-75-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot the Pink Salmon time series\nggplot(fish.species, aes(x = Year, y = Pink)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-75-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot multiple time-series by grouping by species\nggplot(fish.tidy, aes(Year, Capture)) +\n  geom_line(aes(group = Species))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-75-3.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot multiple time-series by coloring by species\nggplot(fish.tidy, aes(Year, Capture, color = Species)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-75-4.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! As you can see in the the last couple of plots, a grouping aesthetic was vital here. If you don't specify `color = Species`, you'll get a mess of lines.\n\n# 4. Themes\n\nIn this chapter, we’ll explore how understanding the structure of your data makes data visualization much easier. Plus, it’s time to make our plots pretty. This is the last step in the data viz process. The Themes layer will enable you to make publication quality plots directly in R. In the next course we'll look at some extra layers to add more variables to your plots.\n\n### Themes from scratch\n\nTheory. Coming soon ...\n\n**1. Themes from scratch**\n\nThe themes layer controls all the non-data ink on your plot.\n\n**2. The themes layer**\n\nWhich are all the visual elements that are not actually part of the data.\n\n**3. The themes layer**\n\nVisual elements can be classified as one of three different types - text, line or rectangle.\n\n**4. The themes layer**\n\nEach type can be modified by using the appropriate function, which all begin with element_ followed by text, line, or rect, respectively.\n\n**5. A starting plot...**\n\nFor example, consider this plot that we've already encounter a few times. It's composed out of a combination of data and lots of non-data embellishments. For example, these are all the text elements on our plot\n\n**6. The text elements**\n\nEach element has it's own unique name. We can access all the text in general, all titles in general but also more and more specific items, such as the plot, legend and axis titles, or the text on specific axes.  All these items are arguments of the theme function.\n\n**7. The text elements**\n\nThis is used like all other layers in ggplot, by adding a plus to our plot.\n\n**8. Adjusting theme elements**\n\nTo modify an element, just call its argument in the theme function and use the appropriate element_ function to specify what we want to change, in this case we need to use an element_text call. It's within this function that we manipulate things like size, color, alignment and angle of the text.\n\n**9. A starting plot...**\n\nLines include the tick marks on the axes, the axis lines themselves and all grid lines, both major and minor.\n\n**10. Line elements**\n\nThese are also all just arguments within the theme function and are modified by the element_line argument.\n\n**11. A starting plot...**\n\nThe remaining non-data ink on our plot are all rectangles of various sizes.\n\n**12. Rect elements**\n\nAccess rectangles using arguments in the theme function and modify them using element_rect.\n\n**13. Hierarchical naming reflects inheritance rules**\n\nAlthough we have access to every item, we don't need to modify them individually. They inherent from each other in a hierarchy. All text elements inherit from text, so if we changed that argument, all downstream arguments would be affected. The same goes for line and rectangle.The naming convention is pretty intuitive.In practice you will call a small combination of arguments that you want to change.\n\n**14. element_blank()**\n\nThere is one other element function that we haven't discussed yet: element_blank. We can use this in a plot to remove any item. That is, it won't be drawn at all. In this example we set all lines, text and rectangles to blank, so we are left with just the data. Notice that the legend keys themselves are part of the data, if you want to modify these elements refer back to the chapter aesthetics and the exercises on scales.\n\n**15. Let's practice!**\n\nHere, we saw how the theme layer allows us to modify visual attributes of non-data ink, including text lines and rectangles. But in addition to that, we can also modify a plot's margins and legend position. Let's head over to the exercises and see how this in action.\n\n## Moving the legend\n\nLet's wrap up this course by making a publication-ready plot communicating a clear message.\n\nTo change stylistic elements of a plot, call <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/theme\">`theme()`</a> and set plot properties to a new value. For example, the following changes the legend position.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + theme(legend.position = new_value)\n```\n:::\n\n\nHere, the new value can be\n\n\n* `\"top\"`, `\"bottom\"`, `\"left\"`, or `\"right'\"`: place it at that side of the plot.\n* `\"none\"`: don't draw it.\n* `c(x, y)`: `c(0, 0)` means the bottom-left and `c(1, 1)` means the top-right.\nLet's revisit the recession period line plot (assigned to `plt_prop_unemployed_over_time`).\n\n**Steps**\n\n1. Update the plot to remove the legend.\n2. *Look at the changes in the plot.*\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# View the default plot\nplt_prop_unemployed_over_time\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-78-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Remove legend entirely\nplt_prop_unemployed_over_time +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-78-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Update the plot to position the legend at the bottom of the plot.\n4. *Look at the changes in the plot.*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Position the legend at the bottom of the plot\nplt_prop_unemployed_over_time +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-79-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Position the legend inside the plot, with x-position `0.6` and y-position `0.1`.\n6. *Look at the changes in the plot.*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Position the legend inside the plot at (0.6, 0.1)\nplt_prop_unemployed_over_time +\n  theme(legend.position = c(0.6, 0.1))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-80-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNice! But be careful when placing a legend inside your plotting space. You could end up obscuring data.\n\n## Modifying theme elements\n\nMany plot elements have multiple properties that can be set. For example, line elements in the plot such as axes and gridlines have a color, a thickness (`size`), and a line type (solid line, dashed, or dotted). To set the style of a line, you use <a href=\"https://www.rdocumentation.org/packages/ggplot2/topics/margin\">`element_line()`</a>. For example, to make the axis lines into red, dashed lines, you would use the following.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + theme(axis.line = element_line(color = \"red\", linetype = \"dashed\"))\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-81-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nSimilarly, `element_rect()` changes rectangles and `element_text()` changes text. You can remove a plot element using `element_blank()`.\n\n`plt_prop_unemployed_over_time` is available.\n\n**Steps**\n\n1. Give all rectangles in the plot, (the `rect` element) a `fill` color of `\"grey92\"` (very pale grey).\n2. Remove the `legend.key`'s outline by setting its `color` to be missing.\n3. *Look at the changes in the plot.*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme(\n    # For all rectangles, set the fill color to grey92\n    rect = element_rect(fill = \"grey92\"),\n    # For the legend key, turn off the outline\n    legend.key = element_rect(color = NA)\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-82-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Remove the axis ticks, `axis.ticks` by making them a blank element.\n5. Remove the panel gridlines, `panel.grid` in the same way.\n6. *Look at the changes in the plot.*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme(\n    rect = element_rect(fill = \"grey92\"),\n    legend.key = element_rect(color = NA),\n    # Turn off axis ticks\n    axis.ticks = element_blank(),\n    # Turn off the panel grid\n    panel.grid = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-83-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n7. Add the major horizontal grid lines back to the plot using `panel.grid.major.y`.\\nSet the line `color` to `\"white\"`, `size` to `0.5`, and `linetype` to `\"dotted\"`.\n8. Set the line `color` to `\"white\"`, `size` to `0.5`, and `linetype` to `\"dotted\"`.\n9. *Look at the changes in the plot.*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme(\n    rect = element_rect(fill = \"grey92\"),\n    legend.key = element_rect(color = NA),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    # Add major y-axis panel grid lines back\n    panel.grid.major.y = element_line(\n      # Set the color to white\n      color = \"white\",\n      # Set the size to 0.5\n      size = 0.5,\n      # Set the line type to dotted\n      linetype = \"dotted\"\n    )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-84-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n10. Make the axis tick labels' text, `axis.text`, less prominent by changing the `color` to `\"grey25\"`.\n11. Increase the `plot.title`'s, `size` to `16` and change its font `face` to `\"italic\"`.\n12. *Look at the changes in the plot.*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme(\n    rect = element_rect(fill = \"grey92\"),\n    legend.key = element_rect(color = NA),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(\n      color = \"white\",\n      size = 0.5,\n      linetype = \"dotted\"\n    ),\n    # Set the axis text color to grey25\n    axis.text = element_text(color = \"grey25\"),\n    # Set the plot title font face to italic and font size to 16\n    plot.title = element_text(face = \"italic\", size = 16)\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-85-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nExcellent Explanatory Plot! This plot is ready for prime time -- it's pretty AND informative. Make sure that all your text is legible for the context in which it will be viewed.\n\n### Modifying whitespace\n\n**Whitespace** means all the non-visible margins and spacing in the plot.\n\nTo set a single whitespace value, use <a href=\"https://www.rdocumentation.org/packages/grid/topics/unit\">`unit(x, unit)`</a>, where `x` is the amount and `unit` is the unit of measure.\n\nBorders require you to set 4 positions, so use <a href=\"https://www.rdocumentation.org/packages/ggplot2/topics/margin\">`margin(top, right, bottom, left, unit)`</a>. To remember the margin order, think **TRouBLe**.\n\nThe default unit is `\"pt\"` (points), which scales well with text. Other options include  \"cm\", \"in\" (inches) and \"lines\" (of text).\n\n`plt_mpg_vs_wt_by_cyl` is available. The panel and legend are wrapped in blue boxes so you can see how they change.\n\n**Steps**\n\n1. Give the axis tick length, `axis.ticks.length`, a unit of `2` `\"lines\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_mpg_vs_wt_by_cyl <- ggplot(mtcars, aes(wt, mpg, color = fcyl)) +\n  ylab(\"Miels per gallon\") + \n  xlab(\"weight (1000/lbs)\") +\n  geom_point()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# View the original plot\nplt_mpg_vs_wt_by_cyl\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-87-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nplt_mpg_vs_wt_by_cyl +\n  theme(\n    # Set the axis tick length to 2 lines\n    axis.ticks.length = unit(2, \"lines\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-87-2.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Give the legend key size, `legend.key.size`, a unit of `3` centimeters (`\"cm\"`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_mpg_vs_wt_by_cyl +\n  theme(\n    # Set the legend key size to 3 centimeters\n    legend.key.size = unit(3, \"cm\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-88-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Set the `legend.margin` to `20` points (`\"pt\"`) on the top, `30` pts on the right, `40` pts on the bottom, and `50` pts on the left.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_mpg_vs_wt_by_cyl +\n  theme(\n    # Set the legend margin to (20, 30, 40, 50) points\n    legend.margin = margin(20, 30, 40, 50, \"pt\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-89-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Set the plot margin, `plot.margin`, to `10`, `30`, `50`, and `70` millimeters (`\"mm\"`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_mpg_vs_wt_by_cyl +\n  theme(\n    # Set the plot margin to (10, 30, 50, 70) millimeters\n    plot.margin = margin(10, 30, 50, 70, \"mm\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-90-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nWonderful whitespace widening! Changing the whitespace can be useful if you need to make your plot more compact, or if you want to create more space to reduce \"business\".\n\n### Theme flexibility\n\nTheory. Coming soon ...\n\n**1. Theme flexibility**\n\nIn the last video and exercises\n\n**2. Ways to use themes**\n\nwe saw how to fine-tune every part of our plot using the theme layer.\n\n**3. Ways to use themes**\n\nThere are a few other ways of changing theme elements, so let's take a look. We'll begin with defining our own theme layer object.\n\n**4. Defining theme objects**\n\nIf you're using many plots within a presentation or publication, you'll want to have consistency in your style. So, once you settle on a a specific theme, you'll want to apply it to all plots of the same type.Creating a theme from scratch is a detailed process, that we don't want to repeat for every plot we make. That's where defining a theme layer object comes into play.\n\n**5. Defining theme objects**\n\nTo see how this works let's return to a plot we've already seen in the last video.For convenience, we're going to save this plot as an object called Z.\n\n**6. Defining theme objects**\n\nWe can adjust specific theme arguments to get the desired plot style. Here, I've changed the font family, size and title color.\n\n**7. Defining theme objects**\n\nThe first method in automating this process is to save our layer as an object. Here we're just going to call it theme iris.\n\n**8. Reusing theme objects**\n\nJust as we've seen throughout the course, we can add individual layers to any ggplot object.This means we can reuse this style over and over. Let's see what happens when we try to apply our new theme object on another plot.\n\n**9. Reusing theme objects**\n\nRemember this histogram of the iris Sepal widths?\n\n**10. Reusing theme objects**\n\nNow it has the same style as our scatter plot, without having to retype the whole theme layer.\n\n**11. Reusing theme objects**\n\nBut let's say that on occasion I wanted to modify some other specific elements of a plot. Not a problem, we can just add a another theme layer which will override any previous settings. In this example, I've removed the x axis line.\n\n**12. Ways to use themes**\n\nSo far we just used our theme as an object itself. This is a pretty flexible way of working with theme, but a third way of working with themes is accessing the built-in theme templates.\n\n**13. Using built-in themes**\n\nBuilt-in theme functions begin with theme_*. theme classic is my go-to template for great publication-quality plots.\n\n**14. Using built-in themes**\n\nOf course we can always modify any specific element, as we've already seen.\n\n**15. Ways to use themes**\n\nThere are also packages with pre-defined themes, like the ggthemes package.\n\n**16. The ggthemes package**\n\nThe tufte theme mimics Tufte's classic style, which removes all non-data ink and sets the font to a serif typeface.\n\n**17. Ways to use themes**\n\nFinally, we can update and set the default theme\n\n**18. Updating themes**\n\nUpdating is done with the theme_update function.This function behaves differently from a typical function. This command updates the default theme and saves the current default to the object \"original\".\n\n**19. Updating themes**\n\nNow, all plots will automatically have the same theme.\n\n**20. Setting themes**\n\nWe can set a complete theme object, like original, using the theme_set function.\n\n**21. Let's practice!**\n\nAlright, let's try out these concepts in the exercises. In the next video will bring everything together in a simple case study.\n\n## Built-in themes\n\nIn addition to making your own themes, there are several <a href=\"https://ggplot2.tidyverse.org/reference/ggtheme.html\">out-of-the-box solutions</a> that may save you lots of time.\n\n\n* <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/ggtheme\">`theme_gray()`</a> is the default.\n* <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/ggtheme\">`theme_bw()`</a> is useful when you use transparency.\n* <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/ggtheme\">`theme_classic()`</a> is more traditional.\n* <a href=\"http://www.rdocumentation.org/packages/ggplot2/functions/ggtheme\">`theme_void()`</a> removes everything but the data. \n`plt_prop_unemployed_over_time` is available.\n\n**Steps**\n\n1. Add a black and white theme, `theme_bw()`, to the plot.\n2. *What changed in the plot?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add a black and white theme\nplt_prop_unemployed_over_time +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-91-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add a classic theme, `theme_classic()`, to the plot.\n4. *What changed in the plot?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add a classic theme\nplt_prop_unemployed_over_time +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-92-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Add a void theme, `theme_void()`, to the plot.\n6. *What changed in the plot?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add a void theme\nplt_prop_unemployed_over_time +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-93-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nThrilling theming! the black and white theme works really well if you use transparency in your plot.\n\n## Exploring ggthemes\n\nOutside of `ggplot2`, another source of built-in themes is the `ggthemes` package. The workspace already contains the `plt_prop_unemployed_over_time`, the line plot from before. Let's explore some of the ready-made `ggthemes` themes.\n\n`plt_prop_unemployed_over_time` is available.\n\n**Steps**\n\n1. Add a fivethirtyeight.com theme, `theme_fivethirtyeight()`, to the plot.\n2. *What changed in the plot?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Package\nlibrary(ggthemes)\n\n# Use the fivethirtyeight theme\nplt_prop_unemployed_over_time +\n  theme_fivethirtyeight()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-94-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Add an Edward Tufte theme, `theme_tufte()`, to the plot.\n4. *What changed in the plot?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Use Tufte's theme\nplt_prop_unemployed_over_time +\n  theme_tufte()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-95-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n5. Add a Wall Street Journal theme, `theme_wsj()`, to the plot.\n6. *What changed in the plot?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Use the Wall Street Journal theme\nplt_prop_unemployed_over_time +\n  theme_wsj()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-96-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nExcellent use of extra themes! `ggthemes` has over 20 themes for you to try.\n\n### Setting themes\n\nReusing a theme across many plots helps to provide a consistent style. You have several options for this.\n\n1. Assign the theme to a variable, and add it to each plot.\n2. Set your theme as the default using theme_set().\n\nA good strategy that you'll use here is to begin with a built-in theme then modify it.\n\n`plt_prop_unemployed_over_time` is available. The theme you made earlier is shown in the sample code.\n\n**Steps**\n\n1. Assign the theme to `theme_recession`.\n2. Add the Tufte theme and `theme_recession` together.\n3. Use the Tufte recession theme by adding it to the plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Theme layer saved as an object, theme_recession\ntheme_recession <- theme(\n  rect = element_rect(fill = \"grey92\"),\n  legend.key = element_rect(color = NA),\n  axis.ticks = element_blank(),\n  panel.grid = element_blank(),\n  panel.grid.major.y = element_line(color = \"white\", size = 0.5, linetype = \"dotted\"),\n  axis.text = element_text(color = \"grey25\"),\n  plot.title = element_text(face = \"italic\", size = 16),\n  legend.position = c(0.6, 0.1)\n)\n\n# Combine the Tufte theme with theme_recession\ntheme_tufte_recession <- theme_tufte() + theme_recession\n\n# Add the recession theme to the plot\nplt_prop_unemployed_over_time + theme_tufte_recession\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-97-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Use `theme_set()` to set `theme_tufte_recession` as the default theme.\n5. Draw the plot, `plt_prop_unemployed_over_time`, without explicitly adding a theme.\n6. *Look at the plot. Was it styled with the default theme or the new theme?**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_recession <- theme(\n  rect = element_rect(fill = \"grey92\"),\n  legend.key = element_rect(color = NA),\n  axis.ticks = element_blank(),\n  panel.grid = element_blank(),\n  panel.grid.major.y = element_line(color = \"white\", size = 0.5, linetype = \"dotted\"),\n  axis.text = element_text(color = \"grey25\"),\n  plot.title = element_text(face = \"italic\", size = 16),\n  legend.position = c(0.6, 0.1)\n)\ntheme_tufte_recession <- theme_tufte() + theme_recession\n\n# Set theme_tufte_recession as the default theme\ntheme_set(theme_tufte_recession)\n\n# Draw the plot (without explicitly adding a theme)\nplt_prop_unemployed_over_time\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-98-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNA\n\n### Publication-quality plots\n\nWe've seen many examples of beautiful, publication-quality plots. Let's take a final look and put all the pieces together.\n\n`plt_prop_unemployed_over_time` is available.\n\n**Steps**\n\n1. Add Tufte's theme.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  # Add Tufte's theme\n  theme_tufte()\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-99-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Call the function to add individual theme elements. Turn off the legend and the axis ticks.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme_tufte() +\n  # Add individual theme elements\n  theme(\n    # Turn off the legend\n    legend.position = \"none\",\n    # Turn off the axis ticks\n    axis.ticks = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-100-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. Set the axis title and axis text's text color to `grey60`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme_tufte() +\n  theme(\n    legend.position = \"none\",\n    axis.ticks = element_blank(),\n    # Set the axis title's text color to grey60\n    axis.title = element_text(color = \"grey60\"),\n    # Set the axis text's text color to grey60\n    axis.text = element_text(color = \"grey60\")\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-101-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Set the panel gridlines major y values. Set the color to `grey60`, the size to `0.25`, and the line type to `dotted`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplt_prop_unemployed_over_time +\n  theme_tufte() +\n  theme(\n    legend.position = \"none\",\n    axis.ticks = element_blank(),\n    axis.title = element_text(color = \"grey60\"),\n    axis.text = element_text(color = \"grey60\"),\n    # Set the panel gridlines major y values\n    panel.grid.major.y = element_line(\n      # Set the color to grey60\n      color = \"grey60\",\n      # Set the size to 0.25\n      size = 0.25,\n      # Set the linetype to dotted\n      linetype = \"dotted\"\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-102-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nPerfect plotting! That will look great in a publication!\n\n## Effective explanatory plots\n\nTheory. Coming soon ...\n\n**1. Effective explanatory plots**\n\nFor our last exercises, I want to go through an example of producing explanatory plots in an info viz style, something that you'd see in a magazine or website for a mostly lay audience.\n\n**2. Our goal, an effective explanatory plot**\n\nThese plots tend to have both a small number of observations and variables, have embellishments and typically make a clear or dramatic statement.Our example comes from the gapminder data set and plots the countries with the highest and lowest life expectancies in 2007. The global mean is plotted for comparison. Here we focus on the large gap between the highest and lowest life expectancies, which is about 40 years!\n\n**3. Complete data**\n\n\n\n**4. First exploratory plots - distributions**\n\nOur first exploratory plot would probably be a histogram, which isn't a bad choice. Recall that we have already applied a binning statistic here.\n\n**5. First exploratory plots - distributions**\n\nAn alternative would be to arrange the data according life expectancy and plot that as an index, which allows us to see each point individually, without first binning the variable.\n\n**6. First exploratory plots - distributions**\n\nThis has the advantage that we can color each point according to continent. This is already a quite informative plot. We can see differences in the distribution between continents. After getting familiar with our data, we need to reduce it to a compact and understandable format for a lay audience.\n\n**7. Our data**\n\nIn this form we only have 20 observations, the top 10 and bottom 10 observations.\n\n**8. life expectancy plot**\n\nHere, I'd map the country to the y axis, so that it's easy to read, I mapped life expectancy onto both color and the x axis, which is redundant, but helps a lay audience.\n\n**9. Use intuitive and attractive geoms**\n\nThe line segments add some perspective and is sometimes referred to as a lollipop plot when used with points.\n\n**10. Add text labels to your plot**\n\nTypically, we're happy to just read a value from the axis, but adding the actual value using a geom_text layer makes it immediately more intuitive for unexperienced viewers. You can already see that there are many things happening that we wouldn't typically do for a scientific audience.\n\n**11. Use appropriate scales**\n\nNext, I'd clean up the scales, using an intuitive color palette, removing unnecessary buffering, and changing the x axis location to the top of the plot.\n\n**12. Add useful titles and citations**\n\nTitles and captions help to make the plot complete, if it will be viewed alone.\n\n**13. Remove non-data ink**\n\nAnd of course, removing non-data ink makes for a great looking plot. Notice that I removed the x and y axis labels as well as the legend. None of them are actually necessary.\n\n**14. Add threshold lines**\n\nAdding a threshold line helps to orientate the viewer. Here, it's the global mean from 2007.\n\n**15. Add informative text**\n\nOf course, it's also helpful to label the threshold line. We'll do this with the annotate function, which allows us to access any geom and place it manually on a plot.\n\n**16. Add embellishments**\n\nFor example, another geom we haven't seen yet is geom_curve, for drawing curved lines. This is really great for adding handy little arrows anywhere on our plot.\n\n**17. Let's practice!**\n\nBy now you have the ggplot2 core competencies that will allow you to make beautiful and effective exploratory plots, but there is a lot more to data visualization and ggplot2. After you're finished the exercises, head over to the next course to learn about the remaining layers and round out your knowledge.\n\n### Using geoms for explanatory plots\n\nLet's focus on producing beautiful and effective explanatory plots. In the next couple of exercises, you'll create a plot that is similar to the one shown in the video using `gm2007`, a filtered subset of the `gapminder` dataset.\n\nThis type of plot will be in an info-viz style, meaning that it would be similar to something you'd see in a magazine or website for a mostly lay audience.\n\nA scatterplot of `lifeExp` by `country`, colored by `lifeExp`, with points of size `4`, is provided.\n\n**Steps**\n\n1. `geom_segment()` adds line segments and requires two additional aesthetics: `xend` and `yend`. To draw a horizontal line for each point, map `30` onto `xend` and `country` onto `yend`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# data\nlibrary(gapminder)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:car':\n#> \n#>     recode\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\ngm2007 <- gapminder |> \n  filter(year == 2007) |> \n  select(country, lifeExp, continent) |> \nfilter(lifeExp > 80.6 | lifeExp < 46) |> \n  arrange(lifeExp)\n\n# Add a geom_segment() layer\nggplot(gm2007, aes(x = lifeExp, y = country, color = lifeExp)) +\n  geom_point(size = 4) +\n  geom_segment(aes(xend = 30, yend = country), linewidth = 2)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-103-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. `geom_text` also needs an additional aesthetic: `label`. Map `lifeExp` onto `label`, and set the attributes `color` to `\"white\"` and `size` to `1.5`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add a geom_text() layer\nggplot(gm2007, aes(x = lifeExp, y = country, color = lifeExp)) +\n  geom_point(size = 4) +\n  geom_segment(aes(xend = 30, yend = country), size = 2) +\n  geom_text(aes(label = lifeExp), color = \"white\", size = 1.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-104-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. The color scale has been set for you, but you need to clean up the scales. For the x scale:\\nSet `expand` to `c(0, 0)` and  `limits` to `c(30, 90)`.\\nPlace the axis on the top of the plot with the `position` argument.\n4. Set `expand` to `c(0, 0)` and  `limits` to `c(30, 90)`.\n5. Place the axis on the top of the plot with the `position` argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Package\nlibrary(RColorBrewer)\n\n# Set the color scale\npalette <- brewer.pal(5, \"RdYlBu\")[-(2:4)]\n\n# Modify the scales\nggplot(gm2007, aes(x = lifeExp, y = country, color = lifeExp)) +\n  geom_point(size = 4) +\n  geom_segment(aes(xend = 30, yend = country), size = 2) +\n  geom_text(aes(label = round(lifeExp,1)), color = \"white\", size = 1.5) +\n  scale_x_continuous(\"\", expand = c(0,0), limits = c(30,90), position = \"top\") +\n  scale_color_gradientn(colors = palette)\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-105-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n6. Make sure to label the plot appropriately using `labs()`:\n\n    * Make the title `\"Highest and lowest life expectancies, 2007\"`.\n    * Add a reference by setting `caption` to `\"Source: gapminder\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Set the color scale\npalette <- brewer.pal(5, \"RdYlBu\")[-(2:4)]\n\n# Add a title and caption\nplt_country_vs_lifeExp <- ggplot(gm2007, aes(x = lifeExp, y = country, color = lifeExp)) +\n  geom_point(size = 4) +\n  geom_segment(aes(xend = 30, yend = country), size = 2) +\n  geom_text(aes(label = round(lifeExp,1)), color = \"white\", size = 1.5) +\n  scale_x_continuous(\"\", expand = c(0,0), limits = c(30,90), position = \"top\") +\n  scale_color_gradientn(colors = palette) +\n  labs(title = \"Highest and lowest life expectancies, 2007\", caption = \"Source: gapminder\")\nplt_country_vs_lifeExp\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-106-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGreat job! Let's continue adding to this plot in the next exercise.\n\n### Using annotate() for embellishments\n\nIn the previous exercise, we completed our basic plot. Now let's polish it by playing with the theme and adding annotations. In this exercise, you'll use `annotate()` to add text and a curve to the plot. \n\nThe following values have been calculated for you to assist with adding embellishments to the plot:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngm2007_full <- gapminder %>% \n  filter(year == 2007) %>% \n  select(country, lifeExp, continent)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglobal_mean <- mean(gm2007_full$lifeExp)\nx_start <- global_mean + 4\ny_start <- 5.5\nx_end <- global_mean\ny_end <- 7.5\n```\n:::\n\n\nOur previous plot has been assigned to `plt_country_vs_lifeExp`.\n\n**Steps**\n\n1. Clean up the theme:\n\n    * Add a classic theme to the plot with `theme_classic()`.\n    * Set `axis.line.y`, `axis.ticks.y`, and `axis.title` to `element_blank()`.\n    * Set the `axis.text` color to `\"black\"`.\n    * Remove the legend by setting `legend.position` to `\"none\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define the theme\nplt_country_vs_lifeExp +\n  theme_classic() +\n  theme(axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        axis.text = element_text(color = \"black\"),\n        axis.title = element_blank(),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-109-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n2. Use `geom_vline()` to add a vertical line. Set `xintercept` to `global_mean`, specify the color to be `\"grey40\"`, and set `linetype` to `3`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add a vertical line\nplt_country_vs_lifeExp <- plt_country_vs_lifeExp +\n  geom_vline(xintercept = global_mean, color = \"grey40\", linetype = 3)\nplt_country_vs_lifeExp\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-110-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n3. `x_start` and `y_start` will be used as positions to place text and have been calculated for you.\n\n    * Add a `\"text\"` geom as an annotation.\n    * For the annotation, set `x` to `x_start`, `y` to `y_start`, and `label` to `\"The\\\\nglobal\\\\naverage\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add text\nplt_country_vs_lifeExp <- plt_country_vs_lifeExp  +\n  annotate(\n    \"text\",\n    x = x_start, y = y_start,\n    label = \"The\\nglobal\\naverage\",\n    vjust = 1, size = 3, color = \"grey40\"\n  )\nplt_country_vs_lifeExp\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-111-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n4. Annotate the plot with an arrow connecting your text to the line.\n\n    * Use a `\"curve\"` geom.\n    * Set the arrow ends `xend` to `x_end` and `yend` to `y_end`.\n    * Set the `length` of the arrowhead to 0.2 cm and the `type` to `\"closed\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add a curve\nplt_country_vs_lifeExp <- plt_country_vs_lifeExp  +\n  annotate(\n    \"curve\",\n    x = x_start, y = y_start,\n    xend = x_end, yend = y_end,\n    arrow = arrow(length = unit(0.2, \"cm\"), type = \"closed\"),\n    color = \"grey40\"\n  )\nplt_country_vs_lifeExp\n```\n\n::: {.cell-output-display}\n![](ggplot2_intro_files/figure-html/unnamed-chunk-112-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nAwesome! Your explanatory plot clearly shows the countries with the highest and lowest life expectancy and would be great for a lay audience.\\n<br/>\\n<br/>\\nCongratulations on finishing the course! Continue learning more in Intermediate Data Visualization with ggplot2!\n\n",
    "supporting": [
      "ggplot2_intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}