{
  "hash": "8c2e2d8e3cd9fd0dccf639b9811e9cd8",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Importing Data in R\"\nauthor: \"Joschka Schwarz\"\n---\n\n\n\n\nImporting data into R should be the easiest step in your analysis. Unfortunately, that is almost never the case. Data can come in many formats, ranging from .csv and text files, to statistical software files, to databases and HTML data. Knowing which approach to use is key to getting started with the actual analysis.\\nIn this course, you’ll start by learning how to read .csv and text files in R. You will then cover the readr and data.table packages to easily and efficiently import flat file data. After that, you will learn how to read .xls files in R using readxl and gdata.\n\n# Importing data from flat files with utils\n\nA lot of data comes in the form of flat files: simple tabular text files. Learn how to import the common formats of flat file data with base R functions.\n\n### Introduction & read.csv\n\nTheory. Coming soon ...\n\n**1. Introduction & read.csv**\n\nHi, and welcome to the first importing data in R course.\n\n**2. Importing data in R**\n\nImagine this situation: A colleague of yours is still doing his analyses in Excel and finally decided to transition to R. He needs an easy way to convert the Excel spreadsheets into R data frames,\n\n**3. Importing data in R**\n\nbut he can't seem to find the tools to do so. Well, getting to know these tools is exactly what we'll do here.\n\n**4. 5 types**\n\nIn this two-part course, we will focus on 5 types of data:\n\n**5. 5 types**\n\ndata from flat files,\n\n**6. 5 types**\n\ndata from Excel,\n\n**7. 5 types**\n\ndata from databases,\n\n**8. 5 types**\n\ndata from the web,\n\n**9. 5 types**\n\nand finally data from other statistical software like SAS, SPSS, and Stata.\n\n**10. 5 types**\n\nYou'll learn to convert each data format, one after the other, into an R data frame, ready to do some fancy analyses.\n\n**11. Flat files**\n\nLet's start off with flat files. Flat files are typically simple text files that display data as tables. Have a look at this example, states-dot-csv, a flat file where CSV stands for comma-separated values. The data lists basic information on some US states. The first line here gives the names of the different columns or fields. After that, each line is a record, and the fields are separated by a comma, hence the extension CSV. For example, there's the state Hawaii with the capital Honolulu and a total population of 1-point-42 million. What would this data look like in R? Well, actually, the structure nicely corresponds to a data frame in R, that ideally looks like this: the rows in the data frame correspond to the records and the columns of the data frame correspond to the fields. The field names are used to name the columns of the data frame. But how to go from the CSV file to this data frame? We're in luck, because the standard distribution of R provides functionality to import these flat files into R as a data frame.\n\n**12. utils - read.csv**\n\nThese functions belong to the utils package that is loaded by default when you start R. More specifically, we'll need the read-dot-csv function, as follows: The first argument of read-dot-csv is the path to the file you want to import in R. If the file is in your current working directory, simply passing the filename as a character string works. If your file is located somewhere else, things get tricky. Depending on the platform you're working on, Linux, Microsoft, Mac, whatever, file paths are specified differently. To build a path to a file in a platform-independent way, you can use the file-dot-path function. Suppose our states-dot-csv file is located in the datasets folder of the home directory. You can use file-dot-path like this: Because I'm working on a Mac, this is the resulting path. I can now use this path inside read-dot-csv to point to the correct file, like this. The second argument, stringsAsFactors, is pretty important. Say we have columns that are strings. We can choose to import these columns as actual strings, or as factors, which R uses to store categorical variables. By default, the stringsAsFactors argument is TRUE, so it would convert strings into factors. In our case, however, the state and capital names shouldn't be categorical variables, so we set stringsAsFactors to FALSE.\n\n**13. read.csv()**\n\nIf we run this call now, we can see we get a data frame with 5 observations and 4 variables. This corresponds nicely to the CSV file we started with. If we print out the structure of this data frame, with str, we see that indeed, the two first columns are strings, and not factors, exactly like we wanted it! \n\n## read.csv\n\nThe `utils` package, which is automatically loaded in your R session on startup, can import CSV files with the <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.csv()`</a> function.\n\nIn this exercise, you'll be working with <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/swimming_pools.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`swimming_pools.csv`</a>; it contains data on swimming pools in Brisbane, Australia (Source: <a href=\"https://data.gov.au/dataset/swimming-pools-brisbane-city-council\" target=\"_blank\" rel=\"noopener noreferrer\">data.gov.au</a>). The file contains the column names in the first row. It uses a comma to separate values within rows. \n\nType <a href=\"http://www.rdocumentation.org/packages/base/functions/list.files\" target=\"_blank\" rel=\"noopener noreferrer\">`dir()`</a> in the console to list the files in your working directory. You'll see that it contains `swimming_pools.csv`, so you can start straight away.\n\n**Steps**\n\n1. Use <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.csv()`</a> to import `\"swimming_pools.csv\"` as a data frame with the name `pools`.\n2. Print the structure of `pools` using <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\" target=\"_blank\" rel=\"noopener noreferrer\">`str()`</a>.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import swimming_pools.csv: pools\npools <- read.csv(\"data/swimming_pools.csv\")\n\n# Print the structure of pools\nstr(pools)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t20 obs. of  4 variables:\n#>  $ Name     : chr  \"Acacia Ridge Leisure Centre\" \"Bellbowrie Pool\" \"Carole Park\" \"Centenary Pool (inner City)\" ...\n#>  $ Address  : chr  \"1391 Beaudesert Road, Acacia Ridge\" \"Sugarwood Street, Bellbowrie\" \"Cnr Boundary Road and Waterford Road Wacol\" \"400 Gregory Terrace, Spring Hill\" ...\n#>  $ Latitude : num  -27.6 -27.6 -27.6 -27.5 -27.4 ...\n#>  $ Longitude: num  153 153 153 153 153 ...\n```\n:::\n:::\n\n\n### stringsAsFactors\n\nWith `stringsAsFactors`, you can tell R whether it should convert strings in the flat file to factors. \n\nFor all importing functions in the `utils` package, this argument is `TRUE`, which means that you import strings as factors. This only makes sense if the strings you import represent categorical variables in R. If you set `stringsAsFactors` to `FALSE`, the data frame columns corresponding to strings in your text file will be `character`.\n\nYou'll again be working with the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/swimming_pools.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`swimming_pools.csv`</a> file. It contains two columns (`Name` and `Address`), which shouldn't be factors.\n\n\n**Steps**\n\n1. Use `read.csv()` to import the data in <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/swimming_pools.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`\"swimming_pools.csv\"`</a> as a data frame called `pools`; make sure that strings are imported as characters, not as factors.\n2. Using <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\" target=\"_blank\" rel=\"noopener noreferrer\">`str()`</a>, display the structure of the dataset and check that you indeed get character vectors instead of factors.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import swimming_pools.csv correctly: pools\npools <- read.csv(\"data/swimming_pools.csv\", stringsAsFactors = F)\n\n# Check the structure of pools\nstr(pools)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t20 obs. of  4 variables:\n#>  $ Name     : chr  \"Acacia Ridge Leisure Centre\" \"Bellbowrie Pool\" \"Carole Park\" \"Centenary Pool (inner City)\" ...\n#>  $ Address  : chr  \"1391 Beaudesert Road, Acacia Ridge\" \"Sugarwood Street, Bellbowrie\" \"Cnr Boundary Road and Waterford Road Wacol\" \"400 Gregory Terrace, Spring Hill\" ...\n#>  $ Latitude : num  -27.6 -27.6 -27.6 -27.5 -27.4 ...\n#>  $ Longitude: num  153 153 153 153 153 ...\n```\n:::\n:::\n\n\n### Any changes?\n\nConsider the code below that loads data from `swimming_pools.csv` in two distinct ways:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Option A\npools <- read.csv(\"data/swimming_pools.csv\", stringsAsFactors = TRUE)\n\n# Option B\npools <- read.csv(\"data/swimming_pools.csv\", stringsAsFactors = FALSE)\n```\n:::\n\n\n> *Question*\n> ---\n> How many variables in the resulting `pools` data frame have different types if you specify the `stringsAsFactors` argument differently?<br>\n> <br>\n> ⬜ Just one: `Name`.<br>\n> ✅ Two variables: `Name` and `Address`.<br>\n> ⬜ Three columns: all but `Longitude`.<br>\n> ⬜ All four of them!<br>\n\n## read.delim & read.table\n\nTheory. Coming soon ...\n\n**1. read.delim &amp; read.table**\n\nIn the previous video you learned about read-dot-csv, which is an R function that specifically exists for importing CSV data. However, flat file data doesn't come as comma separated values alone.\n\n**2. Tab-delimited file**\n\nAnother common format of flat file data is the tab-delimited file, like this states-dot-txt, with the same data as before:To import it, we'll need read-dot-delim this time. As usual, you simply specify the path to the file, and also that we want to import strings as strings, and not as factors. Works like a charm!If your data comes in this typical comma separated or tab-delimited format, your life is easy and importing the data is a walk in the park. If it's not, you'll have to some more customization work.\n\n**3. Exotic file format**\n\nSay we have the same states data again, but this time, the values are separated by a forward slash instead of commas or tabs, in a file states2.txt. How to go about this? read-dot-csv and read-dot-delim won't do you much good in this case.\n\n**4. read.table()**\n\nHere, you'll want to use read-dot-table. It's the main importing function in the utils package, allowing you to read in any file in table format and create a data frame from it.The number of arguments you can specify for this function is huge, so I won't go through each and every one of these arguments. Instead, let's have a look at the read-dot-table call that imports states2.txt and try to understand what happens.As usual, the first argument is the path to the file you want to import.The header argument is something we haven't seen before. If you set this to TRUE, you tell R that the first row of the text file contains the variable names, which is the case here. read-dot-table sets this argument to FALSE by default, which would mean that the first row is always read as an observation, even if it's a row of variable names.Next, sep is the argument that specifies how fields in a record are separated. For our file here, the field separator is a forward slash, like this.Finally, there's again the stringsAsFactors argument, which we set to FALSE again because we want to import strings as strings. The result looks just as we'd want, nice!Apart from the arguments we discussed here, there are also ways to specify column names and column types.\n\n\n### read.delim\n\nAside from `.csv` files, there are also the `.txt` files which are basically text files. You can import these functions with <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.delim()`</a>. By default, it sets the `sep` argument to `\"\\t\"` (fields in a record are delimited by tabs) and the `header` argument to `TRUE` (the first row contains the field names). \n\nIn this exercise, you will import <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/hotdogs.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`hotdogs.txt`</a>, containing information on sodium and calorie levels in different hotdogs (Source: <a href=\"http://wiki.stat.ucla.edu/socr/index.php/SOCR_012708_ID_Data_HotDogs\" target=\"_blank\" rel=\"noopener noreferrer\">UCLA</a>). The dataset has 3 variables, but the variable names are *not* available in the first line of the file. The file uses tabs as field separators.\n\n**Steps**\n\n1. Import the data in `\"hotdogs.txt\"` with <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.delim()`</a>. Call the resulting data frame `hotdogs`. The variable names are **not** on the first line, so make sure to set the `header` argument appropriately.\n2. Call <a href=\"http://www.rdocumentation.org/packages/base/functions/summary\" target=\"_blank\" rel=\"noopener noreferrer\">`summary()`</a> on `hotdogs`. This will print out some summary statistics about all variables in the data frame.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import hotdogs.txt: hotdogs\nhotdogs <- read.delim(\"data/hotdogs.txt\", header = F)\n\n# Summarize hotdogs\nsummary(hotdogs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>       V1                  V2              V3       \n#>  Length:54          Min.   : 86.0   Min.   :144.0  \n#>  Class :character   1st Qu.:132.0   1st Qu.:362.5  \n#>  Mode  :character   Median :145.0   Median :405.0  \n#>                     Mean   :145.4   Mean   :424.8  \n#>                     3rd Qu.:172.8   3rd Qu.:503.5  \n#>                     Max.   :195.0   Max.   :645.0\n```\n:::\n:::\n\n\n### read.table\n\nIf you're dealing with more exotic flat file formats, you'll want to use <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.table()`</a>. It's the most basic importing function; you can specify tons of different arguments in this function. Unlike <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.csv()`</a> and <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.delim()`</a>, the `header` argument defaults to `FALSE` and the `sep` argument is `\"\"` by default.\n\nUp to you again! The data is still <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/hotdogs.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`hotdogs.txt`</a>. It has no column names in the first row, and the field separators are tabs. This time, though, the file is in the `data` folder inside your current working directory. A variable `path` with the location of this file is already coded for you.\n\n**Steps**\n\n1. Finish the `read.table()` call that's been prepared for you. Use the `path` variable, and make sure to set `sep` correctly.\n2. Call `head()` on `hotdogs`; this will print the first 6 observations in the data frame.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Path to the hotdogs.txt file: path\npath <- file.path(\"data\", \"hotdogs.txt\")\n\n# Import the hotdogs.txt file: hotdogs\nhotdogs <- read.table(path, \n                      sep = \"\\t\", \n                      col.names = c(\"type\", \"calories\", \"sodium\"))\n\n# Call head() on hotdogs\nhead(hotdogs)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"calories\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sodium\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Beef\",\"2\":\"186\",\"3\":\"495\",\"_rn_\":\"1\"},{\"1\":\"Beef\",\"2\":\"181\",\"3\":\"477\",\"_rn_\":\"2\"},{\"1\":\"Beef\",\"2\":\"176\",\"3\":\"425\",\"_rn_\":\"3\"},{\"1\":\"Beef\",\"2\":\"149\",\"3\":\"322\",\"_rn_\":\"4\"},{\"1\":\"Beef\",\"2\":\"184\",\"3\":\"482\",\"_rn_\":\"5\"},{\"1\":\"Beef\",\"2\":\"190\",\"3\":\"587\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nGreat! No need to specify the `header` argument: it is `FALSE` by default for `read.table()`, which is exactly what you want here.\n\n### Arguments\n\nLily and Tom are having an argument because they want to share a hot dog but they can't seem to agree on which one to choose. After some time, they simply decide that they will have one each. Lily wants to have the one with the fewest calories while Tom wants to have the one with the most sodium.\n\nNext to `calories` and `sodium`, the hotdogs have one more variable: `type`. This can be one of three things: `Beef`, `Meat`, or `Poultry`, so a categorical variable: a factor is fine.\n\n\n**Steps**\n\n1. Finish the `read.delim()` call to import the data in <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/hotdogs.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`\"hotdogs.txt\"`</a>. It's a tab-delimited file without names in the first row.\n2. The code that selects the observation with the lowest calorie count and stores it in the variable `lily` is already available. It uses the function <a href=\"http://www.rdocumentation.org/packages/base/functions/which.min\" target=\"_blank\" rel=\"noopener noreferrer\">`which.min()`</a>, that returns the index the smallest value in a vector.\n3. Do a similar thing for Tom: select the observation with the *most sodium* and store it in `tom`. Use <a href=\"http://www.rdocumentation.org/packages/base/functions/which.min\" target=\"_blank\" rel=\"noopener noreferrer\">`which.max()`</a> this time.\n4. Finally, print both the observations `lily` and `tom`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Finish the read.delim() call\nhotdogs <- read.delim(\"data/hotdogs.txt\", header = F, col.names = c(\"type\", \"calories\", \"sodium\"))\n\n# Select the hot dog with the least calories: lily\nlily <- hotdogs[which.min(hotdogs$calories), ]\n\n# Select the observation with the most sodium: tom\ntom <- hotdogs[which.max(hotdogs$sodium),]\n\n# Print lily and tom\nlily\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"calories\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sodium\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Poultry\",\"2\":\"86\",\"3\":\"358\",\"_rn_\":\"50\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ntom\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"calories\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"sodium\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Beef\",\"2\":\"190\",\"3\":\"645\",\"_rn_\":\"15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Column classes\n\nNext to column names, you can also specify the column types or column classes of the resulting data frame. You can do this by setting the `colClasses` argument to a vector of strings representing classes:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread.delim(\"data/my_file.txt\", \n           colClasses = c(\"character\",\n                          \"numeric\",\n                          \"logical\"))\n```\n:::\n\n\nThis approach can be useful if you have some columns that should be factors and others that should be characters. You don't have to bother with `stringsAsFactors` anymore; just state for each column what the class should be.\n\nIf a column is set to `\"NULL\"` in the `colClasses` vector, this column will be skipped and will not be loaded into the data frame.\n\n**Steps**\n\n1. The `read.delim()` call from before is already included and creates the `hotdogs` data frame. Go ahead and display the structure of `hotdogs`.\n2. **Edit** the second <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.delim()`</a> call. Assign the correct vector to the `colClasses` argument. `NA` should be replaced with a character vector: `c(\"factor\", \"NULL\", \"numeric\")`.\n3. Display the structure of `hotdogs2` and look for the difference.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Previous call to import hotdogs.txt\nhotdogs <- read.delim(\"data/hotdogs.txt\", header = FALSE, \n                      col.names = c(\"type\", \"calories\", \"sodium\"))\n\n# Display structure of hotdogs\nstr(hotdogs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t54 obs. of  3 variables:\n#>  $ type    : chr  \"Beef\" \"Beef\" \"Beef\" \"Beef\" ...\n#>  $ calories: int  186 181 176 149 184 190 158 139 175 148 ...\n#>  $ sodium  : int  495 477 425 322 482 587 370 322 479 375 ...\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Edit the colClasses argument to import the data correctly: hotdogs2\nhotdogs2 <- read.delim(\"data/hotdogs.txt\", header = FALSE, \n                       col.names = c(\"type\", \"calories\", \"sodium\"),\n                       colClasses = c(\"factor\", \"NULL\", \"numeric\"))\n\n\n# Display structure of hotdogs2\nstr(hotdogs2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t54 obs. of  2 variables:\n#>  $ type  : Factor w/ 3 levels \"Beef\",\"Meat\",..: 1 1 1 1 1 1 1 1 1 1 ...\n#>  $ sodium: num  495 477 425 322 482 587 370 322 479 375 ...\n```\n:::\n:::\n\n\n### Final Thoughts\n\nTheory. Coming soon ...\n\n\n**1. Final Thoughts**\n\nThere's something I haven't told you yet. When I said that read-dot-table was utils' main importing functions, I was serious.\n\n**2. Wrappers**\n\nActually, read-dot-csv and read-dot-delim, the functions to import comma-separated values and tab-delimited files, are so-called wrapper functions around read-dot-table. They call read-dot-table behind the scenes, but with different default arguments to match the specific formats.\n\n**3. read.csv**\n\nFor read-dot-csv, the default for header is TRUE and for sep is a comma, so you don't have to manually specify these anymore. This means that this read-dot-table call to import the CSV version of states, is exactly the same as this read-dot-csv call. Shorter and easier to read, if you ask me.\n\n**4. read.delim**\n\nLikewise, read-dot-delim sets the header and sep argument, among some others. This call to import the tab-delimited version of states, is exactly the same as this read-dot-delim call.\n\n**5. Documentation**\n\nIf you have a look at the documentation of read-dot-table, you'll see that there are two more functions in there that we haven't discussed yet. read-dot-csv2 and read-dot-delim2. These functions exist to deal with regional differences in representing numbers.\n\n**6. Locale differences**\n\nHave a look at this csv file, states_aye-dot-csv, typical for the US and Great Britain, and its counterpart, states_nay-dot-csv.You'll notice that the states_nay use commas for decimal points, as opposed to the dot for states_aye-dot-csv. This means that they can't use the comma as the field-delimiter anymore, they need a semicolon.\n\n**7. Locale differences**\n\nThat's why the read-dot-csv2 and read-dot-delim2 functions exist. Can you spot the difference in default arguments again?\n\n**8. states_nay.csv**\n\nLet's try to import the states_nay-dot-csv file with the basic read-dot-csv function.R gives a result, but it clearly is not the result we want. It's a dataset with 5 observations but a single variable.If we try again with read-dot-csv2, it works perfectly this time!These were just some side notes to wrap up on this chapter. By now, you now how to import comma-separated, tab-delimited and even more exotic data formats. But there's much more to learn!\n\n# readr & data.table\n\nIn addition to base R, there are dedicated packages to easily and efficiently import flat file data. We'll talk about two such packages: readr and data.table.\n\n## readr: read_*\n\nTheory. Coming soon ...\n\n**1. readr: read_csv &amp; read_tsv**\n\nBy now, you already now how to import flat files using\n\n**2. Overview**\n\nthe utils package. The utils package is loaded by default when you start R. Of course, R wouldn't be R if there aren't specialized packages to import your data. In this chapter, I'm going to talk about two such packages: readr and data-dot-table.\n\n**3. readr**\n\nFirst, let's dive into the \"readr\" package, written by Hadley Wickham! It's a fast and very easy to use package with very consistent naming, while utils is more verbose and multiple times slower.We'll start with installing and loading the readr package, like this.\n\n**4. CSV files**\n\nBefore, you used read dot csv to import CSV files as a data frame, like this call, to import the states dot csv file. To do this the readr way, you'll want to use read underscore csv. This will do the trick:The result is pretty much the same. The only difference is that read_delim outputs a tibble, which is a supercharged version of a dataframe that Hadley Wickham introduced; you can work with it as a normal data frame, but can do additional stuff with it. The printout conveniently shows the column classes. In general, all of Hadley's packages work with tibbles; whether or not they show this convienent printout depends on which packages you have loaded in.In both calls, the first argument is the path to the file you want to import. Notice that in readr, strings are not imported as factors by default, so an equivalent of the stringsAsFactors argument is not required.Remember that utils also featured the read-dot-delim function to import tab-delimited files.\n\n**5. TSV files**\n\nThis call imported states-dot-txt. readr also provides a similar function, but it's called read underscore tsv, short for tab separated value. This is the call you need. Again, no need to specify stringsAsFactors explicitly, which is practical.\n\n**6. Wrapping in utils and readr**\n\nJust like in utils, both the read_csv and read_tsv functions are wrappers around a 'mother import function',\n\n**7. Wrapping in utils and readr**\n\ncalled read_delim. This table summarizes how the wrapping works for utils and readr, make sure not to mix things up.\n\n**8. Let's practice!**\n\nI suggest you already head over to the exercises for some practice before we dive into some more customization possibilities for read_delim. I'll see you again in the next video!\n\n### read_csv\n\nCSV files can be imported with <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_csv()`</a>. It's a wrapper function around <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_delim()`</a> that handles all the details for you. For example, it will assume that the first row contains the column names.\n\nThe dataset you'll be working with here is <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.csv`</a>. It gives information on the impact of storage period and cooking on potatoes' flavor. It uses commas to delimit fields in a record, and contains column names in the first row. The file is available in your workspace. Remember that you can inspect your workspace with `dir()`.\n\n**Steps**\n\n1. Load the `readr` package with <a href=\"http://www.rdocumentation.org/packages/base/functions/library\" target=\"_blank\" rel=\"noopener noreferrer\">`library()`</a>. You **do not** need to install the package, it is already installed on DataCamp's servers. \n2. Import `\"potatoes.csv\"` using `read_csv()`. Assign the resulting data frame to the variable `potatoes`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the readr package\nlibrary(readr)\n\n# Import potatoes.csv with read_csv(): potatoes\npotatoes <- read_csv(\"data/potatoes.csv\")\n```\n:::\n\n\n### read_tsv\n\nWhere you use `read_csv()` to easily read in CSV files, you use <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_tsv()`</a> to easily read in TSV files. TSV is short for tab-separated values.\n\nThis time, the potatoes data comes in the form of a tab-separated values file; <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.txt`</a> is available in your workspace. In contrast to `potatoes.csv`, this file does **not** contain columns names in the first row, though.\n\nThere's a vector `properties` that you can use to specify these column names manually.\n\n**Steps**\n\n1. Use `read_tsv()` to import the potatoes data from `potatoes.txt` and store it in the data frame `potatoes`. In addition to the path to the file, you'll also have to specify the `col_names` argument; you can use the `properties` vector for this.\n2. Call `head()` on `potatoes` to show the first observations of your dataset.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import potatoes.txt: potatoes\npotatoes <- read_tsv(\"data/potatoes.txt\" , col_names = properties)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 160 Columns: 8\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> dbl (8): area, temp, size, storage, method, texture, flavor, moistness\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Call head() on potatoes\nhead(potatoes)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"area\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"temp\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"size\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"storage\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"method\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"texture\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flavor\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"moistness\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.9\",\"7\":\"3.2\",\"8\":\"3.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"2.5\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"2.8\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.1\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.9\",\"7\":\"2.8\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"3.0\",\"8\":\"1.7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### read_delim (1)\n\nTheory. Coming soon ...\n\n\n**1. readr: read_delim**\n\nRemember the states2.txt file from before,\n\n**2. states2.txt**\n\nthat uses forward slashes as separators? Before, we've already written\n\n**3. states2.txt**\n\nthis customized read-dot-table call for it. Let's now use readr's more low-level read_delim function to do the same thing:As usual, the first argument is the path the file. Next, the delim argument specifies the character that is used to separate fields within a record; it's the equivalent of the sep argument in read-dot-table.The output corresponds to the output fo the read-dot-table call, but the readr version outputs a tibble again.Let's compare the utils and the readr calls here. First off, we didn't have to specify something like header is TRUE, because by default, read_delim expects the first row to contain the column names. It does this with the col_names argument. Also, strings are not imported as factors by default, so a stringsAsFactors equivalent is not necessary. To control the types of the columns, readr uses the col_types argument, similar to the colClasses argument from utils. Let me dive into col_names first, and then talk some more about col_types.\n\n**4. col_names**\n\ncol_names is TRUE by default. Suppose you have another version of the states file, without column names this time, states3.txt. The first line is already a record now.\n\n**5. col_names**\n\nSetting col_names to FALSE, leads to automatic generation of column names, like in this example. You can also manually set col_names to a character vector. The names you pass will be used as the names of the columns, and the first line is read as a record, like here:\n\n**6. col_types**\n\nNext, there's also col_types, to control the column classes. If we just import states2.txt, the file with header names, like before, without specifying col_types, the column types will be guessed from the first 30 rows on the input. The printout of the tibble shows us the class of each column, which is very practical. The first two columns are character, the third is double, and the fourth is integer.You can also specify the column classes manually. In this call, we enforce the state and city to be a character and the population and area to be both numeric. I used short string representations here: c stands for character, d for double or numeric, i for integer, and l for logical. The result is what we'd expect: the fourth column is a double now.Instead of c, d, i and l, you can also use an underscore, to skip a column. A totally different way to control the types of the columns is through collector functions. Although more complicated, they are more versatile. You'll learn more about this in the exercises.\n\n**7. skip and n_max**\n\nIf you're working on huge flat files, say one million lines, you might be interested in handling the data in chunks of 50-point-000 lines for example. This keeps your work tractable and you can easily follow up on the progress of your algorithms. In readr, You can do this with a combination of the skip and n_max arguments. Have a look at the output of this call:We skipped 2 rows, and then read in three records. There's a problem though! Because col_names is TRUE by default, the first row that's read is used for the column names, but this information has been skipped! We'll have to manually specify some column names this time, by setting col_names to a character vector. This time, the two first rows, so the column names and the first observation are skipped, and the next three observations are read in. Perfect.\n\n**8. Let's practice!**\n\nLet's see your importing skills progress in the exercises. In the last video of this chapter, we'll talk about the amazing fread function from the data-dot-table package!\n\n### read_delim (2)\n\nJust as <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.table()`</a> was the main `utils` function, <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_delim()`</a> is the main `readr` function.\n\n<a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_delim()`</a> takes two mandatory arguments:\n\n* `file`: the file that contains the data\n* `delim`: the character that separates the values in the data file\n\nYou'll again be working <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.txt`</a>; the file uses tabs (`\"\\t\"`) to delimit values and does **not** contain column names in its first line. It's available in your working directory so you can start right away. As before, the vector `properties` is available to set the `col_names`.\n\n**Steps**\n\n1. Import all the data in <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`\"potatoes.txt\"`</a> using <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_delim()`</a>; store the resulting data frame in `potatoes`.\n2. Print out `potatoes`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import potatoes.txt using read_delim(): potatoes\npotatoes <- read_delim(\"data/potatoes.txt\", delim = \"\\t\", col_names = properties)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 160 Columns: 8\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> dbl (8): area, temp, size, storage, method, texture, flavor, moistness\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Print out potatoes\npotatoes\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"area\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"temp\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"size\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"storage\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"method\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"texture\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flavor\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"moistness\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.9\",\"7\":\"3.2\",\"8\":\"3.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"2.5\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"2.8\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.1\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.9\",\"7\":\"2.8\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"3.0\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"3.0\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.2\",\"7\":\"3.2\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.8\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"2.6\",\"8\":\"1.5\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.0\",\"7\":\"2.8\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.6\",\"7\":\"2.6\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.1\",\"7\":\"3.2\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"3.0\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"3.1\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.1\",\"7\":\"3.4\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"3.0\",\"7\":\"2.6\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"3.1\",\"7\":\"3.0\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"2.8\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.4\",\"7\":\"3.0\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.2\",\"7\":\"2.9\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.9\",\"7\":\"2.9\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"2.6\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.2\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"2.8\",\"7\":\"3.2\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.3\",\"7\":\"3.2\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"3.0\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"1.9\",\"7\":\"3.0\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"1.8\",\"7\":\"2.7\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3.3\",\"7\":\"3.2\",\"8\":\"3.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"3.4\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"1.5\",\"7\":\"2.6\",\"8\":\"1.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"1.4\",\"7\":\"2.6\",\"8\":\"1.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.1\",\"7\":\"2.5\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"1.8\",\"7\":\"3.1\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"1.7\",\"7\":\"2.7\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.8\",\"7\":\"2.6\",\"8\":\"3.0\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.5\",\"7\":\"2.4\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"3.2\",\"7\":\"2.7\",\"8\":\"3.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.4\",\"7\":\"2.4\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.5\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.3\",\"7\":\"2.9\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.8\",\"7\":\"2.7\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"3.7\",\"7\":\"3.3\",\"8\":\"3.1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"2.7\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"2.6\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.4\",\"7\":\"2.7\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"2.5\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.7\",\"7\":\"2.9\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"3.0\",\"7\":\"3.2\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"3.1\",\"7\":\"3.1\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"3.6\",\"7\":\"3.0\",\"8\":\"3.3\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.4\",\"7\":\"3.4\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"3.0\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.2\",\"7\":\"2.6\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"2.3\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.7\",\"7\":\"2.6\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.0\",\"7\":\"2.5\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.4\",\"7\":\"2.4\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.5\",\"7\":\"2.6\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"3.2\",\"7\":\"2.9\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"3.1\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.4\",\"7\":\"3.0\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.8\",\"7\":\"2.8\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3.3\",\"7\":\"3.1\",\"8\":\"3.1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"3.1\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"1.4\",\"7\":\"2.9\",\"8\":\"1.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"2.1\",\"7\":\"2.5\",\"8\":\"1.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.3\",\"7\":\"2.6\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"1.8\",\"7\":\"2.9\",\"8\":\"1.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"1.5\",\"7\":\"2.4\",\"8\":\"1.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.5\",\"7\":\"2.7\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.8\",\"7\":\"2.9\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"3.0\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"3.0\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.7\",\"7\":\"2.8\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.5\",\"7\":\"2.9\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"1.6\",\"7\":\"3.1\",\"8\":\"1.8\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.5\",\"7\":\"3.2\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"2.9\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.2\",\"7\":\"2.8\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.4\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"3.1\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"3.1\",\"7\":\"3.1\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"3.3\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.4\",\"7\":\"3.4\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"3.1\",\"7\":\"3.1\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.3\",\"7\":\"3.2\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.2\",\"7\":\"3.5\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"2.7\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.6\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"3.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"2.9\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.4\",\"7\":\"3.0\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.0\",\"7\":\"3.0\",\"8\":\"1.9\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"3.1\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"1.7\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.2\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"1.7\",\"7\":\"3.2\",\"8\":\"1.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.2\",\"7\":\"3.2\",\"8\":\"2.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"1.7\",\"7\":\"3.1\",\"8\":\"2.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"3.2\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.0\",\"7\":\"3.5\",\"8\":\"2.2\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"1.8\",\"7\":\"3.0\",\"8\":\"2.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"1.6\",\"7\":\"3.4\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"2.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.8\",\"7\":\"2.6\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.9\",\"7\":\"2.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"2.7\",\"8\":\"2.9\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"3.0\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.8\",\"7\":\"2.2\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"3.4\",\"7\":\"3.2\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"3.5\",\"7\":\"2.9\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"3.3\",\"7\":\"3.0\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.8\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.8\",\"7\":\"2.8\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"3.5\",\"7\":\"2.8\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"3.2\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"3.3\",\"7\":\"3.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"3.5\",\"7\":\"2.9\",\"8\":\"2.9\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"3.2\",\"7\":\"3.4\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"3.3\",\"7\":\"2.8\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"3.0\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.5\",\"7\":\"3.2\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"3.4\",\"7\":\"3.0\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.7\",\"7\":\"2.5\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.5\",\"7\":\"2.7\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"3.2\",\"7\":\"2.7\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.4\",\"7\":\"2.7\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"2.1\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.2\",\"7\":\"2.7\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"3.1\",\"7\":\"2.9\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"2.8\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.9\",\"7\":\"3.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.8\",\"7\":\"2.7\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.5\",\"7\":\"3.2\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.9\",\"7\":\"3.3\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"3.0\",\"7\":\"2.9\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"3.1\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.7\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.4\",\"7\":\"3.3\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"2.8\",\"8\":\"2.3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nGood job! Notice that you could just as well have used [`read_tsv()`](http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim) here.\n\n### skip and n_max\n\nThrough `skip` and `n_max` you can control *which part* of your flat file you're actually importing into R.\n\n* `skip` specifies the number of lines you're ignoring in the flat file before actually starting to import data.\n* `n_max` specifies the number of lines you're actually importing.\n\nSay for example you have a CSV file with 20 lines, and set `skip = 2` and `n_max = 3`, you're only reading in lines 3, 4 and 5 of the file.\n\nWatch out: Once you `skip` some lines, you also skip the first line that can contain column names!\n\n<a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.txt`</a>, a flat file with tab-delimited records and without column names, is available in your workspace.\n\n**Steps**\n\n1. Finish the first <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_tsv()`</a> call to import observations 7, 8, 9, 10 and 11 from `potatoes.txt`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import 5 observations from potatoes.txt: potatoes_fragment\npotatoes_fragment <- read_tsv(\"data/potatoes.txt\", skip = 6, n_max = 5, col_names = properties)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 5 Columns: 8\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> dbl (8): area, temp, size, storage, method, texture, flavor, moistness\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n### col_types\n\nYou can also specify which types the columns in your imported data frame should have. You can do this with `col_types`. If set to `NULL`, the default, functions from the `readr` package will try to find the correct types themselves. You can manually set the types with a string, where each character denotes the class of the column: `c`haracter, `d`ouble, `i`nteger and `l`ogical. `_` skips the column as a whole.\n\n<a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.txt`</a>, a flat file with tab-delimited records and without column names, is again available in your workspace.\n\n\n**Steps**\n\n1. In the second <a href=\"http://www.rdocumentation.org/packages/readr/versions/1.0.0/topics/read_delim\" target=\"_blank\" rel=\"noopener noreferrer\">`read_tsv()`</a> call, edit the `col_types` argument to import *all* columns as characters (`c`). Store the resulting data frame in `potatoes_char`.\n2. Print out the structure of `potatoes_char` and verify whether all column types are `chr`, short for `character`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Column names\nproperties <- c(\"area\", \"temp\", \"size\", \"storage\", \"method\",\n                \"texture\", \"flavor\", \"moistness\")\n\n# Import all data, but force all columns to be character: potatoes_char\npotatoes_char <- read_tsv(\"data/potatoes.txt\", col_types = \"cccccccc\", col_names = properties)\n\n# Print out structure of potatoes_char\nstr(potatoes_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> spc_tbl_ [160 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n#>  $ area     : chr [1:160] \"1\" \"1\" \"1\" \"1\" ...\n#>  $ temp     : chr [1:160] \"1\" \"1\" \"1\" \"1\" ...\n#>  $ size     : chr [1:160] \"1\" \"1\" \"1\" \"1\" ...\n#>  $ storage  : chr [1:160] \"1\" \"1\" \"1\" \"1\" ...\n#>  $ method   : chr [1:160] \"1\" \"2\" \"3\" \"4\" ...\n#>  $ texture  : chr [1:160] \"2.9\" \"2.3\" \"2.5\" \"2.1\" ...\n#>  $ flavor   : chr [1:160] \"3.2\" \"2.5\" \"2.8\" \"2.9\" ...\n#>  $ moistness: chr [1:160] \"3.0\" \"2.6\" \"2.8\" \"2.4\" ...\n#>  - attr(*, \"spec\")=\n#>   .. cols(\n#>   ..   area = col_character(),\n#>   ..   temp = col_character(),\n#>   ..   size = col_character(),\n#>   ..   storage = col_character(),\n#>   ..   method = col_character(),\n#>   ..   texture = col_character(),\n#>   ..   flavor = col_character(),\n#>   ..   moistness = col_character()\n#>   .. )\n#>  - attr(*, \"problems\")=<externalptr>\n```\n:::\n:::\n\n\n### col_types with collectors\n\nAnother way of setting the types of the imported columns is using **collectors**. Collector functions can be passed in a <a href=\"http://www.rdocumentation.org/packages/base/functions/list\" target=\"_blank\" rel=\"noopener noreferrer\">`list()`</a> to the `col_types` argument of `read_` functions to tell them how to interpret values in a column.\n\nFor a complete list of collector functions, you can take a look at the <a href=\"https://www.rdocumentation.org/packages/readr/topics/collector\" target=\"_blank\" rel=\"noopener noreferrer\">`collector`</a> documentation. For this exercise you will need two collector functions:\n\n\n* `col_integer()`: the column should be interpreted as an integer.\n* `col_factor(levels, ordered = FALSE)`: the column should be interpreted as a factor with `levels`.\n\nIn this exercise, you will work with <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/hotdogs.txt\" target=\"_blank\" rel=\"noopener noreferrer\">`hotdogs.txt`</a>, which is a tab-delimited file without column names in the first row.\n\n\n**Steps**\n\n1. `hotdogs` is created for you without setting the column types. Inspect its summary using the <a href=\"http://www.rdocumentation.org/packages/base/functions/summary\" target=\"_blank\" rel=\"noopener noreferrer\">`summary()`</a> function.\n2. Two collector functions are defined for you: `fac` and `int`. Have a look at them, do you understand what they're collecting?\n3. In the second `read_tsv()` call, edit the `col_types` argument: Pass a `list()` with the elements `fac`, `int` and `int`, so the first column is imported as a factor, and the second and third column as integers.\n4. Create a <a href=\"http://www.rdocumentation.org/packages/base/functions/summary\" target=\"_blank\" rel=\"noopener noreferrer\">`summary()`</a> of `hotdogs_factor`. Compare this to the summary of `hotdogs`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import without col_types\nhotdogs <- read_tsv(\"data/hotdogs.txt\", col_names = c(\"type\", \"calories\", \"sodium\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 54 Columns: 3\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \"\\t\"\n#> chr (1): type\n#> dbl (2): calories, sodium\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Display the summary of hotdogs\nsummary(hotdogs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>      type              calories         sodium     \n#>  Length:54          Min.   : 86.0   Min.   :144.0  \n#>  Class :character   1st Qu.:132.0   1st Qu.:362.5  \n#>  Mode  :character   Median :145.0   Median :405.0  \n#>                     Mean   :145.4   Mean   :424.8  \n#>                     3rd Qu.:172.8   3rd Qu.:503.5  \n#>                     Max.   :195.0   Max.   :645.0\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# The collectors you will need to import the data\nfac <- col_factor(levels = c(\"Beef\", \"Meat\", \"Poultry\"))\nint <- col_integer()\n\n# Edit the col_types argument to import the data correctly: hotdogs_factor\nhotdogs_factor <- read_tsv(\"data/hotdogs.txt\",\n                           col_names = c(\"type\", \"calories\", \"sodium\"),\n                           col_types = list(fac, int, int))\n\n# Display the summary of hotdogs_factor\nsummary(hotdogs_factor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>       type       calories         sodium     \n#>  Beef   :20   Min.   : 86.0   Min.   :144.0  \n#>  Meat   :17   1st Qu.:132.0   1st Qu.:362.5  \n#>  Poultry:17   Median :145.0   Median :405.0  \n#>               Mean   :145.4   Mean   :424.8  \n#>               3rd Qu.:172.8   3rd Qu.:503.5  \n#>               Max.   :195.0   Max.   :645.0\n```\n:::\n:::\n\n\nAwesome! The summary of `hotdogs_factor` clearly contains more interesting information for the `type` column, right?\n\n### data.table: fread\n\nTheory. Coming soon ...\n\n\n**1. data.table: fread**\n\nThe other package I wanted to discuss is data-dot-table.\n\n**2. data.table**\n\nThe key performance metric for the authors of data table, Matt Dowle and Arun Srinivasan, is speed. The package is mainly about data manipulation in R, but also features a super powerful function to read your data into R: fread. If you have huge files you have to import and munge in R, you'll want to go with the data-dot-table package. Let's start with installing and loading the library:If you want to learn everything about data-dot-table, DataCamp offers course material dedicated to this package. In this course, we'll stick to the fread function. It is pretty similar to the \"read-dot-table\" function you've seen before but it is more convenient to use. Let me introduce it with an example.\n\n**3. fread()**\n\nSuppose we have two versions of the states csv file, one with and one without column names in the first row.\n\n**4. fread()**\n\nLet's call fread on both these csv files, without additional arguments. fread automatically deals with these two different cases. In the first case, the column names are correctly transfered to the data frame, while in the second case, fread made up some column names itself.\n\n**5. fread()**\n\nNext to automatically handling the names, fread can also infer the column types and the field separators without having to specify these. That's the cool thing about fread: it just works. On top of that, it's ridiculously fast.Of course, the fread function does much more than automatically finding out all column types and conventions in the files you want to read. You can also manually specify the separator, the colClasses, the number of lines to skip and the number of lines to read in manually. Think of fread as an improved version of read-dot-table which is faster, more convenient and adds functionality.\n\n**6. Let's practice!**\n\nWith these pointers on data-dot-table it's time for you to get some hands-on practice yourself. Enjoy!\n\n##\nfread\n\nYou still remember how to use <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.table()`</a>, right? Well, <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\" target=\"_blank\" rel=\"noopener noreferrer\">`fread()`</a> is a function that does the same job with very similar arguments. It is extremely easy to use and blazingly fast! Often, simply specifying the path to the file is enough to successfully import your data.\n\nDon't take our word for it, try it yourself! You'll be working with the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.csv`</a> file, that's available in your workspace. Fields are delimited by commas, and the first line contains the column names.\n\n\n**Steps**\n\n1. Use <a href=\"http://www.rdocumentation.org/packages/base/functions/library\" target=\"_blank\" rel=\"noopener noreferrer\">`library()`</a> to load (NOT install) the `data.table` package. You **do not** need to install the package, it is already installed on DataCamp's servers. \n2. Import `\"potatoes.csv\"` with <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\" target=\"_blank\" rel=\"noopener noreferrer\">`fread()`</a>. Simply pass it the file path and see if it worked. Store the result in a variable `potatoes`.\n3. Print out `potatoes`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load the data.table package\nlibrary(data.table)\n\n# Import potatoes.csv with fread(): potatoes\npotatoes <- fread(\"data/potatoes.csv\")\n\n# Print out potatoes\npotatoes\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"area\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"temp\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"size\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"storage\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"method\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"texture\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"flavor\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"moistness\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.9\",\"7\":\"3.2\",\"8\":\"3.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"2.5\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"2.8\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.1\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.9\",\"7\":\"2.8\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"3.0\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"3.0\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.2\",\"7\":\"3.2\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.8\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"2.6\",\"8\":\"1.5\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.0\",\"7\":\"2.8\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.6\",\"7\":\"2.6\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.1\",\"7\":\"3.2\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"3.0\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"3.1\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.1\",\"7\":\"3.4\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"3.0\",\"7\":\"2.6\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"3.1\",\"7\":\"3.0\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"2.8\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.4\",\"7\":\"3.0\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.2\",\"7\":\"2.9\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.9\",\"7\":\"2.9\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"1.8\",\"7\":\"2.6\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.2\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"2.8\",\"7\":\"3.2\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.3\",\"7\":\"3.2\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"3.0\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"1.9\",\"7\":\"3.0\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"1.8\",\"7\":\"2.7\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3.3\",\"7\":\"3.2\",\"8\":\"3.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"3.4\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"1.5\",\"7\":\"2.6\",\"8\":\"1.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"1.4\",\"7\":\"2.6\",\"8\":\"1.3\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.1\",\"7\":\"2.5\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"1.8\",\"7\":\"3.1\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"1.7\",\"7\":\"2.7\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.8\",\"7\":\"2.6\",\"8\":\"3.0\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.5\",\"7\":\"2.4\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"3.2\",\"7\":\"2.7\",\"8\":\"3.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.4\",\"7\":\"2.4\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.5\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.3\",\"7\":\"2.9\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.8\",\"7\":\"2.7\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"3.7\",\"7\":\"3.3\",\"8\":\"3.1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"2.7\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"2.6\",\"8\":\"2.3\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.4\",\"7\":\"2.7\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"2.5\",\"8\":\"2.1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.7\",\"7\":\"2.9\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"3.0\",\"7\":\"3.2\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"3.1\",\"7\":\"3.1\",\"8\":\"2.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"3.6\",\"7\":\"3.0\",\"8\":\"3.3\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.4\",\"7\":\"3.4\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"3.0\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.2\",\"7\":\"2.6\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"2.3\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.7\",\"7\":\"2.6\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.0\",\"7\":\"2.5\",\"8\":\"2.0\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"1.4\",\"7\":\"2.4\",\"8\":\"1.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.5\",\"7\":\"2.6\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"3.2\",\"7\":\"2.9\",\"8\":\"2.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"3.1\",\"8\":\"1.9\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.7\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.4\",\"7\":\"3.0\",\"8\":\"2.2\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.8\",\"7\":\"2.8\",\"8\":\"2.5\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"3.3\",\"7\":\"3.1\",\"8\":\"3.1\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"3.1\",\"8\":\"2.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"2.9\",\"8\":\"2.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"1.4\",\"7\":\"2.9\",\"8\":\"1.4\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"2.1\",\"7\":\"2.5\",\"8\":\"1.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.3\",\"7\":\"2.6\",\"8\":\"1.8\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"1.8\",\"7\":\"2.9\",\"8\":\"1.6\"},{\"1\":\"1\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"1.5\",\"7\":\"2.4\",\"8\":\"1.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.5\",\"7\":\"2.7\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.8\",\"7\":\"2.9\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"3.0\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"3.0\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.7\",\"7\":\"2.8\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.5\",\"7\":\"2.9\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"1.6\",\"7\":\"3.1\",\"8\":\"1.8\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.5\",\"7\":\"3.2\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"2.9\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.2\",\"7\":\"2.8\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.4\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"3.1\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"3.1\",\"7\":\"3.1\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"3.3\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.4\",\"7\":\"3.4\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"3.1\",\"7\":\"3.1\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.3\",\"7\":\"3.2\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.2\",\"7\":\"3.5\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"2.7\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.6\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.7\",\"7\":\"3.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"2.9\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.4\",\"7\":\"3.0\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.0\",\"7\":\"3.0\",\"8\":\"1.9\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"2.3\",\"7\":\"3.1\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"1.7\",\"7\":\"3.1\",\"8\":\"2.4\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"3.1\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.2\",\"7\":\"2.9\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"1.7\",\"7\":\"3.2\",\"8\":\"1.5\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.2\",\"7\":\"3.2\",\"8\":\"2.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"1.7\",\"7\":\"3.1\",\"8\":\"2.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"3.2\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.6\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.0\",\"7\":\"3.5\",\"8\":\"2.2\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"1.8\",\"7\":\"3.0\",\"8\":\"2.0\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"1.6\",\"7\":\"3.4\",\"8\":\"2.1\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"2.8\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"1\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"2.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.8\",\"7\":\"2.6\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.9\",\"7\":\"2.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"2.7\",\"8\":\"2.9\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.6\",\"7\":\"3.0\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.8\",\"7\":\"2.2\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"1\",\"6\":\"3.4\",\"7\":\"3.2\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"2\",\"6\":\"3.5\",\"7\":\"2.9\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"3\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"4\",\"6\":\"3.3\",\"7\":\"3.0\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.0\",\"7\":\"2.8\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.8\",\"7\":\"2.8\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"2\",\"6\":\"3.5\",\"7\":\"2.8\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"3.2\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"4\",\"6\":\"3.3\",\"7\":\"3.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"3\",\"5\":\"5\",\"6\":\"3.5\",\"7\":\"2.9\",\"8\":\"2.9\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"1\",\"6\":\"3.2\",\"7\":\"3.4\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"2\",\"6\":\"3.3\",\"7\":\"2.8\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"3\",\"6\":\"3.0\",\"7\":\"3.0\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.5\",\"7\":\"3.2\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"4\":\"4\",\"5\":\"5\",\"6\":\"3.4\",\"7\":\"3.0\",\"8\":\"2.8\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"1\",\"6\":\"2.7\",\"7\":\"2.5\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"2\",\"6\":\"2.5\",\"7\":\"2.7\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"3\",\"6\":\"3.2\",\"7\":\"2.7\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"4\",\"6\":\"2.4\",\"7\":\"2.7\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"1\",\"5\":\"5\",\"6\":\"2.7\",\"7\":\"2.1\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"1\",\"6\":\"2.2\",\"7\":\"2.7\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"2\",\"6\":\"3.1\",\"7\":\"2.9\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"3\",\"6\":\"2.2\",\"7\":\"2.8\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"4\",\"6\":\"2.9\",\"7\":\"3.0\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"2\",\"5\":\"5\",\"6\":\"2.8\",\"7\":\"2.7\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"1\",\"6\":\"2.5\",\"7\":\"3.2\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"2\",\"6\":\"2.9\",\"7\":\"3.3\",\"8\":\"2.7\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"4\",\"6\":\"3.0\",\"7\":\"2.9\",\"8\":\"2.5\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"3\",\"5\":\"5\",\"6\":\"2.9\",\"7\":\"3.1\",\"8\":\"3.1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"1\",\"6\":\"2.7\",\"7\":\"3.3\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"2\",\"6\":\"2.6\",\"7\":\"2.8\",\"8\":\"2.3\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"3\",\"6\":\"2.5\",\"7\":\"3.1\",\"8\":\"2.6\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"4\",\"6\":\"3.4\",\"7\":\"3.3\",\"8\":\"3.0\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"2\",\"4\":\"4\",\"5\":\"5\",\"6\":\"2.5\",\"7\":\"2.8\",\"8\":\"2.3\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### fread: more advanced use\n\nNow that you know the basics about <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\" target=\"_blank\" rel=\"noopener noreferrer\">`fread()`</a>, you should know about two arguments of the function: `drop` and `select`, to drop or select variables of interest.\n\nSuppose you have a dataset that contains 5 variables and you want to keep the first and fifth variable, named \"a\" and \"e\". The following options will all do the trick:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfread(\"path/to/file.txt\", drop = 2:4)\nfread(\"path/to/file.txt\", select = c(1, 5))\nfread(\"path/to/file.txt\", drop = c(\"b\", \"c\", \"d\"))\nfread(\"path/to/file.txt\", select = c(\"a\", \"e\"))\n```\n:::\n\n\nLet's stick with potatoes since we're particularly fond of them here at DataCamp. The data is again available in the file <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.csv`</a>, containing comma-separated records.\n\n\n**Steps**\n\n1. Using <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\" target=\"_blank\" rel=\"noopener noreferrer\">`fread()`</a> and `select` or `drop` as arguments, only import the `texture` and `moistness` columns of the flat file. They correspond to the columns 6 and 8 in `\"potatoes.csv\"`. Store the result in a variable `potatoes`.\n2. <a href=\"http://www.rdocumentation.org/packages/graphics/functions/plot\" target=\"_blank\" rel=\"noopener noreferrer\">`plot()`</a> 2 columns of the `potatoes` data frame: `texture` on the x-axis, `moistness` on the y-axis. Use the dollar sign notation twice. Feel free to name your axes and plot.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import columns 6 and 8 of potatoes.csv: potatoes\npotatoes <- fread(\"data/potatoes.csv\", select = c(\"texture\", \"moistness\"))\n\n# Plot texture (x) and moistness (y) of potatoes\nplot(potatoes$texture, potatoes$moistness)\n```\n\n::: {.cell-output-display}\n![](01_importing_data_beginner_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nCongratulations! We can see that moistness and texture are positively correlated.\n\n### Dedicated classes\n\nYou might have noticed that the <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\" target=\"_blank\" rel=\"noopener noreferrer\">`fread()`</a> function produces data frames that look slightly different when you print them out. That's because another class named `data.table` is assigned to the resulting data frames. The printout of such `data.table` objects is different. Does something similar happen with the data frames generated by `readr`?\n\nIn your current working directory, we prepared the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/potatoes.csv\" target=\"_blank\" rel=\"noopener noreferrer\">`potatoes.csv`</a> file. The packages `data.table` and `readr` are both loaded, so you can experiment straight away.\n\n> *Question*\n> ---\n> Which of the following statements is true?<br>\n> <br>\n> ⬜ <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\">`fread()`</a> creates an object whose only class is `data.table` class. <a href=\"http://www.rdocumentation.org/packages/readr/topics/read_delim\">`read_csv()`</a> creates an object with class `tbl_df`.<br>\n> ⬜ The class of the result of <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\">`fread()`</a> is only `data.table`. That of the result of <a href=\"http://www.rdocumentation.org/packages/readr/topics/read_delim\">`read_csv()`</a> is both `tbl_df` and `tbl`.<br>\n> ✅ The class of the result of <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\">`fread()`</a> is both `data.table` and `data.frame`. <a href=\"http://www.rdocumentation.org/packages/readr/topics/read_delim\">`read_csv()`</a> creates an object with three classes: `tbl_df`, `tbl` and `data.frame`.<br>\n> ⬜ <a href=\"http://www.rdocumentation.org/packages/data.table/functions/fread\">`fread()`</a> creates an object of the `data.table` class, while <a href=\"http://www.rdocumentation.org/packages/readr/topics/read_delim\">`read_csv()`</a> simply generates a `data.frame`, nothing more.<br>\n\nCorrect! What's the benefit of these additional classes? Well, it allows for a different treatment of printouts, for example. To learn all about it, you can check out the DataCamp courses dedicated to dplyr and data.table. For now, you can proceed to the next chapter in this course! \n\n# Importing Excel data\n\nExcel is a widely used data analysis tool. If you prefer to do your analyses in R, though, you'll need an understanding of how to import  .csv data into R. This chapter will show you how to use readxl and gdata to do so.\n\n## readxl\n### readxl (1)\n\nTheory. Coming soon ...\n\n\n**1. readxl (1)**\n\nAnother tool that is extremely common in data analysis is\n\n**2. Microsoft Excel**\n\nMicrosoft Excel. It shouldn't be a surprise that there are a lot of packages out there that interact with Excel so that you can work with the data inside R. In this chapter, we'll cover everything you need to know to get started with excel files in R with practically no extra work. In this video, I'll be taking about Hadley Wickham's readxl package.\n\n**3. Typical Structure Excel Data**\n\nBefore we dive into the R side of things, it's a good idea to quickly recap on what an excel file typically is. For most data related tasks, an excel file contains different sheets that contain tabular data. Take this excel file for example, cities-dot-xlsx, that contains two sheets containing data of the total population of some capitals for two different years.When you're working in R, you'll typically want to explore your excel file first and then import some data from it. But how do you go about this?\n\n**4. readxl**\n\nThis is where the readxl package comes in. It basically contains two main functions: excel_sheets and read_excel. The first one is used to list the different sheets in your excel file, while the second one is used to actually import a sheet into your R session. readxl is able to handle both dot-xls as dot-xlsx files.So, let's try it out! Let's first install and load the readxl package and then\n\n**5. excel_sheets()**\n\nstart with the excel_sheets function. You simply pass it the file path, which is the location of the dot-xls file on your own system. The file is already in our working directory, as dir reveals, so we can simply use the following call.The result is a simple character vector, that contains the names of the different sheets. Indeed, you saw before that the two sheets in the excel file are named year_1990 and year_2000. Great.We already know about the sheet names now, but that's just the names, not the actual population data.\n\n**6. read_excel()**\n\nFortunately, readxl also features the read_excel function to actually import the sheet data into your R session.In its most basic use, you simply specify the path to the excel file again.By default, the first sheet, year_1990 in this case, is imported as a tibble. You can also explicitly tell read_excel which sheet to import, by setting the sheet argument. You can use both an index or the sheet name. Suppose you want to load in the second sheet, named year_2000. The following two calls both do that.In all of these read_excel calls, an R data frame results that contains the Excel data. You can start your analyses right away!\n\n**7. Let's practice!**\n\nGive it a first try in the exercises. In the next video, I'll dive a little deeper into the read_excel function!\n\n### List the sheets of an Excel file\n\nBefore you can start importing from Excel, you should find out which sheets are available in the workbook. You can use the <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`excel_sheets()`</a> function for this.\n\nYou will find the Excel file <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a> in your working directory (type <a href=\"http://www.rdocumentation.org/packages/base/functions/list.files\" target=\"_blank\" rel=\"noopener noreferrer\">`dir()`</a> to see it). This dataset contains urban population metrics for practically all countries in the world throughout time (Source: <a href=\"http://www.gapminder.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Gapminder</a>). It contains three sheets for three different time periods. In each sheet, the first row contains the column names.\n\n**Steps**\n\n1. Load the `readxl` package using <a href=\"http://www.rdocumentation.org/packages/base/functions/library\" target=\"_blank\" rel=\"noopener noreferrer\">`library()`</a>. It's already installed on DataCamp's servers.\n2. Use <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`excel_sheets()`</a> to print out the names of the sheets in `urbanpop.xlsx`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the readxl package\nlibrary(\"readxl\")\n\n# Print the names of all worksheets\nexcel_sheets(\"data/urbanpop.xlsx\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"1960-1966\" \"1967-1974\" \"1975-2011\"\n```\n:::\n:::\n\n\nCongratulations! As you can see, the result of [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) is simply a character vector; you haven't imported anything yet. That's something for the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function. Learn all about it in the next exercise!\n\n### Import an Excel sheet\n\nNow that you know the names of the sheets in the Excel file you want to import, it is time to import those sheets into R. You can do this with the <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`read_excel()`</a> function. Have a look at this recipe:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata <- read_excel(\"data.xlsx\", sheet = \"my_sheet\")\n```\n:::\n\n\nThis call simply imports the sheet with the name `\"my_sheet\"` from the `\"data.xlsx\"` file. You can also pass a number to the `sheet` argument; this will cause <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`read_excel()`</a> to import the sheet with the given sheet number. `sheet = 1` will import the first sheet, `sheet = 2` will import the second sheet, and so on.\n\nIn this exercise, you'll continue working with the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a> file.\n\n\n**Steps**\n\n1. The code to import the first and second sheets is already included. Can you add a command to also import the third sheet, and store the resulting data frame in `pop_3`?\n2. Store the data frames `pop_1`, `pop_2` and `pop_3` in a list, that you call `pop_list`.\n3. Display the structure of `pop_list`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Read the sheets, one by one\npop_1 <- read_excel(\"data/urbanpop.xlsx\", sheet = 1)\npop_2 <- read_excel(\"data/urbanpop.xlsx\", sheet = 2)\npop_3 <- read_excel(\"data/urbanpop.xlsx\", sheet = 3)\n\n# Put pop_1, pop_2 and pop_3 in a list: pop_list\npop_list <- list(pop_1, pop_2, pop_3)\n\n# Display the structure of pop_list\nstr(pop_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> List of 3\n#>  $ : tibble [209 × 8] (S3: tbl_df/tbl/data.frame)\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ 1960   : num [1:209] 769308 494443 3293999 NA NA ...\n#>   ..$ 1961   : num [1:209] 814923 511803 3515148 13660 8724 ...\n#>   ..$ 1962   : num [1:209] 858522 529439 3739963 14166 9700 ...\n#>   ..$ 1963   : num [1:209] 903914 547377 3973289 14759 10748 ...\n#>   ..$ 1964   : num [1:209] 951226 565572 4220987 15396 11866 ...\n#>   ..$ 1965   : num [1:209] 1000582 583983 4488176 16045 13053 ...\n#>   ..$ 1966   : num [1:209] 1058743 602512 4649105 16693 14217 ...\n#>  $ : tibble [209 × 9] (S3: tbl_df/tbl/data.frame)\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ 1967   : num [1:209] 1119067 621180 4826104 17349 15440 ...\n#>   ..$ 1968   : num [1:209] 1182159 639964 5017299 17996 16727 ...\n#>   ..$ 1969   : num [1:209] 1248901 658853 5219332 18619 18088 ...\n#>   ..$ 1970   : num [1:209] 1319849 677839 5429743 19206 19529 ...\n#>   ..$ 1971   : num [1:209] 1409001 698932 5619042 19752 20929 ...\n#>   ..$ 1972   : num [1:209] 1502402 720207 5815734 20263 22406 ...\n#>   ..$ 1973   : num [1:209] 1598835 741681 6020647 20742 23937 ...\n#>   ..$ 1974   : num [1:209] 1696445 763385 6235114 21194 25482 ...\n#>  $ : tibble [209 × 38] (S3: tbl_df/tbl/data.frame)\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ 1975   : num [1:209] 1793266 785350 6460138 21632 27019 ...\n#>   ..$ 1976   : num [1:209] 1905033 807990 6774099 22047 28366 ...\n#>   ..$ 1977   : num [1:209] 2021308 830959 7102902 22452 29677 ...\n#>   ..$ 1978   : num [1:209] 2142248 854262 7447728 22899 31037 ...\n#>   ..$ 1979   : num [1:209] 2268015 877898 7810073 23457 32572 ...\n#>   ..$ 1980   : num [1:209] 2398775 901884 8190772 24177 34366 ...\n#>   ..$ 1981   : num [1:209] 2493265 927224 8637724 25173 36356 ...\n#>   ..$ 1982   : num [1:209] 2590846 952447 9105820 26342 38618 ...\n#>   ..$ 1983   : num [1:209] 2691612 978476 9591900 27655 40983 ...\n#>   ..$ 1984   : num [1:209] 2795656 1006613 10091289 29062 43207 ...\n#>   ..$ 1985   : num [1:209] 2903078 1037541 10600112 30524 45119 ...\n#>   ..$ 1986   : num [1:209] 3006983 1072365 11101757 32014 46254 ...\n#>   ..$ 1987   : num [1:209] 3113957 1109954 11609104 33548 47019 ...\n#>   ..$ 1988   : num [1:209] 3224082 1146633 12122941 35095 47669 ...\n#>   ..$ 1989   : num [1:209] 3337444 1177286 12645263 36618 48577 ...\n#>   ..$ 1990   : num [1:209] 3454129 1198293 13177079 38088 49982 ...\n#>   ..$ 1991   : num [1:209] 3617842 1215445 13708813 39600 51972 ...\n#>   ..$ 1992   : num [1:209] 3788685 1222544 14248297 41049 54469 ...\n#>   ..$ 1993   : num [1:209] 3966956 1222812 14789176 42443 57079 ...\n#>   ..$ 1994   : num [1:209] 4152960 1221364 15322651 43798 59243 ...\n#>   ..$ 1995   : num [1:209] 4347018 1222234 15842442 45129 60598 ...\n#>   ..$ 1996   : num [1:209] 4531285 1228760 16395553 46343 60927 ...\n#>   ..$ 1997   : num [1:209] 4722603 1238090 16935451 47527 60462 ...\n#>   ..$ 1998   : num [1:209] 4921227 1250366 17469200 48705 59685 ...\n#>   ..$ 1999   : num [1:209] 5127421 1265195 18007937 49906 59281 ...\n#>   ..$ 2000   : num [1:209] 5341456 1282223 18560597 51151 59719 ...\n#>   ..$ 2001   : num [1:209] 5564492 1315690 19198872 52341 61062 ...\n#>   ..$ 2002   : num [1:209] 5795940 1352278 19854835 53583 63212 ...\n#>   ..$ 2003   : num [1:209] 6036100 1391143 20529356 54864 65802 ...\n#>   ..$ 2004   : num [1:209] 6285281 1430918 21222198 56166 68301 ...\n#>   ..$ 2005   : num [1:209] 6543804 1470488 21932978 57474 70329 ...\n#>   ..$ 2006   : num [1:209] 6812538 1512255 22625052 58679 71726 ...\n#>   ..$ 2007   : num [1:209] 7091245 1553491 23335543 59894 72684 ...\n#>   ..$ 2008   : num [1:209] 7380272 1594351 24061749 61118 73335 ...\n#>   ..$ 2009   : num [1:209] 7679982 1635262 24799591 62357 73897 ...\n#>   ..$ 2010   : num [1:209] 7990746 1676545 25545622 63616 74525 ...\n#>   ..$ 2011   : num [1:209] 8316976 1716842 26216968 64817 75207 ...\n```\n:::\n:::\n\n\nGreat! Now you imported the sheets from `urbanpop.xlsx` correctly. From here on you are able to read and to operate on the imported file. In the next exercise you will learn how to use both the [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) and the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function in combination with [`lapply()`](http://www.rdocumentation.org/packages/base/functions/lapply) to read multiple sheets at once.\n\n### Reading a workbook\n\nIn the previous exercise you generated a list of three Excel sheets that you imported. However, loading in every sheet manually and then merging them in a list can be quite tedious. Luckily, you can automate this with <a href=\"http://www.rdocumentation.org/packages/base/functions/lapply\" target=\"_blank\" rel=\"noopener noreferrer\">`lapply()`</a>. If you have no experience with <a href=\"http://www.rdocumentation.org/packages/base/functions/lapply\" target=\"_blank\" rel=\"noopener noreferrer\">`lapply()`</a>, feel free to take <a href=\"https://campus.datacamp.com/courses/intermediate-r/chapter-4-the-apply-family?ex=1\" target=\"_blank\" rel=\"noopener noreferrer\">Chapter 4 of the Intermediate R course</a>.\n\nHave a look at the example code below:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_workbook <- lapply(excel_sheets(\"data.xlsx\"),\n                      read_excel,\n                      path = \"data.xlsx\")\n```\n:::\n\n\nThe <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`read_excel()`</a> function is called multiple times on the `\"data.xlsx\"` file and each sheet is loaded in one after the other. The result is a list of data frames, each data frame representing one of the sheets in `data.xlsx`.\n\nYou're still working with the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a> file.\n\n**Steps**\n\n1. Use <a href=\"http://www.rdocumentation.org/packages/base/functions/lapply\" target=\"_blank\" rel=\"noopener noreferrer\">`lapply()`</a> in combination with <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`excel_sheets()`</a> and <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`read_excel()`</a> to read all the Excel sheets in `\"urbanpop.xlsx\"`. Name the resulting list `pop_list`.\n2. Print the structure of `pop_list`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Read all Excel sheets with lapply(): pop_list\npop_list <- lapply(excel_sheets(\"data/urbanpop.xlsx\"), read_excel, path = \"data/urbanpop.xlsx\")\n\n# Display the structure of pop_list\nstr(pop_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> List of 3\n#>  $ : tibble [209 × 8] (S3: tbl_df/tbl/data.frame)\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ 1960   : num [1:209] 769308 494443 3293999 NA NA ...\n#>   ..$ 1961   : num [1:209] 814923 511803 3515148 13660 8724 ...\n#>   ..$ 1962   : num [1:209] 858522 529439 3739963 14166 9700 ...\n#>   ..$ 1963   : num [1:209] 903914 547377 3973289 14759 10748 ...\n#>   ..$ 1964   : num [1:209] 951226 565572 4220987 15396 11866 ...\n#>   ..$ 1965   : num [1:209] 1000582 583983 4488176 16045 13053 ...\n#>   ..$ 1966   : num [1:209] 1058743 602512 4649105 16693 14217 ...\n#>  $ : tibble [209 × 9] (S3: tbl_df/tbl/data.frame)\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ 1967   : num [1:209] 1119067 621180 4826104 17349 15440 ...\n#>   ..$ 1968   : num [1:209] 1182159 639964 5017299 17996 16727 ...\n#>   ..$ 1969   : num [1:209] 1248901 658853 5219332 18619 18088 ...\n#>   ..$ 1970   : num [1:209] 1319849 677839 5429743 19206 19529 ...\n#>   ..$ 1971   : num [1:209] 1409001 698932 5619042 19752 20929 ...\n#>   ..$ 1972   : num [1:209] 1502402 720207 5815734 20263 22406 ...\n#>   ..$ 1973   : num [1:209] 1598835 741681 6020647 20742 23937 ...\n#>   ..$ 1974   : num [1:209] 1696445 763385 6235114 21194 25482 ...\n#>  $ : tibble [209 × 38] (S3: tbl_df/tbl/data.frame)\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ 1975   : num [1:209] 1793266 785350 6460138 21632 27019 ...\n#>   ..$ 1976   : num [1:209] 1905033 807990 6774099 22047 28366 ...\n#>   ..$ 1977   : num [1:209] 2021308 830959 7102902 22452 29677 ...\n#>   ..$ 1978   : num [1:209] 2142248 854262 7447728 22899 31037 ...\n#>   ..$ 1979   : num [1:209] 2268015 877898 7810073 23457 32572 ...\n#>   ..$ 1980   : num [1:209] 2398775 901884 8190772 24177 34366 ...\n#>   ..$ 1981   : num [1:209] 2493265 927224 8637724 25173 36356 ...\n#>   ..$ 1982   : num [1:209] 2590846 952447 9105820 26342 38618 ...\n#>   ..$ 1983   : num [1:209] 2691612 978476 9591900 27655 40983 ...\n#>   ..$ 1984   : num [1:209] 2795656 1006613 10091289 29062 43207 ...\n#>   ..$ 1985   : num [1:209] 2903078 1037541 10600112 30524 45119 ...\n#>   ..$ 1986   : num [1:209] 3006983 1072365 11101757 32014 46254 ...\n#>   ..$ 1987   : num [1:209] 3113957 1109954 11609104 33548 47019 ...\n#>   ..$ 1988   : num [1:209] 3224082 1146633 12122941 35095 47669 ...\n#>   ..$ 1989   : num [1:209] 3337444 1177286 12645263 36618 48577 ...\n#>   ..$ 1990   : num [1:209] 3454129 1198293 13177079 38088 49982 ...\n#>   ..$ 1991   : num [1:209] 3617842 1215445 13708813 39600 51972 ...\n#>   ..$ 1992   : num [1:209] 3788685 1222544 14248297 41049 54469 ...\n#>   ..$ 1993   : num [1:209] 3966956 1222812 14789176 42443 57079 ...\n#>   ..$ 1994   : num [1:209] 4152960 1221364 15322651 43798 59243 ...\n#>   ..$ 1995   : num [1:209] 4347018 1222234 15842442 45129 60598 ...\n#>   ..$ 1996   : num [1:209] 4531285 1228760 16395553 46343 60927 ...\n#>   ..$ 1997   : num [1:209] 4722603 1238090 16935451 47527 60462 ...\n#>   ..$ 1998   : num [1:209] 4921227 1250366 17469200 48705 59685 ...\n#>   ..$ 1999   : num [1:209] 5127421 1265195 18007937 49906 59281 ...\n#>   ..$ 2000   : num [1:209] 5341456 1282223 18560597 51151 59719 ...\n#>   ..$ 2001   : num [1:209] 5564492 1315690 19198872 52341 61062 ...\n#>   ..$ 2002   : num [1:209] 5795940 1352278 19854835 53583 63212 ...\n#>   ..$ 2003   : num [1:209] 6036100 1391143 20529356 54864 65802 ...\n#>   ..$ 2004   : num [1:209] 6285281 1430918 21222198 56166 68301 ...\n#>   ..$ 2005   : num [1:209] 6543804 1470488 21932978 57474 70329 ...\n#>   ..$ 2006   : num [1:209] 6812538 1512255 22625052 58679 71726 ...\n#>   ..$ 2007   : num [1:209] 7091245 1553491 23335543 59894 72684 ...\n#>   ..$ 2008   : num [1:209] 7380272 1594351 24061749 61118 73335 ...\n#>   ..$ 2009   : num [1:209] 7679982 1635262 24799591 62357 73897 ...\n#>   ..$ 2010   : num [1:209] 7990746 1676545 25545622 63616 74525 ...\n#>   ..$ 2011   : num [1:209] 8316976 1716842 26216968 64817 75207 ...\n```\n:::\n:::\n\n\nCongratulations! If you're clever, reading multiple Excel sheets doesn't require a lot of coding at all!\n\n### readxl (2)\n\nTheory. Coming soon ...\n\n**1. readxl (2)**\n\nNext to the path and sheet arguments that we discussed in the previous video,\n\n**2. read_excel()**\n\nthere are also other arguments you can specify. Have a look at the usage of the read_excel function as it appears in the documentation; can you tell the meaning of these arguments? path and sheets have no secrets for you anymore.\n\n**3. read_excel() - col_names**\n\nThen, there's col_names, which can be three things: TRUE, the default, which means what the first row of the Excel sheet contains the column names. It can also be FALSE, in which case R comes up with its own names. Finally, you can also set it a character vector specifying the column names. Excel can contain different data types, such as text, numerics and dates. How this converts to R classes is controlled in the col_types argument:\n\n**4. read_excel() - col_types**\n\nBy default it is NULL, which has R guess the data types of the different columns. But you can also manually specify the col_types. Suppose you want to import all the columns of the first sheet as text. This command will do the trick: The column classes we can see in the printout reveal that indeed, the pop_data variable contains two columns that two are character now, perfect. Other keywords to enforce a type are \"numeric\", \"date\" and \"blank\". \"numeric\" and \"date\" are straightforward, but what about \"blank\"?\n\n**5. read_excel() - col_types**\n\nWell, if you use blank, you're simply ignoring that column. If we adapt the previous call like this: You'll see that the population column is missing. This \"blank\" keyword can come in handy when you have an Excel file with a lot of columns and you only need some of them in R.\n\n**6. read_excel() - skip**\n\nNext, there's the skip argument. It specifies the number of rows in your excel sheet R has to skip before actually importing the data. Let's say the first two rows in the first sheet of cities-dot-xlsx are not necessary for our analysis. To ignore them, we can simply set the skip argument to 2 and read_excel will not import these lines. we'll also have to set the col_names argument, because the first row with the column names is skipped as well. if we try out this code, indeed 2 rows were skipped: the row containing the column names and the first observations. That leaves us with the last three observations. In readr, there was also the n_max argument, to specify the number of records to read. Currently this functionality is not available in readxl, but this might be added in the future. The package is still under development as we speak.\n\n**7. Wrap-up**\n\nActually, the excel_sheets and read_excel are the only functions that are available in the readxl package. These two functions and the customization possibilities are all you need to get started with your excel data in R. On top of all that, readxl is extremely fast. You might have recognized many of the arguments of the readr package of the previous chapter. Hadley Wickham made reading data from different data sources pretty consistent. This can only make your job of importing data easier, right? \n\n### The col_names argument\n\nApart from `path` and `sheet`, there are several other arguments you can specify in <a href=\"https://cran.r-project.org/web/packages/readxl/readxl.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">`read_excel()`</a>. One of these arguments is called `col_names`.\n\nBy default it is `TRUE`, denoting whether the first row in the Excel sheets contains the column names. If this is not the case, you can set `col_names` to `FALSE`. In this case, R will choose column names for you. You can also choose to set `col_names` to a character vector with names for each column. It works exactly the same as in the `readr` package.\n\nYou'll be working with the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop_nonames.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop_nonames.xlsx`</a> file. It contains the same data as <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a> but has no column names in the first row of the excel sheets.\n\n\n**Steps**\n\n1. Import the *first* Excel sheet of `\"urbanpop_nonames.xlsx\"` and store the result in `pop_a`. Have R set the column names of the resulting data frame itself.\n2. Import the first Excel sheet of `urbanpop_nonames.xlsx`; this time, use the `cols` vector that has already been prepared for you to specify the column names. Store the resulting data frame in `pop_b`.\n3. Print out the summary of `pop_a`.\n4. Print out the summary of `pop_b`. Can you spot the difference with the other summary?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a\npop_a <- read_excel(\"data/urbanpop_nonames.xlsx\", col_names = F)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n#> • `` -> `...3`\n#> • `` -> `...4`\n#> • `` -> `...5`\n#> • `` -> `...6`\n#> • `` -> `...7`\n#> • `` -> `...8`\n```\n:::\n\n```{.r .cell-code}\n# Import the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b\ncols <- c(\"country\", paste0(\"year_\", 1960:1966))\npop_b <- read_excel(\"data/urbanpop_nonames.xlsx\", col_names = cols)\n\n# Print the summary of pop_a\nsummary(pop_a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>      ...1                ...2                ...3                ...4          \n#>  Length:209         Min.   :     3378   Min.   :     1028   Min.   :     1090  \n#>  Class :character   1st Qu.:    88978   1st Qu.:    70644   1st Qu.:    74974  \n#>  Mode  :character   Median :   580675   Median :   570159   Median :   593968  \n#>                     Mean   :  4988124   Mean   :  4991613   Mean   :  5141592  \n#>                     3rd Qu.:  3077228   3rd Qu.:  2807280   3rd Qu.:  2948396  \n#>                     Max.   :126469700   Max.   :129268133   Max.   :131974143  \n#>                     NA's   :11                                                 \n#>       ...5                ...6                ...7          \n#>  Min.   :     1154   Min.   :     1218   Min.   :     1281  \n#>  1st Qu.:    81870   1st Qu.:    84953   1st Qu.:    88633  \n#>  Median :   619331   Median :   645262   Median :   679109  \n#>  Mean   :  5303711   Mean   :  5468966   Mean   :  5637394  \n#>  3rd Qu.:  3148941   3rd Qu.:  3296444   3rd Qu.:  3317422  \n#>  Max.   :134599886   Max.   :137205240   Max.   :139663053  \n#>                                                             \n#>       ...8          \n#>  Min.   :     1349  \n#>  1st Qu.:    93638  \n#>  Median :   735139  \n#>  Mean   :  5790281  \n#>  3rd Qu.:  3418036  \n#>  Max.   :141962708  \n#> \n```\n:::\n\n```{.r .cell-code}\n# Print the summary of pop_b\nsummary(pop_b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    country            year_1960           year_1961           year_1962        \n#>  Length:209         Min.   :     3378   Min.   :     1028   Min.   :     1090  \n#>  Class :character   1st Qu.:    88978   1st Qu.:    70644   1st Qu.:    74974  \n#>  Mode  :character   Median :   580675   Median :   570159   Median :   593968  \n#>                     Mean   :  4988124   Mean   :  4991613   Mean   :  5141592  \n#>                     3rd Qu.:  3077228   3rd Qu.:  2807280   3rd Qu.:  2948396  \n#>                     Max.   :126469700   Max.   :129268133   Max.   :131974143  \n#>                     NA's   :11                                                 \n#>    year_1963           year_1964           year_1965        \n#>  Min.   :     1154   Min.   :     1218   Min.   :     1281  \n#>  1st Qu.:    81870   1st Qu.:    84953   1st Qu.:    88633  \n#>  Median :   619331   Median :   645262   Median :   679109  \n#>  Mean   :  5303711   Mean   :  5468966   Mean   :  5637394  \n#>  3rd Qu.:  3148941   3rd Qu.:  3296444   3rd Qu.:  3317422  \n#>  Max.   :134599886   Max.   :137205240   Max.   :139663053  \n#>                                                             \n#>    year_1966        \n#>  Min.   :     1349  \n#>  1st Qu.:    93638  \n#>  Median :   735139  \n#>  Mean   :  5790281  \n#>  3rd Qu.:  3418036  \n#>  Max.   :141962708  \n#> \n```\n:::\n:::\n\n\nWell done! Did you spot the difference between the summaries? It's really crucial to correctly tell R whether your Excel data contains column names. If you don't, the head of the data frame you end up with will contain incorrect information...\n\n### The skip argument\n\nAnother argument that can be very useful when reading in Excel files that are less tidy, is `skip`. With `skip`, you can tell R to ignore a specified number of rows inside the Excel sheets you're trying to pull data from. Have a look at this example:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread_excel(\"data.xlsx\", skip = 15)\n```\n:::\n\n\nIn this case, the first 15 rows in the first sheet of `\"data.xlsx\"` are ignored.\n\nIf the first row of this sheet contained the column names, this information will also be ignored by `readxl`. Make sure to set `col_names` to `FALSE` or manually specify column names in this case!\n\nThe file <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a> is available in your directory; it has column names in the first rows.\n\n**Steps**\n\n1. Import the *second* sheet of `\"urbanpop.xlsx\"`, but skip the first 21 rows. Make sure to set `col_names = FALSE`. Store the resulting data frame in a variable `urbanpop_sel`.\n2. Select the first observation from `urbanpop_sel` and print it out.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel\nurbanpop_sel <- read_excel(\"data/urbanpop.xlsx\", sheet = 2, col_names = F, skip = 21)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n#> • `` -> `...3`\n#> • `` -> `...4`\n#> • `` -> `...5`\n#> • `` -> `...6`\n#> • `` -> `...7`\n#> • `` -> `...8`\n#> • `` -> `...9`\n```\n:::\n\n```{.r .cell-code}\n# Print out the first observation from urbanpop_sel\nurbanpop_sel[1,]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"...1\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"...2\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...3\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...4\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...5\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...6\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...7\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...8\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"...9\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Benin\",\"2\":\"382022.1\",\"3\":\"411859.5\",\"4\":\"443013.1\",\"5\":\"475611.4\",\"6\":\"515819.5\",\"7\":\"557937.6\",\"8\":\"602093.2\",\"9\":\"648409.7\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nNice job! This is about as complicated as the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) call can get! Time to learn about another package to import data from Excel: gdata.\n\n## gdata\n\nTheory. Coming soon ...\n\n**1. gdata**\n\nBefore, I introduced the readxl package, which is a very efficient package to import data from excel to R. But there are of course alternatives to readxl. In this video, I'll be discussing one of those alternatives:\n\n**2. gdata**\n\nthe gdata package, currently maintained by Gregory Warnes. Actually, the gdata package is an entire suite of tools for performing data manipulation in all sorts of fields. It kind of supercharges your basic R distribution to make handling your data less painful. Among these tools, there is also a function that allows you to import Excel data: read dot xls. Out of the box, gdata can only handle the xls format, but you can easily install a driver to support the newer xlsx format as well. There's no function to list the different sheets in an excel file, like excel_sheets in readxl.\n\n**3. gdata**\n\nTo import data from Excel, gdata uses Perl, another interpreted programming language. The Perl code converts the data in the excel sheet to a csv file.\n\n**4. gdata**\n\nNext, this csv file is read into R using the default read-dot-csv function from the utils package.\n\n**5. gdata**\n\nread-dot-csv itself is a wrapper around read-dot-table, remember?\n\n**6. gdata**\n\nThis function can be customized in millions of ways; there are more than 15 arguments you can specify. All these read-dot-table arguments are also available for gdata read-dot-xls function. In this respect, the read-dot-xls function is an extension of the data input functions from the utils package to Excel files. This makes it easy to use for people who are familiar with the import functions of the utils package and their arguments.On the other hand, first converting an entire xls file to a csv file, to next import it into R with the slow read dot csv function is extremely inefficient. What if you're dealing with huge Excel files? You'd have to convert the entire file, and then read it. That's quite some extra work you're doing. Wickham's readxl package is way faster here.So why use gdata in the first place then? Well, we believe that readxl will become the standard package to import Excel data. However, as we speak, the readxl package is still under development: the version we're working with is pre-V1. If you don't want to rely on packages that are still under heavy development and whose syntax can still change, you can stick to more established packages like gdata.Now, let's get practical. Still remember the cities dot xlsx file?\n\n**7. cities.xls**\n\nHere it is as a xls file this time, cities dot xls. Two sheets, containing the population of some capitals in 1990 and 2000.\n\n**8. read.xls()**\n\nLet's first install and load gdata, and then try gdata's read-dot-xls function to import the excel data.As before, the first argument you pass it is the path to the file; in our case, cities-dot-xls is still in the working directory. If your Excel file contains multiple sheets, only the first sheet is imported. You can again choose to specify a different sheet by sheet number or by sheet name, like this example.\n\n### Import a local file\n\nIn this part of the chapter you'll learn how to import `.xls` files using the `gdata` package. Similar to the `readxl` package, you can import single Excel sheets from Excel sheets to start your analysis in R.\n\nYou'll be working with the <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xls\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xls`</a> dataset, the `.xls` version of the Excel file you've been working with before. It's available in your current working directory.\n\n\n**Steps**\n\n1. Load the `gdata` package with <a href=\"http://www.rdocumentation.org/packages/base/functions/library\" target=\"_blank\" rel=\"noopener noreferrer\">`library()`</a>. `gdata` and Perl are already installed on DataCamp's Servers.\n2. Import the second sheet, named `\"1967-1974\"`, of `\"urbanpop.xls\"` with <a href=\"http://www.rdocumentation.org/packages/gdata/functions/read.xls\" target=\"_blank\" rel=\"noopener noreferrer\">`read.xls()`</a>. Store the resulting data frame as `urban_pop`.\n3. Print the first 11 observations of `urban_pop` with <a href=\"http://www.rdocumentation.org/packages/utils/functions/head\" target=\"_blank\" rel=\"noopener noreferrer\">`head()`</a>.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the gdata package\nlibrary(\"gdata\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> gdata: read.xls support for 'XLS' (Excel 97-2004) files ENABLED.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> gdata: read.xls support for 'XLSX' (Excel 2007+) files ENABLED.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> \n#> Attaching package: 'gdata'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following objects are masked from 'package:data.table':\n#> \n#>     first, last\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:stats':\n#> \n#>     nobs\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:utils':\n#> \n#>     object.size\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> The following object is masked from 'package:base':\n#> \n#>     startsWith\n```\n:::\n\n```{.r .cell-code}\n# Import the second sheet of urbanpop.xls: urban_pop\nurban_pop <- read.xls(\"data/urbanpop.xls\", sheet = \"1967-1974\")\n\n# Print the first 11 observations using head()\nhead(urban_pop, n = 11)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"country\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"X1967\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1968\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1969\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1970\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1971\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1972\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1973\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1974\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Afghanistan\",\"2\":\"1119067.20\",\"3\":\"1182159.06\",\"4\":\"1248900.79\",\"5\":\"1319848.78\",\"6\":\"1409001.09\",\"7\":\"1502401.79\",\"8\":\"1598835.45\",\"9\":\"1696444.83\",\"_rn_\":\"1\"},{\"1\":\"Albania\",\"2\":\"621179.85\",\"3\":\"639964.46\",\"4\":\"658853.12\",\"5\":\"677839.12\",\"6\":\"698932.25\",\"7\":\"720206.57\",\"8\":\"741681.04\",\"9\":\"763385.45\",\"_rn_\":\"2\"},{\"1\":\"Algeria\",\"2\":\"4826104.22\",\"3\":\"5017298.60\",\"4\":\"5219331.87\",\"5\":\"5429743.08\",\"6\":\"5619041.53\",\"7\":\"5815734.49\",\"8\":\"6020647.35\",\"9\":\"6235114.38\",\"_rn_\":\"3\"},{\"1\":\"American Samoa\",\"2\":\"17348.66\",\"3\":\"17995.51\",\"4\":\"18618.68\",\"5\":\"19206.39\",\"6\":\"19752.02\",\"7\":\"20262.67\",\"8\":\"20741.97\",\"9\":\"21194.38\",\"_rn_\":\"4\"},{\"1\":\"Andorra\",\"2\":\"15439.62\",\"3\":\"16726.99\",\"4\":\"18088.32\",\"5\":\"19528.96\",\"6\":\"20928.73\",\"7\":\"22405.84\",\"8\":\"23937.05\",\"9\":\"25481.98\",\"_rn_\":\"5\"},{\"1\":\"Angola\",\"2\":\"757496.32\",\"3\":\"798459.26\",\"4\":\"841261.96\",\"5\":\"886401.63\",\"6\":\"955010.09\",\"7\":\"1027397.35\",\"8\":\"1103829.78\",\"9\":\"1184486.23\",\"_rn_\":\"6\"},{\"1\":\"Antigua and Barbuda\",\"2\":\"22086.25\",\"3\":\"22149.39\",\"4\":\"22182.92\",\"5\":\"22180.87\",\"6\":\"22560.87\",\"7\":\"22907.76\",\"8\":\"23221.29\",\"9\":\"23502.92\",\"_rn_\":\"7\"},{\"1\":\"Argentina\",\"2\":\"17753280.98\",\"3\":\"18124103.64\",\"4\":\"18510462.30\",\"5\":\"18918072.79\",\"6\":\"19329718.16\",\"7\":\"19763078.00\",\"8\":\"20211424.85\",\"9\":\"20664728.90\",\"_rn_\":\"8\"},{\"1\":\"Armenia\",\"2\":\"1337032.09\",\"3\":\"1392892.13\",\"4\":\"1449641.49\",\"5\":\"1507619.77\",\"6\":\"1564367.60\",\"7\":\"1622103.53\",\"8\":\"1680497.75\",\"9\":\"1739063.02\",\"_rn_\":\"9\"},{\"1\":\"Aruba\",\"2\":\"29414.72\",\"3\":\"29576.09\",\"4\":\"29737.87\",\"5\":\"29901.57\",\"6\":\"30081.36\",\"7\":\"30279.76\",\"8\":\"30467.42\",\"9\":\"30602.87\",\"_rn_\":\"10\"},{\"1\":\"Australia\",\"2\":\"9934404.03\",\"3\":\"10153969.77\",\"4\":\"10412390.67\",\"5\":\"10664093.55\",\"6\":\"11047706.39\",\"7\":\"11269945.50\",\"8\":\"11461120.68\",\"9\":\"11772934.25\",\"_rn_\":\"11\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nCongratulations! There seems to be a lot of missing data, but [`read.xls()`](http://www.rdocumentation.org/packages/gdata/functions/read.xls) knows how to handle it. In the next exercise you will learn which arguments you can use in `read.xls()`.\n\n### read.xls() wraps around read.table()\n\nRemember how <a href=\"http://www.rdocumentation.org/packages/gdata/functions/read.xls\" target=\"_blank\" rel=\"noopener noreferrer\">`read.xls()`</a> actually works? It basically comes down to two steps: converting the Excel file to a `.csv` file using a Perl script, and then reading that `.csv` file with the <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.csv()`</a> function that is loaded by default in R, through the `utils` package.\n\nThis means that all the options that you can specify in <a href=\"http://www.rdocumentation.org/packages/utils/functions/read.table\" target=\"_blank\" rel=\"noopener noreferrer\">`read.csv()`</a>, can also be specified in <a href=\"http://www.rdocumentation.org/packages/gdata/functions/read.xls\" target=\"_blank\" rel=\"noopener noreferrer\">`read.xls()`</a>.\n\nThe <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xls\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xls`</a> dataset is already available in your workspace. It's still comprised of three sheets, and has column names in the first row of each sheet.\n\n**Steps**\n\n1. Finish the `read.xls()` call that reads data from the second sheet of `urbanpop.xls`: skip the first 50 rows of the sheet. Make sure to set `header` appropriately and that the country names are not imported as factors.\n2. Print the first 10 observations of `urban_pop` with `head()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Column names for urban_pop\ncolumns <- c(\"country\", paste0(\"year_\", 1967:1974))\n\n# Finish the read.xls call\nurban_pop <- read.xls(\"data/urbanpop.xls\", sheet = 2,\n                      skip = 50, header = F, stringsAsFactors = F,\n                      col.names = columns)\n\n# Print first 10 observation of urban_pop\nhead(urban_pop, n = 10)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"country\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"year_1967\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1968\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1969\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1970\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1971\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1972\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1973\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"year_1974\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Cyprus\",\"2\":\"231929.74\",\"3\":\"237831.38\",\"4\":\"243983.34\",\"5\":\"250164.52\",\"6\":\"261213.21\",\"7\":\"272407.99\",\"8\":\"283774.90\",\"9\":\"295379.83\",\"_rn_\":\"1\"},{\"1\":\"Czech Republic\",\"2\":\"6204409.91\",\"3\":\"6266304.50\",\"4\":\"6326368.97\",\"5\":\"6348794.89\",\"6\":\"6437055.17\",\"7\":\"6572632.32\",\"8\":\"6718465.53\",\"9\":\"6873458.18\",\"_rn_\":\"2\"},{\"1\":\"Denmark\",\"2\":\"3777552.62\",\"3\":\"3826785.08\",\"4\":\"3874313.99\",\"5\":\"3930042.97\",\"6\":\"3981360.12\",\"7\":\"4028247.92\",\"8\":\"4076867.28\",\"9\":\"4120201.43\",\"_rn_\":\"3\"},{\"1\":\"Djibouti\",\"2\":\"77788.04\",\"3\":\"84694.35\",\"4\":\"92045.77\",\"5\":\"99845.22\",\"6\":\"107799.69\",\"7\":\"116098.23\",\"8\":\"125391.58\",\"9\":\"136606.25\",\"_rn_\":\"4\"},{\"1\":\"Dominica\",\"2\":\"27550.36\",\"3\":\"29527.32\",\"4\":\"31475.62\",\"5\":\"33328.25\",\"6\":\"34761.52\",\"7\":\"36049.99\",\"8\":\"37260.05\",\"9\":\"38501.47\",\"_rn_\":\"5\"},{\"1\":\"Dominican Republic\",\"2\":\"1535485.43\",\"3\":\"1625455.76\",\"4\":\"1718315.40\",\"5\":\"1814060.00\",\"6\":\"1915590.38\",\"7\":\"2020157.01\",\"8\":\"2127714.45\",\"9\":\"2238203.87\",\"_rn_\":\"6\"},{\"1\":\"Ecuador\",\"2\":\"2059355.12\",\"3\":\"2151395.14\",\"4\":\"2246890.79\",\"5\":\"2345864.41\",\"6\":\"2453817.78\",\"7\":\"2565644.81\",\"8\":\"2681525.25\",\"9\":\"2801692.62\",\"_rn_\":\"7\"},{\"1\":\"Egypt\",\"2\":\"13798171.00\",\"3\":\"14248342.19\",\"4\":\"14703858.22\",\"5\":\"15162858.52\",\"6\":\"15603661.36\",\"7\":\"16047814.69\",\"8\":\"16498633.27\",\"9\":\"16960827.93\",\"_rn_\":\"8\"},{\"1\":\"El Salvador\",\"2\":\"1345528.98\",\"3\":\"1387218.33\",\"4\":\"1429378.98\",\"5\":\"1472181.26\",\"6\":\"1527985.34\",\"7\":\"1584758.18\",\"8\":\"1642098.95\",\"9\":\"1699470.87\",\"_rn_\":\"9\"},{\"1\":\"Equatorial Guinea\",\"2\":\"75364.50\",\"3\":\"77295.03\",\"4\":\"78445.74\",\"5\":\"78411.07\",\"6\":\"77055.29\",\"7\":\"74596.06\",\"8\":\"71438.96\",\"9\":\"68179.26\",\"_rn_\":\"10\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Work that Excel data!\n\nNow that you can read in Excel data, let's try to clean and merge it. You already used the <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`cbind()`</a> function some exercises ago. Let's take it one step further now.\n\nThe <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xls\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xls`</a> dataset is available in your working directory. The file still contains three sheets, and has column names in the first row of each sheet.\n\n\n**Steps**\n\n1. Add code to read the data from the third sheet in `\"urbanpop.xls\"`. You want to end up with three data frames: `urban_sheet1`, `urban_sheet2` and `urban_sheet3`.\n2. Extend the `cbind()` call so that it also includes `urban_sheet3`. Make sure the first column of `urban_sheet2` and `urban_sheet3` are removed, so you don't have duplicate columns. Store the result in `urban`.\n3. Use <a href=\"http://www.rdocumentation.org/packages/stats/functions/na.fail\" target=\"_blank\" rel=\"noopener noreferrer\">`na.omit()`</a> on the `urban` data frame to remove all rows that contain `NA` values. Store the cleaned data frame as `urban_clean`.\n4. Print a summary of `urban_clean` and assert that there are no more `NA` values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Add code to import data from all three sheets in urbanpop.xls\npath <- \"data/urbanpop.xls\"\nurban_sheet1 <- read.xls(path, sheet = 1, stringsAsFactors = FALSE)\nurban_sheet2 <- read.xls(path, sheet = 2, stringsAsFactors = FALSE)\nurban_sheet3 <- read.xls(path, sheet = 3, stringsAsFactors = FALSE)\n\n# Extend the cbind() call to include urban_sheet3: urban\nurban <- cbind(urban_sheet1, urban_sheet2[-1], urban_sheet3[-1])\n\n# Remove all rows with NAs from urban: urban_clean\nurban_clean <- na.omit(urban)\n\n# Print out a summary of urban_clean\nsummary(urban_clean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    country              X1960               X1961               X1962          \n#>  Length:197         Min.   :     3378   Min.   :     3433   Min.   :     3481  \n#>  Class :character   1st Qu.:    87735   1st Qu.:    92905   1st Qu.:    98331  \n#>  Mode  :character   Median :   599714   Median :   630788   Median :   659464  \n#>                     Mean   :  5012388   Mean   :  5282488   Mean   :  5440972  \n#>                     3rd Qu.:  3130085   3rd Qu.:  3155370   3rd Qu.:  3250211  \n#>                     Max.   :126469700   Max.   :129268133   Max.   :131974143  \n#>      X1963               X1964               X1965          \n#>  Min.   :     3532   Min.   :     3586   Min.   :     3644  \n#>  1st Qu.:   104988   1st Qu.:   112084   1st Qu.:   119322  \n#>  Median :   704989   Median :   740609   Median :   774957  \n#>  Mean   :  5612312   Mean   :  5786961   Mean   :  5964970  \n#>  3rd Qu.:  3416490   3rd Qu.:  3585464   3rd Qu.:  3666724  \n#>  Max.   :134599886   Max.   :137205240   Max.   :139663053  \n#>      X1966               X1967               X1968          \n#>  Min.   :     3706   Min.   :     3771   Min.   :     3835  \n#>  1st Qu.:   128565   1st Qu.:   138024   1st Qu.:   147846  \n#>  Median :   809768   Median :   838449   Median :   890270  \n#>  Mean   :  6126413   Mean   :  6288771   Mean   :  6451367  \n#>  3rd Qu.:  3871757   3rd Qu.:  4019906   3rd Qu.:  4158186  \n#>  Max.   :141962708   Max.   :144201722   Max.   :146340364  \n#>      X1969               X1970               X1971          \n#>  Min.   :     3893   Min.   :     3941   Min.   :     4017  \n#>  1st Qu.:   158252   1st Qu.:   171063   1st Qu.:   181483  \n#>  Median :   929450   Median :   976471   Median :  1008630  \n#>  Mean   :  6624909   Mean   :  6799110   Mean   :  6980895  \n#>  3rd Qu.:  4300669   3rd Qu.:  4440047   3rd Qu.:  4595966  \n#>  Max.   :148475901   Max.   :150922373   Max.   :152863831  \n#>      X1972               X1973               X1974          \n#>  Min.   :     4084   Min.   :     4146   Min.   :     4206  \n#>  1st Qu.:   189492   1st Qu.:   197792   1st Qu.:   205410  \n#>  Median :  1048738   Median :  1097293   Median :  1159402  \n#>  Mean   :  7165338   Mean   :  7349454   Mean   :  7540446  \n#>  3rd Qu.:  4766545   3rd Qu.:  4838297   3rd Qu.:  4906384  \n#>  Max.   :154530473   Max.   :156034106   Max.   :157488074  \n#>      X1975               X1976               X1977          \n#>  Min.   :     4267   Min.   :     4334   Min.   :     4402  \n#>  1st Qu.:   211746   1st Qu.:   216991   1st Qu.:   222209  \n#>  Median :  1223146   Median :  1249829   Median :  1311276  \n#>  Mean   :  7731973   Mean   :  7936401   Mean   :  8145945  \n#>  3rd Qu.:  5003370   3rd Qu.:  5121118   3rd Qu.:  5227677  \n#>  Max.   :159452730   Max.   :165583752   Max.   :171550310  \n#>      X1978               X1979               X1980          \n#>  Min.   :     4470   Min.   :     4539   Min.   :     4607  \n#>  1st Qu.:   227605   1st Qu.:   233461   1st Qu.:   242583  \n#>  Median :  1340811   Median :  1448185   Median :  1592397  \n#>  Mean   :  8361360   Mean   :  8583138   Mean   :  8808772  \n#>  3rd Qu.:  5352746   3rd Qu.:  5558850   3rd Qu.:  5815772  \n#>  Max.   :177605736   Max.   :183785364   Max.   :189947471  \n#>      X1981               X1982               X1983          \n#>  Min.   :     4645   Min.   :     4681   Min.   :     4716  \n#>  1st Qu.:   248948   1st Qu.:   257944   1st Qu.:   274139  \n#>  Median :  1673079   Median :  1713060   Median :  1730626  \n#>  Mean   :  9049163   Mean   :  9295226   Mean   :  9545035  \n#>  3rd Qu.:  6070457   3rd Qu.:  6337995   3rd Qu.:  6619987  \n#>  Max.   :199385258   Max.   :209435968   Max.   :219680098  \n#>      X1984               X1985               X1986          \n#>  Min.   :     4750   Min.   :     4782   Min.   :     4809  \n#>  1st Qu.:   284939   1st Qu.:   300928   1st Qu.:   307699  \n#>  Median :  1749033   Median :  1786125   Median :  1850910  \n#>  Mean   :  9798559   Mean   : 10058661   Mean   : 10323839  \n#>  3rd Qu.:  6918261   3rd Qu.:  6931780   3rd Qu.:  6935763  \n#>  Max.   :229872397   Max.   :240414890   Max.   :251630158  \n#>      X1987               X1988               X1989          \n#>  Min.   :     4835   Min.   :     4859   Min.   :     4883  \n#>  1st Qu.:   321125   1st Qu.:   334616   1st Qu.:   347348  \n#>  Median :  1953694   Median :  1997011   Median :  1993544  \n#>  Mean   : 10595817   Mean   : 10873041   Mean   : 11154458  \n#>  3rd Qu.:  6939905   3rd Qu.:  6945022   3rd Qu.:  6885378  \n#>  Max.   :263433513   Max.   :275570541   Max.   :287810747  \n#>      X1990               X1991               X1992          \n#>  Min.   :     4907   Min.   :     4946   Min.   :     4985  \n#>  1st Qu.:   370152   1st Qu.:   394611   1st Qu.:   418788  \n#>  Median :  2066505   Median :  2150230   Median :  2237405  \n#>  Mean   : 11438543   Mean   : 11725076   Mean   : 12010922  \n#>  3rd Qu.:  6830026   3rd Qu.:  6816589   3rd Qu.:  6820099  \n#>  Max.   :300165618   Max.   :314689997   Max.   :329099365  \n#>      X1993               X1994               X1995          \n#>  Min.   :     5024   Min.   :     5062   Min.   :     5100  \n#>  1st Qu.:   427457   1st Qu.:   435959   1st Qu.:   461993  \n#>  Median :  2322158   Median :  2410297   Median :  2482393  \n#>  Mean   : 12296949   Mean   : 12582930   Mean   : 12871480  \n#>  3rd Qu.:  7139656   3rd Qu.:  7499901   3rd Qu.:  7708571  \n#>  Max.   :343555327   Max.   :358232230   Max.   :373035157  \n#>      X1996               X1997               X1998          \n#>  Min.   :     5079   Min.   :     5055   Min.   :     5029  \n#>  1st Qu.:   488136   1st Qu.:   494203   1st Qu.:   498002  \n#>  Median :  2522460   Median :  2606125   Median :  2664983  \n#>  Mean   : 13165924   Mean   : 13463675   Mean   : 13762861  \n#>  3rd Qu.:  7686092   3rd Qu.:  7664316   3rd Qu.:  7784056  \n#>  Max.   :388936607   Max.   :405031716   Max.   :421147610  \n#>      X1999               X2000               X2001          \n#>  Min.   :     5001   Min.   :     4971   Min.   :     5003  \n#>  1st Qu.:   505144   1st Qu.:   525629   1st Qu.:   550638  \n#>  Median :  2737809   Median :  2826647   Median :  2925851  \n#>  Mean   : 14063387   Mean   : 14369278   Mean   : 14705743  \n#>  3rd Qu.:  8083488   3rd Qu.:  8305564   3rd Qu.:  8421967  \n#>  Max.   :437126845   Max.   :452999147   Max.   :473204511  \n#>      X2002               X2003               X2004          \n#>  Min.   :     5034   Min.   :     5064   Min.   :     5090  \n#>  1st Qu.:   567531   1st Qu.:   572094   1st Qu.:   593900  \n#>  Median :  2928252   Median :  2944934   Median :  2994356  \n#>  Mean   : 15043381   Mean   : 15384513   Mean   : 15730299  \n#>  3rd Qu.:  8448628   3rd Qu.:  8622732   3rd Qu.:  8999112  \n#>  Max.   :493402140   Max.   :513607776   Max.   :533892175  \n#>      X2005               X2006               X2007          \n#>  Min.   :     5111   Min.   :     5135   Min.   :     5155  \n#>  1st Qu.:   620511   1st Qu.:   632659   1st Qu.:   645172  \n#>  Median :  3057923   Median :  3269963   Median :  3432024  \n#>  Mean   : 16080262   Mean   : 16435872   Mean   : 16797484  \n#>  3rd Qu.:  9394001   3rd Qu.:  9689807   3rd Qu.:  9803381  \n#>  Max.   :554367818   Max.   :575050081   Max.   :595731464  \n#>      X2008               X2009               X2010          \n#>  Min.   :     5172   Min.   :     5189   Min.   :     5206  \n#>  1st Qu.:   658017   1st Qu.:   671085   1st Qu.:   684302  \n#>  Median :  3589395   Median :  3652338   Median :  3676309  \n#>  Mean   : 17164898   Mean   : 17533997   Mean   : 17904811  \n#>  3rd Qu.: 10210317   3rd Qu.: 10518289   3rd Qu.: 10618596  \n#>  Max.   :616552722   Max.   :637533976   Max.   :658557734  \n#>      X2011          \n#>  Min.   :     5233  \n#>  1st Qu.:   698009  \n#>  Median :  3664664  \n#>  Mean   : 18276297  \n#>  3rd Qu.: 10731193  \n#>  Max.   :678796403\n```\n:::\n:::\n\n\nAwesome! Time for something totally different: `XLConnect`.\n\n# Reproducible Excel work with XLConnect\n\nBeyond importing data from Excel, you can take things one step further with XLConnect. Learn all about it and bridge the gap between R and Excel.\n\n### Reading sheets\n\nTheory. Coming soon ...\n\n**1. Reading sheets**\n\nYou already got to know two very useful packages to work with Excel data - the readxl package and the gdata package. Now imagine this situation.\n\n**2. Insert title here...**\n\nYou're working in a big company that uses Excel for all there analysis work. You are forced to work on and deliver these Excel files, but you want to work on the data through R, so that you can modify the files in a reproducible way? I'm happy to tell you that there is a package that does just that:\n\n**3. XLConnect**\n\nXLConnect, written and maintained by Martin Studer. He created one of the most comprehensive packages for working with Excel files through R.You can think of XLConnect as a bridge between Excel and R. That means you can do practically any action you could do within Excel but you do it from inside R. Editing Excel sheets, formatting data and adapting entire calculation sheets, you name it. XLConnect has a function for it. XLConnect works with xls and xlsx files, and has easy-to-use functions.To get this all working so smoothly, XLConnect depends on Java. This is totally abstracted away for us end-users, but installing the package can have its difficulties.\n\n**4. Installation**\n\nIf you're starting from a reasonably clean computing environment, this traditional install-dot-packages command will work fine. From the messaging, you'll see that it also installs the XLConnectJars package containing Java files and class definitions that XLConnect depends on. If it wasn't installed already, the rJava package will also be installed, providing a low-level R to Java interface that XLConnect uses.If something goes wrong during installation, it's possible that you first have to install the Java Development Kit, or JDK, from Oracle's web site. If things still don't work out, I suggest you google the errors you're getting: there's quite some people using this package so help is never far away.With our package installed and not to forget, loaded,\n\n**5. loadWorkbook()**\n\nlet's take the first step: loading a workbook into R. You do this with the loadWorkbook function, by simply passing the name of the excel file you want to interface to. Assuming that our cities-dot-xlsx file is still in the current working directory, this call works.If you have a look at the structure of book, we see that it is a so-called workbook object. This object is the actual \"bridge\" between R and Excel I talked about earlier.After building a workbook object in R, you can use it to get information on the Excel file it links to. To get the names of the different sheets,\n\n**6. getSheets()**\n\nfor example, you can use getSheets.The result is exactly the same to the excel_sheets function from readxl: a character vector containing the two sheet names.Apart from sheet information,\n\n**7. readWorksheet()**\n\nyou can also read the actual data from the sheets, like readxl's read_excel function and gdata's read dot xls function. Suppose we want to import the data from the year_2000 sheet as a data frame. As the first argument to readWorksheet, we pass the workbook object, book in our case. The second argument, sheet, is the name or index of the sheet you want to import from.Works just like before. The cool thing here is, that you can easily specify from which row and which column to start reading information.\n\n**8. readWorksheet()**\n\nSay you only want the population information for Berlin and Madrid. You can simply set startRow to 3, endRow to 4 and startCol to 2. Because you skipped the first row, the column names are also skipped, so you should set header to FALSE.\n\n## Connect to a workbook\n\nWhen working with `XLConnect`, the first step will be to load a workbook in your R session with <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/loadWorkbook\" target=\"_blank\" rel=\"noopener noreferrer\">`loadWorkbook()`</a>; this function will build a \"bridge\" between your Excel file and your R session.\n\nIn this and the following exercises, you will continue to work with <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a>, containing urban population data throughout time. The Excel file is available in your current working directory.\n\n**Steps**\n\n1. Load the `XLConnect` package using <a href=\"http://www.rdocumentation.org/packages/base/functions/library\" target=\"_blank\" rel=\"noopener noreferrer\">`library()`</a>; it is already installed on DataCamp's servers.\n2. Use <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/loadWorkbook\" target=\"_blank\" rel=\"noopener noreferrer\">`loadWorkbook()`</a> to build a connection to the `\"urbanpop.xlsx\"` file in R. Call the workbook `my_book`.\n3. Print out the class of `my_book`. What does this tell you?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the XLConnect package\nlibrary(\"XLConnect\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> XLConnect 1.0.6 by Mirai Solutions GmbH [aut],\n#>   Martin Studer [cre],\n#>   The Apache Software Foundation [ctb, cph] (Apache POI),\n#>   Graph Builder [ctb, cph] (Curvesapi Java library),\n#>   Brett Woolridge [ctb, cph] (SparseBitSet Java library)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> https://mirai-solutions.ch\n#> https://github.com/miraisolutions/xlconnect\n```\n:::\n\n```{.r .cell-code}\n# Build connection to urbanpop.xlsx: my_book\nmy_book <- loadWorkbook(\"data/urbanpop.xlsx\")\n\n# Print out the class of my_book\nclass(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"workbook\"\n#> attr(,\"package\")\n#> [1] \"XLConnect\"\n```\n:::\n:::\n\n\n\n## List and read Excel sheets\n\nJust as `readxl` and `gdata`, you can use `XLConnect` to import data from Excel file into R.\n\nTo list the sheets in an Excel file, use <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/getSheets-methods\" target=\"_blank\" rel=\"noopener noreferrer\">`getSheets()`</a>. To actually import data from a sheet, you can use <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/readWorksheet-methods\" target=\"_blank\" rel=\"noopener noreferrer\">`readWorksheet()`</a>. Both functions require an XLConnect workbook object as the first argument.\n\nYou'll again be working with <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a>. The `my_book` object that links to this Excel file has already been created.\n\n\n**Steps**\n\n1. Print out the sheets of the Excel file that `my_book` links to.\n2. Import the second sheet in `my_book` as a data frame. Print it out.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"data/urbanpop.xlsx\")\n\n# List the sheets in my_book\ngetSheets(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"1960-1966\" \"1967-1974\" \"1975-2011\"\n```\n:::\n\n```{.r .cell-code}\n# Import the second sheet in my_book\nreadWorksheet(my_book, \"1967-1974\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"country\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"X1967\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1968\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1969\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1970\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1971\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1972\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1973\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"X1974\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Afghanistan\",\"2\":\"1.119067e+06\",\"3\":\"1.182159e+06\",\"4\":\"1.248901e+06\",\"5\":\"1.319849e+06\",\"6\":\"1.409001e+06\",\"7\":\"1.502402e+06\",\"8\":\"1.598835e+06\",\"9\":\"1.696445e+06\"},{\"1\":\"Albania\",\"2\":\"6.211798e+05\",\"3\":\"6.399645e+05\",\"4\":\"6.588531e+05\",\"5\":\"6.778391e+05\",\"6\":\"6.989322e+05\",\"7\":\"7.202066e+05\",\"8\":\"7.416810e+05\",\"9\":\"7.633855e+05\"},{\"1\":\"Algeria\",\"2\":\"4.826104e+06\",\"3\":\"5.017299e+06\",\"4\":\"5.219332e+06\",\"5\":\"5.429743e+06\",\"6\":\"5.619042e+06\",\"7\":\"5.815734e+06\",\"8\":\"6.020647e+06\",\"9\":\"6.235114e+06\"},{\"1\":\"American Samoa\",\"2\":\"1.734866e+04\",\"3\":\"1.799551e+04\",\"4\":\"1.861868e+04\",\"5\":\"1.920639e+04\",\"6\":\"1.975202e+04\",\"7\":\"2.026267e+04\",\"8\":\"2.074197e+04\",\"9\":\"2.119438e+04\"},{\"1\":\"Andorra\",\"2\":\"1.543962e+04\",\"3\":\"1.672699e+04\",\"4\":\"1.808832e+04\",\"5\":\"1.952896e+04\",\"6\":\"2.092873e+04\",\"7\":\"2.240584e+04\",\"8\":\"2.393705e+04\",\"9\":\"2.548198e+04\"},{\"1\":\"Angola\",\"2\":\"7.574963e+05\",\"3\":\"7.984593e+05\",\"4\":\"8.412620e+05\",\"5\":\"8.864016e+05\",\"6\":\"9.550101e+05\",\"7\":\"1.027397e+06\",\"8\":\"1.103830e+06\",\"9\":\"1.184486e+06\"},{\"1\":\"Antigua and Barbuda\",\"2\":\"2.208625e+04\",\"3\":\"2.214939e+04\",\"4\":\"2.218292e+04\",\"5\":\"2.218087e+04\",\"6\":\"2.256087e+04\",\"7\":\"2.290776e+04\",\"8\":\"2.322129e+04\",\"9\":\"2.350292e+04\"},{\"1\":\"Argentina\",\"2\":\"1.775328e+07\",\"3\":\"1.812410e+07\",\"4\":\"1.851046e+07\",\"5\":\"1.891807e+07\",\"6\":\"1.932972e+07\",\"7\":\"1.976308e+07\",\"8\":\"2.021142e+07\",\"9\":\"2.066473e+07\"},{\"1\":\"Armenia\",\"2\":\"1.337032e+06\",\"3\":\"1.392892e+06\",\"4\":\"1.449641e+06\",\"5\":\"1.507620e+06\",\"6\":\"1.564368e+06\",\"7\":\"1.622104e+06\",\"8\":\"1.680498e+06\",\"9\":\"1.739063e+06\"},{\"1\":\"Aruba\",\"2\":\"2.941472e+04\",\"3\":\"2.957609e+04\",\"4\":\"2.973787e+04\",\"5\":\"2.990157e+04\",\"6\":\"3.008136e+04\",\"7\":\"3.027976e+04\",\"8\":\"3.046742e+04\",\"9\":\"3.060287e+04\"},{\"1\":\"Australia\",\"2\":\"9.934404e+06\",\"3\":\"1.015397e+07\",\"4\":\"1.041239e+07\",\"5\":\"1.066409e+07\",\"6\":\"1.104771e+07\",\"7\":\"1.126995e+07\",\"8\":\"1.146112e+07\",\"9\":\"1.177293e+07\"},{\"1\":\"Austria\",\"2\":\"4.803149e+06\",\"3\":\"4.831817e+06\",\"4\":\"4.852208e+06\",\"5\":\"4.872871e+06\",\"6\":\"4.895910e+06\",\"7\":\"4.925699e+06\",\"8\":\"4.954325e+06\",\"9\":\"4.964026e+06\"},{\"1\":\"Azerbaijan\",\"2\":\"2.446990e+06\",\"3\":\"2.495725e+06\",\"4\":\"2.542062e+06\",\"5\":\"2.586413e+06\",\"6\":\"2.660993e+06\",\"7\":\"2.734825e+06\",\"8\":\"2.807955e+06\",\"9\":\"2.880447e+06\"},{\"1\":\"Bahamas\",\"2\":\"9.868390e+04\",\"3\":\"1.036697e+05\",\"4\":\"1.084730e+05\",\"5\":\"1.130101e+05\",\"6\":\"1.171566e+05\",\"7\":\"1.209989e+05\",\"8\":\"1.246644e+05\",\"9\":\"1.283499e+05\"},{\"1\":\"Bahrain\",\"2\":\"1.619616e+05\",\"3\":\"1.663785e+05\",\"4\":\"1.714590e+05\",\"5\":\"1.775008e+05\",\"6\":\"1.844398e+05\",\"7\":\"1.923163e+05\",\"8\":\"2.014935e+05\",\"9\":\"2.124162e+05\"},{\"1\":\"Bangladesh\",\"2\":\"4.173453e+06\",\"3\":\"4.484842e+06\",\"4\":\"4.790505e+06\",\"5\":\"5.078286e+06\",\"6\":\"5.456170e+06\",\"7\":\"5.812548e+06\",\"8\":\"6.161815e+06\",\"9\":\"6.530579e+06\"},{\"1\":\"Barbados\",\"2\":\"8.819371e+04\",\"3\":\"8.858041e+04\",\"4\":\"8.902489e+04\",\"5\":\"8.956543e+04\",\"6\":\"9.055245e+04\",\"7\":\"9.164208e+04\",\"8\":\"9.277639e+04\",\"9\":\"9.387156e+04\"},{\"1\":\"Belarus\",\"2\":\"3.556448e+06\",\"3\":\"3.696854e+06\",\"4\":\"3.838003e+06\",\"5\":\"3.978504e+06\",\"6\":\"4.132164e+06\",\"7\":\"4.286801e+06\",\"8\":\"4.440936e+06\",\"9\":\"4.592935e+06\"},{\"1\":\"Belgium\",\"2\":\"8.950504e+06\",\"3\":\"8.999366e+06\",\"4\":\"9.038506e+06\",\"5\":\"9.061057e+06\",\"6\":\"9.089909e+06\",\"7\":\"9.137946e+06\",\"8\":\"9.179155e+06\",\"9\":\"9.220531e+06\"},{\"1\":\"Belize\",\"2\":\"5.879024e+04\",\"3\":\"5.971173e+04\",\"4\":\"6.049220e+04\",\"5\":\"6.114133e+04\",\"6\":\"6.183991e+04\",\"7\":\"6.240329e+04\",\"8\":\"6.294338e+04\",\"9\":\"6.362671e+04\"},{\"1\":\"Benin\",\"2\":\"3.820221e+05\",\"3\":\"4.118595e+05\",\"4\":\"4.430131e+05\",\"5\":\"4.756114e+05\",\"6\":\"5.158195e+05\",\"7\":\"5.579376e+05\",\"8\":\"6.020932e+05\",\"9\":\"6.484097e+05\"},{\"1\":\"Bermuda\",\"2\":\"5.200000e+04\",\"3\":\"5.300000e+04\",\"4\":\"5.400000e+04\",\"5\":\"5.500000e+04\",\"6\":\"5.460000e+04\",\"7\":\"5.420000e+04\",\"8\":\"5.380000e+04\",\"9\":\"5.340000e+04\"},{\"1\":\"Bhutan\",\"2\":\"1.437897e+04\",\"3\":\"1.561689e+04\",\"4\":\"1.694642e+04\",\"5\":\"1.838141e+04\",\"6\":\"2.017266e+04\",\"7\":\"2.209976e+04\",\"8\":\"2.415974e+04\",\"9\":\"2.634254e+04\"},{\"1\":\"Bolivia\",\"2\":\"1.527065e+06\",\"3\":\"1.575177e+06\",\"4\":\"1.625173e+06\",\"5\":\"1.677184e+06\",\"6\":\"1.731437e+06\",\"7\":\"1.787719e+06\",\"8\":\"1.845894e+06\",\"9\":\"1.905749e+06\"},{\"1\":\"Bosnia and Herzegovina\",\"2\":\"8.516924e+05\",\"3\":\"8.902697e+05\",\"4\":\"9.294496e+05\",\"5\":\"9.695495e+05\",\"6\":\"1.008630e+06\",\"7\":\"1.048738e+06\",\"8\":\"1.089648e+06\",\"9\":\"1.130966e+06\"},{\"1\":\"Botswana\",\"2\":\"3.431976e+04\",\"3\":\"4.057616e+04\",\"4\":\"4.722223e+04\",\"5\":\"5.428641e+04\",\"6\":\"6.186900e+04\",\"7\":\"6.992963e+04\",\"8\":\"7.852997e+04\",\"9\":\"8.775392e+04\"},{\"1\":\"Brazil\",\"2\":\"4.719352e+07\",\"3\":\"4.931688e+07\",\"4\":\"5.148910e+07\",\"5\":\"5.371642e+07\",\"6\":\"5.600051e+07\",\"7\":\"5.834048e+07\",\"8\":\"6.074473e+07\",\"9\":\"6.322438e+07\"},{\"1\":\"Brunei\",\"2\":\"6.128905e+04\",\"3\":\"6.622218e+04\",\"4\":\"7.150276e+04\",\"5\":\"7.714802e+04\",\"6\":\"8.088400e+04\",\"7\":\"8.478142e+04\",\"8\":\"8.880798e+04\",\"9\":\"9.291945e+04\"},{\"1\":\"Bulgaria\",\"2\":\"4.019906e+06\",\"3\":\"4.158186e+06\",\"4\":\"4.300669e+06\",\"5\":\"4.440047e+06\",\"6\":\"4.554372e+06\",\"7\":\"4.665864e+06\",\"8\":\"4.780947e+06\",\"9\":\"4.904324e+06\"},{\"1\":\"Burkina Faso\",\"2\":\"2.968238e+05\",\"3\":\"3.086611e+05\",\"4\":\"3.209607e+05\",\"5\":\"3.336985e+05\",\"6\":\"3.475107e+05\",\"7\":\"3.618362e+05\",\"8\":\"3.767243e+05\",\"9\":\"3.922410e+05\"},{\"1\":\"Burundi\",\"2\":\"7.616560e+04\",\"3\":\"7.881625e+04\",\"4\":\"8.135573e+04\",\"5\":\"8.369155e+04\",\"6\":\"9.049313e+04\",\"7\":\"9.717071e+04\",\"8\":\"1.038732e+05\",\"9\":\"1.108747e+05\"},{\"1\":\"Cambodia\",\"2\":\"8.357562e+05\",\"3\":\"9.263155e+05\",\"4\":\"1.017799e+06\",\"5\":\"1.107998e+06\",\"6\":\"9.614523e+05\",\"7\":\"8.076237e+05\",\"8\":\"6.470452e+05\",\"9\":\"4.811320e+05\"},{\"1\":\"Cameroon\",\"2\":\"1.157892e+06\",\"3\":\"1.231243e+06\",\"4\":\"1.308158e+06\",\"5\":\"1.388878e+06\",\"6\":\"1.523689e+06\",\"7\":\"1.665342e+06\",\"8\":\"1.814545e+06\",\"9\":\"1.972201e+06\"},{\"1\":\"Canada\",\"2\":\"1.510423e+07\",\"3\":\"1.546449e+07\",\"4\":\"1.579236e+07\",\"5\":\"1.613246e+07\",\"6\":\"1.637385e+07\",\"7\":\"1.663528e+07\",\"8\":\"1.691758e+07\",\"9\":\"1.722167e+07\"},{\"1\":\"Cape Verde\",\"2\":\"4.724476e+04\",\"3\":\"4.923400e+04\",\"4\":\"5.135658e+04\",\"5\":\"5.364682e+04\",\"6\":\"5.638241e+04\",\"7\":\"5.931521e+04\",\"8\":\"6.221562e+04\",\"9\":\"6.475257e+04\"},{\"1\":\"Cayman Islands\",\"2\":\"8.875000e+03\",\"3\":\"9.002000e+03\",\"4\":\"9.216000e+03\",\"5\":\"9.545000e+03\",\"6\":\"1.000400e+04\",\"7\":\"1.058100e+04\",\"8\":\"1.125300e+04\",\"9\":\"1.199000e+04\"},{\"1\":\"Central African Republic\",\"2\":\"4.303721e+05\",\"3\":\"4.529338e+05\",\"4\":\"4.761054e+05\",\"5\":\"4.997496e+05\",\"6\":\"5.268630e+05\",\"7\":\"5.546158e+05\",\"8\":\"5.832534e+05\",\"9\":\"6.131560e+05\"},{\"1\":\"Chad\",\"2\":\"3.315042e+05\",\"3\":\"3.605791e+05\",\"4\":\"3.909776e+05\",\"5\":\"4.229151e+05\",\"6\":\"4.628673e+05\",\"7\":\"5.049060e+05\",\"8\":\"5.488032e+05\",\"9\":\"5.940966e+05\"},{\"1\":\"Channel Islands\",\"2\":\"4.329456e+04\",\"3\":\"4.344349e+04\",\"4\":\"4.358417e+04\",\"5\":\"4.371195e+04\",\"6\":\"4.368323e+04\",\"7\":\"4.363962e+04\",\"8\":\"4.355859e+04\",\"9\":\"4.341204e+04\"},{\"1\":\"Chile\",\"2\":\"6.606825e+06\",\"3\":\"6.805959e+06\",\"4\":\"7.005123e+06\",\"5\":\"7.204920e+06\",\"6\":\"7.398470e+06\",\"7\":\"7.592419e+06\",\"8\":\"7.785880e+06\",\"9\":\"7.977602e+06\"},{\"1\":\"China\",\"2\":\"1.343974e+08\",\"3\":\"1.368900e+08\",\"4\":\"1.396005e+08\",\"5\":\"1.423868e+08\",\"6\":\"1.463523e+08\",\"7\":\"1.499932e+08\",\"8\":\"1.534576e+08\",\"9\":\"1.566609e+08\"},{\"1\":\"Colombia\",\"2\":\"1.033119e+07\",\"3\":\"1.078053e+07\",\"4\":\"1.123560e+07\",\"5\":\"1.169300e+07\",\"6\":\"1.214719e+07\",\"7\":\"1.260270e+07\",\"8\":\"1.306371e+07\",\"9\":\"1.353659e+07\"},{\"1\":\"Comoros\",\"2\":\"3.978906e+04\",\"3\":\"4.183902e+04\",\"4\":\"4.396565e+04\",\"5\":\"4.615440e+04\",\"6\":\"4.811136e+04\",\"7\":\"5.012270e+04\",\"8\":\"5.227286e+04\",\"9\":\"5.468356e+04\"},{\"1\":\"Congo, Dem. Rep.\",\"2\":\"5.161472e+06\",\"3\":\"5.475208e+06\",\"4\":\"5.802069e+06\",\"5\":\"6.140904e+06\",\"6\":\"6.282834e+06\",\"7\":\"6.425372e+06\",\"8\":\"6.570538e+06\",\"9\":\"6.721175e+06\"},{\"1\":\"Congo, Rep.\",\"2\":\"4.506698e+05\",\"3\":\"4.733352e+05\",\"4\":\"4.972107e+05\",\"5\":\"5.224066e+05\",\"6\":\"5.497894e+05\",\"7\":\"5.786398e+05\",\"8\":\"6.088504e+05\",\"9\":\"6.402364e+05\"},{\"1\":\"Costa Rica\",\"2\":\"6.217858e+05\",\"3\":\"6.499164e+05\",\"4\":\"6.782539e+05\",\"5\":\"7.067986e+05\",\"6\":\"7.335459e+05\",\"7\":\"7.604308e+05\",\"8\":\"7.879183e+05\",\"9\":\"8.166588e+05\"},{\"1\":\"Cote d'Ivoire\",\"2\":\"1.243350e+06\",\"3\":\"1.330719e+06\",\"4\":\"1.424438e+06\",\"5\":\"1.525425e+06\",\"6\":\"1.638738e+06\",\"7\":\"1.760508e+06\",\"8\":\"1.891241e+06\",\"9\":\"2.031395e+06\"},{\"1\":\"Croatia\",\"2\":\"1.608233e+06\",\"3\":\"1.663051e+06\",\"4\":\"1.717607e+06\",\"5\":\"1.773046e+06\",\"6\":\"1.826422e+06\",\"7\":\"1.879428e+06\",\"8\":\"1.932436e+06\",\"9\":\"1.984976e+06\"},{\"1\":\"Cuba\",\"2\":\"4.927341e+06\",\"3\":\"5.032014e+06\",\"4\":\"5.137260e+06\",\"5\":\"5.244279e+06\",\"6\":\"5.407254e+06\",\"7\":\"5.572975e+06\",\"8\":\"5.738231e+06\",\"9\":\"5.898512e+06\"},{\"1\":\"Cyprus\",\"2\":\"2.319297e+05\",\"3\":\"2.378314e+05\",\"4\":\"2.439833e+05\",\"5\":\"2.501645e+05\",\"6\":\"2.612132e+05\",\"7\":\"2.724080e+05\",\"8\":\"2.837749e+05\",\"9\":\"2.953798e+05\"},{\"1\":\"Czech Republic\",\"2\":\"6.204410e+06\",\"3\":\"6.266305e+06\",\"4\":\"6.326369e+06\",\"5\":\"6.348795e+06\",\"6\":\"6.437055e+06\",\"7\":\"6.572632e+06\",\"8\":\"6.718466e+06\",\"9\":\"6.873458e+06\"},{\"1\":\"Denmark\",\"2\":\"3.777553e+06\",\"3\":\"3.826785e+06\",\"4\":\"3.874314e+06\",\"5\":\"3.930043e+06\",\"6\":\"3.981360e+06\",\"7\":\"4.028248e+06\",\"8\":\"4.076867e+06\",\"9\":\"4.120201e+06\"},{\"1\":\"Djibouti\",\"2\":\"7.778804e+04\",\"3\":\"8.469435e+04\",\"4\":\"9.204577e+04\",\"5\":\"9.984522e+04\",\"6\":\"1.077997e+05\",\"7\":\"1.160982e+05\",\"8\":\"1.253916e+05\",\"9\":\"1.366062e+05\"},{\"1\":\"Dominica\",\"2\":\"2.755036e+04\",\"3\":\"2.952732e+04\",\"4\":\"3.147562e+04\",\"5\":\"3.332825e+04\",\"6\":\"3.476152e+04\",\"7\":\"3.604999e+04\",\"8\":\"3.726005e+04\",\"9\":\"3.850147e+04\"},{\"1\":\"Dominican Republic\",\"2\":\"1.535485e+06\",\"3\":\"1.625456e+06\",\"4\":\"1.718315e+06\",\"5\":\"1.814060e+06\",\"6\":\"1.915590e+06\",\"7\":\"2.020157e+06\",\"8\":\"2.127714e+06\",\"9\":\"2.238204e+06\"},{\"1\":\"Ecuador\",\"2\":\"2.059355e+06\",\"3\":\"2.151395e+06\",\"4\":\"2.246891e+06\",\"5\":\"2.345864e+06\",\"6\":\"2.453818e+06\",\"7\":\"2.565645e+06\",\"8\":\"2.681525e+06\",\"9\":\"2.801693e+06\"},{\"1\":\"Egypt\",\"2\":\"1.379817e+07\",\"3\":\"1.424834e+07\",\"4\":\"1.470386e+07\",\"5\":\"1.516286e+07\",\"6\":\"1.560366e+07\",\"7\":\"1.604781e+07\",\"8\":\"1.649863e+07\",\"9\":\"1.696083e+07\"},{\"1\":\"El Salvador\",\"2\":\"1.345529e+06\",\"3\":\"1.387218e+06\",\"4\":\"1.429379e+06\",\"5\":\"1.472181e+06\",\"6\":\"1.527985e+06\",\"7\":\"1.584758e+06\",\"8\":\"1.642099e+06\",\"9\":\"1.699471e+06\"},{\"1\":\"Equatorial Guinea\",\"2\":\"7.536450e+04\",\"3\":\"7.729503e+04\",\"4\":\"7.844574e+04\",\"5\":\"7.841107e+04\",\"6\":\"7.705529e+04\",\"7\":\"7.459606e+04\",\"8\":\"7.143896e+04\",\"9\":\"6.817926e+04\"},{\"1\":\"Eritrea\",\"2\":\"2.025150e+05\",\"3\":\"2.121646e+05\",\"4\":\"2.221863e+05\",\"5\":\"2.325927e+05\",\"6\":\"2.420318e+05\",\"7\":\"2.517894e+05\",\"8\":\"2.620127e+05\",\"9\":\"2.729047e+05\"},{\"1\":\"Estonia\",\"2\":\"8.283882e+05\",\"3\":\"8.472205e+05\",\"4\":\"8.662579e+05\",\"5\":\"8.847697e+05\",\"6\":\"9.015668e+05\",\"7\":\"9.191148e+05\",\"8\":\"9.354101e+05\",\"9\":\"9.510326e+05\"},{\"1\":\"Ethiopia\",\"2\":\"2.139904e+06\",\"3\":\"2.249670e+06\",\"4\":\"2.365149e+06\",\"5\":\"2.487032e+06\",\"6\":\"2.609266e+06\",\"7\":\"2.738496e+06\",\"8\":\"2.870320e+06\",\"9\":\"2.998291e+06\"},{\"1\":\"Faeroe Islands\",\"2\":\"9.878976e+03\",\"3\":\"1.017780e+04\",\"4\":\"1.047732e+04\",\"5\":\"1.077427e+04\",\"6\":\"1.106567e+04\",\"7\":\"1.135462e+04\",\"8\":\"1.164494e+04\",\"9\":\"1.194279e+04\"},{\"1\":\"Fiji\",\"2\":\"1.632216e+05\",\"3\":\"1.690663e+05\",\"4\":\"1.749364e+05\",\"5\":\"1.809345e+05\",\"6\":\"1.868715e+05\",\"7\":\"1.929448e+05\",\"8\":\"1.991372e+05\",\"9\":\"2.054102e+05\"},{\"1\":\"Finland\",\"2\":\"2.822234e+06\",\"3\":\"2.872371e+06\",\"4\":\"2.908120e+06\",\"5\":\"2.934402e+06\",\"6\":\"2.976176e+06\",\"7\":\"3.032239e+06\",\"8\":\"3.088022e+06\",\"9\":\"3.142947e+06\"},{\"1\":\"France\",\"2\":\"3.486791e+07\",\"3\":\"3.554830e+07\",\"4\":\"3.622608e+07\",\"5\":\"3.691751e+07\",\"6\":\"3.740758e+07\",\"7\":\"3.790747e+07\",\"8\":\"3.840573e+07\",\"9\":\"3.888504e+07\"},{\"1\":\"French Polynesia\",\"2\":\"5.087720e+04\",\"3\":\"5.421077e+04\",\"4\":\"5.768190e+04\",\"5\":\"6.125900e+04\",\"6\":\"6.368624e+04\",\"7\":\"6.613374e+04\",\"8\":\"6.861999e+04\",\"9\":\"7.117748e+04\"},{\"1\":\"Gabon\",\"2\":\"1.380242e+05\",\"3\":\"1.478459e+05\",\"4\":\"1.582525e+05\",\"5\":\"1.694483e+05\",\"6\":\"1.845557e+05\",\"7\":\"2.007952e+05\",\"8\":\"2.181618e+05\",\"9\":\"2.365466e+05\"},{\"1\":\"Gambia\",\"2\":\"7.036836e+04\",\"3\":\"7.628527e+04\",\"4\":\"8.261546e+04\",\"5\":\"8.942094e+04\",\"6\":\"9.676352e+04\",\"7\":\"1.047188e+05\",\"8\":\"1.132281e+05\",\"9\":\"1.221660e+05\"},{\"1\":\"Georgia\",\"2\":\"1.863610e+06\",\"3\":\"1.900576e+06\",\"4\":\"1.938616e+06\",\"5\":\"1.904782e+06\",\"6\":\"1.943501e+06\",\"7\":\"2.058124e+06\",\"8\":\"2.096168e+06\",\"9\":\"2.134461e+06\"},{\"1\":\"Germany\",\"2\":\"5.546852e+07\",\"3\":\"5.576506e+07\",\"4\":\"5.625874e+07\",\"5\":\"5.649607e+07\",\"6\":\"5.664462e+07\",\"7\":\"5.696131e+07\",\"8\":\"5.718614e+07\",\"9\":\"5.725360e+07\"},{\"1\":\"Ghana\",\"2\":\"2.219604e+06\",\"3\":\"2.311442e+06\",\"4\":\"2.408851e+06\",\"5\":\"2.515296e+06\",\"6\":\"2.601135e+06\",\"7\":\"2.695926e+06\",\"8\":\"2.795186e+06\",\"9\":\"2.892229e+06\"},{\"1\":\"Greece\",\"2\":\"4.300274e+06\",\"3\":\"4.415310e+06\",\"4\":\"4.518763e+06\",\"5\":\"4.616575e+06\",\"6\":\"4.686154e+06\",\"7\":\"4.766545e+06\",\"8\":\"4.838297e+06\",\"9\":\"4.906384e+06\"},{\"1\":\"Greenland\",\"2\":\"2.879686e+04\",\"3\":\"3.040882e+04\",\"4\":\"3.206093e+04\",\"5\":\"3.375322e+04\",\"6\":\"3.449046e+04\",\"7\":\"3.545317e+04\",\"8\":\"3.612819e+04\",\"9\":\"3.665970e+04\"},{\"1\":\"Grenada\",\"2\":\"3.004680e+04\",\"3\":\"3.019593e+04\",\"4\":\"3.031077e+04\",\"5\":\"3.040587e+04\",\"6\":\"3.039084e+04\",\"7\":\"3.037836e+04\",\"8\":\"3.034479e+04\",\"9\":\"3.025489e+04\"},{\"1\":\"Guam\",\"2\":\"4.629560e+04\",\"3\":\"4.844571e+04\",\"4\":\"5.065242e+04\",\"5\":\"5.291621e+04\",\"6\":\"5.791466e+04\",\"7\":\"6.308539e+04\",\"8\":\"6.843879e+04\",\"9\":\"7.399464e+04\"},{\"1\":\"Guatemala\",\"2\":\"1.739459e+06\",\"3\":\"1.802725e+06\",\"4\":\"1.868309e+06\",\"5\":\"1.936380e+06\",\"6\":\"2.002850e+06\",\"7\":\"2.071676e+06\",\"8\":\"2.142378e+06\",\"9\":\"2.214270e+06\"},{\"1\":\"Guinea\",\"2\":\"5.618868e+05\",\"3\":\"5.962425e+05\",\"4\":\"6.304226e+05\",\"5\":\"6.636291e+05\",\"6\":\"7.000651e+05\",\"7\":\"7.353800e+05\",\"8\":\"7.696670e+05\",\"9\":\"8.032624e+05\"},{\"1\":\"Guinea-Bissau\",\"2\":\"8.719596e+04\",\"3\":\"8.804516e+04\",\"4\":\"8.932212e+04\",\"5\":\"9.123325e+04\",\"6\":\"9.389158e+04\",\"7\":\"9.722136e+04\",\"8\":\"1.011893e+05\",\"9\":\"1.057146e+05\"},{\"1\":\"Guyana\",\"2\":\"1.979563e+05\",\"3\":\"2.033071e+05\",\"4\":\"2.081042e+05\",\"5\":\"2.120772e+05\",\"6\":\"2.155336e+05\",\"7\":\"2.181112e+05\",\"8\":\"2.201426e+05\",\"9\":\"2.221226e+05\"},{\"1\":\"Haiti\",\"2\":\"8.205857e+05\",\"3\":\"8.567168e+05\",\"4\":\"8.934834e+05\",\"5\":\"9.307198e+05\",\"6\":\"9.535772e+05\",\"7\":\"9.764460e+05\",\"8\":\"9.996672e+05\",\"9\":\"1.023722e+06\"},{\"1\":\"Honduras\",\"2\":\"6.700552e+05\",\"3\":\"7.041621e+05\",\"4\":\"7.396318e+05\",\"5\":\"7.769459e+05\",\"6\":\"8.163257e+05\",\"7\":\"8.577454e+05\",\"8\":\"9.014120e+05\",\"9\":\"9.475283e+05\"},{\"1\":\"Hong Kong, China\",\"2\":\"3.236781e+06\",\"3\":\"3.316190e+06\",\"4\":\"3.379661e+06\",\"5\":\"3.473191e+06\",\"6\":\"3.564807e+06\",\"7\":\"3.650021e+06\",\"8\":\"3.771147e+06\",\"9\":\"3.870519e+06\"},{\"1\":\"Hungary\",\"2\":\"6.013289e+06\",\"3\":\"6.079237e+06\",\"4\":\"6.147720e+06\",\"5\":\"6.214324e+06\",\"6\":\"6.276071e+06\",\"7\":\"6.338877e+06\",\"8\":\"6.403550e+06\",\"9\":\"6.476603e+06\"},{\"1\":\"Iceland\",\"2\":\"1.661399e+05\",\"3\":\"1.693063e+05\",\"4\":\"1.717736e+05\",\"5\":\"1.735679e+05\",\"6\":\"1.757064e+05\",\"7\":\"1.790372e+05\",\"8\":\"1.825107e+05\",\"9\":\"1.857581e+05\"},{\"1\":\"India\",\"2\":\"9.936339e+07\",\"3\":\"1.025948e+08\",\"4\":\"1.059532e+08\",\"5\":\"1.094455e+08\",\"6\":\"1.137519e+08\",\"7\":\"1.182288e+08\",\"8\":\"1.228790e+08\",\"9\":\"1.277043e+08\"},{\"1\":\"Indonesia\",\"2\":\"1.786885e+07\",\"3\":\"1.862152e+07\",\"4\":\"1.940053e+07\",\"5\":\"2.020553e+07\",\"6\":\"2.127053e+07\",\"7\":\"2.237329e+07\",\"8\":\"2.351361e+07\",\"9\":\"2.469105e+07\"},{\"1\":\"Iran\",\"2\":\"1.024223e+07\",\"3\":\"1.074839e+07\",\"4\":\"1.127204e+07\",\"5\":\"1.181219e+07\",\"6\":\"1.239191e+07\",\"7\":\"1.299286e+07\",\"8\":\"1.362195e+07\",\"9\":\"1.428880e+07\"},{\"1\":\"Iraq\",\"2\":\"4.785700e+06\",\"3\":\"5.053788e+06\",\"4\":\"5.335012e+06\",\"5\":\"5.627633e+06\",\"6\":\"5.924798e+06\",\"7\":\"6.232252e+06\",\"8\":\"6.551369e+06\",\"9\":\"6.884387e+06\"},{\"1\":\"Ireland\",\"2\":\"1.448735e+06\",\"3\":\"1.472843e+06\",\"4\":\"1.499153e+06\",\"5\":\"1.529549e+06\",\"6\":\"1.558990e+06\",\"7\":\"1.593945e+06\",\"8\":\"1.631517e+06\",\"9\":\"1.670769e+06\"},{\"1\":\"Isle of Man\",\"2\":\"2.974060e+04\",\"3\":\"3.041582e+04\",\"4\":\"3.107182e+04\",\"5\":\"3.166567e+04\",\"6\":\"3.182827e+04\",\"7\":\"3.189547e+04\",\"8\":\"3.190477e+04\",\"9\":\"3.190731e+04\"},{\"1\":\"Israel\",\"2\":\"2.257543e+06\",\"3\":\"2.323491e+06\",\"4\":\"2.403561e+06\",\"5\":\"2.503959e+06\",\"6\":\"2.598970e+06\",\"7\":\"2.681284e+06\",\"8\":\"2.808059e+06\",\"9\":\"2.909400e+06\"},{\"1\":\"Italy\",\"2\":\"3.322924e+07\",\"3\":\"3.369844e+07\",\"4\":\"3.414982e+07\",\"5\":\"3.459238e+07\",\"6\":\"3.490238e+07\",\"7\":\"3.525021e+07\",\"8\":\"3.564021e+07\",\"9\":\"3.602531e+07\"},{\"1\":\"Jamaica\",\"2\":\"7.040407e+05\",\"3\":\"7.257254e+05\",\"4\":\"7.482876e+05\",\"5\":\"7.723456e+05\",\"6\":\"7.935444e+05\",\"7\":\"8.162612e+05\",\"8\":\"8.398898e+05\",\"9\":\"8.633533e+05\"},{\"1\":\"Japan\",\"2\":\"6.997406e+07\",\"3\":\"7.101819e+07\",\"4\":\"7.332929e+07\",\"5\":\"7.500006e+07\",\"6\":\"7.678337e+07\",\"7\":\"7.868950e+07\",\"8\":\"8.017343e+07\",\"9\":\"8.256444e+07\"},{\"1\":\"Jordan\",\"2\":\"7.024333e+05\",\"3\":\"7.513107e+05\",\"4\":\"7.991228e+05\",\"5\":\"8.440427e+05\",\"6\":\"8.861825e+05\",\"7\":\"9.252900e+05\",\"8\":\"9.628976e+05\",\"9\":\"1.001686e+06\"},{\"1\":\"Kazakhstan\",\"2\":\"6.018757e+06\",\"3\":\"6.209379e+06\",\"4\":\"6.396692e+06\",\"5\":\"6.585936e+06\",\"6\":\"6.756162e+06\",\"7\":\"6.928193e+06\",\"8\":\"7.100036e+06\",\"9\":\"7.268241e+06\"},{\"1\":\"Kenya\",\"2\":\"9.424282e+05\",\"3\":\"1.010199e+06\",\"4\":\"1.082085e+06\",\"5\":\"1.158426e+06\",\"6\":\"1.261182e+06\",\"7\":\"1.370525e+06\",\"8\":\"1.486815e+06\",\"9\":\"1.610388e+06\"},{\"1\":\"Kiribati\",\"2\":\"9.944575e+03\",\"3\":\"1.054187e+04\",\"4\":\"1.115324e+04\",\"5\":\"1.177903e+04\",\"6\":\"1.253191e+04\",\"7\":\"1.329569e+04\",\"8\":\"1.407663e+04\",\"9\":\"1.488213e+04\"},{\"1\":\"North Korea\",\"2\":\"6.359134e+06\",\"3\":\"6.797010e+06\",\"4\":\"7.252939e+06\",\"5\":\"7.721750e+06\",\"6\":\"8.009574e+06\",\"7\":\"8.299056e+06\",\"8\":\"8.584095e+06\",\"9\":\"8.857069e+06\"},{\"1\":\"South Korea\",\"2\":\"1.067144e+07\",\"3\":\"1.142358e+07\",\"4\":\"1.219746e+07\",\"5\":\"1.299394e+07\",\"6\":\"1.374559e+07\",\"7\":\"1.451567e+07\",\"8\":\"1.530510e+07\",\"9\":\"1.611498e+07\"},{\"1\":\"Kuwait\",\"2\":\"4.812897e+05\",\"3\":\"5.332849e+05\",\"4\":\"5.878232e+05\",\"5\":\"6.451490e+05\",\"6\":\"7.009110e+05\",\"7\":\"7.585954e+05\",\"8\":\"8.180756e+05\",\"9\":\"8.792009e+05\"},{\"1\":\"Kyrgyz Republic\",\"2\":\"9.987404e+05\",\"3\":\"1.037698e+06\",\"4\":\"1.075216e+06\",\"5\":\"1.108956e+06\",\"6\":\"1.136687e+06\",\"7\":\"1.165919e+06\",\"8\":\"1.195227e+06\",\"9\":\"1.226436e+06\"},{\"1\":\"Lao\",\"2\":\"2.214381e+05\",\"3\":\"2.333150e+05\",\"4\":\"2.458144e+05\",\"5\":\"2.590287e+05\",\"6\":\"2.739823e+05\",\"7\":\"2.898053e+05\",\"8\":\"3.060341e+05\",\"9\":\"3.219629e+05\"},{\"1\":\"Latvia\",\"2\":\"1.343553e+06\",\"3\":\"1.374667e+06\",\"4\":\"1.404423e+06\",\"5\":\"1.432319e+06\",\"6\":\"1.459146e+06\",\"7\":\"1.487488e+06\",\"8\":\"1.516637e+06\",\"9\":\"1.546838e+06\"},{\"1\":\"Lebanon\",\"2\":\"1.253621e+06\",\"3\":\"1.320402e+06\",\"4\":\"1.390579e+06\",\"5\":\"1.465634e+06\",\"6\":\"1.541721e+06\",\"7\":\"1.622874e+06\",\"8\":\"1.705275e+06\",\"9\":\"1.783166e+06\"},{\"1\":\"Lesotho\",\"2\":\"7.042371e+04\",\"3\":\"7.636722e+04\",\"4\":\"8.253367e+04\",\"5\":\"8.892443e+04\",\"6\":\"9.542557e+04\",\"7\":\"1.021606e+05\",\"8\":\"1.091860e+05\",\"9\":\"1.165855e+05\"},{\"1\":\"Liberia\",\"2\":\"3.145211e+05\",\"3\":\"3.336211e+05\",\"4\":\"3.536543e+05\",\"5\":\"3.746759e+05\",\"6\":\"3.980213e+05\",\"7\":\"4.225051e+05\",\"8\":\"4.482161e+05\",\"9\":\"4.752605e+05\"},{\"1\":\"Libya\",\"2\":\"7.048490e+05\",\"3\":\"7.933851e+05\",\"4\":\"8.884915e+05\",\"5\":\"9.904397e+05\",\"6\":\"1.087657e+06\",\"7\":\"1.191671e+06\",\"8\":\"1.302852e+06\",\"9\":\"1.421573e+06\"},{\"1\":\"Liechtenstein\",\"2\":\"3.771201e+03\",\"3\":\"3.835222e+03\",\"4\":\"3.893073e+03\",\"5\":\"3.941192e+03\",\"6\":\"4.016945e+03\",\"7\":\"4.084375e+03\",\"8\":\"4.146087e+03\",\"9\":\"4.206141e+03\"},{\"1\":\"Lithuania\",\"2\":\"1.415402e+06\",\"3\":\"1.462854e+06\",\"4\":\"1.508107e+06\",\"5\":\"1.555873e+06\",\"6\":\"1.614349e+06\",\"7\":\"1.671308e+06\",\"8\":\"1.727112e+06\",\"9\":\"1.782930e+06\"},{\"1\":\"Luxembourg\",\"2\":\"2.442931e+05\",\"3\":\"2.465394e+05\",\"4\":\"2.493815e+05\",\"5\":\"2.522550e+05\",\"6\":\"2.566740e+05\",\"7\":\"2.618327e+05\",\"8\":\"2.667899e+05\",\"9\":\"2.723674e+05\"},{\"1\":\"Macao, China\",\"2\":\"2.193452e+05\",\"3\":\"2.292781e+05\",\"4\":\"2.376078e+05\",\"5\":\"2.435455e+05\",\"6\":\"2.467800e+05\",\"7\":\"2.476067e+05\",\"8\":\"2.466418e+05\",\"9\":\"2.448335e+05\"},{\"1\":\"Macedonia, FYR\",\"2\":\"6.524718e+05\",\"3\":\"6.802103e+05\",\"4\":\"7.086757e+05\",\"5\":\"7.381837e+05\",\"6\":\"7.584522e+05\",\"7\":\"7.793806e+05\",\"8\":\"8.010906e+05\",\"9\":\"8.237298e+05\"},{\"1\":\"Madagascar\",\"2\":\"7.919615e+05\",\"3\":\"8.337642e+05\",\"4\":\"8.775250e+05\",\"5\":\"9.233980e+05\",\"6\":\"9.783692e+05\",\"7\":\"1.035964e+06\",\"8\":\"1.096280e+06\",\"9\":\"1.159402e+06\"},{\"1\":\"Malawi\",\"2\":\"2.242118e+05\",\"3\":\"2.398927e+05\",\"4\":\"2.565303e+05\",\"5\":\"2.742784e+05\",\"6\":\"2.974752e+05\",\"7\":\"3.221866e+05\",\"8\":\"3.484584e+05\",\"9\":\"3.762949e+05\"},{\"1\":\"Malaysia\",\"2\":\"3.168042e+06\",\"3\":\"3.324289e+06\",\"4\":\"3.484442e+06\",\"5\":\"3.649615e+06\",\"6\":\"3.835042e+06\",\"7\":\"4.026657e+06\",\"8\":\"4.224277e+06\",\"9\":\"4.427442e+06\"},{\"1\":\"Maldives\",\"2\":\"1.252289e+04\",\"3\":\"1.289746e+04\",\"4\":\"1.330701e+04\",\"5\":\"1.376876e+04\",\"6\":\"1.548045e+04\",\"7\":\"1.732799e+04\",\"8\":\"1.930163e+04\",\"9\":\"2.137255e+04\"},{\"1\":\"Mali\",\"2\":\"7.656009e+05\",\"3\":\"7.972307e+05\",\"4\":\"8.302079e+05\",\"5\":\"8.646754e+05\",\"6\":\"9.031346e+05\",\"7\":\"9.433393e+05\",\"8\":\"9.851630e+05\",\"9\":\"1.028372e+06\"},{\"1\":\"Malta\",\"2\":\"2.796928e+05\",\"3\":\"2.763384e+05\",\"4\":\"2.730307e+05\",\"5\":\"2.714740e+05\",\"6\":\"2.715449e+05\",\"7\":\"2.713466e+05\",\"8\":\"2.711483e+05\",\"9\":\"2.709913e+05\"},{\"1\":\"Marshall Islands\",\"2\":\"8.640897e+03\",\"3\":\"9.323270e+03\",\"4\":\"1.007123e+04\",\"5\":\"1.091076e+04\",\"6\":\"1.170290e+04\",\"7\":\"1.258814e+04\",\"8\":\"1.354212e+04\",\"9\":\"1.452511e+04\"},{\"1\":\"Mauritania\",\"2\":\"1.236419e+05\",\"3\":\"1.367608e+05\",\"4\":\"1.505604e+05\",\"5\":\"1.650886e+05\",\"6\":\"1.839591e+05\",\"7\":\"2.038400e+05\",\"8\":\"2.247698e+05\",\"9\":\"2.467774e+05\"},{\"1\":\"Mauritius\",\"2\":\"3.058232e+05\",\"3\":\"3.195152e+05\",\"4\":\"3.332923e+05\",\"5\":\"3.471843e+05\",\"6\":\"3.551136e+05\",\"7\":\"3.629438e+05\",\"8\":\"3.708224e+05\",\"9\":\"3.789698e+05\"},{\"1\":\"Mexico\",\"2\":\"2.691017e+07\",\"3\":\"2.808642e+07\",\"4\":\"2.931700e+07\",\"5\":\"3.061321e+07\",\"6\":\"3.194150e+07\",\"7\":\"3.333305e+07\",\"8\":\"3.478046e+07\",\"9\":\"3.627178e+07\"},{\"1\":\"Micronesia, Fed. Sts.\",\"2\":\"1.354285e+04\",\"3\":\"1.419170e+04\",\"4\":\"1.477304e+04\",\"5\":\"1.523980e+04\",\"6\":\"1.553743e+04\",\"7\":\"1.571629e+04\",\"8\":\"1.584482e+04\",\"9\":\"1.602333e+04\"},{\"1\":\"Moldova\",\"2\":\"8.569232e+05\",\"3\":\"8.959091e+05\",\"4\":\"9.356514e+05\",\"5\":\"9.764706e+05\",\"6\":\"1.015915e+06\",\"7\":\"1.056411e+06\",\"8\":\"1.097293e+06\",\"9\":\"1.137827e+06\"},{\"1\":\"Monaco\",\"2\":\"2.304600e+04\",\"3\":\"2.323400e+04\",\"4\":\"2.344800e+04\",\"5\":\"2.368900e+04\",\"6\":\"2.396800e+04\",\"7\":\"2.428200e+04\",\"8\":\"2.460500e+04\",\"9\":\"2.490200e+04\"},{\"1\":\"Mongolia\",\"2\":\"5.089148e+05\",\"3\":\"5.307544e+05\",\"4\":\"5.535133e+05\",\"5\":\"5.773571e+05\",\"6\":\"6.041172e+05\",\"7\":\"6.320703e+05\",\"8\":\"6.610724e+05\",\"9\":\"6.908953e+05\"},{\"1\":\"Montenegro\",\"2\":\"1.244879e+05\",\"3\":\"1.292181e+05\",\"4\":\"1.340713e+05\",\"5\":\"1.392938e+05\",\"6\":\"1.454891e+05\",\"7\":\"1.521163e+05\",\"8\":\"1.591069e+05\",\"9\":\"1.663149e+05\"},{\"1\":\"Morocco\",\"2\":\"4.639516e+06\",\"3\":\"4.848380e+06\",\"4\":\"5.061952e+06\",\"5\":\"5.278427e+06\",\"6\":\"5.516718e+06\",\"7\":\"5.759042e+06\",\"8\":\"6.006727e+06\",\"9\":\"6.261899e+06\"},{\"1\":\"Mozambique\",\"2\":\"4.491451e+05\",\"3\":\"4.803006e+05\",\"4\":\"5.127060e+05\",\"5\":\"5.464057e+05\",\"6\":\"6.150199e+05\",\"7\":\"6.864334e+05\",\"8\":\"7.611387e+05\",\"9\":\"8.399119e+05\"},{\"1\":\"Myanmar\",\"2\":\"5.297725e+06\",\"3\":\"5.512884e+06\",\"4\":\"5.737830e+06\",\"5\":\"5.973271e+06\",\"6\":\"6.178716e+06\",\"7\":\"6.392781e+06\",\"8\":\"6.613581e+06\",\"9\":\"6.838424e+06\"},{\"1\":\"Namibia\",\"2\":\"1.504638e+05\",\"3\":\"1.578102e+05\",\"4\":\"1.656184e+05\",\"5\":\"1.739636e+05\",\"6\":\"1.814829e+05\",\"7\":\"1.894921e+05\",\"8\":\"1.977924e+05\",\"9\":\"2.060961e+05\"},{\"1\":\"Nepal\",\"2\":\"4.268625e+05\",\"3\":\"4.411255e+05\",\"4\":\"4.559937e+05\",\"5\":\"4.714710e+05\",\"6\":\"5.035432e+05\",\"7\":\"5.369944e+05\",\"8\":\"5.718580e+05\",\"9\":\"6.081574e+05\"},{\"1\":\"Netherlands\",\"2\":\"7.699643e+06\",\"3\":\"7.803192e+06\",\"4\":\"7.917513e+06\",\"5\":\"8.039946e+06\",\"6\":\"8.176234e+06\",\"7\":\"8.299848e+06\",\"8\":\"8.409656e+06\",\"9\":\"8.516996e+06\"},{\"1\":\"New Caledonia\",\"2\":\"4.587712e+04\",\"3\":\"4.868702e+04\",\"4\":\"5.183153e+04\",\"5\":\"5.533056e+04\",\"6\":\"5.909833e+04\",\"7\":\"6.291106e+04\",\"8\":\"6.663068e+04\",\"9\":\"7.014487e+04\"},{\"1\":\"New Zealand\",\"2\":\"2.173205e+06\",\"3\":\"2.204526e+06\",\"4\":\"2.236624e+06\",\"5\":\"2.279646e+06\",\"6\":\"2.323472e+06\",\"7\":\"2.374612e+06\",\"8\":\"2.431429e+06\",\"9\":\"2.492750e+06\"},{\"1\":\"Nicaragua\",\"2\":\"9.730101e+05\",\"3\":\"1.022348e+06\",\"4\":\"1.073928e+06\",\"5\":\"1.127855e+06\",\"6\":\"1.171246e+06\",\"7\":\"1.216288e+06\",\"8\":\"1.263026e+06\",\"9\":\"1.311513e+06\"},{\"1\":\"Niger\",\"2\":\"3.039535e+05\",\"3\":\"3.295439e+05\",\"4\":\"3.563980e+05\",\"5\":\"3.845578e+05\",\"6\":\"4.198226e+05\",\"7\":\"4.568167e+05\",\"8\":\"4.956246e+05\",\"9\":\"5.363483e+05\"},{\"1\":\"Nigeria\",\"2\":\"1.131884e+07\",\"3\":\"1.186224e+07\",\"4\":\"1.242960e+07\",\"5\":\"1.302354e+07\",\"6\":\"1.367088e+07\",\"7\":\"1.434773e+07\",\"8\":\"1.506111e+07\",\"9\":\"1.582041e+07\"},{\"1\":\"Northern Mariana Islands\",\"2\":\"7.518953e+03\",\"3\":\"8.073316e+03\",\"4\":\"8.655527e+03\",\"5\":\"9.250286e+03\",\"6\":\"9.855667e+03\",\"7\":\"1.050168e+04\",\"8\":\"1.115197e+04\",\"9\":\"1.175108e+04\"},{\"1\":\"Norway\",\"2\":\"2.297185e+06\",\"3\":\"2.376327e+06\",\"4\":\"2.456007e+06\",\"5\":\"2.534594e+06\",\"6\":\"2.574218e+06\",\"7\":\"2.615935e+06\",\"8\":\"2.656406e+06\",\"9\":\"2.695182e+06\"},{\"1\":\"Oman\",\"2\":\"1.682955e+05\",\"3\":\"1.833677e+05\",\"4\":\"1.995581e+05\",\"5\":\"2.170597e+05\",\"6\":\"2.378383e+05\",\"7\":\"2.603733e+05\",\"8\":\"2.850917e+05\",\"9\":\"3.125531e+05\"},{\"1\":\"Pakistan\",\"2\":\"1.316562e+07\",\"3\":\"1.366756e+07\",\"4\":\"1.419101e+07\",\"5\":\"1.473699e+07\",\"6\":\"1.533278e+07\",\"7\":\"1.595552e+07\",\"8\":\"1.661011e+07\",\"9\":\"1.730286e+07\"},{\"1\":\"Palau\",\"2\":\"6.521346e+03\",\"3\":\"6.627161e+03\",\"4\":\"6.736073e+03\",\"5\":\"6.855879e+03\",\"6\":\"6.993553e+03\",\"7\":\"7.145486e+03\",\"8\":\"7.295512e+03\",\"9\":\"7.421072e+03\"},{\"1\":\"Panama\",\"2\":\"6.330562e+05\",\"3\":\"6.609825e+05\",\"4\":\"6.897512e+05\",\"5\":\"7.192792e+05\",\"6\":\"7.438996e+05\",\"7\":\"7.689286e+05\",\"8\":\"7.943853e+05\",\"9\":\"8.203103e+05\"},{\"1\":\"Papua New Guinea\",\"2\":\"1.626460e+05\",\"3\":\"1.865556e+05\",\"4\":\"2.117910e+05\",\"5\":\"2.385030e+05\",\"6\":\"2.558776e+05\",\"7\":\"2.743358e+05\",\"8\":\"2.938021e+05\",\"9\":\"3.141259e+05\"},{\"1\":\"Paraguay\",\"2\":\"8.397317e+05\",\"3\":\"8.662660e+05\",\"4\":\"8.931292e+05\",\"5\":\"9.201416e+05\",\"6\":\"9.528178e+05\",\"7\":\"9.860213e+05\",\"8\":\"1.020057e+06\",\"9\":\"1.055359e+06\"},{\"1\":\"Peru\",\"2\":\"6.560955e+06\",\"3\":\"6.884271e+06\",\"4\":\"7.220337e+06\",\"5\":\"7.570234e+06\",\"6\":\"7.894058e+06\",\"7\":\"8.229659e+06\",\"8\":\"8.577138e+06\",\"9\":\"8.936488e+06\"},{\"1\":\"Philippines\",\"2\":\"1.045064e+07\",\"3\":\"1.085199e+07\",\"4\":\"1.126489e+07\",\"5\":\"1.169151e+07\",\"6\":\"1.222076e+07\",\"7\":\"1.276980e+07\",\"8\":\"1.333929e+07\",\"9\":\"1.392968e+07\"},{\"1\":\"Poland\",\"2\":\"1.628965e+07\",\"3\":\"1.657536e+07\",\"4\":\"1.683567e+07\",\"5\":\"1.702627e+07\",\"6\":\"1.729526e+07\",\"7\":\"1.764742e+07\",\"8\":\"1.801889e+07\",\"9\":\"1.840518e+07\"},{\"1\":\"Portugal\",\"2\":\"3.340476e+06\",\"3\":\"3.360472e+06\",\"4\":\"3.364395e+06\",\"5\":\"3.368354e+06\",\"6\":\"3.388266e+06\",\"7\":\"3.417132e+06\",\"8\":\"3.452290e+06\",\"9\":\"3.535363e+06\"},{\"1\":\"Puerto Rico\",\"2\":\"1.435077e+06\",\"3\":\"1.480203e+06\",\"4\":\"1.529021e+06\",\"5\":\"1.585301e+06\",\"6\":\"1.635614e+06\",\"7\":\"1.693250e+06\",\"8\":\"1.755806e+06\",\"9\":\"1.818827e+06\"},{\"1\":\"Qatar\",\"2\":\"7.500451e+04\",\"3\":\"8.116982e+04\",\"4\":\"8.804065e+04\",\"5\":\"9.580697e+04\",\"6\":\"1.046010e+05\",\"7\":\"1.144858e+05\",\"8\":\"1.249279e+05\",\"9\":\"1.351680e+05\"},{\"1\":\"Romania\",\"2\":\"7.568698e+06\",\"3\":\"7.775433e+06\",\"4\":\"7.962558e+06\",\"5\":\"8.164758e+06\",\"6\":\"8.352698e+06\",\"7\":\"8.536653e+06\",\"8\":\"8.714774e+06\",\"9\":\"8.901463e+06\"},{\"1\":\"Russia\",\"2\":\"7.677947e+07\",\"3\":\"7.832602e+07\",\"4\":\"7.988771e+07\",\"5\":\"8.146468e+07\",\"6\":\"8.297123e+07\",\"7\":\"8.449242e+07\",\"8\":\"8.602837e+07\",\"9\":\"8.757920e+07\"},{\"1\":\"Rwanda\",\"2\":\"1.005126e+05\",\"3\":\"1.065866e+05\",\"4\":\"1.129610e+05\",\"5\":\"1.196576e+05\",\"6\":\"1.296515e+05\",\"7\":\"1.401857e+05\",\"8\":\"1.513041e+05\",\"9\":\"1.630587e+05\"},{\"1\":\"St. Kitts and Nevis\",\"2\":\"1.516557e+04\",\"3\":\"1.522598e+04\",\"4\":\"1.528050e+04\",\"5\":\"1.532931e+04\",\"6\":\"1.530592e+04\",\"7\":\"1.531596e+04\",\"8\":\"1.529062e+04\",\"9\":\"1.526421e+04\"},{\"1\":\"St. Lucia\",\"2\":\"2.232508e+04\",\"3\":\"2.291663e+04\",\"4\":\"2.351565e+04\",\"5\":\"2.424170e+04\",\"6\":\"2.484224e+04\",\"7\":\"2.542559e+04\",\"8\":\"2.606504e+04\",\"9\":\"2.668730e+04\"},{\"1\":\"St. Vincent and the Grenadines\",\"2\":\"2.564178e+04\",\"3\":\"2.633043e+04\",\"4\":\"2.703429e+04\",\"5\":\"2.775738e+04\",\"6\":\"2.852298e+04\",\"7\":\"2.931059e+04\",\"8\":\"3.011692e+04\",\"9\":\"3.093551e+04\"},{\"1\":\"Samoa\",\"2\":\"2.636036e+04\",\"3\":\"2.727841e+04\",\"4\":\"2.815593e+04\",\"5\":\"2.897331e+04\",\"6\":\"2.960049e+04\",\"7\":\"3.015656e+04\",\"8\":\"3.065566e+04\",\"9\":\"3.112000e+04\"},{\"1\":\"San Marino\",\"2\":\"1.030941e+04\",\"3\":\"1.071427e+04\",\"4\":\"1.109522e+04\",\"5\":\"1.144333e+04\",\"6\":\"1.199178e+04\",\"7\":\"1.250465e+04\",\"8\":\"1.300464e+04\",\"9\":\"1.352865e+04\"},{\"1\":\"Sao Tome and Principe\",\"2\":\"1.684635e+04\",\"3\":\"1.841719e+04\",\"4\":\"2.006490e+04\",\"5\":\"2.173410e+04\",\"6\":\"2.255666e+04\",\"7\":\"2.335055e+04\",\"8\":\"2.415061e+04\",\"9\":\"2.501460e+04\"},{\"1\":\"Saudi Arabia\",\"2\":\"2.195007e+06\",\"3\":\"2.382635e+06\",\"4\":\"2.586258e+06\",\"5\":\"2.809100e+06\",\"6\":\"3.050817e+06\",\"7\":\"3.315971e+06\",\"8\":\"3.607779e+06\",\"9\":\"3.929807e+06\"},{\"1\":\"Senegal\",\"2\":\"1.035987e+06\",\"3\":\"1.096955e+06\",\"4\":\"1.161241e+06\",\"5\":\"1.228874e+06\",\"6\":\"1.300559e+06\",\"7\":\"1.375866e+06\",\"8\":\"1.453826e+06\",\"9\":\"1.533013e+06\"},{\"1\":\"Serbia\",\"2\":\"2.505613e+06\",\"3\":\"2.595006e+06\",\"4\":\"2.683242e+06\",\"5\":\"2.770952e+06\",\"6\":\"2.834711e+06\",\"7\":\"2.898614e+06\",\"8\":\"2.962223e+06\",\"9\":\"3.025922e+06\"},{\"1\":\"Seychelles\",\"2\":\"1.771880e+04\",\"3\":\"1.876104e+04\",\"4\":\"1.983538e+04\",\"5\":\"2.094045e+04\",\"6\":\"2.221236e+04\",\"7\":\"2.351875e+04\",\"8\":\"2.485369e+04\",\"9\":\"2.620824e+04\"},{\"1\":\"Sierra Leone\",\"2\":\"5.281695e+05\",\"3\":\"5.535685e+05\",\"4\":\"5.797787e+05\",\"5\":\"6.067908e+05\",\"6\":\"6.355432e+05\",\"7\":\"6.652061e+05\",\"8\":\"6.959255e+05\",\"9\":\"7.279029e+05\"},{\"1\":\"Singapore\",\"2\":\"1.978000e+06\",\"3\":\"2.012000e+06\",\"4\":\"2.043000e+06\",\"5\":\"2.075000e+06\",\"6\":\"2.113000e+06\",\"7\":\"2.152000e+06\",\"8\":\"2.193000e+06\",\"9\":\"2.230000e+06\"},{\"1\":\"Slovak Republic\",\"2\":\"1.719618e+06\",\"3\":\"1.768967e+06\",\"4\":\"1.818929e+06\",\"5\":\"1.863258e+06\",\"6\":\"1.918549e+06\",\"7\":\"1.982845e+06\",\"8\":\"2.050451e+06\",\"9\":\"2.120507e+06\"},{\"1\":\"Slovenia\",\"2\":\"5.795047e+05\",\"3\":\"6.000206e+05\",\"4\":\"6.187531e+05\",\"5\":\"6.382787e+05\",\"6\":\"6.619232e+05\",\"7\":\"6.860343e+05\",\"8\":\"7.106715e+05\",\"9\":\"7.335425e+05\"},{\"1\":\"Solomon Islands\",\"2\":\"1.151482e+04\",\"3\":\"1.237527e+04\",\"4\":\"1.329659e+04\",\"5\":\"1.429003e+04\",\"6\":\"1.487728e+04\",\"7\":\"1.550905e+04\",\"8\":\"1.617813e+04\",\"9\":\"1.687314e+04\"},{\"1\":\"Somalia\",\"2\":\"7.047038e+05\",\"3\":\"7.433007e+05\",\"4\":\"7.810217e+05\",\"5\":\"8.166815e+05\",\"6\":\"8.475888e+05\",\"7\":\"8.745210e+05\",\"8\":\"9.078108e+05\",\"9\":\"9.626845e+05\"},{\"1\":\"South Africa\",\"2\":\"9.830232e+06\",\"3\":\"1.006591e+07\",\"4\":\"1.030848e+07\",\"5\":\"1.055957e+07\",\"6\":\"1.081953e+07\",\"7\":\"1.108419e+07\",\"8\":\"1.135223e+07\",\"9\":\"1.162297e+07\"},{\"1\":\"Spain\",\"2\":\"2.064974e+07\",\"3\":\"2.123678e+07\",\"4\":\"2.176544e+07\",\"5\":\"2.233044e+07\",\"6\":\"2.282103e+07\",\"7\":\"2.327235e+07\",\"8\":\"2.373034e+07\",\"9\":\"2.420854e+07\"},{\"1\":\"Sri Lanka\",\"2\":\"2.151152e+06\",\"3\":\"2.249555e+06\",\"4\":\"2.344592e+06\",\"5\":\"2.441982e+06\",\"6\":\"2.475540e+06\",\"7\":\"2.508101e+06\",\"8\":\"2.552143e+06\",\"9\":\"2.588945e+06\"},{\"1\":\"Sudan\",\"2\":\"1.466502e+06\",\"3\":\"1.571927e+06\",\"4\":\"1.683562e+06\",\"5\":\"1.802344e+06\",\"6\":\"1.912728e+06\",\"7\":\"2.030472e+06\",\"8\":\"2.155450e+06\",\"9\":\"2.287267e+06\"},{\"1\":\"Suriname\",\"2\":\"1.638993e+05\",\"3\":\"1.673102e+05\",\"4\":\"1.698198e+05\",\"5\":\"1.710630e+05\",\"6\":\"1.743836e+05\",\"7\":\"1.764727e+05\",\"8\":\"1.777444e+05\",\"9\":\"1.788532e+05\"},{\"1\":\"Swaziland\",\"2\":\"3.199762e+04\",\"3\":\"3.554773e+04\",\"4\":\"3.929612e+04\",\"5\":\"4.325858e+04\",\"6\":\"4.845133e+04\",\"7\":\"5.395107e+04\",\"8\":\"5.977098e+04\",\"9\":\"6.591935e+04\"},{\"1\":\"Sweden\",\"2\":\"6.187907e+06\",\"3\":\"6.285731e+06\",\"4\":\"6.393453e+06\",\"5\":\"6.517403e+06\",\"6\":\"6.589874e+06\",\"7\":\"6.636926e+06\",\"8\":\"6.675974e+06\",\"9\":\"6.723052e+06\"},{\"1\":\"Switzerland\",\"2\":\"3.324087e+06\",\"3\":\"3.404449e+06\",\"4\":\"3.481651e+06\",\"5\":\"3.545846e+06\",\"6\":\"3.564515e+06\",\"7\":\"3.591810e+06\",\"8\":\"3.618437e+06\",\"9\":\"3.637988e+06\"},{\"1\":\"Syria\",\"2\":\"2.377889e+06\",\"3\":\"2.499429e+06\",\"4\":\"2.626816e+06\",\"5\":\"2.760217e+06\",\"6\":\"2.878588e+06\",\"7\":\"3.002034e+06\",\"8\":\"3.130344e+06\",\"9\":\"3.263171e+06\"},{\"1\":\"Tajikistan\",\"2\":\"9.611929e+05\",\"3\":\"1.000669e+06\",\"4\":\"1.041608e+06\",\"5\":\"1.084708e+06\",\"6\":\"1.111673e+06\",\"7\":\"1.139645e+06\",\"8\":\"1.168044e+06\",\"9\":\"1.196054e+06\"},{\"1\":\"Tanzania\",\"2\":\"8.384494e+05\",\"3\":\"9.108258e+05\",\"4\":\"9.872961e+05\",\"5\":\"1.068227e+06\",\"6\":\"1.195298e+06\",\"7\":\"1.330036e+06\",\"8\":\"1.472583e+06\",\"9\":\"1.622882e+06\"},{\"1\":\"Thailand\",\"2\":\"6.919690e+06\",\"3\":\"7.176231e+06\",\"4\":\"7.440174e+06\",\"5\":\"7.711257e+06\",\"6\":\"8.156822e+06\",\"7\":\"8.618420e+06\",\"8\":\"9.093762e+06\",\"9\":\"9.579568e+06\"},{\"1\":\"Timor-Leste\",\"2\":\"6.802067e+04\",\"3\":\"7.108209e+04\",\"4\":\"7.435281e+04\",\"5\":\"7.788066e+04\",\"6\":\"8.202655e+04\",\"7\":\"8.651331e+04\",\"8\":\"9.088243e+04\",\"9\":\"9.445747e+04\"},{\"1\":\"Togo\",\"2\":\"3.221940e+05\",\"3\":\"3.621139e+05\",\"4\":\"4.040164e+05\",\"5\":\"4.462997e+05\",\"6\":\"4.679159e+05\",\"7\":\"4.881497e+05\",\"8\":\"5.073627e+05\",\"9\":\"5.262916e+05\"},{\"1\":\"Tonga\",\"2\":\"1.563131e+04\",\"3\":\"1.614767e+04\",\"4\":\"1.661674e+04\",\"5\":\"1.703157e+04\",\"6\":\"1.728917e+04\",\"7\":\"1.748268e+04\",\"8\":\"1.763734e+04\",\"9\":\"1.779015e+04\"},{\"1\":\"Trinidad and Tobago\",\"2\":\"1.232921e+05\",\"3\":\"1.208498e+05\",\"4\":\"1.181071e+05\",\"5\":\"1.149191e+05\",\"6\":\"1.151237e+05\",\"7\":\"1.150568e+05\",\"8\":\"1.148504e+05\",\"9\":\"1.146878e+05\"},{\"1\":\"Tunisia\",\"2\":\"1.992479e+06\",\"3\":\"2.070869e+06\",\"4\":\"2.149857e+06\",\"5\":\"2.229322e+06\",\"6\":\"2.307379e+06\",\"7\":\"2.389032e+06\",\"8\":\"2.475875e+06\",\"9\":\"2.569238e+06\"},{\"1\":\"Turkey\",\"2\":\"1.191986e+07\",\"3\":\"1.244807e+07\",\"4\":\"1.299329e+07\",\"5\":\"1.355938e+07\",\"6\":\"1.410119e+07\",\"7\":\"1.466411e+07\",\"8\":\"1.524684e+07\",\"9\":\"1.584676e+07\"},{\"1\":\"Turkmenistan\",\"2\":\"9.517698e+05\",\"3\":\"9.822601e+05\",\"4\":\"1.013434e+06\",\"5\":\"1.045665e+06\",\"6\":\"1.075185e+06\",\"7\":\"1.105506e+06\",\"8\":\"1.136380e+06\",\"9\":\"1.167443e+06\"},{\"1\":\"Turks and Caicos Islands\",\"2\":\"2.798837e+03\",\"3\":\"2.804887e+03\",\"4\":\"2.829033e+03\",\"5\":\"2.878290e+03\",\"6\":\"2.961101e+03\",\"7\":\"3.073893e+03\",\"8\":\"3.205822e+03\",\"9\":\"3.342540e+03\"},{\"1\":\"Tuvalu\",\"2\":\"1.415014e+03\",\"3\":\"1.480186e+03\",\"4\":\"1.545270e+03\",\"5\":\"1.611030e+03\",\"6\":\"1.683666e+03\",\"7\":\"1.756818e+03\",\"8\":\"1.830905e+03\",\"9\":\"1.905153e+03\"},{\"1\":\"Uganda\",\"2\":\"5.120829e+05\",\"3\":\"5.499091e+05\",\"4\":\"5.891064e+05\",\"5\":\"6.294769e+05\",\"6\":\"6.557359e+05\",\"7\":\"6.822662e+05\",\"8\":\"7.093838e+05\",\"9\":\"7.375558e+05\"},{\"1\":\"Ukraine\",\"2\":\"2.416635e+07\",\"3\":\"2.475757e+07\",\"4\":\"2.534887e+07\",\"5\":\"2.594411e+07\",\"6\":\"2.648578e+07\",\"7\":\"2.703029e+07\",\"8\":\"2.757233e+07\",\"9\":\"2.810411e+07\"},{\"1\":\"United Arab Emirates\",\"2\":\"1.280378e+05\",\"3\":\"1.390527e+05\",\"4\":\"1.555970e+05\",\"5\":\"1.800752e+05\",\"6\":\"2.128010e+05\",\"7\":\"2.533435e+05\",\"8\":\"3.021131e+05\",\"9\":\"3.593418e+05\"},{\"1\":\"United Kingdom\",\"2\":\"4.260294e+07\",\"3\":\"4.273308e+07\",\"4\":\"4.283308e+07\",\"5\":\"4.292583e+07\",\"6\":\"4.316876e+07\",\"7\":\"4.337887e+07\",\"8\":\"4.352637e+07\",\"9\":\"4.361748e+07\"},{\"1\":\"United States\",\"2\":\"1.442017e+08\",\"3\":\"1.463404e+08\",\"4\":\"1.484759e+08\",\"5\":\"1.509224e+08\",\"6\":\"1.528638e+08\",\"7\":\"1.545305e+08\",\"8\":\"1.560341e+08\",\"9\":\"1.574881e+08\"},{\"1\":\"Uruguay\",\"2\":\"2.247503e+06\",\"3\":\"2.273438e+06\",\"4\":\"2.295858e+06\",\"5\":\"2.313813e+06\",\"6\":\"2.326524e+06\",\"7\":\"2.334879e+06\",\"8\":\"2.341153e+06\",\"9\":\"2.348533e+06\"},{\"1\":\"Uzbekistan\",\"2\":\"3.913188e+06\",\"3\":\"4.067599e+06\",\"4\":\"4.227790e+06\",\"5\":\"4.395765e+06\",\"6\":\"4.595966e+06\",\"7\":\"4.805551e+06\",\"8\":\"5.022305e+06\",\"9\":\"5.242853e+06\"},{\"1\":\"Vanuatu\",\"2\":\"9.208354e+03\",\"3\":\"9.621427e+03\",\"4\":\"1.005774e+04\",\"5\":\"1.052469e+04\",\"6\":\"1.103796e+04\",\"7\":\"1.158368e+04\",\"8\":\"1.215890e+04\",\"9\":\"1.275908e+04\"},{\"1\":\"Venezuela\",\"2\":\"6.678933e+06\",\"3\":\"6.994264e+06\",\"4\":\"7.324840e+06\",\"5\":\"7.674281e+06\",\"6\":\"8.023652e+06\",\"7\":\"8.391094e+06\",\"8\":\"8.777606e+06\",\"9\":\"9.184011e+06\"},{\"1\":\"Vietnam\",\"2\":\"6.865532e+06\",\"3\":\"7.169607e+06\",\"4\":\"7.487421e+06\",\"5\":\"7.819407e+06\",\"6\":\"8.043735e+06\",\"7\":\"8.277023e+06\",\"8\":\"8.518466e+06\",\"9\":\"8.766839e+06\"},{\"1\":\"Virgin Islands (U.S.)\",\"2\":\"3.342853e+04\",\"3\":\"3.661847e+04\",\"4\":\"4.004103e+04\",\"5\":\"4.384296e+04\",\"6\":\"5.021305e+04\",\"7\":\"5.460843e+04\",\"8\":\"6.130639e+04\",\"9\":\"6.670296e+04\"},{\"1\":\"Yemen\",\"2\":\"6.973814e+05\",\"3\":\"7.369436e+05\",\"4\":\"7.769681e+05\",\"5\":\"8.172839e+05\",\"6\":\"8.485446e+05\",\"7\":\"8.800627e+05\",\"8\":\"9.133326e+05\",\"9\":\"9.504883e+05\"},{\"1\":\"Zambia\",\"2\":\"9.841980e+05\",\"3\":\"1.069557e+06\",\"4\":\"1.160044e+06\",\"5\":\"1.256178e+06\",\"6\":\"1.337898e+06\",\"7\":\"1.424498e+06\",\"8\":\"1.515871e+06\",\"9\":\"1.611725e+06\"},{\"1\":\"Zimbabwe\",\"2\":\"7.416051e+05\",\"3\":\"7.927728e+05\",\"4\":\"8.467739e+05\",\"5\":\"9.039055e+05\",\"6\":\"9.620288e+05\",\"7\":\"1.023588e+06\",\"8\":\"1.088377e+06\",\"9\":\"1.155992e+06\"},{\"1\":\"South Sudan\",\"2\":\"3.157901e+05\",\"3\":\"3.210970e+05\",\"4\":\"3.268101e+05\",\"5\":\"3.330133e+05\",\"6\":\"3.396491e+05\",\"7\":\"3.466912e+05\",\"8\":\"3.542318e+05\",\"9\":\"3.623528e+05\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Customize readWorksheet\n\nTo get a clear overview about <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a> without having to open up the Excel file, you can execute the following code:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_book <- loadWorkbook(\"data/urbanpop.xlsx\")\nsheets <- getSheets(my_book)\nall <- lapply(sheets, readWorksheet, object = my_book)\nstr(all)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> List of 3\n#>  $ :'data.frame':\t209 obs. of  8 variables:\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ X1960  : num [1:209] 769308 494443 3293999 NA NA ...\n#>   ..$ X1961  : num [1:209] 814923 511803 3515148 13660 8724 ...\n#>   ..$ X1962  : num [1:209] 858522 529439 3739963 14166 9700 ...\n#>   ..$ X1963  : num [1:209] 903914 547377 3973289 14759 10748 ...\n#>   ..$ X1964  : num [1:209] 951226 565572 4220987 15396 11866 ...\n#>   ..$ X1965  : num [1:209] 1000582 583983 4488176 16045 13053 ...\n#>   ..$ X1966  : num [1:209] 1058743 602512 4649105 16693 14217 ...\n#>  $ :'data.frame':\t209 obs. of  9 variables:\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ X1967  : num [1:209] 1119067 621180 4826104 17349 15440 ...\n#>   ..$ X1968  : num [1:209] 1182159 639964 5017299 17996 16727 ...\n#>   ..$ X1969  : num [1:209] 1248901 658853 5219332 18619 18088 ...\n#>   ..$ X1970  : num [1:209] 1319849 677839 5429743 19206 19529 ...\n#>   ..$ X1971  : num [1:209] 1409001 698932 5619042 19752 20929 ...\n#>   ..$ X1972  : num [1:209] 1502402 720207 5815734 20263 22406 ...\n#>   ..$ X1973  : num [1:209] 1598835 741681 6020647 20742 23937 ...\n#>   ..$ X1974  : num [1:209] 1696445 763385 6235114 21194 25482 ...\n#>  $ :'data.frame':\t209 obs. of  38 variables:\n#>   ..$ country: chr [1:209] \"Afghanistan\" \"Albania\" \"Algeria\" \"American Samoa\" ...\n#>   ..$ X1975  : num [1:209] 1793266 785350 6460138 21632 27019 ...\n#>   ..$ X1976  : num [1:209] 1905033 807990 6774099 22047 28366 ...\n#>   ..$ X1977  : num [1:209] 2021308 830959 7102902 22452 29677 ...\n#>   ..$ X1978  : num [1:209] 2142248 854262 7447728 22899 31037 ...\n#>   ..$ X1979  : num [1:209] 2268015 877898 7810073 23457 32572 ...\n#>   ..$ X1980  : num [1:209] 2398775 901884 8190772 24177 34366 ...\n#>   ..$ X1981  : num [1:209] 2493265 927224 8637724 25173 36356 ...\n#>   ..$ X1982  : num [1:209] 2590846 952447 9105820 26342 38618 ...\n#>   ..$ X1983  : num [1:209] 2691612 978476 9591900 27655 40983 ...\n#>   ..$ X1984  : num [1:209] 2795656 1006613 10091289 29062 43207 ...\n#>   ..$ X1985  : num [1:209] 2903078 1037541 10600112 30524 45119 ...\n#>   ..$ X1986  : num [1:209] 3006983 1072365 11101757 32014 46254 ...\n#>   ..$ X1987  : num [1:209] 3113957 1109954 11609104 33548 47019 ...\n#>   ..$ X1988  : num [1:209] 3224082 1146633 12122941 35095 47669 ...\n#>   ..$ X1989  : num [1:209] 3337444 1177286 12645263 36618 48577 ...\n#>   ..$ X1990  : num [1:209] 3454129 1198293 13177079 38088 49982 ...\n#>   ..$ X1991  : num [1:209] 3617842 1215445 13708813 39600 51972 ...\n#>   ..$ X1992  : num [1:209] 3788685 1222544 14248297 41049 54469 ...\n#>   ..$ X1993  : num [1:209] 3966956 1222812 14789176 42443 57079 ...\n#>   ..$ X1994  : num [1:209] 4152960 1221364 15322651 43798 59243 ...\n#>   ..$ X1995  : num [1:209] 4347018 1222234 15842442 45129 60598 ...\n#>   ..$ X1996  : num [1:209] 4531285 1228760 16395553 46343 60927 ...\n#>   ..$ X1997  : num [1:209] 4722603 1238090 16935451 47527 60462 ...\n#>   ..$ X1998  : num [1:209] 4921227 1250366 17469200 48705 59685 ...\n#>   ..$ X1999  : num [1:209] 5127421 1265195 18007937 49906 59281 ...\n#>   ..$ X2000  : num [1:209] 5341456 1282223 18560597 51151 59719 ...\n#>   ..$ X2001  : num [1:209] 5564492 1315690 19198872 52341 61062 ...\n#>   ..$ X2002  : num [1:209] 5795940 1352278 19854835 53583 63212 ...\n#>   ..$ X2003  : num [1:209] 6036100 1391143 20529356 54864 65802 ...\n#>   ..$ X2004  : num [1:209] 6285281 1430918 21222198 56166 68301 ...\n#>   ..$ X2005  : num [1:209] 6543804 1470488 21932978 57474 70329 ...\n#>   ..$ X2006  : num [1:209] 6812538 1512255 22625052 58679 71726 ...\n#>   ..$ X2007  : num [1:209] 7091245 1553491 23335543 59894 72684 ...\n#>   ..$ X2008  : num [1:209] 7380272 1594351 24061749 61118 73335 ...\n#>   ..$ X2009  : num [1:209] 7679982 1635262 24799591 62357 73897 ...\n#>   ..$ X2010  : num [1:209] 7990746 1676545 25545622 63616 74525 ...\n#>   ..$ X2011  : num [1:209] 8316976 1716842 26216968 64817 75207 ...\n```\n:::\n:::\n\n\nSuppose we're only interested in urban population data of the years 1968, 1969 and 1970. The data for these years is in the columns 3, 4, and 5 of the second sheet. Only selecting these columns will leave us in the dark about the actual countries the figures belong to.\n\n\n**Steps**\n\n1. Extend the `readWorksheet()` command with the `startCol` and `endCol` arguments to only import the columns 3, 4, and 5 of the second sheet.\n2. `urbanpop_sel` no longer contains information about the countries now. Can you write another `readWorksheet()` command that imports only the first column from the second sheet? Store the resulting data frame as `countries`.\n3. Use `cbind()` to paste together `countries` and `urbanpop_sel`, in this order. Store the result as `selection`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"data/urbanpop.xlsx\")\n\n# Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel\nurbanpop_sel <- readWorksheet(my_book, sheet = 2, startCol = 3, endCol = 5)\n\n# Import first column from second sheet in my_book: countries\ncountries <- readWorksheet(my_book, sheet = 2, startCol = 1, endCol = 1)\n\n# cbind() urbanpop_sel and countries together: selection\nselection <- cbind(countries, urbanpop_sel)\n```\n:::\n\n\n## Adapting sheets\n\nTheory. Coming soon ...\n\n**1. Adapting sheets**\n\nUp to now, XLConnect isn't blowing your mind, is it? Just listing sheets and importing data from them into R is nothing new. But XLConnect has more to offer than just importing excel data into R. This package is an easy tool to modify the content of your workbook comfortably through R.\n\n**2. New data!**\n\nSay you managed to lay your hands om some fresh population data from 2010, that is stored in a data frame, pop_2010.\n\n**3. createSheet()**\n\nTo store this info a new sheet, we start with loading XLConnect, and making a connection to the workbook. After that, we can use createSheet, and pass the workbook and the name of the new sheet, like this.\n\n**4. createSheet()**\n\nNow we can actually populate our new sheet with the data, for which we'll use\n\n**5. writeWorksheet()**\n\nwriteWorksheet. The first argument, as always, is the workbook, followed by the data we want to add, so pop_2010 and finally the sheet we want to add it to. Let's use the sheet name that was specified in createSheet, but the number of the sheet, 3, would work fine as well.If you open the excel file, though, you won't see the new sheet. You'll have to explicitly save the entire workbook to a file for the changes to take effect.\n\n**6. saveWorkbook()**\n\nYou do this with saveWorkbook, like this.\n\n**7. saveWorkbook()**\n\nI suggest you specify a new filename, cities2.xlsx for example, so you don't overwrite the file you started with.If you now check out the new Excel file, you see that the additional data is in there. Awesome!Suppose that after creating this additional worksheet, you don't feel comfortable with the name you chose. In fact, you want to rename all sheets. Piece of cake:\n\n**8. renameSheet()**\n\njust use the renameSheet function. As uaual, the first argument is the workbook, and then you pass the old name and the new name. We'll use this command three times, the change year with y for the three different sheets.\n\n**9. renameSheet()**\n\nFinally, we save the result again to a new file with saveWorksheet: cities3.xlsx.A quick peek at the new Excel file reveals that we successfully renamed the sheets. Perfect.\n\n**10. removeSheet()**\n\nAnother Excel job would be to remove a sheet altogether. To remove the third sheet here, for example, simply use removeSheet with the workbook and the sheet name or sheet number as arguments.\n\n**11. removeSheet()**\n\nIf you save the workbook to a file again and open up the file, our third sheet is gone.\n\n**12. Wrap-up**\n\nOf course these are pretty basic operations, that you can easily do in Excel as well, but the cool thing is that you can program all of these tasks in R in a reproducible way. If you update the commands that we've used here, and run them all again, one after the other, it should all still work fine.Apart from the functions I discussed here, there are also methods to style cells, getting, setting and recalculate formulas, merging and splitting up cells, the whole shebang. But let's not dive into those here and start small.\n\n## Add worksheet\n\nWhere `readxl` and `gdata` were only able to import Excel data, `XLConnect`'s approach of providing an actual interface to an Excel file makes it able to edit your Excel files from inside R. In this exercise, you'll create a new sheet. In the next exercise, you'll populate the sheet with data, and save the results in a new Excel file.\n\nYou'll continue to work with <a href=\"http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx\" target=\"_blank\" rel=\"noopener noreferrer\">`urbanpop.xlsx`</a>. The `my_book` object that links to this Excel file is already available.\n\n**Steps**\n\n1. Use <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/createSheet-methods\" target=\"_blank\" rel=\"noopener noreferrer\">`createSheet()`</a>, to create a new sheet in `my_book`, named `\"data_summary\"`.\n2. Use <a href=\"https://www.rdocumentation.org/packages/XLConnect/topics/getSheets-methods\" target=\"_blank\" rel=\"noopener noreferrer\">`getSheets()`</a> to verify that `my_book` now represents an Excel file with four sheets.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"data/urbanpop.xlsx\")\n\n# Add a worksheet to my_book, named \"data_summary\"\ncreateSheet(my_book, \"data_summary\")\n\n# Use getSheets() on my_book\ngetSheets(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"1960-1966\"    \"1967-1974\"    \"1975-2011\"    \"data_summary\"\n```\n:::\n:::\n\n\nGreat! It's time to populate your newly created worksheet!\n\n### Populate worksheet\n\nThe first step of creating a sheet is done; let's populate it with some data now! `summ`, a data frame with some summary statistics on the two Excel sheets is already coded so you can take it from there.\n\n**Steps**\n\n1. Use <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/writeWorksheet-methods\" target=\"_blank\" rel=\"noopener noreferrer\">`writeWorksheet()`</a> to populate the `\"data_summary\"` sheet with the `summ` data frame.\n2. Call <a href=\"http://www.rdocumentation.org/packages/XLConnect/functions/saveWorkbook-methods\" target=\"_blank\" rel=\"noopener noreferrer\">`saveWorkbook()`</a> to store the adapted Excel workbook as a new file, `\"summary.xlsx\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Build connection to urbanpop.xlsx\nmy_book <- loadWorkbook(\"data/urbanpop.xlsx\")\n\n# Add a worksheet to my_book, named \"data_summary\"\ncreateSheet(my_book, \"data_summary\")\n\n# Create data frame: summ\nsheets <- getSheets(my_book)[1:3]\ndims <- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)\nsumm <- data.frame(sheets = sheets,\n                   nrows = dims[1, ],\n                   ncols = dims[2, ])\n\n# Add data in summ to \"data_summary\" sheet\nwriteWorksheet(my_book, data = summ, sheet = \"data_summary\")\n\n# Save workbook as summary.xlsx\nsaveWorkbook(my_book, \"data/summary.xlsx\")\n```\n:::\n\n\nGreat! If you took the correct steps, the resulting Excel file looks like [this file](https://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/summary.xlsx).\n\n### Renaming sheets\n\nCome to think of it, `\"data_summary\"` is not an ideal name. As the summary of these excel sheets is always data-related, you simply want to name the sheet `\"summary\"`.\n\nThe code to build a connection to `\"urbanpop.xlsx\"` and create `my_book` is already provided for you. It refers to an Excel file with 4 sheets: the three data sheets, and the `\"data_summary\"` sheet.\n\n\n**Steps**\n\n1. Use `renameSheet()` to rename the fourth sheet to `\"summary\"`.\n2. Next, call `getSheets()` on `my_book` to print out the sheet names.\n3. Finally, make sure to actually save the `my_book` object to a new Excel file, `\"renamed.xlsx\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Rename \"data_summary\" sheet to \"summary\"\nrenameSheet(my_book, \"data_summary\", \"summary\")\n\n# Print out sheets of my_book\ngetSheets(my_book)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"1960-1966\" \"1967-1974\" \"1975-2011\" \"summary\"\n```\n:::\n\n```{.r .cell-code}\n# Save workbook to \"renamed.xlsx\"\nsaveWorkbook(my_book, \"data/renamed.xlsx\")\n```\n:::\n\n\nNice one! You can find the file you just created [here](https://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/renamed.xlsx).\n\n### Removing sheets\n\nAfter presenting the new Excel sheet to your peers, it appears not everybody is a big fan. Why summarize sheets and store the info in Excel if all the information is implicitly available? To hell with it, just remove the entire fourth sheet!\n\n**Steps**\n\n1. Load the `XLConnect` package.\n2. Build a connection to `\"renamed.xlsx\"`, the Excel file that you've built in the previous exercise; it's available in your working directory. Store this connection as `my_book`.\n3. Use `removeSheet()` to remove the fourth sheet from `my_book`. The sheet name is `\"summary\"`. Recall that `removeSheet()` accepts either the index or the name of the sheet as the second argument.\n4. Save the resulting workbook, `my_book`, to a file `\"clean.xlsx\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load the XLConnect package\nlibrary(\"XLConnect\")\n\n# Build connection to renamed.xlsx: my_book\nmy_book <- loadWorkbook(\"data/renamed.xlsx\")\n\n# Remove the fourth sheet\nremoveSheet(my_book, 4)\n\n# Save workbook to \"clean.xlsx\"\nsaveWorkbook(my_book, \"data/clean.xlsx\")\n```\n:::\n\n\nNice one! The file you've created in this exercise is available [here](https://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/clean.xlsx).\n",
    "supporting": [
      "01_importing_data_beginner_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}