{
  "hash": "5df810f39d8d960821134779b315c49d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Unsupervised Learning in R\"\nauthor: \"Joschka Schwarz\"\n---\n\n\n\n\nMany times in machine learning, the goal is to find patterns in data without trying to make predictions. This is called unsupervised learning. One common use case of unsupervised learning is grouping consumers based on demographics and purchasing history to deploy targeted marketing campaigns. Another example is wanting to describe the unmeasured factors that most influence crime differences between cities. This course provides a basic introduction to clustering and dimensionality reduction in R from a machine learning perspective, so that you can get from data to insights as quickly as possible.\\n\n\n# Unsupervised learning in R\n\nThe k-means algorithm is one common approach to clustering. Learn how the algorithm works under the hood, implement k-means clustering in R, visualize and interpret the results, and select the number of clusters when it's not known ahead of time. By the end of the chapter, you'll have applied k-means clustering to a fun \"real-world\" dataset!\n\n## Welcome to the course!\n\nTheory. Coming soon ...\n\n\n**1. Welcome to the course!**\n\nHi! I'm Hank Roark, I'm a long-time data scientist and user of the R language, and I'll be your instructor for this course on unsupervised learning in R.\n\n**2. Chapter 1 overview**\n\nIn this first chapter I will define 'unsupervised learning', provide an overview of the three major types of machine learning, and you will learn how to execute one particular type of unsupervised learning using R.\n\n**3. Types of machine learning**\n\nThere are three major types of machine learning. The first type is unsupervised learning. The goal of unsupervised learning is to find structure in unlabeled data. Unlabeled data is data without a target, without labeled responses.Contrast this with supervised learning. Supervised learning is used when you want to make predictions on labeled data, on data with a target.Types of predictions include regression, or predicting how much of something there is or could be, and classification which is predicting what type or class some thing is or could be.The final type is reinforcement learning, where a computer learns from feedback by operating in a real or synthetic environment.\n\n**4. Labeled vs. unlabeled data**\n\nHere is a quick example of the difference between labeled and unlabeled data. The table on the left is an example with three observations about shapes, each shape with three features, represented by the three columns. This table, the one on the left is an example of unlabeled data.\n\n**5. Labeled vs. unlabeled data**\n\nIf an additional vector of labels is added, like the column of labels on the right hand side, labeling each observation as belonging to one of two groups, then we would have labeled data.\n\n**6. Unsupervised learning - clustering**\n\nWithin unsupervised learning there are two major goals. The first goal is to find homogeneous subgroups within a population. As an example let us pretend we have a population of six people. Each member of this population might have some attributes, or features — some examples of features for a person might be annual income, educational attainment, and gender.\n\n**7. Unsupervised learning - clustering**\n\nWith those three features one might find there are two homogeneous subgroups, or groups where the members are similar by some measure of similarity.\n\n**8. Unsupervised learning - clustering**\n\nOnce the members of each group are found, we might label one group subgroup A and the other subgroup B. The process of finding homogeneous subgroups is referred to as clustering.\n\n**9. Clustering examples**\n\nThere are many possible applications of clustering. One use case is segmenting a market of consumers or potential consumers. This is commonly done by finding groups, or clusters, of consumers based on demographic features and purchasing history.\n\n**10. Clustering examples**\n\nAnother example of clustering would be to find groups of movies based on features of each movie and the reviews of the movies. One might do this to find movies most like another movie.\n\n**11. Unsupervised learning - dimensionality reduction**\n\nThe second goal of unsupervised learning is to find patterns in the features of the data. One way to do this is through 'dimensionality reduction'. Dimensionality reduction is a method to decrease the number of features to describe an observation while maintaining the maximum information content under the constraints of lower dimensionality.\n\n**12. Unsupervised learning - dimensionality reduction**\n\nDimensionality reduction is often used to achieve two goals, in addition to finding patterns in the features of the data.Dimensionality reduction allows one to visually represent high dimensional data while maintaining much of the data variability. This is done because visually representing and understanding data with more than 3 or 4 features can be difficult for both the producer and consumer of the visualization.The third major reason for dimensionality reduction is as a preprocessing step for supervised learning. More on this usage will be covered later.\n\n**13. Challenges and benefits**\n\nFinally a few words about the challenges and benefits typical in performing unsupervised learning.In unsupervised learning there is often no single goal of the analysis. This can be presented as someone asking you, the analyst, \"to find some patterns in the data.\" With that challenge, unsupervised learning often demands and brings out the deep creativity of the analyst.Finally, there is much more unlabeled data than labeled data. This means there are more opportunities to apply unsupervised learning in your work.\n\n**14. Let's practice!**\n\nNow it's your turn to practice what you've learned.\n\n## Identify clustering problems\n\n> *Question*\n> ---\n> Which of the following are clustering problems?\n> \n> 1. Determining how many features it takes to describe most of the variability in data\n> 2. Determining the natural groupings of houses for sale based on size, number of bedrooms, etc.\n> 3. Visualizing 13 dimensional data (data with 13 features)\n> 4. Determining if there are common patterns in the demographics of people at a commerce site\n> 5. Predicting if someone will click on a web advertisement\n> <br>\n> ⬜ 1, 3, and 5<br>\n> ⬜ 2 and 3<br>\n> ⬜ 1, 2, and 4<br>\n> ✅ 2 and 4<br>\n> ⬜ All 5 are clustering problems<br>\n\n## Introduction to k-means clustering\n\nTheory. Coming soon ...\n\n\n**1. Introduction to k-means clustering**\n\nNow that we have some conceptual understanding of unsupervised learning and the different goals of unsupervised learning, let's dig right in with one popular approach to unsupervised learning.\n\n**2. k-means clustering algorithm**\n\nK-means is a clustering algorithm, an algorithm used to find homogeneous subgroups within a population. K-means is the first of two clustering algorithms to be covered in this course.The K-means algorithm works by first assuming the number of subgroups, or clusters, in the data and then assigns each observation to one of those subgroups. In the next video, we will go deeper into how the k-means algorithm works to achieve this goal.For example, one might hypothesize that this data shown on the screen contain 2 subgroups.The k-means algorithm would assign all points in the top right hand corner to one subgroup and all observations in the bottom left hand corner to the other subgroup.\n\n**3. k-means in R**\n\nk-means in R comes with the base R install. Invoking k-means in R is simply a function call to kmeans() function, typically with three parameters.The first parameter is the data, represented as 'x' here. In k-means, like many machine learning algorithms, the data is structured in a matrix with one observation per row of the matrix and one feature in each column of the matrix.The next parameters for 'kmeans' is the number of predetermined groups or clusters. This parameter is called 'centers', for reasons that will be covered in the next video.Finally, the kmeans algorithm has a random component. The implication of this stochastic component is that a single run of kmeans may not find the optimal solution to kmeans.To overcome the random component of the algorithm, 'kmeans' can be run multiple times with the 'best' outcome across all runs being selected as the single outcome. 'nstart' is the parameter that specifies the number of times 'kmeans' will be repeated.There are other parameters to 'kmeans' and I encourage you to check those out in the R documentation when you are ready.\n\n**4. First exercises**\n\nThe first exercises use synthetic data that were generated from three subgroups. But if you plot the data it might only appear to be two subgroups. Later in this chapter, you will see how k-means can be used to estimate the number of subgroups when the number of subgroups is not known a priori.Later in this first chapter of the course, you will get experience applying 'kmeans' with a real world, but fun, dataset.\n\n**5. Let's practice!**\n\nWith that information, let's get started on the first exercise using 'kmeans'.\n\n## k-means clustering\n\nWe have created some two-dimensional data and stored it in a variable called `x` in your workspace. The scatter plot on the right is a visual representation of the data.\n\nIn this exercise, your task is to create a k-means model of the `x` data using 3 clusters, then to look at the structure of the resulting model using the <a href=\"https://www.rdocumentation.org/packages/base/topics/summary\">`summary()`</a> function.\n\n**Steps**\n\n1. Fit a k-means model to `x` using 3 centers and run the k-means algorithm 20 times. Store the result in `km.out`.\n2. Inspect the result with the `summary()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load data\nx <- readRDS(\"data/x.rds\")\nplot(x)\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Create the k-means model: km.out\nkm.out <- kmeans(x, centers = 3, nstart = 20)\n\n# Inspect the result\nsummary(km.out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>              Length Class  Mode   \n#> cluster      300    -none- numeric\n#> centers        6    -none- numeric\n#> totss          1    -none- numeric\n#> withinss       3    -none- numeric\n#> tot.withinss   1    -none- numeric\n#> betweenss      1    -none- numeric\n#> size           3    -none- numeric\n#> iter           1    -none- numeric\n#> ifault         1    -none- numeric\n```\n\n\n:::\n:::\n\n\nGreat work!\n\n## Results of kmeans()\n\nThe `kmeans()` function produces several outputs. In the video, we discussed one output of modeling, the cluster membership.\n\nIn this exercise, you will access the `cluster` component directly. This is useful anytime you need the cluster membership for each observation of the data used to build the clustering model. A future exercise will show an example of how this cluster membership might be used to help communicate the results of k-means modeling.\n\nk-means models also have a print method to give a human friendly output of basic modeling results. This is available by using `print()` or simply typing the name of the model.\n\n**Steps**\n\n1. Print a list of the cluster membership to the console.\n2. Use a print method to print out the `km.out` model.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Print the cluster membership component of the model\nkm.out$cluster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>   [1] 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3\n#>  [38] 3 3 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3\n#>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1\n#> [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 2 3 3 3 3\n#> [260] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3\n#> [297] 3 2 3 3\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print the km.out object\nkm.out\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> K-means clustering with 3 clusters of sizes 150, 98, 52\n#> \n#> Cluster means:\n#>         [,1]        [,2]\n#> 1 -5.0556758  1.96991743\n#> 2  2.2171113  2.05110690\n#> 3  0.6642455 -0.09132968\n#> \n#> Clustering vector:\n#>   [1] 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3\n#>  [38] 3 3 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3\n#>  [75] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1\n#> [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#> [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 2 3 3 3 3\n#> [260] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3\n#> [297] 3 2 3 3\n#> \n#> Within cluster sum of squares by cluster:\n#> [1] 295.16925 148.64781  95.50625\n#>  (between_SS / total_SS =  87.2 %)\n#> \n#> Available components:\n#> \n#> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n#> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"\n```\n\n\n:::\n:::\n\n\nTake a look at all the different components of a k-means model object as you may need to access them in later exercises. Because printing the whole model object to the console outputs many different things, you may wish to instead print a specific component of the model object using the `$` operator. Great work!\n\n## Visualizing and interpreting results of kmeans()\n\nOne of the more intuitive ways to interpret the results of k-means models is by plotting the data as a scatter plot and using color to label the samples' cluster membership. In this exercise, you will use the standard `plot()` function to accomplish this. \n\nTo create a scatter plot, you can pass data with two features (i.e. columns) to `plot()` with an extra argument `col = km.out$cluster`, which sets the color of each point in the scatter plot according to its cluster membership.\n\n**Steps**\n\n1. Using the `plot()` function to create a scatter plot of data `x`:\n\n    * Color the dots on the scatterplot by setting the `col` argument to the `cluster` component in `km.out`. \n    * Title the plot `\"k-means with 3 clusters\"` using the `main` argument to `plot()`.\n    * Ensure there are no axis labels by specifying `\"\"` for both the `xlab` and `ylab` arguments to `plot()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Scatter plot of x\nplot(x, col = km.out$cluster,\n     main = \"k-means with 3 clusters\", \n     xlab = \"\", ylab = \"\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nExcellent! Let's see how the `kmeans()` function works under the hood in the next video.\n\n## How k-means works and practical matters\n\nTheory. Coming soon ...\n\n\n**1. How k-means works and practical matters**\n\nIn this section I am going to help build intuition about how 'kmeans' works internally.\n\n**2. Objectives**\n\nMy goal is to do this through visual understanding; if you are interested in the mathematics, there are many sources available on the web and in print. After that, I will present methods for determining the number of subgroups, or clusters, if that is not known beforehand.\n\n**3. Observations**\n\nHere is data with 2 features. I know that the data for this sample is originally from two subgroups.The first step in the 'kmeans' algorithm is to randomly assign each point to one of the two clusters.\n\n**4. Random cluster assignment**\n\nThis is the random aspect of the kmeans algorithm. Cluster one is represented by empty green circles and cluster two is represented by empty blue triangles.The next step of 'kmeans' is to calculate the centers of each of the two subgroups.\n\n**5. Cluster centers calculated**\n\nThe centers of each subgroup is the average position of all the points in that subgroup. The center for each subgroup is shown as the solid green circle and the solid blue triangle for subgroups 1 and 2 respectfully.Next, each point in the data is assigned to the cluster of the nearest center.\n\n**6. Iteration 1 - after reassignment**\n\nHere, you can see that all the points closest to the solid blue triangle center have been assigned to that cluster. The equivalent is true for the other subgroup.This completes one iteration of the 'kmeans' algorithm. The 'kmeans' algorithm will finish when no points change assignment.In this case, many points change cluster assignment, so another iteration will be completed.\n\n**7. Iteration 2**\n\nHere, we see the kmeans algorithm after completion of 2 iterations. New cluster centers have been calculated and each observation has been assigned to the cluster of the nearest center.\n\n**8. Iteration 3**\n\nAnd here is the algorithm after completion of three iterations. Again some points have changed cluster assignments so another iteration of algorithm will complete.\n\n**9. Iteration 4**\n\nAnd this is after completion of the fourth iteration.\n\n**10. Iteration 5**\n\nThe algorithm is completed after the fifth iteration. No observations have changed assignment from the end of the fourth to the end of this iteration so the 'kmeans' algorithm stops. This final plot thus shows the cluster assignments for each observation and the cluster centers for each of the two clusters.There are other stopping criteria that you can specify for the 'kmeans' algorithm, such as stopping after some number of iterations or if the cluster centers move less than some distance.\n\n**11. Model selection**\n\nBecause kmeans has a random component, it is run multiple times and the best solution is selected from the multiple runs. The 'kmeans' algorithm needs a measurement of model quality to determine the 'best' outcome of multiple runs.'kmeans' in R uses the total within cluster sum of squares as that measurement. The 'kmeans' run with the minimum total within cluster sum of squares is considered the best model.Total within cluster sum of squares is easy to calculate. For each cluster in the model and for each observation assigned to that cluster, calculate the squared distance from the observation to the cluster center. This is just the squared Euclidean distance from plane geometry class.Sum all of the squared distances calculated and that is the total within cluster sum of squares.\n\n**12. Model selection**\n\nR does all of this model selection automatically. By specifying 'nstart' in kmeans, the algorithm will be run 'nstart' times and the run with the lowest total within cluster sum of squares will be the resulting model. This helps the algorithm find a global minimum instead of a local minimum, but does not guarantee that outcome. In the hands-on exercises I will show you how to determine the total within cluster sum of squares from the results of running kmeans.\n\n**13. Running k-means multiple times**\n\nHere is a visual example of running the 'kmeans' algorithm on the same data multiple times. In this case it is known that there are three clusters within the data. The graph on the top right has lowest total within cluster sum of squares.Another item of note — cluster membership is color-coded in these plots, notice the even between runs that find approximately same solution that the cluster memberships are assigned differently — this is not a big deal, just a result of the 'kmeans' algorithm that you should keep in mind. For repeatability, use R's set-seed function before running 'kmeans' to guarantee reproducibility.\n\n**14. Determining the best number of clusters**\n\nIf you don't know the number of subgroups within the data beforehand, there is a way to heuristically determine the number of clusters.You could use trial and error, but instead the best approach is to run 'kmeans' with 1 through some number of clusters, recording the total within cluster sum of squares for each number of clusters. This is then plotted with the number of clusters on the horizontal axis and the total within cluster sum of squares on the vertical axis — this type of plot is referred to as a scree plot.\n\n**15. Determining the best number of clusters**\n\nThere may be an 'elbow' in the plotted data, a place where the total within cluster sum of squares decreases much slower with the addition of another cluster. In the plot above, the elbow appears at 2 clusters. This value can then be used to approximate the number of clusters if it is not given or known beforehand.\n\n**16. Let's practice!**\n\nCool, let's practice what you've learned.\n\n## Handling random algorithms\n\nIn the video, you saw how `kmeans()` randomly initializes the centers of clusters. This random initialization can result in assigning observations to different cluster labels.  Also, the random initialization can result in finding different *local minima* for the k-means algorithm. This exercise will demonstrate both results.\n\nAt the top of each plot, the measure of model quality—total within cluster sum of squares error—will be plotted.  Look for the model(s) with the lowest error to find models with the better model results.\n\nBecause `kmeans()` initializes observations to random clusters, it is important to set the random number generator seed for reproducibility.\n\n**Steps**\n\nYour task is to generate six `kmeans()` models on the data, plotting the results of each, in order to see the impact of random initializations on model results.\n\n    * Set the random number seed to 1 with `set.seed()`.\n    * For each iteration of the `for` loop, run `kmeans()` on `x`. Assume the number of clusters is 3 and number of starts (`nstart`) is 1.\n    * Visualize the cluster memberships using the `col` argument to `plot()`. Observe how the measure of quality and cluster assignments vary among the six model runs.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Set up 2 x 3 plotting grid\npar(mfrow = c(2, 3))\n\n# Set seed\nset.seed(1)\n\nfor(i in 1:6) {\n  # Run kmeans() on x with three clusters and one start\n  km.out <- kmeans(x, centers = 3, nstart = 1)\n  \n  # Plot clusters\n  plot(x, col = km.out$cluster, \n       main = km.out$tot.withinss, \n       xlab = \"\", ylab = \"\")\n}\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nInteresting! Because of the random initialization of the k-means algorithm, there's quite some variation in cluster assignments among the six models.\n\n## Selecting number of clusters\n\nThe k-means algorithm assumes the number of clusters as part of the input.  If you know the number of clusters in advance (e.g. due to certain business constraints) this makes setting the number of clusters easy. However, as you saw in the video, if you do not know the number of clusters and need to determine it, you will need to run the algorithm multiple times, each time with a different number of clusters.  From this, you can observe how a measure of model quality changes with the number of clusters.\n\nIn this exercise, you will run `kmeans()` multiple times to see how model quality changes as the number of clusters changes. Plots displaying this information help to determine the number of clusters and are often referred to as *scree plots*.\n\nThe ideal plot will have an *elbow* where the quality measure improves more slowly as the number of clusters increases. This indicates that the quality of the model is no longer improving substantially as the model complexity (i.e. number of clusters) increases. In other words, the elbow indicates the number of clusters inherent in the data.\n\n**Steps**\n\n1. Build 15 `kmeans()` models on `x`, each with a different number of clusters (ranging from 1 to 15). Set `nstart = 20` for all model runs and save the total within cluster sum of squares for each model to the `i`th element of `wss`.\n2. Run the code provided to create a scree plot of the `wss` for all 15 models.\n3. Take a look at your scree plot. How many clusters are inherent in the data? Set `k` equal to the number of clusters at the location of the elbow.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Initialize total within sum of squares error: wss\nwss <- 0\n\n# For 1 to 15 cluster centers\nfor (i in 1:15) {\n  km.out <- kmeans(x, centers = i, nstart = 20)\n  # Save total within sum of squares to wss variable\n  wss[i] <- km.out$tot.withinss\n}\n\n# Plot total within sum of squares vs. number of clusters\nplot(1:15, wss, type = \"b\", \n     xlab = \"Number of Clusters\", \n     ylab = \"Within groups sum of squares\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Set k equal to the number of clusters corresponding to the elbow location\nk <- 2  # 3 is probably OK, too\n```\n:::\n\n\nLooking at the scree plot, it looks like there are inherently 2 or 3 clusters in the data. Awesome job!\n\n## Introduction to the Pokemon data\n\nTheory. Coming soon ...\n\n\n**1. Introduction to the Pokemon data**\n\nSo far you have applied what you have learned about the 'kmeans' algorithm to synthetic data. In this final set of exercises you will apply your learning to a 'real world' data set.\n\n**2. \"Real\" data exercise**\n\nThis data is about 800 Pokemon from the Pokemon Games (sorry, this isn't from Pokemon Go). This may not be dataset where you have already built intuition. This is normal in data science. You may want to gain some intuition about the data by researching Pokemon in the Pokemon games, or as we will have you do, by poking around in the data.\n\n**3. The Pokemon dataset**\n\nThe data was originally collected by Alberto Barradas and is hosted on Kaggle at the address on the screen. The data contains 6 features for each Pokemon: Hit Points, Attack, Defense, Special Attack, Special Defense, and Speed. This is unlabeled data because there is not a single outcome that we want to predict, just some measurements of each Pokemon's abilities.For the data curious, more information on Pokemon and these features can be found at the second address on the screen. Along with exploring the data, this is another way to build intuition about the data.\n\n**4. Data challenges**\n\nIn the next set of exercises, you will have multiple steps to complete that are typical in handling real world data.The first is determining which variables to use for clustering — it is important to consider which feature should be used in the clustering exercise. Sometimes trying multiple subsets of features is an important step to find patterns in the data.The next, and something we will delay to a later chapter, is scaling the data. If the features being used in modeling are of different units or scales, scaling the data to a common measure is often completed in order to improve the insights gained from unsupervised learning.In this example, you will be finding homogeneous subgroups of Pokemon. The number of clusters is not known beforehand so you will have to make a determination. In real world data, a nice clean elbow on the scree plot rarely exists, so as an analyst, you will have to use some judgement in this step.Finally, a common output of any analysis exercise is a visual representation of the outcomes. This can also be helpful to gain some additional intuition into the data and the resulting models.\n\n**5. Let's practice!**\n\nThis may seem like a lot, but we'll guide you through step-by-step, providing hints and templates all along the way. Let's practice.\n\n## Practical matters: working with real data\n\nDealing with real data is often more challenging than dealing with synthetic data.  Synthetic data helps with learning new concepts and techniques, but the next few exercises will deal with data that is closer to the type of real data you might find in your professional or academic pursuits.\n\nThe first challenge with the Pokemon data is that there is no pre-determined number of clusters.  You will determine the appropriate number of clusters, keeping in mind that in real data the *elbow* in the scree plot might be less of a sharp elbow than in synthetic data.  Use your judgement on making the determination of the number of clusters.\n\nThe second part of this exercise includes plotting the outcomes of the clustering on two dimensions, or features, of the data.  These features were chosen somewhat arbitrarily for this exercise.  Think about how you would use plotting and clustering to communicate interesting groups of Pokemon to other people.\n\nAn additional note: this exercise utilizes the `iter.max` argument to `kmeans()`.  As you've seen, `kmeans()` is an iterative algorithm, repeating over and over until some stopping criterion is reached.  The default number of iterations for `kmeans()` is 10, which is not enough for the algorithm to converge and reach its stopping criterion, so we'll set the number of iterations to 50 to overcome this issue.  To see what happens when `kmeans()` does not converge, try running the example with a lower number of iterations (e.g. 3).  This is another example of what might happen when you encounter real data and use real cases.\n\n**Steps**\n\nThe `pokemon` dataset, which contains observations of 800 Pokemon characters on 6 dimensions (i.e. features), is available.\n\n1. Using `kmeans()` with `nstart = 20`, determine the total within sum of square errors for different numbers of clusters (between 1 and 15).\n2. Pick an appropriate number of clusters based on these results from the first instruction and assign that number to `k`.\n3. Create a k-means model using `k` clusters and assign it to the `km.out` variable.\n4. Create a scatter plot of `Defense` vs. `Speed`, showing cluster membership for each observation.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load package\nlibrary(readr)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> \n#> Attaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\n# load data\npokemon <- read_csv(\"data/Pokemon.csv\") |> \n              select(HitPoints:Speed) |> \n              as.matrix()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Rows: 800 Columns: 13\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr (3): Name, Type1, Type2\n#> dbl (9): Number, Total, HitPoints, Attack, Defense, SpecialAttack, SpecialDe...\n#> lgl (1): Legendary\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Initialize total within sum of squares error: wss\nwss <- 0\n\n# Look over 1 to 15 possible clusters\nfor (i in 1:15) {\n  # Fit the model: km.out\n  km.out <- kmeans(pokemon, centers = i, nstart = 20, iter.max = 50)\n  # Save the within cluster sum of squares\n  wss[i] <- km.out$tot.withinss\n}\n\n# Produce a scree plot\nplot(1:15, wss, type = \"b\", \n     xlab = \"Number of Clusters\", \n     ylab = \"Within groups sum of squares\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Select number of clusters (2, 3, 4 probably OK)\nk <- 3\n\n# Build model with k clusters: km.out\nkm.out <- kmeans(pokemon, centers = k, nstart = 20, iter.max = 50)\n\n# View the resulting model\nkm.out\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> K-means clustering with 3 clusters of sizes 270, 355, 175\n#> \n#> Cluster means:\n#>   HitPoints   Attack   Defense SpecialAttack SpecialDefense    Speed\n#> 1  81.90370 96.15926  77.65556     104.12222       86.87778 94.71111\n#> 2  54.68732 56.93239  53.64507      52.02254       53.04789 53.58873\n#> 3  79.30857 97.29714 108.93143      66.71429       87.04571 57.29143\n#> \n#> Clustering vector:\n#>   [1] 2 2 1 1 2 2 1 1 1 2 2 3 1 2 2 2 2 2 2 1 2 2 1 1 2 2 2 1 2 1 2 1 2 3 2 2 3\n#>  [38] 2 2 1 2 1 2 1 2 2 2 1 2 2 1 2 3 2 1 2 2 2 1 2 1 2 1 2 1 2 2 3 2 1 1 1 2 3\n#>  [75] 3 2 2 1 2 1 2 3 3 2 1 2 3 3 2 1 2 2 1 2 3 2 3 2 3 2 1 1 1 3 2 3 2 3 2 1 2\n#> [112] 1 2 3 3 3 2 2 3 2 3 2 3 3 3 2 1 2 3 2 1 1 1 1 1 1 3 3 3 2 3 3 3 2 2 1 1 1\n#> [149] 2 2 3 2 3 1 1 3 1 1 1 2 2 1 1 1 1 1 2 2 3 2 2 1 2 2 3 2 2 2 1 2 2 2 2 1 2\n#> [186] 1 2 2 2 2 2 2 1 2 2 1 1 3 2 2 3 1 2 2 1 2 2 2 2 2 3 1 3 2 3 1 2 2 1 2 3 2\n#> [223] 3 3 3 2 3 2 3 3 3 3 3 2 2 3 2 3 2 3 2 2 1 2 1 3 2 1 1 1 2 3 1 1 2 2 3 2 2\n#> [260] 2 3 1 1 1 3 2 2 3 3 1 1 1 2 2 1 1 2 2 1 1 2 2 3 3 2 2 2 2 2 2 2 2 2 2 2 1\n#> [297] 2 2 1 2 2 2 3 2 2 1 1 2 2 2 3 2 2 1 2 1 2 2 2 1 2 3 2 3 2 2 2 3 2 3 2 3 3\n#> [334] 3 2 2 1 2 1 1 2 2 2 2 2 2 3 2 1 1 2 1 2 1 3 3 2 1 2 2 2 1 2 1 2 3 1 1 1 1\n#> [371] 3 2 3 2 3 2 3 2 3 2 3 2 1 2 3 2 1 1 2 3 3 2 1 1 2 2 1 1 2 2 1 2 3 3 3 2 2\n#> [408] 3 1 1 2 3 3 1 3 3 3 1 1 1 1 1 1 3 1 1 1 1 1 1 3 1 2 3 3 2 2 1 2 2 1 2 2 1\n#> [445] 2 2 2 2 2 2 1 2 1 2 3 2 3 2 3 3 3 1 2 3 2 2 1 2 1 2 3 1 2 1 2 1 1 1 1 2 1\n#> [482] 2 2 1 2 3 2 2 2 2 3 2 2 1 1 2 2 1 1 2 3 2 3 2 1 3 2 1 2 2 1 3 1 1 3 3 3 1\n#> [519] 1 1 1 3 1 3 1 1 1 1 3 3 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 2\n#> [556] 2 1 2 2 1 2 2 1 2 2 2 2 3 2 1 2 1 2 1 2 1 2 3 2 2 1 2 1 2 3 3 2 1 2 1 3 3\n#> [593] 2 3 3 2 2 1 3 3 2 2 1 2 2 1 2 1 2 1 1 2 2 1 2 3 1 1 2 3 2 3 1 2 3 2 3 2 1\n#> [630] 2 3 2 1 2 1 2 2 3 2 2 1 2 1 2 2 1 2 1 1 2 3 2 3 2 1 3 2 1 2 3 2 3 3 2 2 1\n#> [667] 2 1 2 2 1 2 3 3 2 3 1 2 1 3 2 1 3 2 3 2 3 3 2 3 2 3 1 3 2 2 1 2 1 1 1 1 1\n#> [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 3 2 2 1 2 2 1 2 2 2 2 1 2 2 2 2 1 2 2 1\n#> [741] 2 1 2 3 1 2 1 1 2 3 1 3 2 3 2 1 2 3 2 3 2 3 2 1 2 1 2 3 2 1 1 1 1 3 2 1 1\n#> [778] 3 2 3 2 2 2 2 3 3 3 3 2 3 2 1 1 1 3 3 1 1 1 1\n#> \n#> Within cluster sum of squares by cluster:\n#> [1] 1018348.0  812079.9  709020.5\n#>  (between_SS / total_SS =  40.8 %)\n#> \n#> Available components:\n#> \n#> [1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n#> [6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot of Defense vs. Speed by cluster membership\nplot(pokemon[, c(\"Defense\", \"Speed\")],\n     col = km.out$cluster,\n     main = paste(\"k-means clustering of Pokemon with\", k, \"clusters\"),\n     xlab = \"Defense\", ylab = \"Speed\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-7-2.png){fig-align='center' width=672}\n:::\n:::\n\n\nNice job! You're really getting the hang of k-means clustering quickly!\n\n## Review of k-means clustering\n\nTheory. Coming soon ...\n\n\n**1. Review of k-means clustering**\n\nCongratulations! You have completed the first of four chapters in the Unsupervised Learning in R course.\n\n**2. Chapter review**\n\nYou have covered much in a short period. As a review:You have learned the difference between supervised and unsupervised learning and about the two major goals of unsupervised learning, you have successfully created several k-means cluster models in R, gained intuition about how the k-means algorithm works, learned how to use model selection to handle the circumstance where the number of subgroups is not known beforehand, and finally, you performed clustering to gain insights on a fun real-world dataset.\n\n**3. Coming up: chapter 2**\n\nComing up in Chapter 2, I will cover hierarchical clustering, which is a clustering method that is used when the number of clusters is not provided a priori.\n\n**4. Coming up: chapter 3**\n\nIn Chapter 3, you will learn about principal components analysis, a method for doing dimensionality reduction.\n\n**5. Coming up: chapter 4**\n\nAnd finally in Chapter 4 you will apply everything you learned in the first three chapters to a data set covering breast cancer tumor observations. This will reinforce your learning from the earlier chapters and help you apply these skills to your own datasets.\n\n**6. See you in the next chapter!**\n\nSee you in the next chapter.\n\n# 2. Hierarchical clustering\n\nHierarchical clustering is another popular method for clustering. The goal of this chapter is to go over how it works, how to use it, and how it compares to k-means clustering.\n\n## Introduction to hierarchical clustering\n\nTheory. Coming soon ...\n\n**1. Introduction to hierarchical clustering**\n\nIn this chapter, you will learn about a different method of clustering called hierarchical clustering.\n\n**2. Hierarchical clustering**\n\nHierarchical clustering is used when the number of clusters is not known ahead of time. This is different from kmeans clustering where you first have to specify the number of clusters and then execute the algorithm. There are two approaches to hierarchical clustering: bottom-up and top-down. This course will focus on bottom-up clustering.\n\n**3. Simple example**\n\nTo gain intuition about this, let's start with a simple example of five observations each with two features.\n\n**4. Five clusters**\n\nBottom-up hierarchical clustering starts by assigning each point to its own cluster. So in this example, there are five clusters because there are five points. They are color-coded for reference.\n\n**5. Four clusters**\n\nThe next step of bottom-up hierarchical clustering is to find the closest two clusters and to join them together into a single cluster. In this example, we now have four clusters since the purple and orange clusters are combined into a single cluster.\n\n**6. Three clusters**\n\nThis process continues iteratively, finding the next pair of clusters that are closest to each other and combining them into a single cluster. Here you can see the green and red clusters are combined, resulting in a total of three clusters at this step in the algorithm.\n\n**7. Two clusters**\n\nAgain, the hierarchical cluster algorithm continues by joining the two closest clusters together into a single cluster.\n\n**8. One cluster**\n\nThis continues until there is only one cluster. Once there is only a single cluster, the hierarchical clustering algorithm stops. I have skipped a few details, like how distance is measured between clusters -- those details are not needed right now; but I will cover them in the next few videos.\n\n**9. Hierarchical clustering in R**\n\nPerforming hierarchical clustering in R requires only one parameter -- the distance between the observations. There are many ways to calculate the distance between observations -- for this class we will use standard Euclidean distance. This is calculated using the dist() function in R. The parameter to dist() is a matrix of the same structure as other matrices used in machine learning: one observation per row, one feature per column. The resultant distance matrix is then passed in as the 'd' parameter to the hclust() function in R. This will then return a hierarchical clustering model for interrogation and use. There are a few more parameters available in the hclust() function, but this is enough to get started with creating models. We will cover other typical options later, and as before when you are ready the R documentation for hclust() is a good resource.\n\n**10. Let's practice!**\n\nOK, let's practice what you've learned in the coming exercises. \n\n## Hierarchical clustering with results\n\nIn this exercise, you will create your first hierarchical clustering model using the <a href=\"https://www.rdocumentation.org/packages/stats/topics/hclust\">`hclust()`</a> function.\n\nWe have created some data that has two dimensions and placed it in a variable called `x`. Your task is to create a hierarchical clustering model of `x`. Remember from the video that the first step to hierarchical clustering is determining the similarity between observations, which you will do with the <a href=\"https://www.rdocumentation.org/packages/stats/topics/dist\">`dist()`</a> function.\n\nYou will look at the structure of the resulting model using the `summary()` function.\n\n**Steps**\n\n1. Fit a hierarchical clustering model to `x` using the `hclust()` function. Store the result in `hclust.out`.\n2. Inspect the result with the `summary()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# load data\nx2 <- readRDS(\"data/x2.rds\")\n\n# Create hierarchical clustering model: hclust.out\nhclust.out <- hclust(dist(x2))\n\n# Inspect the result\nsummary(hclust.out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>             Length Class  Mode     \n#> merge       98     -none- numeric  \n#> height      49     -none- numeric  \n#> order       50     -none- numeric  \n#> labels       0     -none- NULL     \n#> method       1     -none- character\n#> call         2     -none- call     \n#> dist.method  1     -none- character\n```\n\n\n:::\n:::\n\n\nAwesome! Now that you've made your first hierarchical clustering model, let's learn how to use it to solve problems.\n\n## Selecting number of clusters\n\nTheory. Coming soon ...\n\n\n**1. Selecting number of clusters**\n\nNow that you have created your first hierarchical cluster model in R, let's take the next step in how to interpret and use a hierarchical cluster model.\n\n**2. Interpreting results**\n\nIf you look at the summary of the hierarchical clustering model the output is somewhat technical and opaque. In all honesty it's not that useful of a summary.\n\n**3. Dendrogram**\n\nTo remedy this issue, first let's build a little more intuition about the hierarchical clustering algorithm.I will be using the same example of 5 observations each with the 2 features you've seen before. These are color-coded and presented in the 2-dimensional plane on the left.The same five points are also presented on the right. On this side we will be building a tree, a dendrogram, which represents the clustering process.\n\n**4. Dendrogram**\n\nAs described before, every observation is made a cluster. Then the closest two clusters are joined together into a single cluster. This is equivalent to two points being joined on the tree representation of the clusters.\n\n**5. Dendrogram**\n\nThis process continues, finding the closest two clusters and joining them into a new cluster. The distance between the clusters is represented as the height of the horizontal line on the dendrogram.\n\n**6. Dendrogram**\n\nThe next iteration then joins the next two closest clusters.\n\n**7. Dendrogram**\n\nThis algorithm continues until only one cluster is remaining. This also completes the tree representation, the dendrogram, of the results of the hierarchical clustering algorithm.\n\n**8. Dendrogram plotting in R**\n\nTo create the dendrogram in R, the output of the hclust() function, the model, is passed into R's plot() function.The next step typical in hierarchical clustering is to determine the number of clusters you want in the model. This is one of the key model selection steps for this algorithm. A way to think about this is as drawing a cut line at a particular 'height' or distance, between the clusters.Choosing the number of clusters based on distance between the clusters is equivalent to drawing a line on the dendrogram at a height equal to the desired distance between clusters. This is done using the abline() function in R, using the 'h' parameter to specify the height to draw the line, and optionally a color for the line, using the parameter 'c-o-l'.Here I show the results of abline() with a horizontal red line. Specifying height of the line is the equivalent of specifying that you want clusters that are no further apart than that height. Distance between cluster can be any metric, but throughout this course we will be using Euclidean distance.In this example, the result is two clusters with the blue, purple, and orange observations assigned to cluster 1 and the red and green observations assigned to cluster 2.\n\n**9. Tree \"cutting\" in R**\n\nFinally, to make cluster assignments for each observation in the cluster, you can use the \"cut tree\" function in R. The \"cut tree\" function takes as its parameters the hierarchical cluster model and either the height at which to cut the dendrogram tree, the 'h' parameter, or the number of clusters you want to maintain, the 'k' parameter. The results are a vector with a numeric cluster assignment for each observation.\n\n**10. Let's practice!**\n\nOk, now it's your turn to practice what you've learned.\n\n## Interpreting dendrogram\n\nThe plot displayed to the right shows the `hclust.out` model you constructed in the previous exercise. We've drawn horizontal lines at heights of 3.5, 4.5, 6.9, and 9.0, respectively. \n\n> *Question*\n> ---\n> Which cut point yields 3 clusters?<br>\n> <br>\n> ⬜ 3.5<br>\n> ⬜ 4.5<br>\n> ✅ 6.9<br>\n> ⬜ 9.0<br>\n\nCorrect! If you cut the tree at a height of 6.9, you're left with 3 branches representing 3 distinct clusters.\n\n## Cutting the tree\n\nRemember from the video that <a href=\"https://www.rdocumentation.org/packages/stats/topics/cutree\">`cutree()`</a> is the R function that cuts a hierarchical model. The `h` and `k` arguments to `cutree()` allow you to cut the tree based on a certain height `h` or a certain number of clusters `k`.\n\nIn this exercise, you will use `cutree()` to cut the hierarchical model you created earlier based on each of these two criteria.\n\n**Steps**\n\n1. Cut the `hclust.out` model at height 7.\n2. Cut the `hclust.out` model to create 3 clusters.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cut by height\ncutree(hclust.out, h = 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 2 2 2\n#> [39] 2 2 2 2 2 2 2 2 2 2 2 2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Cut by number of clusters\ncutree(hclust.out, k = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>  [1] 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 2 2 2\n#> [39] 2 2 2 2 2 2 2 2 2 2 2 2\n```\n\n\n:::\n:::\n\n\nIf you're wondering what the output means, remember, there are 50 observations in the original dataset `x`. The output of each `cutree()` call represents the cluster assignments for each observation in the original dataset. Great work!\n\n## Clustering linkage and practical matters\n\nTheory. Coming soon ...\n\n\n**1. Clustering linkage and practical matters**\n\nI have a couple more details of hierarchical clustering to cover before wrapping up this chapter.\n\n**2. Linking clusters in hierarchical clustering**\n\nThe first detail to cover is how the distance between clusters is determined. As soon as the first two observations are combined into a cluster, the hierarchical clustering algorithm needs rules about how to measure the distance between clusters.There are four methods available in R to measure the distance, or similarity, between clusters.The first method, and the method that is the default to the hclust() function, is the 'complete' method. In the complete method, the distance -- or similarity -- is determined pairwise between all observations in cluster 1 and cluster 2, and the largest distance is used as the distance between the clusters.The second common linkage method is the single method. Again, the pairwise similarity is calculated between points in each cluster, and the smallest such similarity is used as the distance between the clusters.The third common linkage method is the average method. This method uses the average of the pairwise similarities as the distance between the two clusters.The final method works a little different. In the 'centroid' method the centroid of cluster 1 is calculated and the centroid of cluster 2 is calculated, and the distance between the clusters is the distance between the centroids.\n\n**3. Linking methods: complete and average**\n\nIn practice, the choice of linkage is one of those model parameters you will need to choose based on the insights provided by the distance methods. As a rule of thumb, 'Complete' and 'Average' tend to produce more balanced trees and are the most commonly used.Here we see the same data with complete linkage on the left hand side and average linkage on the right hand side.\n\n**4. Linking method: single**\n\n'Single' tends to produce trees where observations are fused in one at a time, producing unbalanced trees.\n\n**5. Linking method: centroid**\n\n'Centroid' linkage can create inversions where clusters are fused below either of the individual clusters; this is undesirable behavior -- as such, this method is used much less often than the others.You can see the inversion here in the clusters with the boxes around them. Those clusters have been fused into the tree below where the individual clusters have been fused.\n\n**6. Linkage in R**\n\nSpecifying linkage in R is only a matter of specifying the 'method' parameter in the call to the hclust() function. The value of the parameter is a string specifying the linkage method -- here we show creating hierarchical cluster models with complete, average, and single linkages.\n\n**7. Practical matters**\n\nAs a final practical matter, many of the machine learning methods, including kmeans and hierarchical clustering, are sensitive to the data which is on different scales or units of measurement.To resolve this, the data is transformed through a linear transformation before performing clustering. This transformation subtracts the mean of a feature from each of the observations, and divides each feature observation by the standard deviation of the feature. This is sometimes referred to as normalization and has the effect of producing a population where the normalized feature has a mean of zero and a standard deviation of one.If you know any of the features are on different scales or units of measure, then it is customary to normalize all the features. Even when the same scales and units of measures are used, it is good practice to check the variability of the means and standard deviations of the features. If the means and standard deviations vary across the features scaling is in order.\n\n**8. Practical matters**\n\nTo check the means of all the features the colMeans() function is used, passing in the data matrix. Because features are in the columns this will return the mean value of each feature in the given observations. To calculate the standard deviation of each feature, the apply() function is used, applying the sd() function to each column, or axis 2, of the matrix.\n\n**9. Practical matters**\n\nProducing a matrix where all features have been normalized is done by passing the original matrix to the scale() method in R. The output is a matrix of the same size, with each feature normalized. Here we show checking that the normalized matrix has column means which are zero, within floating point precision, and column standard deviations of 1.\n\n**10. Let's practice!**\n\nAlright, let's get some practice.\n\n## Linkage methods\n\nIn this exercise, you will produce hierarchical clustering models using different linkages and plot the dendrogram for each, observing the overall structure of the trees.\n\nYou'll be asked to interpret the results in the next exercise.\n\n**Steps**\n\n1. Produce three hierarchical clustering models on `x` using the `\"complete\"`, `\"average\"`, and `\"single\"` linkage methods, respectively.\n2. Plot a dendrogram for each model, using titles of `\"Complete\"`, `\"Average\"`, and `\"Single\"`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cluster using complete linkage: hclust.complete\nhclust.complete <- hclust(dist(x2), method = \"complete\")\n\n# Cluster using average linkage: hclust.average\nhclust.average <- hclust(dist(x2), method = \"average\")\n\n# Cluster using single linkage: hclust.single\nhclust.single <- hclust(dist(x2), method = \"single\")\n\n# Plot dendrogram of hclust.complete\nplot(hclust.complete, main = \"Complete\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot dendrogram of hclust.average\nplot(hclust.average, main = \"Average\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-10-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot dendrogram of hclust.single\nplot(hclust.single, main = \"Single\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-10-3.png){fig-align='center' width=672}\n:::\n:::\n\n\nBefore moving on, make sure to toggle through the plots to compare and contrast the three dendrograms you created. You'll learn about the implications of these differences in the next exercise. Excellent work!\n\n## Comparing linkage methods\n\nThe models you created in the last exercise—`hclust.complete`, `hclust.average`, and `hclust.single`—are available in your workspace. \n\n> *Question*\n> ---\n> Which linkage(s) produce balanced trees?<br>\n> <br>\n> ⬜ Complete only<br>\n> ⬜ Average only<br>\n> ⬜ Single only<br>\n> ⬜ Average and single<br>\n> ✅ Complete and average<br>\n> ⬜ All three<br>\n\nRight! Whether you want balanced or unbalanced trees for your hierarchical clustering model depends on the context of the problem you're trying to solve. Balanced trees are essential if you want an even number of observations assigned to each cluster. On the other hand, if you want to detect outliers, for example, an unbalanced tree is more desirable because pruning an unbalanced tree can result in most observations assigned to one cluster and only a few observations assigned to other clusters.\n\n## Practical matters: scaling\n\nRecall from the video that clustering real data may require *scaling* the features if they have different distributions. So far in this chapter, you have been working with synthetic data that did not need scaling.\n\nIn this exercise, you will go back to working with \"real\" data, the `pokemon` dataset introduced in the first chapter. You will observe the distribution (mean and standard deviation) of each feature, scale the data accordingly, then produce a hierarchical clustering model using the complete linkage method.\n\n**Steps**\n\n1. Observe the mean of each variable in `pokemon` using the `colMeans()` function.\n2. Observe the standard deviation of each variable using the `apply()` and `sd()` functions. Since the variables are the columns of your matrix, make sure to specify 2 as the `MARGIN` argument to `apply()`.\n3. Scale the `pokemon` data using the `scale()` function and store the result in `pokemon.scaled`.\n4. Create a hierarchical clustering model of the `pokemon.scaled` data using the complete linkage method. Manually specify the `method` argument and store the result in `hclust.pokemon`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# View column means\ncolMeans(pokemon)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      HitPoints         Attack        Defense  SpecialAttack SpecialDefense \n#>       69.25875       79.00125       73.84250       72.82000       71.90250 \n#>          Speed \n#>       68.27750\n```\n\n\n:::\n\n```{.r .cell-code}\n# View column standard deviations\napply(pokemon, 2, sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      HitPoints         Attack        Defense  SpecialAttack SpecialDefense \n#>       25.53467       32.45737       31.18350       32.72229       27.82892 \n#>          Speed \n#>       29.06047\n```\n\n\n:::\n\n```{.r .cell-code}\n# Scale the data\npokemon.scaled <- scale(pokemon)\n\n# Create hierarchical clustering model: hclust.pokemon\nhclust.pokemon <- hclust(dist(pokemon.scaled), method = \"complete\")\n```\n:::\n\n\nLet's quickly recap what you just did. You first checked to see if the column means and standard deviations vary. Because they do, you scaled the data, converted the scaled data to a similarity matrix and passed it into the `hclust()` function. Great work!\n\n## Comparing kmeans() and hclust()\n\nComparing k-means and hierarchical clustering, you'll see the two methods produce different cluster memberships. This is because the two algorithms make different assumptions about how the data is generated. In a more advanced course, we could choose to use one model over another based on the quality of the models' assumptions, but for now, it's enough to observe that they are different.\n\nThis exercise will have you compare results from the two models on the `pokemon` dataset to see how they differ.\n\n**Steps**\n\nThe results from running k-means clustering on the `pokemon` data (for 3 clusters) are stored as `km.pokemon`.\n\n1. Using `cutree()` on `hclust.pokemon`, assign cluster membership to each observation. Assume three clusters and assign the result to a vector called `cut.pokemon`.\n2. Using `table()`, compare cluster membership between the two clustering methods. Recall that the different components of k-means model objects can be accessed with the `$` operator.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load data\n# km.pokemon <- kmeans(scale(pokemon), centers = k)\nkm.pokemon <- readRDS(\"data/km.pokemon.rds\")\n\n# Apply cutree() to hclust.pokemon: cut.pokemon\ncut.pokemon <- cutree(hclust.pokemon, k = 3)\n\n# Compare methods\ntable(km.pokemon$cluster, cut.pokemon)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    cut.pokemon\n#>       1   2   3\n#>   1 204   9   1\n#>   2 342   1   0\n#>   3 242   1   0\n```\n\n\n:::\n:::\n\n\nLooking at the table, it looks like the hierarchical clustering model assigns most of the observations to cluster 1, while the k-means algorithm distributes the observations relatively evenly among all clusters. It's important to note that there's no consensus on which method produces better clusters. The job of the analyst in unsupervised clustering is to observe the cluster assignments and make a judgment call as to which method provides more insights into the data. Excellent job!\n\n## Review of hierarchical clustering\n\nTheory. Coming soon ...\n\n\n**1. Review of hierarchical clustering**\n\nCongratulations, you have now successfully completed the clustering chapters.\n\n**2. Hierarchical clustering review**\n\nIn this latest chapter you have learned to create hierarchical clustering models in R,\n\n**3. Linking methods: complete and average**\n\ndescribe how different linkage methods between clusters affect the results of hierarchical clustering,\n\n**4. Hierarchical clustering**\n\nhave gained some intuition\n\n**5. Iterating**\n\nabout how the hierarchical clustering algorithm functions,\n\n**6. Dendrogram**\n\nsaw how to visually represent the results of hierarchical clustering as a dendrogram,\n\n**7. How k-means and hierarchical clustering differ**\n\nlearned the difference between kmeans and hierarchical clustering methods and their outputs,\n\n**8. Practical matters**\n\nand you have successfully applied hierarchical clustering to the Pokemon dataset, dealing with practical matters like scaling the data.\n\n**9. Let's practice!**\n\nLet's continue to the third chapter!\n\n# 3. Dimensionality reduction with PCA\n\nPrincipal component analysis, or PCA, is a common approach to dimensionality reduction. Learn exactly what PCA does, visualize the results of PCA with biplots and scree plots, and deal with practical issues such as centering and scaling the data before performing PCA.\n\n## Introduction to PCA\n\nTheory. Coming soon ...\n\n\n**1. Introduction to PCA**\n\n\n\n**2. Two methods of clustering**\n\nThus far in this course you have learned about two techniques for performing clustering to find similar subgroups within an overall population.The next type of unsupervised machine learning which will be covered is dimensionality reduction. Dimensionality reduction has two main goals: to find structure within features and to aid in visualization.\n\n**3. Dimensionality reduction**\n\nIn this course, I will be covering one particular and popular method of dimensionality reduction -- principal components analysis.Principal component analysis has three goals -First, PCA will find a linear combination of the original features. A linear combination just means it takes some fraction of some or all of the features and adds them together. These new features are called principal components.Second, in those new features, PCA will maintain as much variance as it can from the original data for a given number of principal components.Third, the new features are uncorrelated, or orthogonal to each other.\n\n**4. PCA intuition**\n\nAs with clustering methods, lets build up some intuition about how principal components analysis achieves these goals by studying the simplest example possible.Here we show a data set with two dimensions, or features -- x on the horizontal axis and y on the vertical axis.Each point on the plane represents an observation in the data set, plotted as points.The goal of PCA would be to find a lower dimensional representation of this data that maintains and describes the maximum amount of variance from the original data. Because the original data is of 2 dimensions, the lower dimensional representation will be only one dimension, or feature. That is, PCA will help us map this data from 2 features to 1 feature while maintaining as much data variability as possible.\n\n**5. PCA intuition**\n\nThe first step is to fit a regression line through the data. This line is determined such that it explains all the data with the minimum residual error when those points are mapped to the line.This line is the first principal component of this data.\n\n**6. PCA intuition**\n\nNow we have a new dimension along the line. Each point is then mapped on the line -- projected onto the line. This projected value on the new line is sometimes referred to as the component scores or the factor scores.\n\n**7. Visualization of high dimensional data**\n\nPrincipal components analysis is also often used to aid in visualization of data of high dimensions. Data with more than 3 or 4 features is often difficult to develop an effective visualization for communication, and can put high cognitive loads on the consumers of the visualization.\n\n**8. Visualization**\n\nHere I am showing the well known iris data set. The iris data set consists of four physical measures of a population of three different types of iris flowers.On the left hand side, each of the four variables is scatter-plotted versus each of the other three variables. The different types of the flowers are plotted as different colors.The right hand side is the result of using PCA to map the four original variables to one variable. On the right hand side, the component scores of the original data is shown, using only the first principal component from the iris data set. The first principal component maintains 92% of the variability of the original data.\n\n**9. PCA in R**\n\nCreating a PCA model in R uses the 'prcomp' function. The first parameter this function is the original data, one observation per row, one feature per column, as in other machine learning applications.The scale parameter indicates if the data should be scaled to standard deviation of one (1) before performing PCA -- more on this in a later video. The center parameters indicates if the data should be centered around zero (0) before performing PCA. I highly recommend also leaving this parameter as TRUE.Finally, performing summary on the output of 'prcomp' Indicates the variance explained by each principal component, the cumulative proportion of variance explained as each principal component is added to the previous principal component, and the standard deviations of the principal components.Again, you are encouraged to look at the R documentation for the prcomp() function when you are ready to dig into the options and results of this function more.\n\n**10. Let's practice!**\n\nOk, enough, time to create your first principal components model.\n\n## PCA using prcomp()\n\nIn this exercise, you will create your first PCA model and observe the diagnostic results.\n\nWe have loaded the Pokemon data from earlier, which has four dimensions, and placed it in a variable called `pokemon`. Your task is to create a PCA model of the data, then to inspect the resulting model using the `summary()` function.\n\n**Steps**\n\n1. Create a PCA model of the data in `pokemon`, setting `scale` to `TRUE`.  Store the result in `pr.out`.\n2. Inspect the result with the `summary()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load data\npokemon <- readRDS(\"data/pokemon50.rds\")\n\n# Perform scaled PCA: pr.out\npr.out <- prcomp(pokemon, scale = TRUE)\n\n# Inspect model output\nsummary(pr.out)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Importance of components:\n#>                           PC1    PC2    PC3     PC4\n#> Standard deviation     1.4420 1.0013 0.7941 0.53595\n#> Proportion of Variance 0.5199 0.2507 0.1577 0.07181\n#> Cumulative Proportion  0.5199 0.7705 0.9282 1.00000\n```\n\n\n:::\n:::\n\n\nNice job!\n\n## Results of PCA\n\nThis exercise will check your understanding of the `summary()` of a PCA model. Your model from the last exercise, `pr.out`, and the `pokemon` dataset are still available in your workspace.\n\n> *Question*\n> ---\n> What is the minimum number of principal components that are required to describe at least 75% of the cumulative variance in this dataset?<br>\n> <br>\n> ⬜ 1<br>\n> ✅ 2<br>\n> ⬜ 3<br>\n> ⬜ 4<br>\n\nRight! The first two principal components describe around 77% of the variance.\n\n## Additional results of PCA\n\nPCA models in R produce additional diagnostic and output components:\n\n* `center`: the column means used to center to the data, or `FALSE` if the data weren't centered\n* `scale`: the column standard deviations used to scale the data, or `FALSE` if the data weren't scaled\n* `rotation`: the directions of the principal component vectors in terms of the original features/variables. This information allows you to define new data in terms of the original principal components\n* `x`: the value of each observation in the original dataset projected to the principal components\n\nYou can access these the same as other model components. For example, use `pr.out$rotation` to access the `rotation` component.\n\n> *Question*\n> ---\n> Which of the following statements is **not** correct regarding the `pr.out` model fit on the `pokemon` data?<br>\n> <br>\n> ⬜ The `x` component is a table with the same dimensions as the original data.<br>\n> ⬜ The data were centered prior to performing PCA.<br>\n> ⬜ The data were scaled prior to performing PCA.<br>\n> ✅ The directions of the principal component vectors are presented in a table with the same dimensions as the original data.<br>\n\nRight! Calling `dim()` on `pr.out$rotation` and `pokemon`, you can see they have different dimensions.\n\n## Visualizing and interpreting PCA results\n\nTheory. Coming soon ...\n\n\n**1. Visualizing and interpreting PCA results**\n\nGreat work on making your first PCA model. In this video, we will explore some additional visualizations often used to understand PCA models.\n\n**2. Biplot**\n\nThe first of the two visualizations is known as a biplot. This plot shows all of the original observations as points plotted in the first two principal components. A biplot also shows the original features as vectors mapped onto the first two principal components.In this case, the original features of petal length and petal width are in the same direction in the first two principal components, indicating that these two features are correlated in the original data.\n\n**3. Scree plot**\n\nThe second type of plot is a scree plot. Scree plots for PCA either show the proportion of variance explained by each principal component, as on the left hand side here. Or they show the cumulative percentage of variance explained as the number of principal components increases (until all of the original variance is explained when the number of principal components equals the number of features in the original data). This is shown on the right hand side.\n\n**4. Biplots in R**\n\nCreating a biplot in R from the results of 'prcomp' only requires passing the PCA model into the function 'biplot'.\n\n**5. Scree plots in R**\n\nBuilding up the scree plots requires a few additional steps. First, the standard deviations of each principle component is accessed through the 'sdev' component of the PCA model. Because we want variance instead of standard deviation -- and variance is defined as the square of standard deviation -- we must take the square of each element of 'sdev'.Finally, the proportion of variance for each principle component is determined by dividing by the total variance explained. This is then plotted using R's base plot,\n\n**6. Scree plot**\n\nor your favorite plotting function.\n\n**7. Let's practice!**\n\nOk, let's get started creating some visualizations to help interpret PCA models. We will guide you along the way.\n\n## Interpreting biplots (1)\n\nAs stated in the video, the <a href=\"https://www.rdocumentation.org/packages/stats/topics/biplot\">`biplot()`</a> function plots both the principal components loadings and the mapping of the observations to their \nfirst two principal component values.  The next couple of exercises will check your interpretation of the `biplot()` visualization.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbiplot(pr.out)\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n> *Question*\n> ---\n> Using the `biplot()` of the `pr.out` model, which two original variables have approximately the same loadings in the first two principal components?<br>\n> <br>\n> ✅ `Attack` and `HitPoints`<br>\n> ⬜ `Attack` and `Speed`<br>\n> ⬜ `Speed` and `Defense`<br>\n> ⬜ `HitPoints` and `Defense`<br>\n\nGood job! Continue to the next exercise.\n\n## Interpreting biplots (2)\n\nIn the last exercise, you saw that `Attack` and `HitPoints` have approximately the same loadings in the first two principal components.\n\n> *Question*\n> ---\n> Again using the `biplot()` of the `pr.out` model, which two Pokemon are the least similar in terms of the second principal component?<br>\n> <br>\n> ✅ Kadabra and Torkoal<br>\n> ⬜ Magnemite and Origin<br>\n> ⬜ Forme and Goodra<br>\n> ⬜ Marowak and Golem<br>\n\nNice one!\n\n## Variance explained\n\nThe second common plot type for understanding PCA models is a *scree plot*. A scree plot shows the variance explained as the number of principal components increases. Sometimes the cumulative variance explained is plotted as well.\n\nIn this and the next exercise, you will prepare data from the `pr.out` model you created at the beginning of the chapter for use in a scree plot. Preparing the data for plotting is required because there is not a built-in function in R to create this type of plot.\n\n**Steps**\n\n1. Assign to the variable `pr.var` the square of the standard deviations of the principal components (i.e. the variance). The standard deviation of the principal components is available in the `sdev` component of the PCA model object.\n1. Assign to the variable `pve` the proportion of the variance explained, calculated by dividing `pr.var` by the total variance explained by all principal components.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Variability of each principal component: pr.var\npr.var <- pr.out$sdev^2\n\n# Variance explained by each principal component: pve\npve <- pr.var / sum(pr.var)\n```\n:::\n\n\nGreat work!\n\n## Visualize variance explained\n\nNow you will create a scree plot showing the proportion of variance explained by each principal component, as well as the cumulative proportion of variance explained.\n\nRecall from the video that these plots can help to determine the number of principal components to retain.  One way to determine the number of principal components to retain is by looking for an elbow in the scree plot showing that as the number of principal components increases, the rate at which variance is explained decreases substantially.  In the absence of a clear elbow, you can use the scree plot as a guide for setting a threshold.\n\n**Steps**\n\nThe proportion of variance explained is still available in the `pve` object.\n\n1. Use `plot()` to plot the proportion of variance explained by each principal component.\n2. Use `plot()` and `cumsum()` (cumulative sum) to plot the cumulative proportion of variance explained as a function of the number principal components.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot variance explained for each principal component\nplot(pve, xlab = \"Principal Component\",\n     ylab = \"Proportion of Variance Explained\",\n     ylim = c(0, 1), type = \"b\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Plot cumulative proportion of variance explained\nplot(cumsum(pve), xlab = \"Principal Component\",\n     ylab = \"Cumulative Proportion of Variance Explained\",\n     ylim = c(0, 1), type = \"b\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-16-2.png){fig-align='center' width=672}\n:::\n:::\n\n\nAwesome! Notice that when the number of principal components is equal to the number of original features in the data, the cumulative proportion of variance explained is 1.\n\n## Practical issues with PCA\n\nTheory. Coming soon ...\n\n\n**1. Practical issues with PCA**\n\nBefore PCA is wrapped up there are some practical issues of using PCA on real world data that will be helpful to know.\n\n**2. Practical issues with PCA**\n\nThere are three types of items that need to be considered to complete a successful principal components analysis.The first of these, is dealing with scaling the data. I'll cover this in more detail in just a moment.The second item that sometimes needs to be considered is what to do with observations that have missing data in one or more of the features. There are many ways to address this issue, with one of the simplest approaches being to not include, or drop, observations with missing data.A more complex approach to dealing with missing data is to estimate or impute the missing values. While I will not go into more detail on this item, I wanted you to be aware of these strategies.The third practical matter is how to handle observations with features that are categories -- that is, features that are not numerical. The first strategy is the simplest -- do not include the categorical features in modeling.The second strategy is more involved and requires using one of many methods to encode the categorical features as numbers. This is more detail than I want to cover in this introductory course, but wanted to make sure you were aware of them if the situation presents itself.\n\n**3. mtcars dataset**\n\nNow let's dig into the importance of scaling. Here we will look at the mtcars dataset. This dataset has information about various car models, things like miles per gallon, horsepower, and number of cylinders. Each feature is in different units of measure.\n\n**4. Scaling**\n\nAs with clustering, when features are measured in different units or scales, it is often required to center the data by subtracting the means of each feature, and dividing each feature by its standard deviation to normalize the data.Here it's shown that the means of the features and the standard deviations of the features vary quite a bit, indicating that centering and scaling the data are in order before performing PCA.\n\n**5. Importance of scaling data**\n\nA way to understand the importance of scaling the data is to review the biplots of the mtcars data with and without scaling.In the example on the left hand side, without scaling, the displacement and horsepower features are the features with the largest loadings in the first two principal components, with all the other features being overwhelmed. This is because those two features, displacement and horsepower, have the most variance in the data... but that is true only because they are on a different unit of measure from the other features.On the right hand side is the same original data on a biplot but with scaling performed before doing PCA. This biplot now shows a more even distribution of the loading vectors.\n\n**6. Scaling and PCA in R**\n\nUnlike the clustering algorithms, prcomp in R has the option to perform scaling and centering directly in the principal components algorithm. There are two parameters, center, and scale, used to perform this in R. Setting these to TRUE or FALSE will perform or not perform scaling and centering.\n\n**7. Let's practice!**\n\nThe coming exercises will help you practice what you've learned.\n\n## Practical issues: scaling\n\nYou saw in the video that scaling your data before doing PCA changes the results of the PCA modeling. Here, you will perform PCA with and without scaling, then visualize the results using biplots.\n\nSometimes scaling is appropriate when the variances of the variables are substantially different. This is commonly the case when variables have different units of measurement, for example, degrees Fahrenheit (temperature) and miles (distance). Making the decision to use scaling is an important step in performing a principal component analysis.\n\n**Steps**\n\nThe same Pokemon dataset is available in your workspace as `pokemon`, but one new variable has been added: `Total`.\n\n1. There is some code at the top of the editor to calculate the mean and standard deviation of each variable in the model. Run this code to see how the scale of the variables differs in the original data.\n2. Create a PCA model of `pokemon` with scaling, assigning the result to `pr.with.scaling`.\n3. Create a PCA model of `pokemon` without scaling, assigning the result to `pr.without.scaling`.\n4. Use `biplot()` to plot both models (one at a time) and compare their outputs.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Load data\npokemon <- readRDS(\"data/pokemon50_total.rds\")\n\n# Mean of each variable\ncolMeans(pokemon)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>     Total HitPoints    Attack   Defense     Speed \n#>    448.82     71.08     81.22     78.44     66.58\n```\n\n\n:::\n\n```{.r .cell-code}\n# Standard deviation of each variable\napply(pokemon, 2, sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>     Total HitPoints    Attack   Defense     Speed \n#> 119.32321  25.62193  33.03078  32.05809  27.51036\n```\n\n\n:::\n\n```{.r .cell-code}\n# PCA model with scaling: pr.with.scaling\npr.with.scaling <- prcomp(pokemon, scale = TRUE)\n\n# PCA model without scaling: pr.without.scaling\npr.without.scaling <- prcomp(pokemon, scale = FALSE)\n\n# Create biplots of both for comparison\nbiplot(pr.with.scaling)\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\nbiplot(pr.without.scaling)\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-17-2.png){fig-align='center' width=672}\n:::\n:::\n\n\nGood job! The new `Total` column contains much more variation, on average, than the other four columns, so it has a disproportionate effect on the PCA model when scaling is not performed. After scaling the data, there's a much more even distribution of the loading vectors.\n\n## Additional uses of PCA and wrap-up\n\nTheory. Coming soon ...\n\n\n**1. Additional uses of PCA and wrap-up**\n\nCongratulations again, you have completed the exercises for principal components analysis.\n\n**2. Dimensionality reduction**\n\nDuring this chapter you have learned how to perform PCA in R and have gained some geometric intuition about how the algorithm works.\n\n**3. Data visualization**\n\nYou have learned how PCA can be used to help visualize high dimensionality data,\n\n**4. Interpreting PCA results**\n\nhow to interpret PCA models by making and reading biplots and scree plots,\n\n**5. Importance of data scaling**\n\nand how to deal with one of the most common practical issues when doing PCA: centering and scaling.\n\n**6. Up next**\n\nIn the next and final chapter, you will apply everything you have learned about unsupervised learning to understanding a real-world data set.\n\n**7. Let's practice!**\n\nLet's get started!\n\n# 4. Putting it all together with a case study\n\nThe goal of this chapter is to guide you through a complete analysis using the unsupervised learning techniques covered in the first three chapters. You'll extend what you've learned by combining PCA as a preprocessing step to clustering using data that consist of measurements of cell nuclei of human breast masses.\n\n## Introduction to the case study\n\nTheory. Coming soon ...\n\n\n**1. Introduction to the case study**\n\nThus far you have successfully learned how to do two types of clustering, kmeans and hierarchical, and one type of dimensionality reduction, principal component analysis.\n\n**2. Objectives**\n\nThis chapter is a little different. In this chapter I am going to guide you through a complete analysis using the unsupervised learning techniques you have just learned. I have three reasons for doing this: One, reinforce what you have already learned. Two, add in a few steps not covered before, such as getting and preparing the data, and seeing if the results of unsupervised learning would make good features for supervised learning, and Three, emphasize the creativity required to be successful at unsupervised learning.\n\n**3. Example use case**\n\nThe dataset you will be using in this analysis was published in a paper by Bennett and Mangasarian. Their data consisted of measurements of nuclei of cells of human breast masses. Each observation, or row, is of a single mass or group of cells and consists of ten features. Each feature is a summary statistic of measurements from the cells in that mass.There is also a target variable, or label, in the dataset. The label would be used if you were doing modeling using supervised learning -- it will not be used for modeling during this analysis.\n\n**4. Analysis**\n\nAt a high level you will complete six steps during this analysis. Downloading and preparing the data for modeling, doing some high level exploratory analysis, performing principal component analysis and using visualizations and other mechanisms to interpret the results, completing two types of clustering, understanding and comparing the two types, and finally, combining Principal Component Analysis as a preprocessing step to clustering.During the coding exercises, you will be guided through each step.\n\n**5. Review: PCA in R**\n\nThe exercises immediately following this video include completing principal components analysis on the data. As a reminder, the function in R to do principal component analysis is 'prcomp', and takes as its parameters a matrix of the data with each observation as a row of the matrix and one feature per column of the matrix, plus the options for scaling and centering the data. As covered earlier, if the data uses different scales or units of measure, centering and scaling the data before performing PCA can improve the results of the analysis. And don't forget that the summary function in R, with the output of prcomp() as the input, provides important information about the amount of variability described by each principal component.\n\n**6. Unsupervised learning is open-ended**\n\nThe analysis you are going to step through is but one path that could have been taken -- as you complete this chapter you might want to give thought to what other approaches you might take when presented with an analysis using unsupervised learning.\n\n**7. Let's practice!**\n\nI hope you'll have fun with the next exercises. We'll help you with hints and templates along the way.\n\n## Preparing the data\n\nUnlike prior chapters, where we prepared the data for you for unsupervised learning, the goal of this chapter is to step you through a more realistic and complete workflow.\n\nRecall from the video that the first step is to download and prepare the data.\n\n**Steps**\n\n1. Use `read.csv()` function to download the CSV (comma-separated values) file containing the data from the URL provided. Assign the result to `wisc.df`.\n2. Use `as.matrix()` to convert the features of the data (in columns 3 through 32) to a matrix. Store this in a variable called `wisc.data`.\n3. Assign the row names of `wisc.data` the values currently contained in the `id` column of `wisc.df`.  While not strictly required, this will help you keep track of the different observations throughout the modeling process.\n4. Finally, set a vector called `diagnosis` to be `1` if a diagnosis is malignant (`\"M\"`) and `0` otherwise. Note that R coerces `TRUE` to 1 and `FALSE` to 0.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Download the data: wisc.df\nwisc_df <- read_csv(\"data/WisconsinCancer.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> New names:\n#> • `` -> `...33`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Warning: One or more parsing issues, call `problems()` on your data frame for details,\n#> e.g.:\n#>   dat <- vroom(...)\n#>   problems(dat)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Rows: 569 Columns: 33\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (1): diagnosis\n#> dbl (31): id, radius_mean, texture_mean, perimeter_mean, area_mean, smoothne...\n#> lgl  (1): ...33\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert the features of the data: wisc.data\nwisc_data <- as.matrix(wisc_df[3:32])\n\n# Set the row names of wisc.data\nrow.names(wisc_data) <- wisc_df$id\n\n# Create diagnosis vector\ndiagnosis <- as.numeric(wisc_df$diagnosis == \"M\")\n```\n:::\n\n\nGreat work! You've successfully prepared the data for exploratory data analysis.\n\n## Exploratory data analysis\n\nThe first step of any data analysis, unsupervised or supervised, is to familiarize yourself with the data.\n\nThe variables you created before, `wisc.data` and `diagnosis`, are still available in your workspace. Explore the data to answer the following questions:\n\n> *Question*\n> ---\n> 1. How many observations are in this dataset?<br>\n> 2. How many variables/features in the data are suffixed with _mean?<br>\n> 3. How many of the observations have a malignant diagnosis?<br>\n> <br>\n> ⬜ 569, 5, 112<br>\n> ⬜ 30, 10, 212<br>\n> ✅ 569, 10, 212<br>\n> ⬜ 30, 5, 112<br>\n\n## Performing PCA\n\nThe next step in your analysis is to perform PCA on `wisc.data`.\n\nYou saw in the last chapter that it's important to check if the data need to be scaled before performing PCA.  Recall two common reasons for scaling data:\n\n1. The input variables use different units of measurement.\n2. The input variables have *significantly* different variances.\n\n**Steps**\n\n1. Check the mean and standard deviation of the features of the data to determine if the data should be scaled. Use the `colMeans()` and `apply()` functions like you've done before.\n2. Execute PCA on the `wisc.data`, scaling if appropriate, and assign the model to `wisc.pr`.\n3. Inspect a summary of the results with the `summary()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Check column means and standard deviations\ncolMeans(wisc_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>             radius_mean            texture_mean          perimeter_mean \n#>            1.412729e+01            1.928965e+01            9.196903e+01 \n#>               area_mean         smoothness_mean        compactness_mean \n#>            6.548891e+02            9.636028e-02            1.043410e-01 \n#>          concavity_mean     concave points_mean           symmetry_mean \n#>            8.879932e-02            4.891915e-02            1.811619e-01 \n#>  fractal_dimension_mean               radius_se              texture_se \n#>            6.279761e-02            4.051721e-01            1.216853e+00 \n#>            perimeter_se                 area_se           smoothness_se \n#>            2.866059e+00            4.033708e+01            7.040979e-03 \n#>          compactness_se            concavity_se       concave points_se \n#>            2.547814e-02            3.189372e-02            1.179614e-02 \n#>             symmetry_se    fractal_dimension_se            radius_worst \n#>            2.054230e-02            3.794904e-03            1.626919e+01 \n#>           texture_worst         perimeter_worst              area_worst \n#>            2.567722e+01            1.072612e+02            8.805831e+02 \n#>        smoothness_worst       compactness_worst         concavity_worst \n#>            1.323686e-01            2.542650e-01            2.721885e-01 \n#>    concave points_worst          symmetry_worst fractal_dimension_worst \n#>            1.146062e-01            2.900756e-01            8.394582e-02\n```\n\n\n:::\n\n```{.r .cell-code}\napply(wisc_data, 2, sd)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>             radius_mean            texture_mean          perimeter_mean \n#>            3.524049e+00            4.301036e+00            2.429898e+01 \n#>               area_mean         smoothness_mean        compactness_mean \n#>            3.519141e+02            1.406413e-02            5.281276e-02 \n#>          concavity_mean     concave points_mean           symmetry_mean \n#>            7.971981e-02            3.880284e-02            2.741428e-02 \n#>  fractal_dimension_mean               radius_se              texture_se \n#>            7.060363e-03            2.773127e-01            5.516484e-01 \n#>            perimeter_se                 area_se           smoothness_se \n#>            2.021855e+00            4.549101e+01            3.002518e-03 \n#>          compactness_se            concavity_se       concave points_se \n#>            1.790818e-02            3.018606e-02            6.170285e-03 \n#>             symmetry_se    fractal_dimension_se            radius_worst \n#>            8.266372e-03            2.646071e-03            4.833242e+00 \n#>           texture_worst         perimeter_worst              area_worst \n#>            6.146258e+00            3.360254e+01            5.693570e+02 \n#>        smoothness_worst       compactness_worst         concavity_worst \n#>            2.283243e-02            1.573365e-01            2.086243e-01 \n#>    concave points_worst          symmetry_worst fractal_dimension_worst \n#>            6.573234e-02            6.186747e-02            1.806127e-02\n```\n\n\n:::\n\n```{.r .cell-code}\n# Execute PCA, scaling if appropriate: wisc.pr\nwisc_pr <- prcomp(wisc_data, scale = TRUE)\n\n# Look at summary of results\nsummary(wisc_pr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> Importance of components:\n#>                           PC1    PC2     PC3     PC4     PC5     PC6     PC7\n#> Standard deviation     3.6444 2.3857 1.67867 1.40735 1.28403 1.09880 0.82172\n#> Proportion of Variance 0.4427 0.1897 0.09393 0.06602 0.05496 0.04025 0.02251\n#> Cumulative Proportion  0.4427 0.6324 0.72636 0.79239 0.84734 0.88759 0.91010\n#>                            PC8    PC9    PC10   PC11    PC12    PC13    PC14\n#> Standard deviation     0.69037 0.6457 0.59219 0.5421 0.51104 0.49128 0.39624\n#> Proportion of Variance 0.01589 0.0139 0.01169 0.0098 0.00871 0.00805 0.00523\n#> Cumulative Proportion  0.92598 0.9399 0.95157 0.9614 0.97007 0.97812 0.98335\n#>                           PC15    PC16    PC17    PC18    PC19    PC20   PC21\n#> Standard deviation     0.30681 0.28260 0.24372 0.22939 0.22244 0.17652 0.1731\n#> Proportion of Variance 0.00314 0.00266 0.00198 0.00175 0.00165 0.00104 0.0010\n#> Cumulative Proportion  0.98649 0.98915 0.99113 0.99288 0.99453 0.99557 0.9966\n#>                           PC22    PC23   PC24    PC25    PC26    PC27    PC28\n#> Standard deviation     0.16565 0.15602 0.1344 0.12442 0.09043 0.08307 0.03987\n#> Proportion of Variance 0.00091 0.00081 0.0006 0.00052 0.00027 0.00023 0.00005\n#> Cumulative Proportion  0.99749 0.99830 0.9989 0.99942 0.99969 0.99992 0.99997\n#>                           PC29    PC30\n#> Standard deviation     0.02736 0.01153\n#> Proportion of Variance 0.00002 0.00000\n#> Cumulative Proportion  1.00000 1.00000\n```\n\n\n:::\n:::\n\n\n## Interpreting PCA results\n\nNow you'll use some visualizations to better understand your PCA model. You were introduced to one of these visualizations, the biplot, in an earlier chapter.\n\nYou'll run into some common challenges with using biplots on real-world data containing a non-trivial number of observations and variables, then you'll look at some alternative visualizations. You are encouraged to experiment with additional visualizations before moving on to the next exercise.\n\n**Steps**\n\n1. Create a biplot of the `wisc.pr` data.  *What stands out to you about this plot?  Is it easy or difficult to understand?  Why?*\n2. Execute the code to scatter plot each observation by principal components 1 and 2, coloring the points by the diagnosis.\n3. Repeat the same for principal components 1 and 3.  *What do you notice about these plots?*\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create a biplot of wisc.pr\nbiplot(wisc_pr)\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Scatter plot observations by components 1 and 2\nplot(wisc_pr$x[, c(1, 2)], col = (diagnosis + 1), \n     xlab = \"PC1\", ylab = \"PC2\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-20-2.png){fig-align='center' width=672}\n:::\n\n```{.r .cell-code}\n# Repeat for components 1 and 3\nplot(wisc_pr$x[, c(1, 3)], col = (diagnosis + 1), \n     xlab = \"PC1\", ylab = \"PC3\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-20-3.png){fig-align='center' width=672}\n:::\n:::\n\n\nExcellent work! Because principal component 2 explains more variance in the original data than principal component 3, you can see that the first plot has a cleaner cut separating the two subgroups.\n\n## Variance explained\n\nIn this exercise, you will produce scree plots showing the proportion of variance explained as the number of principal components increases. The data from PCA must be prepared for these plots, as there is not a built-in function in R to create them directly from the PCA model.\n\nAs you look at these plots, ask yourself if there's an elbow in the amount of variance explained that might lead you to pick a natural number of principal components. If an obvious elbow does not exist, as is typical in real-world datasets, consider how else you might determine the number of principal components to retain based on the scree plot.\n\n**Steps**\n\n1. Calculate the variance of each principal component by squaring the `sdev` component of `wisc.pr`. Save the result as an object called `pr.var`.\n2. Calculate the variance explained by each principal component by dividing by the total variance explained of all principal components. Assign this to a variable called `pve`.\n3. Create a plot of variance explained for each principal component.\n4. Using the `cumsum()` function, create a plot of cumulative proportion of variance explained.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Set up 1 x 2 plotting grid\npar(mfrow = c(1, 2))\n\n# Calculate variability of each component\npr_var <- wisc_pr$sdev^2\n\n# Variance explained by each principal component: pve\npve <- pr_var / sum(pr_var)\n\n# Plot variance explained for each principal component\nplot(pve, xlab = \"Principal Component\", \n     ylab = \"Proportion of Variance Explained\", \n     ylim = c(0, 1), type = \"b\")\n\n# Plot cumulative proportion of variance explained\nplot(cumsum(pve), xlab = \"Principal Component\", \n     ylab = \"Cumulative Proportion of Variance Explained\", \n     ylim = c(0, 1), type = \"b\")\n```\n\n::: {.cell-output-display}\n![](03_unsupervised_learning_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nGreat work! Before moving on, answer the following question: What is the minimum number of principal components needed to explain 80% of the variance in the data? Write it down as you may need this in the next exercise :)\n\n## PCA review and next steps\n\nTheory. Coming soon ...\n\n\n**1. PCA review and next steps**\n\nBefore moving on, let me quickly review the analysis thus far and get you on the way to the final steps.\n\n**2. Review thus far**\n\nSo far in this chapter you have completed 2 new steps typical in unsupervised analysis: downloading the data and performing some basic exploratory analysis. These are steps you will have to do in any machine learning work.You also completed a rather detailed principal component analysis and learned a bit about some latent, or unseen, variables that might exist in the observations.\n\n**3. Next steps**\n\nAs a reminder, the next (and final) steps in this particular analysis are to complete two types of clustering on the data, and combine PCA and clustering together. The first exercise on hierarchical clustering also has you compare the results of the clustering to the diagnosis -- if you were doing supervised learning, this step would provide you insights as to if the clusters would be useful features.Next, there is a comparison of the results of the two types of clustering; this type of work is done to contrast the results of the two algorithms and see if they produce similar or different sub-groupings.Finally, you'll combine PCA and clustering. PCA is often used as a preprocessing step for different types of machine learning -- when done that way it creates a type of regularization that helps avoid overfitting the data. In a coming exercise, you will see how PCA affects the results of clustering.\n\n**4. Review: hierarchical clustering in R**\n\nJust some quick reminders on hierarchical clustering:The R function for hierarchical clustering is hclust. hclust takes a matrix of the pair wise distance between observations as its input. You will continue to use Euclidean distance for this exercise.\n\n**5. Review: k-means in R**\n\nAnd to do kmeans in R, use the kmeans function. The kmeans function takes a matrix of the data, the same matrix you prepared earlier in this chapter. kmeans also requires the number of clusters to be decided before the algorithm is run, which is specified using the centers parameter to kmeans.Recall that the kmeans algorithm has a stochastic or random aspect. To improve the chances of finding a global minimum kmeans is run repeatedly keeping the 'best' results, as measured by total within cluster sum of squares, from all the runs -- the number of times kmeans is run is specified by the nstart parameter to kmeans.\n\n**6. Let's practice!**\n\nOk, let's get started.\n\n## Communicating PCA results\n\nThis exercise will check your understanding of the PCA results, in particular the loadings and variance explained. The loadings, represented as vectors, explain the mapping from the original features to the principal components. The principal components are naturally ordered from the most variance explained to the least variance explained.\n\nThe variables you created before—`wisc.data`, `diagnosis`, `wisc.pr`, and `pve`—are still available.\n\n> *Question*\n> ---\n> For the first principal component, what is the component of the loading vector for the feature `concave.points_mean`?  What is the minimum number of principal components required to explain 80% of the variance of the data?<br>\n> <br>\n> ✅ -0.26085376, 5<br>\n> ⬜ -0.25088597, 2<br>\n> ⬜ 0.034767500, 4<br>\n> ⬜ 0.26085376, 5<br>\n\n## Hierarchical clustering of case data\n\nThe goal of this exercise is to do hierarchical clustering of the observations.  Recall from Chapter 2 that this type of clustering does not assume in advance the number of natural groups that exist in the data.\n\nAs part of the preparation for hierarchical clustering, distance between all pairs of observations are computed. Furthermore, there are different ways to *link* clusters together, with *single*, *complete*, and *average* being the most common linkage methods.\n\n**Steps**\n\n1. Scale the `wisc.data` data and assign the result to `data.scaled`.\n2. Calculate the (Euclidean) distances between all pairs of observations in the new scaled dataset and assign the result to `data.dist`.\n3. Create a hierarchical clustering model using complete linkage. Manually specify the `method` argument to `hclust()` and assign the results to `wisc.hclust`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Scale the wisc.data data: data.scaled\ndata_scaled <- scale(wisc_data)\n\n# Calculate the (Euclidean) distances: data.dist\ndata_dist <- dist(data_scaled)\n\n# Create a hierarchical clustering model: wisc.hclust\nwisc_hclust <- hclust(data_dist, method = \"complete\")\n```\n:::\n\n\n## Results of hierarchical clustering\n\nLet's use the hierarchical clustering model you just created to determine a height (or distance between clusters) where a certain number of clusters exists. The variables you created before—`wisc.data`, `diagnosis`, `wisc.pr`, `pve`, and `wisc.hclust`—are all available in your workspace.\n\n> *Question*\n> ---\n> Using the `plot()` function, what is the height at which the clustering model has 4 clusters?<br>\n> <br>\n> ✅ 20<br>\n> ⬜ 4<br>\n> ⬜ 10<br>\n> ⬜ 24<br>\n\n## Selecting number of clusters\n\nIn this exercise, you will compare the outputs from your hierarchical clustering model to the actual diagnoses.  Normally when performing *unsupervised* learning like this, a target variable isn't available. We do have it with this dataset, however, so it can be used to check the performance of the clustering model.\n\nWhen performing *supervised* learning—that is, when you're trying to predict some target variable of interest and that target variable is available in the original data—using clustering to create new features may or may not improve the performance of the final model.  This exercise will help you determine if, in this case, hierarchical clustering provides a promising new feature.\n\n**Steps**\n\n1. Use `cutree()` to cut the tree so that it has 4 clusters.  Assign the output to the variable `wisc_hclust_clusters`.\n2. Use the `table()` function to compare the cluster membership to the actual diagnoses.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cut tree so that it has 4 clusters: wisc.hclust.clusters\nwisc_hclust_clusters <- cutree(wisc_hclust, k = 4)\n\n# Compare cluster membership to actual diagnoses\ntable(wisc_hclust_clusters, diagnosis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                     diagnosis\n#> wisc_hclust_clusters   0   1\n#>                    1  12 165\n#>                    2   2   5\n#>                    3 343  40\n#>                    4   0   2\n```\n\n\n:::\n:::\n\n\nFour clusters were picked after some exploration. Before moving on, you may want to explore how different numbers of clusters affect the ability of the hierarchical clustering to separate the different diagnoses. Great job!\n\n## k-means clustering and comparing results\n\nAs you now know, there are two main types of clustering: hierarchical and k-means.\n\nIn this exercise, you will create a k-means clustering model on the Wisconsin breast cancer data and compare the results to the actual diagnoses and the results of your hierarchical clustering model. Take some time to see how each clustering model performs in terms of separating the two diagnoses and how the clustering models compare to each other.\n\n**Steps**\n\n1. `wisc.data`, `diagnosis`, and `wisc.hclust.clusters` are still available.\n\n    * Create a k-means model on `wisc.data`, assigning the result to `wisc.km`.  Be sure to create 2 clusters, corresponding to the actual number of diagnosis. Also, remember to scale the data and repeat the algorithm 20 times to find a well performing model.\n    * Use the `table()` function to compare the cluster membership of the k-means model to the actual diagnoses contained in the `diagnosis` vector. *How well does k-means separate the two diagnoses?*\n    * Use the `table()` function to compare the cluster membership of the k-means model to the hierarchical clustering model. Recall the cluster membership of the hierarchical clustering model is contained in `wisc.hclust.clusters`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create a k-means model on wisc.data: wisc.km\nwisc_km <- kmeans(scale(wisc_data), centers = 2, nstart = 20)\n\n# Compare k-means to actual diagnoses\ntable(wisc_km$cluster, diagnosis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    diagnosis\n#>       0   1\n#>   1 343  37\n#>   2  14 175\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compare k-means to hierarchical clustering\ntable(wisc_km$cluster, wisc_hclust_clusters)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    wisc_hclust_clusters\n#>       1   2   3   4\n#>   1  17   0 363   0\n#>   2 160   7  20   2\n```\n\n\n:::\n:::\n\n\nNice! Looking at the second table you generated, it looks like clusters 1, 2, and 4 from the hierarchical clustering model can be interpreted as the cluster 1 equivalent from the k-means algorithm, and cluster 3 can be interpreted as the cluster 2 equivalent.\n\n## Clustering on PCA results\n\nIn this final exercise, you will put together several steps you used earlier and, in doing so, you will experience some of the creativity that is typical in unsupervised learning.\n\nRecall from earlier exercises that the PCA model required significantly fewer features to describe 80% and 95% of the variability of the data.  In addition to *normalizing* data and potentially avoiding overfitting, PCA also uncorrelates the variables, sometimes improving the performance of other modeling techniques.\n\nLet's see if PCA improves or degrades the performance of hierarchical clustering.\n\n**Steps**\n\n1. Using the minimum number of principal components required to describe at least 90% of the variability in the data, create a hierarchical clustering model with complete linkage.  Assign the results to `wisc_pr_hclust`.\n2. Cut this hierarchical clustering model into 4 clusters and assign the results to `wisc_pr_hclust_clusters`.\n3. Using `table()`, compare the results from your new hierarchical clustering model with the actual diagnoses. How well does the newly created model with four clusters separate out the two diagnoses?\n4. How well do the k-means and hierarchical clustering models you created in previous exercises do in terms of separating the diagnoses? Again, use the `table()` function to compare the output of each model with the vector containing the actual diagnoses.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create a hierarchical clustering model: wisc.pr.hclust\nwisc_pr_hclust <- hclust(dist(wisc_pr$x[, 1:7]), method = \"complete\")\n\n# Cut model into 4 clusters: wisc_pr_hclust_clusters\nwisc_pr_hclust_clusters <- cutree(wisc_pr_hclust, k = 4)\n\n# Compare to actual diagnoses\ntable(wisc_pr_hclust_clusters, diagnosis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                        diagnosis\n#> wisc_pr_hclust_clusters   0   1\n#>                       1   5 113\n#>                       2 350  97\n#>                       3   2   0\n#>                       4   0   2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Compare to k-means and hierarchical\ntable(wisc_hclust_clusters, diagnosis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>                     diagnosis\n#> wisc_hclust_clusters   0   1\n#>                    1  12 165\n#>                    2   2   5\n#>                    3 343  40\n#>                    4   0   2\n```\n\n\n:::\n\n```{.r .cell-code}\ntable(wisc_km$cluster, diagnosis)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>    diagnosis\n#>       0   1\n#>   1 343  37\n#>   2  14 175\n```\n\n\n:::\n:::\n\n\n## Wrap-up and review\n\nTheory. Coming soon ...\n\n\n**1. Wrap-up and review**\n\nCongratulations! You have completed the final case study chapter and the course on unsupervised learning in R. I imagine you are ready to be done, so let's quickly wrap up.\n\n**2. Case study wrap-up**\n\nThis last chapter presented an entire data analysis using unsupervised learning, from beginning to end. With the knowledge of how to gather and explore a data set, and a creative approach to modeling using unsupervised learning you are prepared to tackle real world problems.\n\n**3. Types of clustering**\n\nDuring this course you have learned how to perform kmeans and hierarchical clustering using R, resulting in finding homogeneous subgroups within a population.\n\n**4. Dimensionality reduction**\n\nYou've learned to decrease the dimensions of data while maintaining maximum data variability using principal components analysis.\n\n**5. Model selection**\n\nAlso, you've seen how to deal with challenges you are likely to experience in your work, such as variable and model selection,\n\n**6. Interpreting PCA results**\n\ninterpreting the results of your modeling,\n\n**7. Importance of scaling data**\n\nand the importance of scaling and centering your data.\n\n**8. Course review**\n\nAll of this has been done using only a few methods and constructs in the R system, demonstrating some of its known strengths for data analysis work.\n\n**9. Dendrogram**\n\nAlso, you have gained intuition about how each of the algorithms works internally,\n\n**10. Strengths and weaknesses of each algorithm**\n\nthe technical strengths and weakness of each algorithm, and how and when to do model selection.\n\n**11. Course review**\n\nFinally, you completed an example use case from beginning to end.\n\n**12. Hone your skills!**\n\nI hope you've enjoyed learning about unsupervised learning in R. The best way to hone your skills is to practice applying them to interesting real-world datasets that you're motivated to explore. Thanks!\n\n",
    "supporting": [
      "03_unsupervised_learning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}