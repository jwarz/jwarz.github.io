{
  "hash": "3b963b71533d725ef7ab46874d15c3f6",
  "result": {
    "markdown": "---\ntitle: \"Modeling with tidymodels in R\"\nauthor: \"Joschka Schwarz\"\ntoc-depth: 2\n---\n\n\n\n\n**Short Description**\n\nLearn to streamline your machine learning workflows with tidymodels.\n\n**Long Description**\n\nTidymodels is a powerful suite of R packages designed to streamline machine learning workflows. Learn to split datasets for cross-validation, preprocess data with tidymodels' recipe package, and fine-tune machine learning algorithms. You'll learn key concepts such as defining model objects and creating modeling workflows. Then, you'll apply your skills to predict home prices and classify employees by their risk of leaving a company.\n\n# 1. Machine Learning with tidymodels\n\nIn this chapter, you’ll explore the rich ecosystem of R packages that power tidymodels and learn how they can streamline your machine learning workflows. You’ll then put your tidymodels skills to the test by predicting house sale prices in Seattle, Washington.\n\n## The tidymodels ecosystem\n\nTheory. Coming soon ...\n\n\n**The tidymodels ecosystem**\n\nHi, my name is David Svancer. I am a data scientist and adjunct professor of Business Analytics at George Mason University. This course will introduce you to tidymodels, a powerful R package for machine learning.\n\n**Collection of machine learning packages**\n\nTidymodels is a collection of R packages designed to support machine learning model development.\n\n* The `rsample` package supports data resampling, and is used for creating random subsets of a dataset for different activities in the modeling process.\n* The `recipes` package contains functions for transforming data for modeling. This step is often called feature engineering.\n* The `parsnip` package is an interface to the vast modeling libraries available in R. It is used for specifying and fitting models as well as obtaining model predictions.\n* The `tune` and `dials` packages provide functionality for fine-tuning models in order to achieve optimal prediction accuracy.\n* The `yardstick` package provides metrics for evaluating the quality of model predictions. Tidymodels was designed to easily iterate over model fitting, tuning, and evaluation, all with a unified R syntax!\n\n**Supervised machine learning**\n\nTidymodels is primarily used for supervised machine learning, where algorithms learn patterns from labeled data.There are two types of supervised machine learning. Regression deals with predicting quantitative outcomes such as home selling prices.Classification deals with predicting categorical outcomes, such as whether an employee will leave a company. The following dataset can be used for this task, where each row represents an employee and each column is a characteristic of that employee.The left_company column provides the labels, or true outcome, for each row and is known as an outcome variable in tidymodels. All other variables are assigned the role of predictor variable.\n\n**Data resampling**\n\nThe first step in modeling is to randomly split the original data into training and test datasets. This guards against a phenomenon known as overfitting, where a model memorizes the patterns in a dataset and then performs poorly on new data. Commonly 75% of the data is allocated into training and 25% into test.The training data is used for feature engineering and modeling while the test data is used to estimate the model's performance on previously unseen data.\n\n**Data: Fuel efficiency data**\n\nWe will be using the mpg dataset to demonstrate regression modeling with tidymodels. It contains fuel efficiency data for over 200 popular cars. The outcome variable is the hwy column, which represents the average highway miles per gallon of each car.\n\n**Data resampling with tidymodels**\n\nTo begin the modeling process, we load the tidymodels package and create a data split object with the initial_split function. A data split object specifies instructions for creating training and test datasets.Initial_split takes a dataset as the first argument, the proportion to allocate to training as the second, and a stratification variable. The outcome variable is used for stratification so that its values have a similar range in both datasets. This prevents fitting a model to data that is different from the typical data it will be given in the future.By passing mpg_split to the training() function, we create the mpg_training dataset that we'll use to train our model, which contains a random 75% of the data.Passing mpg_split to the testing() function creates mpg_test, which we'll use to evaluate our model's performance.\n\n**12. Home sales data**\n\nIn the chapter exercises, you will be working with the home_sales data which contains information on homes sold in the Seattle, Washington area between 2015 and 2016. The outcome variable is the selling_price column.\n\n## Tidymodels packages\n\n`tidymodels` is a collection of machine learning packages designed to simplify the machine learning workflow in R.\n\nIn this exercise, you will assign each package within the tidymodels ecosystem to its corresponding process within the machine learning workflow.\n\n**Steps**\n\nDrag each tidymodels package into the bucket that corresponds to its functionality in the machine learning workflow:\n\n| Data resampling and feature engineering | Model fitting and tuning | Model evaluation |\n| ------- | ----- | --------- |\n| rsample | dials | yardstick | \n| recipes | tune  |           |\n|         | dials |           |\n\n## Creating training and test datasets\n\nThe `rsample` package is designed to create training and test datasets. Creating a test dataset is important for estimating how a trained model will likely perform on new data. It also guards against overfitting, where a model memorizes patterns that exist only in the training data and performs poorly on new data.\n\nIn this exercise, you will create training and test datasets from the `home_sales` data. This data contains information on homes sold in the Seattle, Washington area between 2015 and 2016.\n\nThe outcome variable in this data is `selling_price`.\n\nThe `tidymodels` package will be pre-loaded in every exercise in the course. The `home_sales` tibble has also been loaded for you.\n\n**Steps**\n\n1. Create an `rsample` object, `home_split`, that contains the instructions for randomly splitting the `home_sales` data into a training and test dataset.\n2. Allocate 70% of the data into training and stratify the results by `selling_price`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\n# library(tidymodels)\nlibrary(rsample)\n\n# Load data\nhome_sales <- readRDS(\"data/home_sales.rds\")\n\n# Create a data split object\nhome_split <- initial_split(home_sales, \n                            prop = 0.7, \n                            strata = selling_price)\n```\n:::\n\n\n3. Create a training dataset from `home_split` called `home_training`.\n4. Create the `home_test` tibble by passing `home_split`into the appropriate function for generating test datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package\nlibrary(magrittr)\n\n# Create the training data\nhome_training <- home_split %>%\n  training()\n\n# Create the test data\nhome_test <- home_split %>% \n  testing()\n```\n:::\n\n\n5. Check the number of rows in the training and test datasets by passing them into the `nrow()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check number of rows in each dataset\nnrow(home_training)\nnrow(home_test)\n```\n:::\n\n\nGreat job! Since the `home_sales` data has nearly 1,500 rows, it is appropriate to allocate more rows into the test set. This will provide more data for the model evaluation step.\n\n## Distribution of outcome variable values\n\nStratifying by the outcome variable when generating training and test datasets ensures that the outcome variable values have a similar range in both datasets.\n\nSince the original data is split at random, stratification avoids placing all the expensive homes in `home_sales` into the test dataset, for example. In this case, your model would most likely perform poorly because it was trained on less expensive homes.\n\nIn this exercise, you will calculate summary statistics for the `selling_price` variable in the training and test datasets. The `home_training` and `home_test` tibbles have been loaded from the previous exercise.\n\n**Steps**\n\n1. Calculate the minimum, maximum, mean, and standard deviation of the `selling_price` variable in `home_training`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package\nlibrary(dplyr)\n\n# Distribution of selling_price in training data\nhome_training %>% \n  summarize(min_sell_price = min(selling_price),\n            max_sell_price = max(selling_price),\n            mean_sell_price = mean(selling_price),\n            sd_sell_price = sd(selling_price))\n```\n:::\n\n\n2. Calculate the minimum, maximum, mean, and standard deviation of the `selling_price` variable in `home_test`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distribution of selling_price in test data\nhome_test %>% \n  summarize(min_sell_price = min(selling_price),\n            max_sell_price = max(selling_price),\n            mean_sell_price = mean(selling_price),\n            sd_sell_price = sd(selling_price))\n```\n:::\n\n\nExcellent work! The minimum and maximum selling prices in both datasets are the same. The mean and standard deviation are also similar. Stratifying by the outcome variable ensures the model fitting process is performed on a representative sample of the original data.\n\n## Linear regression with tidymodels\n\nTheory. Coming soon ...\n\n**1. Linear regression with tidymodels**\n\nIn this section, we will fit our first machine learning model, linear regression!\n\n**2. Model fitting with parsnip**\n\nWithin the tidymodels ecosystem, the parsnip package is used for fitting models and calculating predictions.\n\n**3. Linear regression model**\n\nLinear regression estimates the outcome variable as a linear function of the predictor variable. If we are predicting hwy using cty as a predictor from the mpg dataset, then the functional form of the model is written as hwy equals beta0 plus beta1 times cty. Beta0 and beta1 are known as model parameters, and represent the intercept and slope of the line, respectively.\n\n**4. Linear regression model**\n\nThe model parameters are estimated using the training data. The intercept and slope were estimated to be 0 point 77 and 1 point 35, respectively using the mpg_training data. The blue line in the plot graphs our estimated regression line with the mpg training data values.\n\n**5. Model formulas**\n\nBefore parsnip can fit a model to data, it requires columns to be assigned to either an outcome or predictor role. This is done with R formulas and follows the general form of outcome variable on the left followed by a tilde and then by one or more predictor variables separated by plus signs.To use all available columns in a data frame as predictors, the shorthand notation of outcome tilde dot can be used.To predict hwy using cty, we would use hwy tilde cty in our model formula.\n\n**6. The parsnip package**\n\nThe parsnip package provides a unified syntax for model specification in R. Building a parsnip model object involves specifying the model type, such as linear regression, the computational engine, which specifies the underlying package that will be used to fit the model, and the mode which is either regression or classification. With parsnip, it is possible to fit a linear regression with the traditional 'lm' engine provided in base R or the 'stan' engine, which estimates the model parameters using Bayesian parameter estimation. The power of parsnip is that it combines a large number of machine learning packages that fit the same model type using common syntax.\n\n**7. Fitting a linear regression model**\n\nTo fit our linear regression model, we start by defining a parsnip model object named lm_model. We use the linear_reg() function to create a linear regression model object. Then we pass it into the set_engine function where we specify the 'lm' engine. Finally we pass the results into the set_mode() function where we specify 'regression' since we are predicting a numeric outcome variable.To train our model, we pass lm_model to the fit() function and provide a model formula and the data on which to train the model.\n\n**8. Obtaining the estimated parameters**\n\nOnce the model is trained it can be passed into the tidy() function to create a model summary tibble, which is a specialized data frame used in tidymodels. The term and estimate columns provide the estimated model parameters.\n\n**9. Making predictions**\n\nModel predictions are obtained by passing the trained model, lm_fit, to the predict() function. The new_data argument specifies the dataset on which to predict new values and is typically set to the testing dataset.The predict() function returns standardized output that is always a tibble, has the same row order as the data in the new_data argument, and a column named dot-pred with model predictions.\n\n**10. Adding predictions to the test data**\n\nTo evaluate model performance, we will need to add the model predictions to the test dataset. The bind_cols() function can be used to combine multiple data frames along the column axis.First we select the hwy and cty columns in mpg_test and pass this to the bind_cols() function where we add the hwy_predictions tibble.\n\n**11. Let's model!**\n\nLet's practice fitting linear regression models!\n\n## Fitting a linear regression model\n\nThe `parsnip` package provides a unified syntax for the model fitting process in R. \n\nWith `parsnip`, it is easy to define models using the various packages, or engines, that exist in the R ecosystem.\n\nIn this exercise, you will define a `parsnip` linear regression object and train your model to predict `selling_price` using `home_age` and `sqft_living` as predictor variables from the `home_sales` data. \n\nThe `home_training` and `home_test` tibbles that you created in the previous lesson have been loaded into this session.\n\n**Steps**\n\n1. Initialize a linear regression object, `linear_model`, with the appropriate `parsnip` function.\n2. Use the `lm` engine.\n3. Set the mode to `regression`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(parsnip)\n\n# Initialize a linear regression object, linear_model\nlinear_model <- linear_reg() %>% \n  # Set the model engine\n  set_engine('lm') %>% \n  # Set the model mode\n  set_mode('regression')\n```\n:::\n\n\n4. Train your model to predict `selling_price` using `home_age` and `sqft_living` as predictor variables from the `home_training` dataset.\n5. Print `lm_fit` to view the model information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify a linear regression model, linear_model\nlinear_model <- linear_reg() %>% \n  # Set the model engine\n  set_engine('lm') %>% \n  # Set the model mode\n  set_mode('regression')\n\n# Fit the model using the training data\nlm_fit <- linear_model %>% \n  fit(selling_price ~ home_age + sqft_living,\n      data = home_training)\n\n# Print lm_fit to view model information\nlm_fit\n```\n:::\n\n\nExcellent work! You have defined your model with `linear_reg()` and trained it to predict `selling_price` using `home_age` and `sqft_living`. Printing a `parsnip` model fit object displays useful model information, such as the training time, model formula used during training, and the estimated model parameters.\n\n## Exploring estimated model parameters\n\nIn the previous exercise, you trained a linear regression model to predict `selling_price` using `home_age` and `sqft_living` as predictor variables. \n\n> *Question*\n> ---\n> Pass your trained model object into the appropriate function to explore the estimated model parameters and select the true statement.<br>\n> <br>\n> ⬜ The standard error, `std.error`, for the `sqft_living` predictor variable is 175.<br>\n> ⬜ The estimated parameter for the `home_age` predictor variable is 305.<br>\n> ✅ [The estimated parameter for the `sqft_living` predictor variable is 105.]<br>\n> ⬜ The estimated intercept is 127825.<br>\n\nGreat job! The `tidy()` function automatically creates a tibble of estimated model parameters. Since `sqft_living` has a positive estimated parameter, the selling price of homes increases with the square footage. Conversely, since `home_age` has a negative estimated parameter, older homes tend to have lower selling prices.\n\n## Predicting home selling prices\n\nAfter fitting a model using the training data, the next step is to use it to make predictions on the test dataset. The test dataset acts as a new source of data for the model and will allow you to evaluate how well it performs.\n\nBefore you can evaluate model performance, you must add your predictions to the test dataset.\n\nIn this exercise, you will use your trained model, `lm_fit`, to predict `selling_price` in the `home_test` dataset.\n\nYour trained model, `lm_fit`, as well as the test dataset, `home_test` have been loaded into your session.\n\n**Steps**\n\n1. Create a tibble, `home_predictions`, that contains the predicted selling prices of homes in the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict selling_price\nhome_predictions <- predict(lm_fit,\n                            new_data = home_test)\n\n# View predicted selling prices\nhome_predictions\n```\n:::\n\n\n2. Create a tibble with the `selling_price`, `home_age`, and `sqft_living` columns from the test dataset and the predicted home selling prices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine test data with predictions\nhome_test_results <- home_test %>% \n  select(selling_price, home_age, sqft_living) %>% \n  bind_cols(home_predictions)\n\n# View results\nhome_test_results\n```\n:::\n\n\nCongratualtions! You have trained a linear regression model and used it to predict the selling prices of homes in the test dataset! The model only used two predictor variables, but the predicted values in the `.pred` column seem reasonable!\n\n## Evaluating model performance\n\nTheory. Coming soon ...\n\n**1. Evaluating model performance**\n\nAfter fitting a model with the parsnip package, the next step is to evaluate its performance on the test dataset with the yardstick package.\n\n**2. Input to yardstick functions**\n\nAll yardstick functions require a tibble with model results as the first argument. The data must include a column with the true outcome variable values and a column with the model predictions. The mpg_test_results tibble from the previous section is an example of the required input - it contains the true outcome values in the hwy column and model predictions in the dot-pred column.\n\n**3. Root mean squared error (RMSE)**\n\nA common performance metric for regression models is the root mean squared error, or RMSE. The RMSE estimates the average prediction error of a model and is calculated with the rmse() function. To calculate the RMSE on our mpg model, we pass mpg_test_results to the rmse() function and specify hwy as the truth and dot-pred as the estimate. We see that the average prediction error of our model is about 1 point 93 miles per gallon for the estimated highway fuel efficiency values.\n\n**4. R squared metric**\n\nAnother important regression metric is R squared, also known as the coefficient of determination. R squared measures the squared correlation between actual and predicted values and ranges from 0 to 1, where 1 indicates that all predictions equal the true outcome values. R squared is calculated with the rsq() function and takes the same arguments as the rmse() function.\n\n**5. R squared plots**\n\nR squared plots are a way to visualize R squared and consist of a scatter plot with model predictions on the y-axis and true outcome values on the x-axis. The line y = x is also plotted and represents the case where all predictions and outcome values are equal, giving an R squared value of 1. R squared plots are helpful for identifying problems with model performance, such as non-linear relationships between the outcome variable and predictors or regions where the model may be systematically under or over-predicting.\n\n**6. Plotting R squared plots**\n\nR squared plots are made with ggplot2 and require a tibble of model results, such as our mpg_test_results. The geom_point() function is used to create the scatter plot of actual vs predicted values, while the geom_abline() function is used to plot the line y = x. The special coordinate function, coord_obs_pred(), adjusts the x and y axis to the same scale.\n\n**7. Streamlining model fitting**\n\nThe last_fit() function is used to streamline the model fitting and evaluation process in tidymodels. It takes a parnsip model object, model formula, and rsample data split object and performs the following steps. It creates training and test datasets, fits the model to the training data, calculates metrics and predictions on the test data, and returns an object with all the results. To fit our linear regression model on the mpg data, we pass the lm_model parsnip object to last_fit(), specify our model formula, and provide the mpg_split data split object.\n\n**8. Collecting metrics**\n\nOnce the model is trained with the last_fit() function, we pass the lm_last_fit object to the collect_metrics() function to get a tibble with calculated metrics on the test data. The default metrics for regression models are RMSE and R squared and are always stored in the column named dot-estimate. We get the same performance metrics on the mpg_test data as before, just with a lot less work!\n\n**9. Collecting predictions**\n\nTo collect the model predictions on the test data, we pass the lm_last_fit object to the collect_predictions() function and obtain a tibble with the test dataset predictions. The predictions column is always named dot-pred. The outcome variable, hwy in our case, is also included along with other row identifier columns.\n\n**10. Let's evaluate some models!**\n\nLet's practice evaluating model performance with yardstick!\n\n## Model performance metrics\n\nEvaluating model results is an important step in the modeling process. Model evaluation should be done on the test dataset in order to see how well a model will generalize to new datasets.\n\nIn the previous exercise, you trained a linear regression model to predict `selling_price` using `home_age` and `sqft_living` as predictor variables. You then created the `home_test_results` tibble using your trained model on the `home_test` data.\n\nIn this exercise, you will calculate the RMSE and R squared metrics using your results in `home_test_results`.\n\nThe `home_test_results` tibble has been loaded into your session.\n\n**Steps**\n\n1. Using `home_test_results`, calculate the RMSE and R squared metrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package\nlibrary(yardstick)\n\n# Caculate the RMSE metric\nhome_test_results %>% \n  rmse(truth = selling_price, estimate = .pred)\n\n# Calculate the R squared metric\nhome_test_results %>% \n  rsq(truth = selling_price, estimate = .pred)\n```\n:::\n\n\nGreat job! The RMSE metric indicates that the average prediction error for home selling prices is about $48,000. Not bad considering you only used `home_age` and `sqft_living` as predictor variables!\n\n## R squared plot\n\nIn the previous exercise, you got an R squared value of 0.651. The R squared metric ranges from 0 to 1, 0 being the worst and 1 the best.\n\nCalculating the R squared value is only the first step in studying your model's predictions. \n\nMaking an R squared plot is extremely important because it will uncover potential problems with your model, such as non-linear patterns or regions where your model is either over or under-predicting the outcome variable.\n\nIn this exercise, you will create an R squared plot of your model's performance.\n\nThe `home_test_results` tibble has been loaded into your session.\n\n**Steps**\n\n1. Create an R squared plot of your model's performance. The x-axis should have the actual selling price and the y-axis should have the predicted values.\n2. Use the appropriate functions to add the line y = x to your plot and standardize the range of both axes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package\nlibrary(tune)\nlibrary(ggplot2)\n\n# Make an R2 plot using predictions_df\nggplot(home_test_results, aes(x = selling_price, y = .pred)) +\n  geom_point(alpha = 0.5) + \n  geom_abline(color = 'blue', linetype = 2) +\n  tune::coord_obs_pred() +\n  labs(x = 'Actual Home Selling Price', y = 'Predicted Selling Price')\n```\n:::\n\n\nGood work! From the plot, you can see that your model tends to over-predict selling prices for homes that sold for less than $400,000, and under-predict for homes that sold for $600,000 or more. This indicates that you will have to add more predictors to your model or that linear regression may not be able to model the relationship as well as more advanced modeling techniques!\n\n## Complete model fitting process with last_fit()\n\nIn this exercise, you will train and evaluate the performance of a linear regression model that predicts `selling_price` using all the predictors available in the `home_sales` tibble.\n\nThis exercise will give you a chance to perform the entire model fitting process with `tidymodels`, from defining your model object to evaluating its performance on the test data.\n\nEarlier in the chapter, you created an `rsample` object called `home_split` by passing the `home_sales` tibble into `initial_split()`. The `home_split` object contains the instructions for randomly splitting `home_sales` into training and test sets.\n\nThe `home_sales` tibble, and `home_split` object have been loaded into this session.\n\n**Steps**\n\n1. Use the `linear_reg()` function to define a linear regression model object. Use the `lm` engine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a linear regression model\nlinear_model <- linear_reg() %>% \n  set_engine('lm') %>% \n  set_mode('regression')\n```\n:::\n\n\n2. Train your linear regression object with the `last_fit()` function. \n3. In your model formula, use `selling_price` as the outcome variable and all other columns as predictor variables.\n4. Create a tibble with the model's predictions on the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train linear_model with last_fit()\nlinear_fit <- linear_model %>% \n  tune::last_fit(selling_price ~ ., split = home_split)\n\n# Collect predictions and view results\npredictions_df <- linear_fit %>% collect_predictions()\npredictions_df\n```\n:::\n\n\n5. Create an R square plot of the model's performance. The x-axis should have the actual selling price and the y-axis should have the predicted values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Collect predictions and view results\npredictions_df <- linear_fit %>% collect_predictions()\npredictions_df\n\n# Make an R squared plot using predictions_df\nggplot(predictions_df, aes(x = selling_price, y = .pred)) +\n  geom_point(alpha = 0.5) + \n  geom_abline(color = 'blue', linetype = 2) +\n  coord_obs_pred() +\n  labs(x = 'Actual Home Selling Price', y = 'Predicted Selling Price')\n```\n:::\n\n\nGreat work! You have created your first machine learning pipeline and visualized the performance of your model. From the R squared plot, the model still tends to over-predict selling prices for homes that sold for less than $400,000 and under-predict for homes at $600,000 or more, but it is a slight improvement over your previous model with only two predictor variables.\n\n# 2. Classification Models\n\nLearn how to predict categorical outcomes by training classification models. Using the skills you’ve gained so far, you’ll predict the likelihood of customers canceling their service with a telecommunications company.\n\n## Classification models\n\nTheory. Coming soon ...\n\n**1. Classification models**\n\nIn the previous chapter, we predicted continuous outcome variables with regression models. This chapter focuses on the other branch of supervised machine learning - classification.\n\n**2. Predicting product purchases**\n\nClassification models are used for predicting categorical outcome variables.An example might be predicting whether a customer will purchase a product based on the time they spent on a company website and their total website visits. In the dataset below, each row represents a customer and the outcome variable, purchased, consists of two categories, yes and no.Plotting this data and coloring the points by the outcome variable reveals that customers who do purchase products tend to spend more time on the website.\n\n**3. Classification algorithms**\n\nInstead of predicting numbers, classification algorithms produce non-overlapping regions where the same categorical outcome is predicted for all combinations of predictor values.\n\n**4. Classification algorithms**\n\nLogistic regression is a classification model that separates the groups within the outcome variable with a linear function along the set of possible predictor values, also known as a decision boundary.\n\n**5. Lead scoring data**\n\nThroughout this chapter, we will train a logistic regression model on the leads_df tibble, which contains information on whether customers purchased a product based on their website behavior and other demographics.\n\n**6. Data resampling**\n\nAs before, the first step in fitting a model is to create training and test datasets from the original data.For the leads_df data, we create a data split object, leads_split, with the initial_split() function and stratify by our outcome variable, purchased. This ensures that the proportion of yes/no values in the outcome variable is similar in the training and test datasets.Then we pass the data split object to the training() and testing() functions to randomly divide our data.\n\n**7. Logistic regression model specification**\n\nThe logistic_reg() function is the general interface to logistic regression models in parsnip.To specify our logistic regression model, we call the logistic_reg() function, pass it to set_engine() where we select the commonly used 'glm' engine, and finally pass it to set_mode() where we set the mode to 'classification'.\n\n**8. Model fitting**\n\nAs in the regression setting, once a model is specified, the fit() function is used for model training.To train our model, we pass it to the fit function and provide our model formula. Here we are predicting purchased using total_visits and total_time as predictor variables. We also pass the leads_training tibble to the data argument.\n\n**9. Predicting outcome categories**\n\nTo obtain model predictions, we pass our trained model, logistic_fit, to the predict() function and provide leads_test to the new_data argument. We also need to add type is equal to 'class' in order to obtain predicted outcome categories.The predict function always returns a tibble and the predicted categories in a column named dot pred_class.\n\n**10. Estimated probabilities**\n\nWhen we set the type argument to 'prob' within the predict() function, we get a tibble with the estimated probabilities for each outcome variable category for each row in our test data. We will always get one column per category in our outcome variable with the naming convention dot-pred underscore outcome_category. For our model on the leads_df data, we get the columns dot-pred_yes and dot-pred_no.\n\n**11. Combining results**\n\nTo evaluate model performance with yardstick, we will need to combine the outcome variable from the test dataset with the predicted categories and estimated probabilities. As before, this can be done with the bind_cols() function. In the next section we'll explore how to use this results dataset with yardstick metric functions.\n\n**12. Telecommunications data**\n\nThroughout the exercises in this chapter, you will be fitting models to the telecom_df dataset which contains information on customers of a telecommunications company. The outcome variable is canceled_service and indicates whether a customer canceled their cellular and internet service.\n\n**13. Let's practice!**\n\nLet's practice building classification models!\n\n## Data resampling\n\nThe first step in a machine learning project is to create training and test datasets for model fitting and evaluation. The test dataset provides an estimate of how your model will perform on new data and helps to guard against overfitting. \n\nYou will be working with the `telecom_df` dataset which contains information on customers of a telecommunications company. The outcome variable is `canceled_service` and it records whether a customer canceled their contract with the company. The predictor variables contain information about customers' cell phone and internet usage as well as their contract type and monthly charges.\n\nThe `telecom_df` tibble has been loaded into your session.\n\n**Steps**\n\n1. Create an `rsample` object, `telecom_split`, that contains the instructions for randomly splitting the `telecom_df` data into training and test datasets.\\nAllocate 75% of the data into training and stratify the results by `canceled_service`.\n2. Allocate 75% of the data into training and stratify the results by `canceled_service`.\n3. Pass the `telecom_split` object to the appropriate `rsample` functions to create the training and test datasets.\n4. Check the number of rows in each datasets by passing them to the `nrow()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\ntelecom_df <- readRDS(\"data/telecom_df.rds\")\n\n# Create data split object\ntelecom_split <- initial_split(telecom_df, prop = 0.75,\n                               strata = canceled_service)\n\n# Create the training data\ntelecom_training <- telecom_split %>% \n  training()\n\n# Create the test data\ntelecom_test <- telecom_split %>% \n  testing()\n\n# Check the number of rows\nnrow(telecom_training)\nnrow(telecom_test)\n```\n:::\n\n\nGood job! You have 731 (inline execution does work right now. result might vary) rows in your training data and 244 rows in your test dataset. Now you can begin the model fitting process using `telecom_training`.\n\n## Fitting a logistic regression model\n\nIn addition to regression models, the `parsnip` package also provides a general interface to classification models in R.\n\nIn this exercise, you will define a `parsnip` logistic regression object and train your model to predict `canceled_service` using `avg_call_mins`, `avg_intl_mins`, and `monthly_charges` as predictor variables from the `telecom_df` data. \n\nThe `telecom_training` and `telecom_test` tibbles that you created in the previous lesson have been loaded into this session.\n\n**Steps**\n\n1. Initialize a logistic regression object, `logistic_model`, with the appropriate `parsnip` function.\n2. Use the `'glm'` engine.\n3. Set the mode to `'classification'`.\n4. Print the `logistic_model` object to view its specification details.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify a logistic regression model\nlogistic_model <- logistic_reg() %>% \n  # Set the engine\n  set_engine('glm') %>% \n  # Set the mode\n  set_mode('classification')\n\n# Print the model specification\nlogistic_model\n```\n:::\n\n\n5. Train your model to predict `canceled_service` using `avg_call_mins`, `avg_intl_mins`, and `monthly_charges` as predictor variables from the `telecom_training` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify a logistic regression model\nlogistic_model <- logistic_reg() %>% \n  # Set the engine\n  set_engine('glm') %>% \n  # Set the mode\n  set_mode('classification')\n\n# Fit to training data\nlogistic_fit <- logistic_model %>% \n  fit(canceled_service ~ avg_call_mins + avg_intl_mins + monthly_charges,\n      data = telecom_training)\n\n# Print model fit object\nlogistic_fit\n```\n:::\n\n\nGreat job! You have defined your model with `logistic_reg()` and trained it to predict `canceled_service` using `avg_call_mins`, `avg_intl_mins`, and `monthly_charges`. Printing a `parsnip` model specification object displays useful model information, such as the model type, computational engine, and mode. Printing a model fit object will display the estimated model coefficients.\n\n## Combining test dataset results\n\nEvaluating your model's performance on the test dataset gives insights into how well your model predicts on new data sources. These insights will help you communicate your model's value in solving problems or improving decision making.\n\nBefore you can calculate classification metrics such as sensitivity or specificity, you must create a results tibble with the required columns for `yardstick` metric functions.\n\nIn this exercise, you will use your trained model to predict the outcome variable in the `telecom_test` dataset and combine it with the true outcome values in the `canceled_service` column.\n\nYour trained model, `logistic_fit`, and test dataset, `telecom_test`, have been loaded from the previous exercise.\n\n**Steps**\n\n1. Use your trained model and the `predict()` function to create a tibble, `class_preds`, with predicted outcome variable categories using the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict outcome categories\nclass_preds <- predict(logistic_fit, new_data = telecom_test,\n                       type = 'class')\n```\n:::\n\n\n2. Now create a tibble, `prob_preds`, with the estimated probabilities for each category in the outcome variable using the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Predict outcome categories\nclass_preds <- predict(logistic_fit, new_data = telecom_test,\n                       type = 'class')\n\n# Obtain estimated probabilities for each outcome value\nprob_preds <- predict(logistic_fit, new_data = telecom_test, \n                      type = 'prob')\n```\n:::\n\n\n3. Select the outcome variable from the `telecom_test` data.\n4. Add the `class_preds` and `prob_preds` tibbles along the column axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine test set results\ntelecom_results <- telecom_test %>% \n  select(canceled_service) %>% \n  bind_cols(class_preds, prob_preds)\n\n# View results tibble\ntelecom_results\n```\n:::\n\n\nGood job! You have created a tibble of model results using the test dataset. Your results tibble contains all the necessary columns for calculating classification metrics. Next, you'll use this tibble and the `yardstick` package to evalute your model's performance.\n\n## Assessing model fit\n\nTheory. Coming soon ...\n\n**1. Assessing model fit**\n\nThe next step in the modeling process is assessing model performance.\n\n**2. Binary classification**\n\nIn binary classification, we have two possible categories.The positive class is the category that is of interest to predict, such as 'yes' in our purchased variable. The negative class is the remaining category.In tidymodels, the outcome variable must be a factor with the first level as the positive class. To check the ordering of a factor vector, pass it into the levels() function. To change the ordering, assign a character vector with the desired order to this levels() function call.\n\n**3. Confusion matrix**\n\nA confusion matrix displays the counts of all combinations of actual and predicted outcomes from a binary classification model. The predicted categories appear along the rows while the true outcomes appear along the columns.There are two types of correct predictions, known as true positives and true negatives along the diagonal.A binary classification model can make two types of errors. Predicting a positive class for a row that has an actual negative class, known as a false positive, and predicting a negative class for a row with an actual positive class, known as a false negative.\n\n**4. Classification metrics with yardstick**\n\nTo calculate confusion matrices and other metrics we need a tibble of model results that includes the true outcome, the predicted categories, and estimated probabilities for each category.These correspond to the columns in our leads_results tibble.\n\n**5. Confusion matrix with yardstick**\n\nTo create a confusion matrix, we pass the leads_results tibble to the conf_mat() function and set the truth argument to the purchased column and the estimate argument to the dot_pred_class column.We see that our model correctly classified 252 rows in the test dataset. It made 46 false negative errors, where it predicted that a customer will not purchase when in fact they did, and 34 false positive errors, where it predicted that a customer will purchase when in fact they did not.\n\n**6. Classification accuracy**\n\nThe accuracy() function is used to calculate classification accuracy. It takes the same arguments as conf_mat() and calculates the proportion of correctly classified rows in the results tibble. yardstick functions always return a tibble where the dot-metric column lists the name of the calculated metric and the dot-estimate column contains the value.\n\n**7. Sensitivity**\n\nAccuracy is generally not the best metric. Classifying all rows as 'no' in our leads_df data would give an accuracy of 64%, for example.Sensitivity is the proportion of all positive cases that were correctly classified and improves with lower false negative rates.For example, of the customers who did purchase a product, what proportion did our model predict correctly?\n\n**8. Calculating sensitivity**\n\nThe sens() function calculates sensitivity and takes the same arguments as the conf_mat() and accuracy() functions.\n\n**9. Specificity**\n\nSpecificity measures the proportion of all negative cases that were correctly classified and improves with lower false positive rates.For example, of the customers who did not purchase a product, what proportion did our model predict correctly?Another common metric is the false positive rate, which is just 1 minus the specificity and measures the proportion of false positives among all negative cases.\n\n**10. Calculating specificity**\n\nThe spec() function calculates specificity and takes the same arguments as the sens() function.\n\n**11. Creating a metric set**\n\nInstead of calculating metrics one by one, we can create a custom metric function with metric_set().We pass the desired yardstick functions by name into metric_set() to create a new metric function. This new function can be used to calculate our metrics all at once!\n\n**12. Many metrics**\n\nThe yardstick package offers many more metrics, which can be found in the documentation. Passing the results of conf_mat() to the summary() function will calculate all binary classification metrics at once.\n\n**13. Let's practice!**\n\nLet's practice calculating performance metrics!\n\n## Calculating metrics from the confusion matrix\n\nThe confusion matrix of a binary classification model lists the number of correct and incorrect predictions obtained on the test dataset and is useful for evaluating the performance of your model.\n\nSuppose you have trained a classification model that predicts whether customers will cancel their service at a telecommunications company and obtained the following confusion matrix on your test dataset. Here `yes` represents the positive class, while `no` represents the negative class.\n\n<img src=\"https://assets.datacamp.com/production/repositories/5840/datasets/cee821f7fea3fea55283bc7db6eea97caab9904c/sample_confusion_matrix.png\" alt=\"Confusion matrix with 30 true positives, 10 false positives, 40 true negatives, and 20 false negatives\">\n\n> *Question*\n> ---\n> Choose the true statement from the options below.<br>\n> <br>\n> ⬜ The accuracy of this classification model is 0.6.<br>\n> ✅ The sensitivity of this classification model is 0.75.<br>\n> ⬜ The specificity of this classification model is 0.10.<br>\n> ⬜ The false positive rate (1 - specificity) of this classification model is 0.66.<br>\n\nThat's correct. The sensitivity is calculated by taking the proportion of true positives among predicted positives. Your model was able to correctly classify 75% of all customers who actually canceled their service.\n\n## Evaluating performance with yardstick\n\nIn the previous exercise, you calculated classification metrics from a sample confusion matrix. The `yardstick` package was designed to automate this process. \n\nFor classification models, `yardstick` functions require a tibble of model results as the first argument. This should include the actual outcome values, predicted outcome values, and estimated probabilities for each value of the outcome variable.\n\nIn this exercise, you will use the results from your logistic regression model, `telecom_results`, to calculate performance metrics.\n\nThe `telecom_results` tibble has been loaded into your session.\n\n**Steps**\n\n1. Use the appropriate `yardstick` function to create a confusion matrix using the `telecom_results` tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the confusion matrix\nconf_mat(telecom_results, truth = canceled_service,\n         estimate = .pred_class)\n```\n:::\n\n\n2. Calculate the **accuracy** of your model with the appropriate `yardstick` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the accuracy\naccuracy(telecom_results, truth = canceled_service,\n         estimate = .pred_class)\n```\n:::\n\n\n3. Calculate the **sensitivity** of your model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the sensitivity\nsens(telecom_results, truth = canceled_service,\n     estimate = .pred_class)\n```\n:::\n\n\n4. Calculate the **specificity** of your model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the specificity\nspec(telecom_results, truth = canceled_service,\n     estimate = .pred_class)\n```\n:::\n\n\nExcellent work! The specificity of your logistic regression model is 0.895, which is more than double the sensitivity of 0.42. This indicates that your model is much better at detecting customers who will not cancel their telecommunications service versus the ones who will.\n\n## Creating custom metric sets\n\nThe `yardstick` package also provides the ability to create custom sets of model metrics. In cases where the cost of obtaining false negative errors is different from the cost of false positive errors, it may be important to examine a specific set of performance metrics.\n\nInstead of calculating accuracy, sensitivity, and specificity separately, you can create your own metric function that calculates all three at the same time.\n\nIn this exercise, you will use the results from your logistic regression model, `telecom_results`, to calculate a custom set of performance metrics. You will also use a confusion matrix to calculate all available binary classification metrics in `tidymodels`all at once.\n\nThe `telecom_results` tibble has been loaded into your session.\n\n**Steps**\n\n1. Create a custom metric function named `telecom_metrics` using the appropriate `yardstick` function.\\nInclude the `accuracy()`, `sens()`, and `spec()` functions in your custom metric function.\n2. Include the `accuracy()`, `sens()`, and `spec()` functions in your custom metric function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a custom metric function\ntelecom_metrics <- metric_set(accuracy, sens, spec)\n```\n:::\n\n\n3. Use your `telecom_metrics()` function to calculate metrics on the `telecom_results` tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate metrics using model results tibble\ntelecom_metrics(telecom_results, truth = canceled_service,\n                estimate = .pred_class)\n```\n:::\n\n\n4. Create a confusion matrix using the `telecom_results` tibble.\n5. Pass your confusion matrix to the `summary()` function in base R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a confusion matrix\nconf_mat(telecom_results,\n         truth = canceled_service,\n         estimate = .pred_class) %>% \n  # Pass to the summary() function\n  summary()\n```\n:::\n\n\nNice work! You created a custom metric function to calculate accuracy, sensitivity, and specificity. Oftentimes, you will be interested in tracking certain performance metrics for a given modeling problem, but passing a confusion matrix to the `summary()` function will calculate all available binary classification metrics in `tidymodels` at once!\n\n## Visualizing model performance\n\nTheory. Coming soon ...\n\n**1. Visualizing model performance**\n\nIn this section we will explore some common ways to visualize the results of a classification model.\n\n**2. Plotting the confusion matrix**\n\nConfusion matrices generated by the conf_mat() function can be plotted with the autoplot() function. Simply pass the confusion matrix object into autoplot() and set the type to 'heatmap'. This creates a heat map of the counts in the confusion matrix and will highlight the combinations with the largest frequencies.\n\n**3. Mosaic plot**\n\nSetting the type to 'mosaic' within autoplot() will create a mosaic plot of the confusion matrix which visualizes sensitivity and specificity. Each column in this plot represents 100 percent of the actual outcome value in that column. With the leads_results confusion matrix, the height of the yes-yes combination represents the sensitivity\n\n**4. Mosiac plot**\n\nwhile the height of the no-no combination represents the specificity.\n\n**5. Probability thresholds**\n\nIn binary classification, the default probability threshold is point-5. This means that if the estimated probability of the positive class is greater than or equal to point-5, the positive class is predicted.With our leads_results tibble, if the dot-pred_yes column is greater than or equal to point-5, then our predicted outcome, dot-pred_class is set to 'yes' by the predict() function.\n\n**6. Exploring performance across thresholds**\n\nIt's important to explore the performance of a classification model across a range of probability thresholds to see if the model is able to consistently predict well.One way to do this is by using the unique values in the dot-pred_yes column of our leads_result tibble as probability thresholds and calculating the specificity and sensitivity for each one.\n\n**7. Visualizing performance across thresholds**\n\nThe receiver operating characteristic curve, or ROC curve visualizes the performance of a classification model across a range of probability thresholds. For each unique threshold in the previous table, a point that represents the sensitivity and one minus the specificity is added to the plot on the y and x axis, respectively.\n\n**8. Visualizing performance across thresholds**\n\nIn essence, this plot displays the proportion correct among actual positives versus the proportion incorrect among actual negatives across probability thresholds as a step function.\n\n**9. ROC curves**\n\nThe optimal point on this graph is (0, 1) and a classification model that produces points close to the left upper edge across all thresholds is ideal.\n\n**10. ROC curves**\n\nA classification model that produces points along the diagonal line where sensitivity is equal to one minus the specificity indicates poor performance. This is the equivalent of a classification model that predicts outcomes based on the result of randomly flipping a fair coin.\n\n**11. Summarizing the ROC curve**\n\nOne way to summarize an ROC curve is to calculate the area under the curve, known as ROC AUC in tidymodels. This metric has a useful interpretation as a letter grade of classification performance, where values from point-9 to 1 represent an \"A\" and so forth.\n\n**12. Calculating performance across thresholds**\n\nTo plot an ROC curve, we first need to create a tibble with sensitivity and specificity calculations for various thresholds.To do this, we pass our leads_results tibble into the roc_curve() function and set the truth argument to purchased and pass the dot-pred_yes column as the third argument.This will return a tibble with specificity and sensitivity for all unique thresholds in the dot-pred_yes column.\n\n**13. Plotting the ROC curve**\n\nThen we pass the results of roc_curve() to the autoplot() function to display the ROC curve for our classification model.\n\n**14. Calculating ROC AUC**\n\nTo calculate the ROC AUC, we use the roc_auc() function from yardstick. This function takes a tibble of model results, the column with the true outcome values, and the column with estimated probabilities of the positive class.Our logistic regression model has a ROC AUC of point-763, giving us a C in terms of model performance.\n\n**15. Let's practice!**\n\nLet's practice visualizing model performance!\n\n## Plotting the confusion matrix\n\nCalculating performance metrics with the `yardstick` package provides insight into how well a classification model is performing on the test dataset. Most `yardstick` functions return a single number that summarizes classification performance.\n\nMany times, it is helpful to create visualizations of the confusion matrix to more easily communicate your results.\n\nIn this exercise, you will make a heat map and mosaic plot of the confusion matrix from your logistic regression model on the `telecom_df` dataset.\n\nYour model results tibble, `telecom_results`, has been loaded into your session.\n\n**Steps**\n\n1. Create a confusion matrix from your model results, `telecom_results`.\n2. Pass your confusion matrix to the appropriate function for creating heat maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a confusion matrix\nconf_mat(telecom_results,\n         truth = canceled_service,\n         estimate = .pred_class) %>% \n  # Create a heat map\n  autoplot(type = 'heatmap')\n```\n:::\n\n\n3. Create a confusion matrix from your model results.\n4. Pass your confusion matrix to the appropriate function for creating mosaic plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a confusion matrix\nconf_mat(telecom_results,\n         truth = canceled_service,\n         estimate = .pred_class) %>% \n  # Create a mosaic plot\n  autoplot(type = 'mosaic')\n```\n:::\n\n\nGreat job! The mosaic plot clearly shows that your logistic regression model performs much better in terms of specificity than sensitivity. You can see that in the `yes` column, a large proportion of outcomes were incorrectly predicted as `no`.\n\n## ROC curves and area under the ROC curve\n\nROC curves are used to visualize the performance of a classification model across a range of probability thresholds. An ROC curve with the majority of points near the upper left corner of the plot indicates that a classification model is able to correctly predict both the positive and negative outcomes correctly across a wide range of probability thresholds.\n\nThe area under this curve provides a letter grade summary of model performance.\n\nIn this exercise, you will create an ROC curve from your logistic regression model results and calculate the area under the ROC curve with `yardstick`.\n\nYour model results tibble, `telecom_results` has been loaded into your session.\n\n**Steps**\n\n1. Create a tibble, `threshold_df`, which contains the sensitivity and specificity of your classification model across the unique probability thresholds in `telecom_results`.\n2. Print `threshold_df` to view the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate metrics across thresholds\nthreshold_df <- telecom_results %>% \n  roc_curve(truth = canceled_service, .pred_yes)\n\n# View results\nthreshold_df\n```\n:::\n\n\n3. Use `threshold_df` to to plot your model's ROC curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot ROC curve\nthreshold_df %>% \n  autoplot()\n```\n:::\n\n\n4. Calculate the area under the ROC curve using the `telecom_results` tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate ROC AUC\nroc_auc(telecom_results,\n        truth = canceled_service, \n        .pred_yes)\n```\n:::\n\n\nNice work! The area under the ROC curve is 0.76. This indicates that your model gets a C in terms of overall performance. This is mainly due to the low sensitivity of the model.\n\n## Automating the modeling workflow\n\nTheory. Coming soon ...\n\n**1. Automating the modeling workflow**\n\nIn this section, we will focus on applying the last fit workflow that we learned in the regression section to streamline our classification modeling.\n\n**2. Streamlining the workflow**\n\nThe last_fit() function also accepts classification models. This function speeds up the modeling workflow by fitting models to the training data as well as generating predictions on the test data.Before using the last_fit() function, we must create a data split object with rsample and specify our model with parsnip.\n\n**3. Fitting the model and collecting metrics**\n\nTo train our logistic regression model with last_fit(), we pass our logistic_regression model object to the last_fit function and add our model formula followed by our data split object, leads_split.Once the model is trained, we can use the collect_metrics() function to calculate performance metrics on the test dataset. The default metrics are accuracy and ROC AUC. Notice that we get the same performance metrics as before, just with a lot less effort!\n\n**4. Collecting predictions**\n\nPassing a trained last fit model object into the collect_predictions() function will create a tibble of model results on the test dataset. The results tibble will contain all the required columns for calculating performance metrics with yardstick functions.The important columns for our logistic regression model on the leads_df data are dot-pred_yes, dot-pred_no, dot-pred_class, and purchased.\n\n**5. Custom metric sets**\n\nA special adjustment must be made when creating custom metric functions using metric_set() that include the roc_auc() function from yardstick.If we would like to create a metric set with accuracy, sensitivity, specificity, and ROC AUC, then we must remember that the accuracy(), sens(), and spec() functions take slightly different arguments than the roc_auc() function. The accuracy(), sens(), and spec() functions require a truth and estimate column, while the roc_auc() function requires a truth column and a column which has the estimated probabilities for the positive class.For our last_fit_results tibble, the truth column is purchased, the estimate column is dot-pred_class, and the estimated probabilities for the positive class is the dot-pred_yes column.All three of these must be passed to our custom metrics function, with dot-pred_yes as the last argument, in order for it to work properly.\n\n**6. Let's practice!**\n\nLet's practice fitting logistic regression models with the last fit workflow!\n\n## Streamlining the modeling process\n\nThe `last_fit()` function is designed to streamline the modeling workflow in `tidymodels`. Instead of training your model on the training data and building a results tibble using the test data, `last_fit()` accomplishes this with one function. \n\nIn this exercise, you will train the same logistic regression model as you fit in the previous exercises, except with the `last_fit()` function.\n\nYour data split object, `telecom_split`, and model specification, `logistic_model`, have been loaded into your session.\n\n**Steps**\n\n1. Pass your `logistic_model` object into the `last_fit()` function.\n2. Predict `canceled_service` using `avg_call_mins`, `avg_intl_mins`, and `monthly_charges`.\n3. Display the performance metrics of your trained model, `telecom_last_fit`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train model with last_fit()\ntelecom_last_fit <- logistic_model %>% \n  last_fit(canceled_service ~ avg_call_mins + avg_intl_mins + monthly_charges,\n           split = telecom_split)\n\n# View test set metrics\ntelecom_last_fit %>% \n  collect_metrics()\n```\n:::\n\n\nExcellent work! Notice that you got the same area under the ROC curve as before, just with a lot less effort!\n\n## Collecting predictions and creating custom metrics\n\nUsing the `last_fit()` modeling workflow also saves time in collecting model predictions. Instead of manually creating a tibble of model results, there are helper functions that extract this information automatically.\n\nIn this exercise, you will use your trained model, `telecom_last_fit`, to create a tibble of model results on the test dataset as well as calculate custom performance metrics.\n\nYou trained model, `telecom_last_fit`, has been loaded into this session.\n\n**Steps**\n\n1. Create a tibble, `last_fit_results`, that has the predictions from your `telecom_last_fit` model.\n2. Print the results to the console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Collect predictions\nlast_fit_results <- telecom_last_fit %>% \n  collect_predictions()\n\n# View results\nlast_fit_results\n```\n:::\n\n\n3. Create a custom metric function, `last_fit_metrics`, using the `metric_set()` function.\n4. Include the accuracy, sensitivity, specificity, and area under the ROC curve in your metric function, in that order.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Custom metrics function\nlast_fit_metrics <- metric_set(accuracy, sens,\n                               spec, roc_auc)\n```\n:::\n\n\n5. Use the `last_fit_metrics()` function to calculate your custom metrics on the `last_fit_results` tibble.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate metrics\nlast_fit_metrics(last_fit_results,\n                 truth = canceled_service,\n                 estimate = .pred_class,\n                 .pred_yes)\n```\n:::\n\n\nGreat job! You were able to train and evaluate your logistic regression model in half the time! Notice that all performance metrics match the results you obtained in previous exercises.\n\n## Complete modeling workflow\n\nIn this exercise, you will use the `last_fit()` function to train a logistic regression model and evaluate its performance on the test data by assessing the ROC curve and the area under the ROC curve. \n\nSimilar to previous exercises, you will predict `canceled_service` in the `telecom_df` data, but with an additional predictor variable to see if you can improve model performance.\n\nThe `telecom_df` tibble, `telecom_split`, and `logistic_model` objects from the previous exercises have been loaded into your workspace. The `telecom_split` object contains the instructions for randomly splitting the `telecom_df` tibble into training and test sets. The `logistic_model` object is a `parsnip` specification of a logistic regression model.\n\n**Steps**\n\n1. Train your model to predict `canceled_service` using `avg_call_mins`, `avg_intl_mins`, `monthly_charges`, and `months_with_company`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train a logistic regression model\nlogistic_fit <- logistic_model %>% \n  last_fit(canceled_service ~ avg_call_mins + avg_intl_mins + monthly_charges + months_with_company, \n           split = telecom_split)\n```\n:::\n\n\n2. Collect and print the performance metrics on the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Collect metrics\nlogistic_fit %>% \n  collect_metrics()\n```\n:::\n\n\n3. Collect your model predictions.\n4. Pass the predictions to the appropriate function to calculate sensitivity and specificity for different probability thresholds.\n5. Pass the results to the appropriate plotting function to create an ROC curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Collect model predictions\nlogistic_fit %>% \n  collect_predictions() %>% \n  # Plot ROC curve\n  roc_curve(truth = canceled_service, .pred_yes) %>% \n  autoplot()\n```\n:::\n\n\nExcellent work! The ROC curve shows that the logistic regression model performs better than a model that guesses at random (the dashed line in the plot). Adding the `months_with_company` predictor variable increased your area under the ROC curve from 0.76 in your previous model to 0.837!\n\n# 3. Feature Engineering\n\nFind out how to bake feature engineering pipelines with the recipes package. You’ll prepare numeric and categorical data to help machine learning algorithms optimize your predictions.\n\n## Feature engineering\n\nTheory. Coming soon ...\n\n**1. Feature engineering**\n\nIn this chapter, we will explore the recipes package and feature engineering, which is the process of transforming data to a format that is suitable for machine learning algorithms.\n\n**2. Feature engineering with the recipes package**\n\nFeature engineering is accomplished with the recipes package. It is designed to help with all stages of feature engineering, which include assigning variable roles to the columns of our data, defining preprocessing tasks and data transformations, training our data transformations, and applying them to new data sources.\n\n**3. Specifying variable types and roles**\n\nThe first step in feature engineering is assigning each column in our data to either an outcome or predictor role and determining their data type, which can be either numeric or categorical. The recipes() function is used for this task.\n\n**4. Data preprocessing steps**\n\nThe next step involves defining a sequence of data preprocessing steps, which can include missing data imputation, centering and scaling numeric variables, creating new variables from ratios of existing variables, and many more possibilities.These transformations are encoded with unique step_*() functions.\n\n**5. Training preprocessing steps**\n\nAfter preprocessing steps are defined, they need to be trained and estimated with data. This includes things such as calculating the mean and standard deviation of numeric columns for centering and scaling data and storing formulas for creating new columns. The prep() function is used for this task.\n\n**6. Applying recipes to new data**\n\nThe final step of feature engineering is to apply the trained data transformations to the training and test datasets as well as new sources of data for future predictions. This is an important step, as machine learning algorithms require the same data format as was used during model training to predict new values.The bake() function from recipes is used for this task.\n\n**7. Simple feature engineering pipeline**\n\nTo demonstrate a simple feature engineering pipeline, let's build a recipe to log transform the total_time variable in the lead scoring dataset. This is a common transformation for variables with large values because it compresses the range of data values and can reduce variability.\n\n**8. Building a recipe object**\n\nFirst we pass our model formula, purchased tilde dot, to the recipe function. This will assign the purchased column as the outcome variable and all other columns as predictor variables. Then we pass the leads_training data to the data argument. This will be used to determine the data types of each column in our data.Then we pass our recipe object to the step_log() function and provide the total_time column and select a base of 10.Printing a recipe object will display the number of outcome and predictor variables as well as the encoded preprocessing operations.\n\n**9. Explore variable roles and types**\n\nWhen a recipe object is passed to the summary() function, a tibble with variable information is returned. The type column lists the variable data types, which is either numeric or nominal for categorical variables. The role column captures variable roles for modeling based on the provided model formula.\n\n**10. Training a recipe object**\n\nNext, we train our recipe by passing it to the prep() function. The training argument of prep() specifies the data on which to train data preprocessing steps. This should always be the training data.Printing a trained recipe will display which operations were successfully trained.\n\n**11. Transforming the training data**\n\nTo apply our recipe to existing or new data, we must pass it to the bake function. The new_data argument of bake() specifies to which data to apply the trained recipe. Since leads_training was used to train our recipe, the transformations were retained by default in the prep() function. Setting new_data to NULL will return the preprocessed training data. Notice that total_time is now on a logarithm scale.\n\n**12. Transforming new data**\n\nTo transform the test dataset, pass it to the new_data argument. The trained recipe will apply all steps to the new data source.\n\n**13. Let's get baking!**\n\nLet's get baking!\n\n## Exploring recipe objects\n\nThe first step in feature engineering is to specify a `recipe` object with the `recipe()` function and add data preprocessing steps with one or more `step_*()` functions. Storing all of this information in a single `recipe` object makes it easier to manage complex feature engineering pipelines and transform new data sources.\n\nUse the R console to explore a `recipe` object named `telecom_rec`, which was specified using the `telecom_training` data from the previous chapter and the code below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntelecom_rec <- recipe(canceled_service ~ .,\n                      data = telecom_df) %>% \n  step_log(avg_call_mins, base = 10)\n```\n:::\n\n\n> *Question*\n> ---\n> How many numeric and nominal predictor variables are encoded in the `telecom_rec` object?<br>\n> <br>\n> ⬜ There are 2 numeric and 4 nominal predictor variables.<br>\n> ⬜ There are 4 numeric and 5 nominal predictor variables.<br>\n> ✅ There are 5 numeric and 3 nominal predictor variables.<br>\n> ⬜ There are 3 numeric and 4 nominal predictor variables.<br>\n\nYou got it! Based on the results from passing `telecom_rec` to the `summary()` function, you can see that 5 predictor variables were labeled as numeric and 3 as nominal by the `recipe()` function.\n\n## Creating recipe objects\n\nIn the previous chapter, you fit a logistic regression model using a subset of the predictor variables from the `telecom_df` data. This dataset contains information on customers of a telecommunications company and the goal is predict whether they will cancel their service.\n\nIn this exercise, you will use the `recipes` package to apply a log transformation to the `avg_call_mins` and  `avg_intl_mins` variables in the telecommunications data. This will reduce the range of these variables and potentially make their distributions more symmetric, which may increase the accuracy of your logistic regression model.\n\n**Steps**\n\n1. Create a `recipe` object, `telecom_log_rec`, that uses `canceled_service` as the outcome variable and all remaining columns in `telecom_training` as predictor variables.\n2. Add a step to the `recipe` object that will log transform `avg_call_mins` and `avg_intl_mins`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify feature engineering recipe\ntelecom_log_rec <- recipe(canceled_service ~ ., \n                          data = telecom_training) %>%\n  # Add log transformation step\n  step_log(avg_call_mins, avg_intl_mins, base = 10)\n\n# Print recipe object\ntelecom_log_rec\n```\n:::\n\n\n3. View the variable roles and data types that were assigned by the `recipe()` function in the `telecom_log_rec` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View variable roles and data types\ntelecom_log_rec %>%\n  summary()\n```\n:::\n\n\nGreat job! You have created a `recipe` object that assigned variable roles and data types to the outcome and predictor variables in the `telecom_training` dataset. You also added instructions for applying a log transformation to the `avg_call_mins` and `avg_intl_mins` variables. Now it's time to train your `recipe` and apply it to new data!\n\n## Training a recipe object\n\nIn the previous exercise, you created a `recipe` object with instructions to apply a log transformation to the `avg_call_mins` and `avg_intl_mins` predictor variables in the telecommunications data.\n\nThe next step in the feature engineering process is to train your `recipe` object using the training data. Then you will be able to apply your trained `recipe` to both the training and test datasets in order to prepare them for use in model fitting and model evaluation.\n\nYour `recipe` object, `telecom_log_rec`, and the `telecom_training` and `telecom_test` datasets have been loaded into your session.\n\n**Steps**\n\n1. Train your `telecom_log_rec` object using the `telecom_training` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train the telecom_log_rec object\ntelecom_log_rec_prep <- telecom_log_rec %>% \n  prep(training = telecom_training)\n\n# View results\ntelecom_log_rec_prep\n```\n:::\n\n\n2. Use your trained `recipe` to obtain the transformed training dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply to training data\ntelecom_log_rec_prep %>% \n  bake(new_data = NULL)\n```\n:::\n\n\n3. Apply your trained `recipe` to the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train the telecom_log_rec object\ntelecom_log_rec_prep <- telecom_log_rec %>% \n  prep(training = telecom_training)\n\n# Apply to test data\ntelecom_log_rec_prep %>% \n  bake(new_data = telecom_test)\n```\n:::\n\n\nGreat work! You successfully trained your `recipe` to be able to transform new data sources and applied it to the training and test datasets. Notice that the `avg_call_mins` and `avg_intl_mins` variables have been log transformed in the test dataset!\n\n## Numeric predictors\n\nTheory. Coming soon ...\n\n**1. Numeric predictors**\n\nIn this section, we will focus on common preprocessing techniques for numeric predictor variables.\n\n**2. Correlated predictor variables**\n\nCorrelation measures the linear relationship between two numeric variables. Highly correlated predictors variables will have correlation values near -1 or 1 and provide redundant information. This phenomenon, known as multicollinearity, causes instability in machine learning optimization algorithms and can lead to model fitting errors. The total_clicks and pages_per_visit columns in the leads_training data are an example of highly correlated predictors. We see that customers with large total click values tend to have large average page views per visit. Knowing the value of one variable gives us the likely value of the other, so both are not needed.\n\n**3. Finding correlated predictor variables**\n\nWe can discover correlated variables by creating a correlation matrix, which lists all pairwise correlations in a numeric dataset. To create one using the leads_training data, we pass it to the select_if() function where we provide the is dot-numeric function as an argument. This selects only the numeric columns. Then we pass the results to the cor() function. As you can see, the pages_per_visit and total_clicks variables have a correlation of 0-point-96.\n\n**4. Processing correlated predictors**\n\nTo preprocess correlated predictor variables, we begin by specifying a recipe. For the lead scoring data, we add the same model formula and data argument. Then we pass our recipe object to the step_corr() function, which has two Rs instead of one, and provide the names of all numeric columns in the leads_training dataset separated by commas. We also provide a correlation threshold of 0-point-9 to the threshold argument. A correlation threshold is in absolute value terms, meaning that a threshold of 0-point-9 will remove variables with a correlation of 0-point-9 or more and negative 0 point 9 or less.\n\n**5. Selecting predictors by type**\n\nInstead of typing the names of all numeric columns in step_corr(), we can use special selector functions. The all_outcomes() function selects the outcome variable while the all_numeric() selector will select all numeric variables. This will include the outcome variable if it is numeric. An equivalent way of specifying our recipe would be to pass all_numeric() to step_corr(). If we had a numeric outcome variable, we would also pass minus all_outcomes() as well to exclude it from preprocessing.\n\n**6. Training and applying the recipe**\n\nAfter training and applying our recipe to the test data, we see that pages_per_visit was removed due to its high correlation value in the leads_training data. When we use our recipe, it will be removed from all future datasets as well.\n\n**7. Normalization**\n\nAnother common task is centering and scaling numeric variables, known as normalization. For each numeric column, we subtract the mean and divide by the standard deviation. This transforms numeric variables to standard deviation units with a mean of 0 and standard deviation of 1. Interpreting normalized variable values is very intuitive. From the normalized total_time value, we see that spending 1,273 seconds on the website is 1-point-19 standard deviations greater than the average time spent by customers.\n\n**8. Combining data preprocessing steps**\n\nTo normalize variables, we add the step_normalize() function to our preprocessing steps. The means and standard deviations from the training data columns will be used to transform existing and new data sources. Recipes can have multiple preprocessing steps. We just pass multiple step functions to our sequence of steps in our recipe and they are carried out in the order we enter them. In the leads_norm_rec recipe object, correlated predictors will be removed first, followed by normalization.\n\n**9. Transforming the test data**\n\nWhen we train and apply the leads_norm_rec recipe to the leads_test data, we see that the pages_per_visit column is removed and all numeric predictors are normalized.\n\n**10. Let's practice!**\n\nLet's practice transforming numeric predictor variables!\n\n\n## Discovering correlated predictors\n\nCorrelated predictor variables provide redundant information and can negatively impact the model fitting process. When two variables are highly correlated, their values change linearly with each other and hence provide the same information to your machine learning algorithms. This phenomenon is know as multicollinearity.\n\nBefore beginning the model fitting process, it's important to explore your dataset to uncover these relationships and remove them in your feature engineering steps.\n\nIn this exercise, you will explore the `telecom_training` dataset by creating a correlation matrix of all the numeric predictor variables.\n\nThe `telecom_training` data has been loaded into your session.\n\n**Steps**\n\n1. Select all of the numeric columns in the `telecom_training` data.\n2. Create a correlation matrix of the numeric columns of `telecom_training`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntelecom_training %>% \n  # Select numeric columns\n  select_if(is.numeric) %>% \n  # Calculate correlation matrix\n  cor()\n```\n:::\n\n\n> *Question*\n> ---\n> Based on your correlation matrix, which variables have the largest correlation?<br>\n> <br>\n> ⬜ `avg_data_gb` and `avg_call_mins`<br>\n> ⬜ `months_with_company` and `avg_intl_mins`<br>\n> ✅ [`avg_data_gb` and `monthly_charges`]<br>\n> ⬜ `avg_call_mins` and `monthly_charges`<br>\n\n3. Create a scatter plot with `avg_data_gb` on the x-axis and `monthly_charges` on the y-axis.\n4. Add `Monthly Charges vs. Average Data Usage` to the title of your plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot correlated predictors\nggplot(telecom_training, aes(x = avg_data_gb, y = monthly_charges)) + \n  # Add points\n  geom_point()  + \n  # Add title\n  labs(title = 'Monthly Charges vs. Average Data Usage',\n       y = 'Monthly Charges ($)', x = 'Average Data Usage (GB)') \n```\n:::\n\n\nGreat job! You explored the `telecom_training` data and discovered that `monthly_charges` and `avg_data_gb` have a correlation of 0.96. From the scatter plot, you can see that the more data customers use, the more they are charged every month. You will have to remove this redundant information with your feature engineering steps.\n\n## Removing correlated predictors with recipes\n\nRemoving correlated predictor variables from your training and test datasets is an important feature engineering step to ensure your model fitting runs as smoothly as possible.\n\nNow that you have discovered that `monthly_charges` and `avg_data_gb` are highly correlated, you must add a correlation filter with `step_corr()` to your feature engineering pipeline for the telecommunications data.\n\nIn this exercise, you will create a `recipe` object that removes correlated predictors from the telecommunications data.\n\nThe `telecom_training` and `telecom_test` datasets have been loaded into your session.\n\n**Steps**\n\n1. Create a `recipe` object, `telecom_cor_rec`, that sets the outcome variable to `canceled_service` and all remaining columns in `telecom_training` to predictor variables.\n2. Add a preprocessing step that removes highly correlated predictor variables using the `all_numeric()` selector function and a correlation threshold of 0.8.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify a recipe object\ntelecom_cor_rec <- recipe(canceled_service ~ .,\n                          data = telecom_training) %>% \n  # Remove correlated variables\n  step_corr(all_numeric(), threshold = 0.8)\n```\n:::\n\n\n3. Train your `telecom_cor_rec` object using the `telecom_training` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train the recipe\ntelecom_cor_rec_prep <- telecom_cor_rec %>% \n  prep(training = telecom_training)\n```\n:::\n\n\n4. Use your trained `recipe` to obtain the transformed training dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply to training data\ntelecom_cor_rec_prep %>% \n  bake(new_data = NULL)\n```\n:::\n\n\n5. Apply your trained `recipe` to the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply to test data\ntelecom_cor_rec_prep %>% \n  bake(new_data = telecom_test)\n```\n:::\n\n\nExcellent! You have trained your recipe to remove all correlated predictors that exceed the 0.8 correlation threshold. Notice that your recipe found the high correlation between `monthly_charges` and `avg_data_gb` in the training data and when applied to the `telecom_test` data, it removed the `monthly_charges` column.\n\n## Multiple feature engineering steps\n\nThe power of the `recipes` package is that you can include multiple preprocessing steps in a single `recipe` object. These steps will be carried out in the order they are entered with the `step_*()` functions.\n\nIn this exercise, you will build upon your feature engineering from the last exercise. In addition to removing correlated predictors, you will create a `recipe` object that also normalizes all numeric predictors in the telecommunications data.\n\nThe `telecom_training` and `telecom_test` datasets have been loaded into your session.\n\n**Steps**\n\n1. Create a `recipe` object, `telecom_norm_rec`, that sets the outcome variable to `canceled_service` and all remaining columns in `telecom_training` to predictor variables.\n2. Specify your `recipe` to first remove correlated predictors at the 0.8 threshold and then normalize all numeric predictor variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify a recipe object\ntelecom_norm_rec <- recipe(canceled_service ~ .,\n                          data = telecom_training) %>% \n  # Remove correlated variables\n  step_corr(all_numeric(), threshold = 0.8) %>% \n  # Normalize numeric predictors\n  step_normalize(all_numeric())\n```\n:::\n\n\n3. Train your `telecom_norm_rec` object using the `telecom_training` dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train the recipe\ntelecom_norm_rec_prep <- telecom_norm_rec %>% \n  prep(training = telecom_training)\n```\n:::\n\n\n4. Apply your trained `recipe` to the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply to test data\ntelecom_norm_rec_prep %>% \n  bake(new_data = telecom_test)\n```\n:::\n\n\nGreat job! When you applied your trained `recipe` to the `telecom_test` data, it removed the `monthly_charges` column, due to its large correlation with `avg_data_gb`, and normalized the numeric predictor variables!\n\n## Nominal predictors\n\nTheory. Coming soon ...\n\n**1. Nominal predictors**\n\nIn the previous lesson we focused on preprocessing numeric variables. We learned how to center and scale our data with step_normalize() and how to remove highly correlated variables with step_corr().In this lesson we will learn how to train a recipe to process nominal predictor variables.\n\n**2. Nominal data**\n\nNominal data values identify characteristics or groups.Think of them as a set of categories with no meaningful order.Some examples of nominal data include a department within a company, a person's native language, or the type of car you drive. In all of these examples, the values serve as labels for a particular category or group.\n\n**3. Transforming nominal predictors**\n\nNominal data must be transformed to numeric data during feature engineering because many machine learning algorithms require numeric input.One-Hot encoding is a transformation that maps the distinct values of a nominal variable to a sequence of 0/1 indicator variables.Each unique value gets its own indicator variable.Suppose we have a nominal variable that records the department in which employees work at a company. This variable has three unique values: Finance, Marketing and Technology. In the example, one-hot encoding will create a sequence of three indicator variables for this data. Notice how each indicator variable has a 1 in the row that matches the category in the original data. Since every row in the one-hot encoded results must sum to 1, it is redundant to have a column of every unique value in our data. For example, if department_marketing and department_technology are both equal to 0, then we know that the department value must be finance.\n\n**4. Transforming nominal predictors**\n\nDummy variable encoding takes a different approach and removes that redundant information by excluding one value from the original set of data values.If we have n distinct values in our categorical data, we will get n - 1 indicator variables.This is the preferred method for tidymodels and is the default in the recipes package.With this method our department variable is mapped to a sequence of two indicator variables.\n\n**5. Lead scoring data**\n\nIn our lead scoring data, lead_source and us_location are nominal predictor variables.\n\n**6. Creating dummy variables**\n\nTo transform these variables, we start by specifying a recipe with our model formula and leads_training data. Then we pass this to the step_dummy function where we select the lead_source and us_location variables for processing.We then pass the results to the prep function where the recipe is trained on the leads_training data. Finally, this is passed into the bake function where we apply the transform on our leads_test data.The results show that dummy variables have been created for both variables in the test data.\n\n**7. Selecting columns by type**\n\nA more robust way to perform feature engineering is to select columns by type. This can be done by passing a sequence of selector functions separated by commas into the step function of a recipe. To select all factor or character columns in a data frame, we can use the all_nominal() selector function. To exclude the outcome variable, purchased, we use the all_outcomes() selector preceded by a minus sign.With this code, we will get the same results. However, if our variable names change in the future, our code won't give us an error.\n\n**8. Preprocessing nominal predictor variables**\n\nMany modeling engines in R include automatic dummy variable creation, so it is possible to fit models without having to use step_dummy(). However, these methods are not consistent across engines in using one-hot versus dummy variables or naming conventions.Using the recipes package standardizes this process and will make your code less susceptible to errors.\n\n**9. Let's practice!**\n\nLet's practice by applying step_dummy to our feature engineering pipeline on the telecommunications data!\n\n## Applying step_dummy() to predictors\n\nYou are using the telecom_training data to predict canceled_service using avg_data_gb and contract as predictor variables.\n\n| canceled_service | avg_data_gb  | contract         |\n| ---------------- | ------------ | ---------------- |\n| yes              | 7.78         | month_to_month   |\n| yes              | 9.04         | month_to_month   |\n| yes              | 5.08         | one_year         |\n| no               | 8.05         | two_year         |\n\nIn your feature engineering pipeline, you would like to create dummy variables from the `contract` column and leave `avg_data_gb` and `canceled_service` as is.\n\nWhich `step_*()` function from the options will correctly encode your recipe object?\n\nDetermine whether each `step_*()` specification will correctly encode your recipe object and drag it to the appropriate section.\n\n\n| Correct specification                        | Incorrect specification                     |\n| -------------------------------------------- | ------------------------------------------- |\n| `step_dummy(all_nominal(), -all_outcomes())` | `step_dummy(all_nominal(), all_outcomes())` |\n| `step_dummy(contract)`                       | `step_dummy(all_nominal())`                 |\n\nCongratulations! The special selector functions are helpful for specifying feature engineering steps without having to type out all individual variables for processing.\n\n\n## Ordering of step_*() functions\n\nThe `step_*()` functions within a recipe are carried out in sequential order. It's important to keep this in mind so that you avoid unexpected results in your feature engineering pipeline! \n\nIn this exercise, you will combine different `step_*()` functions into a single `recipe` and see what effect the ordering of `step_*()` functions has on the final result.\n\nThe `telecom_training` and `telecom_test` datasets have been loaded into this session.\n\n**Steps**\n\n1. Specify the `telecom_recipe_1` object to normalize all numeric predictors and then create dummy variables for all nominal predictors in the training data, `telecom_training`.\n2. Select columns **by role** in your `recipe` specification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntelecom_recipe_1 <- \n  recipe(canceled_service ~ avg_data_gb + contract, data = telecom_training)  %>% \n  # Normalize numeric predictors\n  step_normalize(all_numeric()) %>% \n  # Create dummy variables for nominal predictors\n  step_dummy(all_nominal(), -all_outcomes())\n```\n:::\n\n\n3. Train `telecom_recipe_1` and use it to transform the test data, `telecom_test`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train and apply telecom_recipe_1 on the test data\ntelecom_recipe_1 %>% \n  prep(training = telecom_training) %>% \n  bake(new_data = telecom_test)\n```\n:::\n\n\n4. Now specify `telecom_recipe_2` to create dummy variables for all nominal predictors and then normalize all numeric predictors in the training data, `telecom_training`.\n5. Select columns **by role** in your `recipe` specification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntelecom_recipe_2 <- \n  recipe(canceled_service ~ avg_data_gb + contract, data = telecom_training)  %>% \n  # Create dummy variables for nominal predictors\n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  # Normalize numeric predictors\n  step_normalize(all_numeric(), -all_outcomes())\n```\n:::\n\n\n6. Train `telecom_recipe_2` and use it to transform the test data, `telecom_test`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train and apply telecom_recipe_2 on the test data\ntelecom_recipe_2 %>% \n  prep(training = telecom_training) %>% \n  bake(new_data = telecom_test)\n```\n:::\n\n\nGreat job! Notice that `telecom_recipe_1` produced [0, 1] values in the dummy variable columns while `telecom_recipe_2` produced dummy variables which were then normalized! The predictor `contract_two_year` created by `telecom_recipe_2` is -0.486 instead of 0 and 2.05 instead of 1 due to normalization. For model interpretation, it's best to normalize variables before creating dummy variables. Also notice that since you only specified two predictor variables in your model formula, the rest of the columns are ignored by your `recipe` objects when transforming new data sources.\n\n## Complete feature engineering pipeline\n\nThe `recipes` package is designed to encode multiple feature engineering steps into one object, making it easier to maintain data transformations in a machine learning workflow. \n\nIn this exercise, you will train a feature engineering pipeline to prepare the telecommunications data for modeling.\n\nThe `telecom_df` tibble, as well as your `telecom_training` and `telecom_test` datasets from the previous exercises, have been loaded into your workspace.\n\n**Steps**\n\n1. Create a recipe that predicts `canceled_service` using all predictor variables in the training data.\n2. Remove correlated predictor variables using a 0.8 threshold value.\n3. Normalize all numeric predictors.\n4. Create dummy variables for all nominal predictors.\n5. Train your recipe on the training data and apply it to the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a recipe that predicts canceled_service using the training data\ntelecom_recipe <- recipe(canceled_service ~ ., data = telecom_training) %>% \n  # Remove correlated predictors\n  step_corr(all_numeric(), threshold = 0.8) %>% \n  # Normalize numeric predictors\n  step_normalize(all_numeric()) %>% \n  # Create dummy variables\n  step_dummy(all_nominal(), -all_outcomes())\n\n# Train your recipe and apply it to the test data\ntelecom_recipe %>% \n  prep(training = telecom_training) %>% \n  bake(new_data = telecom_test)\n```\n:::\n\n\nGreat job! You are now a feature engineering ninja! Transforming your training data for modeling is an important part of the machine learning process. In the next section, we will incorporate your feature engineering skills to the entire model fitting process for the telecommunications data.\n\n## Complete modeling workflow\n\nTheory. Coming soon ...\n\n**1. Complete modeling workflow**\n\nWe have covered many common feature engineering steps for numeric and nominal predictor variables. In this section, we will go through a complete modeling workflow which incorporates feature engineering on the lead scoring dataset. Although many steps will be reviewed, it will be helpful to see everything come together in one modeling process.\n\n**2. Data resampling**\n\nThe modeling process begins with data resampling, where we use the initial_split() function to create a data split object from our leads_df data.Then we use the training() and testing() functions to create our training and test datasets.\n\n**3. Model specification**\n\nNext, we specify our logistic regression model with the logistic_reg() function, setting the engine to glm and mode to classification.\n\n**4. Feature engineering**\n\nThe next step is to build our feature engineering pipeline. For the lead scoring data, we specify a recipe object that labels purchased as the outcome variable and the remaining columns in leads_training as predictors. For our preprocessing steps, we add a correlation filter with a threshold of 0 point 9, normalize all numeric predictors, and create dummy variables for all nominal predictors.\n\n**5. Recipe training**\n\nWe then train our recipe with the prep() function and the leads_training data. Now it can be used to transform our training and test datasets for modeling.\n\n**6. Preprocess training data**\n\nWe apply our trained recipe to the training data and store the results in leads_training_prep.We see from the output, that the transformations were processed correctly. Numeric variables are normalized, pages_per_visit has been removed, and dummy variables have been created.\n\n**7. Preprocess test data**\n\nNext, we transform our test dataset using our trained recipe and store the results in leads_test_prep.\n\n**8. Model fitting and predictions**\n\nWe then train our logistic regression model using the leads_training_prep data.Once the model is fit, we can obtain model predictions with the predict() function. For predicted outcome values we provide type is equal to class to the predict function. For estimated probabilities, we provide type is equal to prob. In both cases, however, we must set new_data equal to the preprocessed test dataset, leads_test_prep.\n\n**9. Combining prediction results**\n\nAs in our prior modeling workflows, we combine the actual outcome variable from the test dataset, leads_test, with the datasets of predictions using bind_cols().This produces a model results data frame with all the required columns for yardstick metric functions.\n\n**10. Model evaluation**\n\nThe final step is model evaluation. Using our leads_results data we can calculate a confusion matrix, sensitivity, specificity, or any other metrics that we covered in chapter 2. The difference in this modeling workflow, is that we were able to incorporate feature engineering and use all available predictor variables in the lead scoring dataset.\n\n**11. Let's practice!**\n\nLet's practice building complete modeling workflows!\n\n## Feature engineering process\n\nTo incorporate feature engineering into the modeling process, the training and test datasets must be preprocessed before the model fitting stage. With the new skills you have learned in this chapter, you will be able to use all of the available predictor variables in the telecommunications data to train your logistic regression model.\n\nIn this exercise, you will create a feature engineering pipeline on the telecommunications data and use it to transform the training and test datasets.\n\nThe `telecom_training` and `telecom_test` datasets as well as your logistic regression model specification, `logistic_model`, have been loaded into your session.\n\n**Steps**\n\n1. Create a `recipe` object, `telecom_recipe`, that sets the outcome variable to `canceled_service` and all remaining columns in `telecom_training` to predictor variables.\n2. Using selector functions, remove correlated predictors at a 0.8 threshold, log transform all numeric predictors, normalize all numeric predictors, and create dummy variables for all nominal predictor variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntelecom_recipe <- recipe(canceled_service ~ ., data = telecom_training) %>% \n  # Removed correlated predictors\n  step_corr(all_numeric(), threshold = 0.8) %>% \n  # Log transform numeric predictors\n  step_log(all_numeric(), base = 10) %>%\n  # Normalize numeric predictors\n  step_normalize(all_numeric()) %>% \n  # Create dummy variables\n  step_dummy(all_nominal(), -all_outcomes())\n```\n:::\n\n\n3. Train the `telecom_recipe` object using the `telecom_training` data.\n4. Use your trained `recipe` object to obtained the preprocessed training dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train recipe\ntelecom_recipe_prep <- telecom_recipe %>% \n  prep(training = telecom_training)\n\n# Transform training data\ntelecom_training_prep <- telecom_recipe_prep %>% \n  bake(new_data = NULL)\n```\n:::\n\n\n5. Apply your trained `recipe` object to the test dataset and view the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform test data\ntelecom_test_prep <- telecom_recipe_prep %>% \n  bake(new_data = telecom_test)\n\ntelecom_test_prep\n```\n:::\n\n\nExcellent work! You have preprocessed your training and test datasets with your `recipe` object and are now ready to use them for the model fitting and evaluation steps. Looking at the transformed test dataset, you can see that your feature engineering steps have been applied correctly.\n\n## Model training and prediction\n\nYou have preprocessed your training and test datasets in the previous exercise. Since you incorporated feature engineering into your modeling workflow, you are able to use all of the predictor variables available in the telecommunications data!\n\nThe next step is training your logistic regression model and using it to obtain predictions on your new preprocessed test dataset.\n\nYour preprocessed training and test datasets, `telecom_training_prep` and `telecom_test_prep`, as well as your model object, `logistic_model`, have been loaded into your session.\n\n**Steps**\n\n1. Train your `logistic_model` object to predict `canceled_service` using all available predictor variables in the `telecom_training_prep` data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train logistic model\nlogistic_fit <- logistic_model %>% \n  fit(canceled_service ~ ., data = telecom_training_prep)\n```\n:::\n\n\n2. Use your trained model, `logistic_fit`, to predict the outcome variable values on the preprocessed test dataset.\n3. Use your model to predict the estimated probabilities of the positive and negative classes on the preprocessed test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtain class predictions\nclass_preds <- predict(logistic_fit, new_data = telecom_test_prep,\n                       type = 'class')\n\n# Obtain estimated probabilities\nprob_preds <- predict(logistic_fit, new_data = telecom_test_prep, \n                      type = 'prob')\n```\n:::\n\n\n4. Combine the actual outcome variable from the preprocessed test dataset and the two prediction tibbles into a single results dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine test set results\ntelecom_results <- telecom_test_prep %>% \n  select(canceled_service) %>% \n  bind_cols(class_preds, prob_preds)\n\ntelecom_results\n```\n:::\n\n\nGood job! You have created a tibble of model results on the test dataset with the actual outcome variable value, predicted outcome values, and estimated probabilities of the positive and negative classes. Now you can evaluate the performance of your model with `yardstick`.\n\n## Model performance metrics\n\nIn this exercise, you will use `yardstick` metric functions to evaluate your model's performance on the test dataset. \n\nWhen you fit a logistic regression model to the telecommunications data in Chapter 2, you predicted `canceled_service` using `avg_call_mins`, `avg_intl_mins`, and `monthly_charges`. The sensitivity of your model was 0.42 while the specificity was 0.895.\n\nNow that you have incorporated all available predictor variables using feature engineering, you can compare your new model's performance to your previous results.\n\nYour model results, `telecom_results`, have been loaded into your session.\n\n**Steps**\n\n1. Create a confusion matrix of your model's classification outcomes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a confusion matrix\ntelecom_results %>% \n  conf_mat(truth = canceled_service, estimate = .pred_class)\n```\n:::\n\n\n2. Calculate the sensitivity of your model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate sensitivity\ntelecom_results %>% \n  sens(truth = canceled_service, estimate = .pred_class)\n```\n:::\n\n\n3. Calculate the specificity of your model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate specificity\ntelecom_results %>% \n  spec(truth = canceled_service, estimate = .pred_class)\n```\n:::\n\n\n4. Create an ROC curve plot of your model's performance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot ROC curve\ntelecom_results %>% \n  roc_curve(truth = canceled_service, .pred_yes) %>% \n  autoplot()\n```\n:::\n\n\nFantastic work! You have really come a long way in developing your modeling skills with `tidymodels`! From the results of your metric calculations, using feature engineering and incorporating all predictor variables increased your model's sensitivity to 0.57, up from 0.42, and specificity to 0.901, up from 0.895!\n\n# 4. Workflows and Hyperparameter Tuning\n\nNow it’s time to streamline the modeling process using workflows and fine-tune models with cross-validation and hyperparameter tuning. You’ll learn how to tune a decision tree classification model to predict whether a bank's customers are likely to default on their loan.\n\n## Machine learning workflows\n\nTheory. Coming soon ...\n\n**1. Machine learning workflows**\n\nIn this section, we will introduce decision tree models and learn how to create workflows that combine models and recipes into a single object.\n\n**2. Classification with decision trees**\n\nDecision trees differ from logistic regression by their ability to segment the predictor space into rectangular regions.A popular algorithm for creating these regions is known as recursive binary splitting.To demonstrate this algorithm, let's use the lead scoring dataset where we have customers who either did or did not purchase products based on their website behavior.\n\n**3. Classification with decision trees**\n\nThe algorithm makes a series of horizontal or vertical cut points, known as splits.In this example, the first split is horizontal along the total time on website variable.\n\n**4. Classification with decision trees**\n\nNext, a vertical split is created in the top portion of the first split along the total website visits predictor.\n\n**5. Classification with decision trees**\n\nAnd finally, another vertical split along the total website visits predictor is added in the bottom portion of the first split.\n\n**6. Classification with decision trees**\n\nThis produces 4 distinct rectangular regions. The decision tree will predict the majority class in each region. For some datasets, this approach may produce better predictions when compared to the linear decision boundaries of logistic regression models.\n\n**7. Tree diagrams**\n\nTree diagrams are another way to visualize the prediction regions of decision trees and are made up of a series of nodes. Interior nodes are the splits of a decision tree and are represented by the dark boxes in the diagram below.Terminal nodes provide the model predictions and are represented by the green and purple boxes.Comparing a tree diagram to the plot of rectangular regions in the lead scoring dataset, we see that interior nodes correspond to the dashed lines in the plot while terminal nodes correspond to the 4 rectangular regions.\n\n**8. Model specification**\n\nA decision tree model is specified with the decision_tree() function. The common engine is 'rpart' and the mode can be either classification or regression.For the lead scoring data, we need a mode of classification.\n\n**9. Feature engineering recipe**\n\nFrom our previous work, we have our leads_recipe object which removes multicollinearity, normalizes numeric predictors, and creates dummy variables for nominal predictors.We have two R objects to manage during the modeling process, our decision tree model and our feature engineering recipe. Combining these into a single object would make the process easier to manage.\n\n**10. Combining models and recipes**\n\nThe workflows package provides the ability to combine models and recipes into a single object.To create our workflow, we initialize an empty workflow with the workflow() function, then add our decision tree model with add_model() and finally our recipe with the add_recipe() function.This produces a workflow that bundles our model with our feature engineering steps.\n\n**11. Model fitting with workflows**\n\nTo train our workflow, we pass it to last_fit() and provide our leads_split object. Like before, performance metrics can be gathered with the collect_metrics() function.Behind the scenes, these few lines of code created training and test datasets, trained and applied our recipe, fit our decision tree to the training data, and calculated performance metrics on the test dataset. Pretty amazing!\n\n**12. Collecting predictions**\n\nThe collect_predictions() function will create detailed prediction results from a trained workflow for use in yardstick metric functions.\n\n**13. Exploring custom metrics**\n\nWe can create a custom metric function that includes the area under the roc curve, sensitivity, and specificity using the metric_set() function.When we pass our predictions data to our function, we see that our decision tree model had a ROC AUC of 0 point 775 on the test data.\n\n**14. Loan default dataset**\n\nIn the exercises, you will be working with the loans_df dataset, which contains financial data on consumer loans at a bank. The outcome variable is loan_default and indicates whether a customer defaulted on their loan or not.\n\n**15. Let's practice building workflows!**\n\nLet's practice building workflows!\n\n## Exploring the loans dataset\n\nThe `workflows` package provides the ability to bundle `parsnip` models and `recipe` objects into a single modeling `workflow` object. This makes managing a machine learning project much easier and removes the need to keep track of multiple modeling objects.\n\nIn this exercise, you will working with the `loans_df` dataset, which contains financial information on consumer loans at a bank. The outcome variable in this data is `loan_default`. \n\nYou will create a decision tree model object and specify a feature engineering pipeline for the loan data. The `loans_df` tibble has been loaded into your session.\n\n**Steps**\n\n1. Create a data split object, `loans_split`, using the `loans_df` tibble making sure to stratify by the outcome variable.\n2. Create the training dataset.\n3. Create the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nloans_df <- readRDS(\"data/loan_df.rds\")\n\n# Create data split object\nloans_split <- initial_split(loans_df, \n                             strata = loan_default)\n\n# Build training data\nloans_training <- loans_split %>% \n  training()\n\n# Build test data\nloans_test <- loans_split %>% \n  testing()\n```\n:::\n\n\n4. Select the numeric columns from `loans_training` and create a correlation matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create data split object\nloans_split <- initial_split(loans_df, \n                             strata = loan_default)\n\n# Build training data\nloans_training <- loans_split %>% \n  training()\n\n# Build test data\nloans_test <- loans_split %>% \n  testing()\n\n# Check for correlated predictors\nloans_training %>% \n  # Select numeric columns\n  select_if(is.numeric) %>% \n  # Calculate correlation matrix\n  cor()\n```\n:::\n\n\nGreat work! You have created your training and test datasets and discovered that `loan_amount` and `installment` are highly correlated predictor variables. To remove one of these predictors, you will have to incorporate `step_corr()` into your feature engineering pipeline for this data.\n\n## Specifying a model and recipe\n\nNow that you have created your training and test datasets, the next step is to specify your model and feature engineering pipeline. These are the two components that are needed to create a `workflow` object for the model training process.\n\nIn this exercise, you will define a decision tree model object with `decision_tree()` and a `recipe` specification with the `recipe()` function.\n\nYour `loans_training` data has been loaded into this session.\n\n**Steps**\n\n1. Use the `decision_tree()` function to specify a decision tree classification model with the `rpart` engine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt_model <- decision_tree() %>% \n  # Specify the engine\n  set_engine('rpart') %>% \n  # Specify the mode\n  set_mode('classification')\n```\n:::\n\n\n2. Create a `recipe` object with the `loans_training` data. Use all available predictor variables to predict the outcome, `loan_default`.\n3. Add a correlation filter to remove multicollinearity at a 0.85 threshold, normalize all numeric predictors, and create dummy variables for all nominal predictors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build feature engineering pipeline\nloans_recipe <- recipe(loan_default ~ .,\n                        data = loans_training) %>% \n  # Correlation filter\n  step_corr(all_numeric(), threshold = 0.85) %>% \n  # Normalize numeric predictors\n  step_normalize(all_numeric()) %>% \n  # Create dummy variables\n  step_dummy(all_nominal(), -all_outcomes())\n\nloans_recipe\n```\n:::\n\n\nNice work! Now that you have your model and feature engineering steps specified, you can create a `workflow` object for model training.\n\n## Creating workflows\n\n`workflow` objects simplify the modeling process in `tidymodels`. With `workflows`, it's possible to train a `parsnip` model and `recipe` object at the same time.\n\nIn this exercise, you will combine your decision tree model and feature engineering `recipe` into a single `workflow` object and perform model fitting and evaluation.\n\nYour model object, `dt_model`, `recipe` object, `loans_recipe`, and data split, `loans_split` have been loaded into this session.\n\n**Steps**\n\n1. Create a `workflow` object, `loans_dt_wkfl`, that combines your decision tree model and feature engineering `recipe`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a workflow\nloans_dt_wkfl <- workflow() %>% \n  # Include the model object\n  add_model(dt_model) %>% \n  # Include the recipe object\n  add_recipe(loans_recipe)\n\n# View workflow specification\nloans_dt_wkfl\n```\n:::\n\n\n2. Train your `workflow` with the `last_fit()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train the workflow\nloans_dt_wkfl_fit <- loans_dt_wkfl %>% \n  last_fit(split = loans_split)\n```\n:::\n\n\n3. Display the performance metrics on the test dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate performance metrics on test data\nloans_dt_wkfl_fit %>% \n  collect_metrics()\n```\n:::\n\n\nGood job! You have trained a `workflow` with `last_fit()` that created training and test datasets, trained and applied your `recipe`, fit your decision tree model to the training data and calculated performance metrics on the test data all with just a few lines of code! The model performed really well, with an area under the ROC curve of 0.849. \n\n## Estimating performance with cross validation\n\nTheory. Coming soon ...\n\n**1. Estimating performance with cross validation**\n\nIn this section, we will learn how to improve the model evaluation process with a method known as cross validation.\n\n**2. Training and test datasets**\n\nWe have been creating training and test datasets in our modeling process where the training data is used for model fitting while the test data is reserved for model evaluation to guard against overfitting.One downside of this method is that we only get one estimate of model performance.\n\n**3. K-fold cross validation**\n\nK-fold cross validation is a technique that provides K estimates of model performance and is typically used to compare different model types, such as logistic regression and decision trees.\n\n**4. K-fold cross validation**\n\nThe training data is randomly partitioned into K sets of roughly equal size, known as folds,which are used to perform K iterations of model fitting and evaluation. The test dataset is left out of this process so it can provide a final, independent estimate of model performance once a model type is chosen.\n\n**5. Machine learning with cross validation**\n\nIf we have 5 folds, we will have five iterations of model training and evaluation.\n\n**6. Machine learning with cross validation**\n\nIn the first iteration, fold 1 is reserved for model evaluation while the others are used for model training.\n\n**7. Machine learning with cross validation**\n\nIn the second iteration, fold 2 is reserved for model evaluation while the others are used for model training.\n\n**8. Machine learning with cross validation**\n\nThis process continues until the fifth iteration, where fold 5 is used for model evaluation. In total, this provides five estimates of model performance.\n\n**9. Creating cross validation folds**\n\nThe vfold_cv() function creates cross validation folds and takes a tibble as the first argument, number of folds as the second, and a stratification variable as the third. To create 10 folds from our leads_training data, we set v equal to 10, and stratify by purchased to ensure each fold has similar proportions of the outcome values.Executing the set-dot-seed() function before the vfold_cv() function ensures reproducibility. This function takes any integer as an argument and sets the seed of R's random number generator.This results in a tibble with a list column named splits and an id column that identifies each fold. Each row in splits contains a data split object that has the instructions for splitting that row's fold into a training or evaluation set.\n\n**10. Model training with cross validation**\n\nThe fit_resamples() function performs cross validation in tidymodels. To train our leads_workflow on each fold, we pass it to fit_resamples(), provide leads_folds to the resamples argument and our custom metric function to the optional metrics argument. By default, accuracy and ROC AUC are calculated.This returns a resamples object on which we can collect metrics. We see that each metric was estimated 10 times, one per each fold. The average of these estimates is provided in the mean column.\n\n**11. Detailed cross validation results**\n\nPassing summarize equals false into collect_metrics() will create a tibble with detailed results. For our leads_rs_fit, this gives us 30 total rows which represents our 3 metrics times our 10 folds. The dot_metric column identifies the metric while the dot-estimate column provides the estimated value for each fold.\n\n**12. Summarizing cross validation results**\n\nThe results of collect_metrics() can be summarized with dplyr. Starting with rs_metrics, we group by the dot-metric column, then calculate summary statistics with the summarize() function for each metric in the dot-metric column. This provides a summary of the distribution of estimated metric values in our cross validation process.\n\n**13. Cross validation methodology**\n\nResample model objects are not able to provide predictions on new data sources. Passing leads_rs_fit to predict() yields an error.The purpose of cross validation in tidymodels is not to fit a final model, but to compare the performance of different model types to discover which one works best for our data.\n\n**14. Let's cross validate!**\n\nLet's put our cross validation skills to use!\n\n## Measuring performance with cross validation\n\nCross validation is a method that uses training data to provide multiple estimates of model performance. When trying different model types on your data, it is important to study their performance profile to help decide which model type performs consistently well.\n\nIn this exercise, you will perform cross validation with your decision tree model `workflow` to explore its performance.\n\nThe training data, `loans_training`, and your `workflow` object, `loans_dt_wkfl`, have been loaded into your session.\n\n**Steps**\n\n1. Create a cross validation object with 5 folds using the training data, making sure to stratify by the outcome variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create cross validation folds\nset.seed(290)\nloans_folds <- vfold_cv(loans_training, v = 5,\n                       strata = loan_default)\n\nloans_folds\n```\n:::\n\n\n2. Create a custom metric function that includes the area under the ROC curve (ROC AUC), sensitivity, and specificity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create custom metrics function\nloans_metrics <- metric_set(roc_auc, sens, spec)\n```\n:::\n\n\n3. Use your decision tree `workflow` to perform cross validation using your folds and custom metric function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit resamples\nloans_dt_rs <- loans_dt_wkfl %>% \n  fit_resamples(resamples = loans_folds,\n                metrics = loans_metrics)\n```\n:::\n\n\n4. Explore the summarized results of your cross validation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View performance metrics\nloans_dt_rs %>% \n  collect_metrics()\n```\n:::\n\n\nExcellent work! You have used cross validation to evaluate the performance of your decision tree workflow. Across the 5 cross validation folds, the average area under the ROC curve was 0.846. The average sensitivity and specificity were 0.672 and 0.876, respectively. \n\n## Cross validation with logistic regression\n\nCross validation provides the ability to compare the performance profile of multiple model types. This is helpful in the early stages of modeling, when you are trying to determine which model type will perform best with your data.\n\nIn this exercise, you will perform cross validation on the `loans_training` data using logistic regression and compare the results to your decision tree model.\n\nThe `loans_folds` and `loans_metrics` objects from the previous exercise have been loaded into your session. Your feature engineering `recipe` from the previous section, `loans_recipe`, has also been loaded.\n\n**Steps**\n\n1. Create a logistic regression model object with `parsnip` using the `glm` engine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_model <- logistic_reg() %>% \n  # Specify the engine\n  set_engine('glm') %>% \n  # Specify the mode\n  set_mode('classification')\n```\n:::\n\n\n2. Create a `workflow` that combines your logistic regression model and feature engineering `recipe` into one object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create workflow\nloans_logistic_wkfl <- workflow() %>% \n  # Add model\n  add_model(logistic_model) %>% \n  # Add recipe\n  add_recipe(loans_recipe)\n```\n:::\n\n\n3. Use your logistic regression `workflow` to perform cross validation using your folds and custom metric function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit resamples\nloans_logistic_rs <- loans_logistic_wkfl %>% \n  fit_resamples(resamples = loans_folds,\n                metrics = loans_metrics)\n```\n:::\n\n\n4. Explore the summarized results of your cross validation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View performance metrics\nloans_logistic_rs %>% \n  collect_metrics()\n```\n:::\n\n\nGreat job! For logistic regression, across the 5 cross validation folds, the average area under the ROC curve was 0.848. The average sensitivity and specificity were 0.648 and 0.873, respectively. ROC AUC and specificity are very close to the decision tree cross validation results. However, the decision tree model performed slightly better on sensitivity, with an average value of 0.672.\n\n## Comparing model performance profiles\n\nThe benefit of the `collect_metrics()` function is that it returns a tibble of cross validation results. This makes it easy to calculate custom summary statistics with the `dplyr` package.\n\nIn this exercise, you will use `dplyr` to explore the cross validation results of your decision tree and logistic regression models.\n\nYour cross validation results, `loans_dt_rs` and `loans_logistic_rs` have been loaded into your session.\n\n**Steps**\n\n1. Collect the detailed cross validation results for your decision tree model.\n2. Calculate the minimum, median, and maximum estimated metric values by metric type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Detailed cross validation results\ndt_rs_results <- loans_dt_rs %>% \n  collect_metrics(summarize = FALSE)\n\n# Explore model performance for decision tree\ndt_rs_results %>% \n  group_by(.metric) %>% \n  summarize(min = min(.estimate),\n            median = median(.estimate),\n            max = max(.estimate))\n```\n:::\n\n\n3. Collect the detailed cross validation results for your logistic regression model.\n4. Calculate the minimum, median, and maximum estimated metric values by metric type.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Detailed cross validation results\nlogistic_rs_results <- loans_logistic_rs %>% \n  collect_metrics(summarize = FALSE)\n\n# Explore model performance for logistic regression\nlogistic_rs_results %>% \n  group_by(.metric) %>% \n  summarize(min = min(.estimate),\n            median = median(.estimate),\n            max = max(.estimate))\n```\n:::\n\n\nGreat job! Both models have similar average values across all metrics. However, logistic regression tends to have a wider range of values on all metrics. This provides evidence that a decision tree model may produce more stable prediction accuarcy on the loans dataset.\n\n## Hyperparameter tuning\n\nTheory. Coming soon ...\n\n**1. Hyperparameter tuning**\n\nIn this section, we will focus on hyperparameter tuning which is another method of optimizing model performance.\n\n**2. Hyperparameters**\n\nHyperparameters are model parameters whose values are set prior to model training and control model complexity. In parsnip, decision trees have three hyperparameters. cost_complexity is a number that is used to penalize trees with large numbers of terminal nodes. tree_depth controls how long the path from the root to any terminal node can be. min_n controls the minimum data points required in a node for further splitting.\n\n**3. Default hyperparameter values**\n\nWhen no arguments are provided to the decision_tree() function, cost_complexity is set to 0-point-01, tree_depth to 30, and min_n to 20.These values, however, may not be optimal for all datasets. Changing them might improve overall performance.Hyperparameter tuning is the process of using cross validation to find the optimal set of hyperparameter values for a model.\n\n**4. Labeling hyparameters for tuning**\n\nThe tune() function from the tune package is used to label model hyperparameters.We simply set the values of each hyperparameter to tune() within decision_tree().This creates a model object with tuning parameters and will let other methods know that they need to be optimized. When we print our dt_tune_model object, the hyperparameters appear under main arguments.\n\n**5. Creating a tuning workflow**\n\nTo perform hyperparameter tuning, we first create a new workflow by updating our previous one with our new decision tree model. We pass leads_wkfl to update_model() and replace our prior decision tree with our new one.When we print our new workflow, we see that the hyperparameters appear in the model specification along with our feature engineering recipe.\n\n**6. Grid search**\n\nHyperparameter tuning is accomplished using grid search, a method where a grid of hyperparameter values is generated.For each combination, cross validation is used to estimate model performance and the best performing combination is chosen.\n\n**7. Identifying hyperparameters**\n\nThe parameters function from the dials package can be used to identify the hyperparameters in a parsnip model object.This function returns a tibble with the hyperparameters labeled by tune(), if any. This tibble is used to help generate grids for tuning.\n\n**8. Random grid**\n\nA popular method for grid search is to generate random combinations of hyperparameter values. Since there can be an infinite number of hyperparameter combinations, choosing them at random will provide a greater chance of discovering optimal combinations. Choosing them in a systematic way may limit the range of values that are chosen which could lead to poor results.To create a random grid, we pass the results of the parameters() function on our dt_tune_model to the grid_random() function and select the number of combinations to generate. To reproduce this grid, execute the set-dot-seed() function before grid_random().This creates a tibble with random combinations.\n\n**9. Saving a tuning grid**\n\nTo perform hyperparameter tuning on our decision tree model, we first save the results of grid_random(), where we have 5 combinations.\n\n**10. Hyperparameter tuning with cross validation**\n\nWe then pass our leads_tune_wkfl to the tune_grid() function. This function also requires a cross validation object, a tuning grid, and optional custom metrics function. For our workflow, we use leads_folds, our dt_grid, and our custom leads_metrics function.tune_grid() returns a tibble of tuning results. The dot-metrics column is a list column with the results for each fold.\n\n**11. Exploring tuning results**\n\nThe collect_metrics() functions can be used on a tuning object to collect results. By default, the average performance metric is returned for each combination of hyperparameter values and performance metric. Since our decision tree has 5 random hyperparameter combinations and we are tracking 3 metrics, we get 15 total rows in the output. Since we have 10 folds in our cross validation object, each row is the average of the performance across the 10 folds.\n\n**12. Let's get tuning!**\n\nLet's practice tuning decision trees!\n\n## Setting model hyperparameters\n\nHyperparameter tuning is a method for fine-tuning the performance of your models. In most cases, the default hyperparameters values of `parsnip` model objects will not be the optimal values for maximizing model performance.\n\nIn this exercise, you will define a decision tree model with hyperparameters for tuning and create a tuning `workflow` object.\n\nYour decision tree `workflow` object, `loans_dt_wkfl`, has been loaded into your session.\n\n**Steps**\n\n1. Create a `parsnip` decision tree model and set all three of its hyperparameters for tuning.\n2. Use the `rpart` engine.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set tuning hyperparameters\ndt_tune_model <- decision_tree(cost_complexity = tune(),\n                               tree_depth = tune(),\n                               min_n = tune()) %>% \n  # Specify engine\n  set_engine('rpart') %>% \n  # Specify mode\n  set_mode('classification')\n\ndt_tune_model\n```\n:::\n\n\n3. Create a tuning `workflow` by updating your `loans_dt_wkfl` object with your new decision tree model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a tuning workflow\nloans_tune_wkfl <- loans_dt_wkfl %>% \n  # Replace model\n  update_model(dt_tune_model)\n\nloans_tune_wkfl\n```\n:::\n\n\nGood job! When you print your new `workflow` object, the decision tree hyperparameters now appear under the main arguments section.\n\n## Random grid search\n\nThe most common method of hyperparameter tuning is grid search. This method creates a tuning grid with unique combinations of hyperparameter values and uses cross validation to evaluate their performance. The goal of hyperparameter tuning is to find the optimal combination of values for maximizing model performance.\n\nIn this exercise, you will create a random hyperparameter grid and tune your loans data decision tree model.\n\nYour cross validation folds, `loans_folds`, `workflow` object, `loans_tune_wkfl`, custom metrics function, `loans_metrics`, and `dt_tune_model` have been loaded into your session.\n\n**Steps**\n\n1. Create a random grid of 5 hyperparameter value combinations using the hyperparameters of your `dt_tune_model` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hyperparameter tuning with grid search\nset.seed(214)\ndt_grid <- grid_random(parameters(dt_tune_model),\n                       size = 5)\n\ndt_grid\n```\n:::\n\n\n2. Use your `loans_tune_wkfl` object to perform hyperparameter tuning on your tuning grid with your cross validation folds and custom metrics function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Hyperparameter tuning\ndt_tuning <- loans_tune_wkfl %>% \n  tune_grid(resamples = loans_folds,\n            grid = dt_grid,\n            metrics = loans_metrics)\n```\n:::\n\n\n3. Extract the summarized tuning results from your tuning object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View results\ndt_tuning %>% \n  collect_metrics()\n```\n:::\n\n\nGood work! Since you have 5 random hyperparameter combinations and 3 performance metrics, there are 15 results in your summarized tuning results. Each row shows the average of the 5 cross validation estimates of each metric and hyperparameter combination.\n\n## Exploring tuning results\n\nThe `collect_metrics()` function is able to produce a detailed tibble of tuning results from a tuning object. Since this function returns a tibble, it works well with the `dplyr` package for further data exploration and analysis.\n\nIn this exercise, you will explore your tuning results, `dt_tuning`, to gain further insights into your hyperparameter tuning.\n\nYour `dt_tuning` object has been loaded into this session.\n\n**Steps**\n\n1. Extract the detailed tuning results from your `dt_tuning` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Collect detailed tuning results\ndt_tuning_results <- dt_tuning %>% \n  collect_metrics(summarize = FALSE)\n\ndt_tuning_results\n```\n:::\n\n\n2. Calculate the minimum, median, and maximum area under the ROC curve for each fold in the detailed tuning results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Explore detailed ROC AUC results for each fold\ndt_tuning_results %>% \n  filter(.metric == 'roc_auc') %>% \n  group_by(id) %>% \n  summarize(min_roc_auc = min(.estimate),\n            median_roc_auc = median(.estimate),\n            max_roc_auc = max(.estimate))\n```\n:::\n\n\nExcellent work! You have now had the chance to explore the detailed results of your decision tree hyperparameter tuning. The next step will be selecting the best combination and finalizing your `workflow` object!\n\n## Selecting the best model\n\nTheory. Coming soon ...\n\n**1. Selecting the best model**\n\nIn the previous section, we performed hyperparameter tuning and obtained a tibble of results. The next step is to select the best performing hyperparameter value combinations and finalize our workflow.\n\n**2. Detailed tuning results**\n\nBy default, the collect_metrics() function provides summarized results from hyperparameter tuning. Just like in the resampling case with fit_resamples(), passing summarize equals FALSE into collect_metrics() will produce a tibble of detailed results. The detailed results for our dt_tuning object includes 150 rows. This is because we have 10 folds, 3 metrics, and 5 random hyperparameter combinations that were evaluated.\n\n**3. Exploring tuning results**\n\nSince collect_metrics() returns a tibble, we can easily pass it to dplyr functions to create custom summaries. For example, we can look at the minimum, median, and maximum ROC AUC values that occurred within each cross validation fold during tuning.To do this, we filter for dot-metric being roc_auc, then group by the id column which has the fold identifier values, and calculate summary statistics of the dot-estimate column with the summarize() function. Here we are looking to see if the estimated values are fairly consistent across folds. Wild fluctuations would be an indicator of model overfitting.\n\n**4. Viewing the best performing models**\n\nTo make exploring tuning results easier, we can use the show_best() function to display the top performing hyperparameter combinations. This function takes our dt_tuning object as the first argument, the metric for evaluation as the second, and the number of model combinations to display.From the results, the hyperparameter combination labeled as Model1 in the dot-config column has the largest average ROC AUC.\n\n**5. Selecting a model**\n\nThe select_best() function is used to select the best performing hyperparameters. We pass our dt_tuning object to select_best() and provide the metric on which to evaluate performance.This function returns a tibble with the hyperparameter values that produced the largest average performance metric value. For our results, it was Model1 for the ROC AUC metric.\n\n**6. Finalizing the workflow**\n\nThe results of select_best() can be used to finalize a workflow object with the finalize_workflow() function. To finalize a workflow, pass it to the finalize_workflow() function and provide the results of the select_best() function as an argument. In our case, we pass the leads_tune_wkfl to finalize_workflow() and provide the best_dt_model tibble.This returns an updated workflow object with the model hyperparameter values set to the optimal values found during the tuning process.\n\n**7. Model fitting**\n\nAfter a workflow has been finalized, it can be trained with the last_fit() function and the original data split object, leads_split in our example.Behind the scenes, the training and test datasets are created from leads_split, our recipe is trained and applied, our tuned decision tree model is trained with the entire training dataset, and predictions and metrics are generated with the test dataset. For our model, we got a ROC AUC of 0-point-793 on the test dataset, which was held out of the process until this final step. This is in line with our tuning results, which had ROC AUC values near 0-point-8 for most combinations. In general, having similar performance between cross validation and the test dataset indicates that a model will perform similarly on new data sources.\n\n**8. Let's practice!**\n\nLet's practice finalizing workflows based on tuning results!\n\n## Finalizing a workflow\n\nTo incorporate hyperparameter tuning into your modeling process, an optimal hyperparameter combination must be selected based on the average value of a performance metric. Then you will be able to finalize your tuning workflow and fit your final model.\n\nIn this exercise, you will explore the best performing models from your hyperparameter tuning and finalize your tuning `workflow` object.\n\nThe `dt_tuning` and `loans_tune_wkfl` objects from your previous session have been loaded into your environment.\n\n**Steps**\n\n1. Display the 5 best performing hyperparameter combinations from your tuning results based on the area under the ROC curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display 5 best performing models\ndt_tuning %>% \n  show_best(metric = 'roc_auc', n = 5)\n```\n:::\n\n\n2. Select the best hyperparameter combination from your tuning results based on the area under the ROC curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select based on best performance\nbest_dt_model <- dt_tuning %>% \n  # Choose the best model based on roc_auc\n  select_best(metric = 'roc_auc')\n\nbest_dt_model\n```\n:::\n\n\n3. Finalize your `loans_tune_wkfl` with the best hyperparameter combination.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Finalize your workflow\nfinal_loans_wkfl <- loans_tune_wkfl %>% \n  finalize_workflow(best_dt_model)\n\nfinal_loans_wkfl\n```\n:::\n\n\nGood job! When you printed your finalized `workflow` object, the optimal hyperparameter combination is displayed in the main arguments section of the output. Your `workflow` is now ready for model fitting and prediction on new data sources!\n\n## Training a finalized workflow\n\nCongratulations on successfully tuning your decision tree model and finalizing your workflow! Your `final_loans_wkfl` object can now be used for model training and prediction on new data sources.\n\nIn this last exercise, you will train your finalized `workflow` on the entire `loans_training` dataset and evaluate its performance on the `loans_test` data.\n\nThe `final_loans_wkfl` and `loans_split` objects have been loaded into your session.\n\n**Steps**\n\n1. Train your finalized `workflow` with the `last_fit()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Train finalized decision tree workflow\nloans_final_fit <- final_loans_wkfl %>% \n  last_fit(split = loans_split)\n```\n:::\n\n\n2. Gather the performance metrics on the test data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View performance metrics\nloans_final_fit %>% \n  collect_metrics()\n```\n:::\n\n\n3. Use your trained `workflow` object to create an ROC curve.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an ROC curve\nloans_final_fit %>% \n  # Collect predictions\n  collect_predictions() %>%\n  # Calculate ROC curve metrics\n  roc_curve(truth = loan_default, .pred_yes) %>%\n  # Plot the ROC curve\n  autoplot()\n```\n:::\n\n\nGreat job! You were able to train your finalized `workflow` with `last_fit()` and generate predictions on the test data. The tuned decision tree model produced an area under the ROC curve of 0.875. That's a great model! The ROC curve shows that the sensitivity and specificity remain high across a wide range of probability threshold values.\n\n## Congratulations!\n\nTheory. Coming soon ...\n\n\n**1. Congratulations!**\n\nCongratulations on completing the course! You have truly accomplished a lot and are well on your way to mastering machine learning with tidymodels!\n\n**2. The tidymodels ecosystem**\n\nIn chapter 1, you learned about the various roles that each tidymodels package plays within in the machine learning process.\n\n**3. Regression modeling**\n\nYou also learned how to specify models with the parsnip package and train and evaluate linear regression models.\n\n**4. Classification modeling**\n\nIn chapter 2, you trained logistic regression models and learned how to evaluate their performance with sensitivity, specificity, and ROC curves.\n\n**5. Feature engineering**\n\nIn chapter 3, you built feature engineering pipelines to prepare datasets for modeling.\n\n**6. Fine tuning models with cross validation**\n\nAnd finally, in chapter 4, you learned how to improve prediction accuracy with cross validation and hyperparameter tuning.\n\n**7. Thank you!**\n\nThanks again for taking the course and I hope you bring tidymodels into your daily data science work!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}