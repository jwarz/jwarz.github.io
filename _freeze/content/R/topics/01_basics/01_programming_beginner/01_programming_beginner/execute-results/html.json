{
  "hash": "e5d547a174ceb51722bf8c08c8d07032",
  "result": {
    "markdown": "---\ntitle: \"Introduction to R\"\nauthor: \"Joschka Schwarz\"\n---\n\n\n\n\nIn  Introduction to R, you will master the basics of this widely used open source language, including factors, lists, and data frames. With the knowledge gained in this course, you will be ready to undertake your first very own data analysis. Oracle estimated over 2 million R users worldwide in 2012, cementing R as a leading programming language in statistics and data science. Every year, the number of R users grows by about 40%, and an increasing number of organizations are using it in their day-to-day activities. Begin your journey to learn R with us today!\n\n# Intro to basics\n\nTake your first steps with R. In this chapter, you will learn how to use the console as a calculator and how to assign variables. You will also get to know the basic data types in R. Let's get started.\n\n## How it works\n\nIn the editor on the right you should type R code to solve the exercises. When you hit the 'Submit Answer' button, every line of code is interpreted and executed by R and you get a message whether or not your code was correct. The output of your R code is shown in the console in the lower right corner.\n\nR makes use of the `#` sign to add comments, so that you and others can understand what the R code is about. Just like Twitter! Comments are not run as R code, so they will not influence your result. For example, *Calculate 3 + 4* in the editor on the right is a comment.\n\nYou can also execute R commands straight in the console. This is a good way to experiment with R code, as your submission is not checked for correctness.\n\n**Steps**\n\n* In the editor on the right there is already some sample code. Can you see which lines are actual R code and which are comments?\n* Add a line of code that calculates the sum of 6 and 12, and hit the 'Submit Answer' button.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Sample: Calculate 3 + 4\n3 + 4\n#> [1] 7\n\n## Instruction: Calculate 6 + 12\n6 + 12\n#> [1] 18\n```\n:::\n\n\nAwesome! See how the console shows the result of the R code you submitted? Now that you're familiar with the interface, let's get down to R business!\n\n## Arithmetic with R\n\nIn its most basic form, R can be used as a simple calculator. Consider the following arithmetic operators:\n\n* Addition: `+`\n* Subtraction: `-`\n* Multiplication: `*`\n* Division: `/`\n* Exponentiation: `^`\n* Modulo: `%%`\n\nThe last two might need some explaining:\n\n* The `^` operator raises the number to its left to the power of the number to its right: for example `3^2` is 9.\n* The modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or `5 %% 3` is 2.\n\nWith this knowledge, follow the instructions to complete the exercise.\n\n**Steps**\n\n1. Type `2^5` in the editor to calculate 2 to the power 5.\n2. Type `28 %% 6` to calculate 28 modulo 6.\n3. Submit the answer and have a look at the R output in the console.\n4. Note how the `#` symbol is used to add comments on the R code.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## An addition\n5 + 5 \n#> [1] 10\n\n## A subtraction\n5 - 5 \n#> [1] 0\n\n## A multiplication\n3 * 5\n#> [1] 15\n\n## A division\n(5 + 5) / 2 \n#> [1] 5\n\n## Exponentiation\n2^5\n#> [1] 32\n\n## Modulo\n28%%6\n#> [1] 4\n```\n:::\n\n\n## Variable assignment\n\n### Variable assignment 1\n\nA basic concept in (statistical) programming is called a **variable**.\n\nA variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R. You can then later use this variable's name to easily access the value or the object that is stored within this variable.\n\nYou can assign a value 4 to a variable `my_var` with the command<br>\n\n**Steps**\n\n1. Over to you: complete the code in the editor such that it assigns the value 42 to the variable `x` in the editor. Submit the answer. Notice that when you ask R to print `x`, the value 42 appears.<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Assign the value 42 to x\nx <- 42\n\n## Print out the value of the variable x\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 42\n```\n:::\n:::\n\n\nGood job! Have you noticed that R does not print the value of a variable to the console when you did the assignment? `x <- 42` did not generate any output, because R assumes that you will be needing this variable in the future. Otherwise you wouldn't have stored the value in a variable in the first place, right? Proceed to the next exercise!\n\n### Variable assignment 2\n\nSuppose you have a fruit basket with five apples. As a data analyst in training, you want to store the number of apples in a variable with the name `my_apples`.<br>\n\n**Steps**\n\n1. Type the following code in the editor: `my_apples <- 5`\n2. Type: `my_apples` below the second comment. This will print out the value of `my_apples`.\n3. Submit your answer, and look at the output: you see that the number 5 is printed. So R now links the variable `my_apples` to the value 5.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n## Assign the value 5 to the variable my_apples\nmy_apples <- 5\n\n## Print out the value of the variable my_apples\nmy_apples\n#> [1] 5\n```\n:::\n\n\n### Variable assignment 3\n\nEvery tasty fruit basket needs oranges, so you decide to add six oranges. As a data analyst, your reflex is to immediately create the variable `my_oranges` and assign the value 6 to it. Next, you want to calculate how many pieces of fruit you have in total. Since you have given meaningful names to these values, you can now code this in a clear way: <br>\n\n**Steps**\n\n1. Assign to `my_oranges` the value 6.\n2. Add the variables `my_apples` and `my_oranges` and have R simply print the result.\n3. Assign the result of adding `my_apples` and `my_oranges` to a new variable `my_fruit`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Assign a value to the variables my_apples and my_oranges\nmy_apples  <- 5\nmy_oranges <- 6\n\n## Add these two variables together\nmy_apples + my_oranges\n#> [1] 11\n\n## Create the variable my_fruit\nmy_fruit <- my_apples + my_oranges\n```\n:::\n\n\nNice one! The great advantage of doing calculations with variables is reusability. If you just change `my_apples` to equal 12 instead of 5 and rerun the script, `my_fruit` will automatically update as well. Continue to the next exercise.\n\n### Apples and oranges\n\nCommon knowledge tells you not to add apples and oranges. But hey, that is what you just did, no :-)? The `my_apples` and `my_oranges` variables both contained a number in the previous exercise. The `+` operator works with numeric variables in R. If you really tried to add \"apples\" and \"oranges\", and assigned a text value to the variable `my_oranges` (see the editor), you would be trying to assign the addition of a numeric and a character variable to the variable `my_fruit`. This is not possible.<br>\n\n**Steps**\n\n1. Submit the answer and read the error message. Make sure to understand why this did not work.\n2. Adjust the code so that R knows you have 6 oranges and thus a fruit basket with 11 pieces of fruit.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Assign a value to the variable my_apples\nmy_apples  <- 5 \n\n## Fix the assignment of my_oranges\nmy_oranges <- 6\n\n## Create the variable my_fruit and print it out\nmy_fruit <- my_apples + my_oranges \nmy_fruit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 11\n```\n:::\n:::\n\n\n## Basic data types in R\n\nR works with numerous data types. Some of the most basic types to get started are:<br>\n\n* Decimal values like `4.5` are called **numerics**.\n* Whole numbers like `4` are called **integers**. Integers are also numerics.\n* Boolean values (`TRUE` or `FALSE`) are called **logical**.\n* Text (or string) values are called **characters**.\n\nNote how the quotation marks in the editor indicate that `\"some text\"` is a string.<br>\n\n**Steps**\n\n1. Change the value of the:\n\n    * `my_numeric` variable to `42`.\n    * `my_character` variable to `\"universe\"`. Note that the quotation marks indicate that `\"universe\"` is a character.\n    * `my_logical` variable to `FALSE`.\n\nNote that R is case sensitive!<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Change my_numeric to be 42\nmy_numeric   <- 42\n\n## Change my_character to be \"universe\"\nmy_character <- \"universe\"\n\n## Change my_logical to be FALSE\nmy_logical   <- FALSE\n```\n:::\n\n\n### What's that data type?\n\nDo you remember that when you added `5 + \"six\"`, you got an error due to a mismatch in data types? You can avoid such embarrassing situations by checking the data type of a variable beforehand. You can do this with the `class()` function, as the code in the editor shows.<br>\n\n**Steps**\n\n1. Complete the code in the editor and also print out the classes of `my_character` and `my_logical`.<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Declare variables of different types\nmy_numeric   <- 42\nmy_character <- \"universe\"\nmy_logical   <- FALSE \n\n## Check class of my_numeric\nclass(my_numeric)\n#> [1] \"numeric\"\n\n## Check class of my_character\nclass(my_character)\n#> [1] \"character\"\n\n## Check class of my_logical\nclass(my_logical)\n#> [1] \"logical\"\n```\n:::\n\n\n# Vectors\n\nWe take you on a trip to Vegas, where you will learn how to analyze your gambling results using vectors in R. After completing this chapter, you will be able to create vectors in R, name them, select elements from them, and compare different vectors.\n\n## Create a vector\n\n### Create a vector 1\n\nFeeling lucky? You better, because this chapter takes you on a trip to the City of Sins, also known as *Statisticians Paradise*!\n\nThanks to R and your new data-analytical skills, you will learn how to uplift your performance at the tables and fire off your career as a professional gambler. This chapter will show how you can easily keep track of your betting progress and how you can do some simple analyses on past actions. Next stop, Vegas Baby… VEGAS!!<br>\n\n**Steps**\n\n1. Do you still remember what you have learned in the first chapter? Assign the value `\"Go!\"` to the variable `vegas`. Remember: R is case sensitive!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Define the variable vegas\nvegas <- \"Go!\"\n```\n:::\n\n\n### Create a vector 2\n\nLet us focus first!\n\nOn your way from rags to riches, you will make extensive use of vectors. Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos.\n\nIn R, you create a vector with the combine function <a href=\"http://www.rdocumentation.org/packages/base/functions/c\" target=\"_blank\" rel=\"noopener noreferrer\">`c()`</a>. You place the vector elements separated by a comma between the parentheses. For example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnumeric_vector   <- c(1, 2, 3)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n```\n:::\n\n\nOnce you have created these vectors in R, you can use them to do calculations.\n\n**Steps**\n\n1. Complete the code such that `boolean_vector` contains the three elements: `TRUE`, `FALSE` and `TRUE` (in that order).<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnumeric_vector   <- c(1, 10, 49)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\n\n## Complete the code for boolean_vector\nboolean_vector   <- c(TRUE, FALSE, TRUE)\n```\n:::\n\n\nPerfect! Notice that adding a space behind the commas in the `c()` function improves the readability of your code. Let's practice some more with vector creation in the next exercise.\n\n### Create a vector 3\n\nAfter one week in Las Vegas and still zero Ferraris in your garage, you decide that it is time to start using your data analytical superpowers.\n\nBefore doing a first analysis, you decide to first collect all the winnings and losses for the last week:\n\nFor `poker_vector`:\n\n* On Monday you won $140\n* Tuesday you lost $50\n* Wednesday you won $20 \n* Thursday you lost $120\n* Friday you won $240\n\nFor `roulette_vector`:\n\n* On Monday you lost $24\n* Tuesday you lost $50\n* Wednesday you won $100\n* Thursday you lost $350\n* Friday you won $10\n\nYou only played poker and roulette, since there was a delegation of mediums that occupied the craps tables. To be able to use this data in R, you decide to create the variables `poker_vector` and `roulette_vector`.\n\n**Steps**\n\n1. Assign the winnings/losses for roulette to the variable `roulette_vector`. You lost $24, then lost $50, won $100, lost $350, and won $10.<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Poker winnings from Monday to Friday\npoker_vector    <- c(140, -50, 20, -120, 240)\n\n## Roulette winnings from Monday to Friday\nroulette_vector <-  c(-24, -50, 100, -350, 10)\n```\n:::\n\n\nVery good! To check out the contents of your vectors, remember that you can always simply type the variable in the console and hit Enter. Proceed to the next exercise!\n\n## Naming a vector\n\n### Naming a vector 1\n\nAs a data analyst, it is important to have a clear view on the data that you are using. Understanding what each element refers to is therefore essential.\n\nIn the previous exercise, we created a vector with your winnings over the week. Each vector element refers to a day of the week but it is hard to tell which element belongs to which day. It would be nice if you could show that in the vector itself.\n\nYou can give a name to the elements of a vector with the `names()` function. Have a look at this example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsome_vector        <- c(\"John Doe\", \"poker player\")\nnames(some_vector) <- c(\"Name\", \"Profession\")\n```\n:::\n\n\nThis code first creates a vector `some_vector` and then gives the two elements a name. The first element is assigned the name `Name`, while the second element is labeled `Profession`. Printing the contents to the console yields following output:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n#>           Name     Profession \n#>     \"John Doe\" \"poker player\"\n```\n:::\n:::\n\n\n**Steps**\n\n1. The code in the editor names the elements in `poker_vector` with the days of the week. Add code to do the same thing for `roulette_vector`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Assign days as names of poker_vector\nnames(poker_vector)    <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n\n## Assign days as names of roulette_vectors\nnames(roulette_vector) <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n```\n:::\n\n\n### Naming a vector 2\n\nIf you want to become a good statistician, you have to become lazy. (If you are already lazy, chances are high you are one of those exceptional, natural-born statistical talents.)\n\nIn the previous exercises you probably experienced that it is boring and frustrating to type and retype information such as the days of the week. However, when you look at it from a higher perspective, there is a more efficient way to do this, namely, to assign the days of the week vector to a **variable**!\n\nJust like you did with your poker and roulette returns, you can also create a variable that contains the days of the week. This way you can use and re-use it.\n\n**Steps**\n\n1. A variable `days_vector` that contains the days of the week has already been created for you.\n2. Use `days_vector` to set the names of `poker_vector` and `roulette_vector`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndays_vector <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\n \n## Assign the names of the day to roulette_vector and poker_vector\nnames(poker_vector)    <- days_vector \nnames(roulette_vector) <- days_vector\n```\n:::\n\n\nNice one! A word of advice: try to avoid code duplication at all times. Continue to the next exercise and learn how to do arithmetic with vectors!\n\n## Example Case\n\n### Calculating total winnings 1\n\nNow that you have the poker and roulette winnings nicely as named vectors, you can start doing some data analytical magic.\n\nYou want to find out the following type of information:\n\n* How much has been your overall profit or loss per day of the week?\n* Have you lost money over the week in total?\n* Are you winning/losing money on poker or on roulette?\n\nTo get the answers, you have to do arithmetic calculations on vectors.\n\nIt is important to know that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(1, 2, 3) + c(4, 5, 6)\nc(1 + 4, 2 + 5, 3 + 6)\nc(5, 7, 9)\n```\n:::\n\n\nYou can also do the calculations with variables that represent vectors:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na <- c(1, 2, 3) \nb <- c(4, 5, 6)\nc <- a + b\n```\n:::\n\n\n\n**Steps**\n\n1. Take the sum of the variables `A_vector` and `B_vector` and assign it to `total_vector`.\n2. Inspect the result by printing out `total_vector`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nA_vector <- c(1, 2, 3)\nB_vector <- c(4, 5, 6)\n\n## Take the sum of A_vector and B_vector\ntotal_vector <- A_vector + B_vector\n  \n## Print out total_vector\ntotal_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 5 7 9\n```\n:::\n:::\n\n\n### Calculating total winnings 2\n\nNow you understand how R does arithmetic with vectors, it is time to get those Ferraris in your garage! First, you need to understand what the overall profit or loss per day of the week was. The total daily profit is the sum of the profit/loss you realized on poker per day, and the profit/loss you realized on roulette per day.\n\nIn R, this is just the sum of `roulette_vector` and `poker_vector`.\n\n**Steps**\n\n1. Assign to the variable `total_daily` how much you won or lost on each day in total (poker and roulette combined).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Assign to total_daily how much you won/lost on each day\ntotal_daily <- poker_vector + roulette_vector\n```\n:::\n\n\n### Calculating total winnings 3\n\nBased on the previous analysis, it looks like you had a mix of good and bad days. This is not what your ego expected, and you wonder if there may be a very tiny chance you have lost money over the week in total?\n\nA function that helps you to answer this question is <a href=\"http://www.rdocumentation.org/packages/base/functions/sum\" target=\"_blank\" rel=\"noopener noreferrer\">`sum()`</a>. It calculates the sum of all elements of a vector. For example, to calculate the total amount of money you have lost/won with poker you do:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntotal_poker <- sum(poker_vector)\n```\n:::\n\n\n**Steps**\n\n1. Calculate the total amount of money that you have won/lost with roulette and assign to the variable `total_roulette`.\n2. Now that you have the totals for roulette and poker, you can easily calculate `total_week` (which is the sum of all gains and losses of the week).\n3. Print out `total_week`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Total winnings with poker\ntotal_poker    <- sum(poker_vector)\n\n## Total winnings with roulette\ntotal_roulette <- sum(roulette_vector) \n\n## Total winnings overall\ntotal_week     <- total_roulette + total_poker\n\n## Print out total_week\ntotal_week\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] -84\n```\n:::\n:::\n\n\n### Comparing total winnings\n\nOops, it seems like you are losing money. Time to rethink and adapt your strategy! This will require some deeper analysis…\n\nAfter a short brainstorm in your hotel's jacuzzi, you realize that a possible explanation might be that your skills in roulette are not as well developed as your skills in poker. So maybe your total gains in poker are higher (or `>` ) than in roulette.\n\n**Steps**\n\n1. Calculate `total_poker` and `total_roulette` as in the previous exercise. Use the `sum()` function twice.\n2. Check if your total gains in poker are higher than for roulette by using a comparison. Simply print out the result of this comparison. What do you conclude, should you focus on roulette or on poker?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Check if you realized higher total gains in poker than in roulette \ntotal_poker > total_roulette\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] TRUE\n```\n:::\n:::\n\n\n## Vector selection\n\n### Vector selection: the good times 1\n\nYour hunch seemed to be right. It appears that the poker game is more your cup of tea than roulette.\n\nAnother possible route for investigation is your performance at the beginning of the working week compared to the end of it. You did have a couple of Margarita cocktails at the end of the week…\n\nTo answer that question, you only want to focus on a selection of the `total_vector`. In other words, our goal is to select specific elements of the vector. To select elements of a vector (and later matrices, data frames, …), you can use square brackets. Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type `poker_vector[1]`. To select the second element of the vector, you type `poker_vector[2]`, etc. Notice that the first element in a vector has index 1, not 0 as in many other programming languages.\n\n\n**Steps**\n\n1. Assign the poker results of Wednesday to the variable `poker_wednesday`.<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Define a new variable based on a selection\npoker_wednesday <- poker_vector[3]\n```\n:::\n\n\nGreat! R also makes it possible to select multiple elements from a vector at once. Learn how in the next exercise!\n\n### Vector selection: the good times 2\n\nHow about analyzing your midweek results?\n\nTo select multiple elements from a vector, you can add square brackets at the end of it. You can indicate between the brackets what elements should be selected. For example: suppose you want to select the first and the fifth day of the week: use the vector `c(1, 5)` between the square brackets. For example, the code below selects the first and fifth element of `poker_vector`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoker_vector[c(1, 5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Monday Friday \n#>    140    240\n```\n:::\n:::\n\n\n**Steps**\n\n1. Assign the poker results of Tuesday, Wednesday and Thursday to the variable `poker_midweek`.<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Define a new variable based on a selection\npoker_midweek <- poker_vector[c(2,3,4)]\n```\n:::\n\n\nWell done! Continue to the next exercise to specialize in vector selection some more!\n\n### Vector selection: the good times 3\n\nSelecting multiple elements of `poker_vector` with `c(2, 3, 4)` is not very convenient. Many statisticians are lazy people by nature, so they created an easier way to do this: `c(2, 3, 4)` can be abbreviated to`2:4`, which generates a vector with all natural numbers from 2 up to 4.\n\nSo, another way to find the mid-week results is `poker_vector[2:4]`. Notice how the vector `2:4` is placed between the square brackets to select element 2 up to 4.\n\n**Steps**\n\n1. Assign to `roulette_selection_vector` the roulette results from Tuesday up to Friday; make use of `:` if it makes things easier for you.<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Define a new variable based on a selection\nroulette_selection_vector <- roulette_vector[2:5]\n```\n:::\n\n\nAwesome! The colon operator is extremely useful and very often used in R programming, so remember it well. Proceed to the next exercise.\n\n### Vector selection: the good times 4\n\nAnother way to tackle the previous exercise is by using the names of the vector elements (Monday, Tuesday, …) instead of their numeric positions. For example, \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoker_vector[\"Monday\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Monday \n#>    140\n```\n:::\n:::\n\n\nwill select the first element of `poker_vector` since `\"Monday\"` is the name of that first element.\n\nJust like you did in the previous exercise with numerics, you can also use the element names to select multiple elements, for example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoker_vector[c(\"Monday\",\"Tuesday\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Monday Tuesday \n#>     140     -50\n```\n:::\n:::\n\n\n**Steps**\n\n1. Select the first three elements in `poker_vector` by using their names: `\"Monday\"`, `\"Tuesday\"` and `\"Wednesday\"`. Assign the result of the selection to `poker_start`.\n2. Calculate the average of the values in `poker_start` with the <a href=\"http://www.rdocumentation.org/packages/base/functions/mean\" target=\"_blank\" rel=\"noopener noreferrer\">`mean()`</a> function. Simply print out the result so you can inspect it.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select poker results for Monday, Tuesday and Wednesday\npoker_start <- poker_vector[c(\"Monday\", \"Tuesday\", \"Wednesday\")]\n  \n## Calculate the average of the elements in poker_start\nmean(poker_start)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 36.66667\n```\n:::\n:::\n\n\nGood job! Apart from subsetting vectors by index or by name, you can also subset vectors by comparison. The next exercises will show you how!\n\n### Selection by comparison - Step 1\n\nBy making use of comparison operators, we can approach the previous question in a more proactive way. <br>\nThe (logical) comparison operators known to R are:<br>\n\n* `<` for less than\n* `>` for greater than\n* `<=` for less than or equal to\n* `>=` for greater than or equal to\n* `==` for equal to each other\n* `!=` not equal to each other\n\nAs seen in the previous chapter, stating `6 &gt; 5` returns `TRUE`. The nice thing about R is that you can use these comparison operators also on vectors. For example:<br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(4, 5, 6) > 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE FALSE  TRUE\n```\n:::\n:::\n\n\nThis command tests for every element of the vector if the condition stated by the comparison operator is `TRUE` or `FALSE`.<br>\n\n**Steps**\n\n1. Check which elements in `poker_vector` are positive (i.e. > 0) and assign this to `selection_vector`. \n2. Print out `selection_vector` so you can inspect it. The printout tells you whether you won (`TRUE`) or lost (`FALSE`) any money for each day.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Which days did you make money on poker?\nselection_vector <- poker_vector > 0\n  \n## Print out selection_vector\nselection_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    Monday   Tuesday Wednesday  Thursday    Friday \n#>      TRUE     FALSE      TRUE     FALSE      TRUE\n```\n:::\n:::\n\n\n### Selection by comparison - Step 2\n\nWorking with comparisons will make your data analytical life easier. Instead of selecting a subset of days to investigate yourself (like before), you can simply ask R to return only those days where you realized a positive return for poker.\n\nIn the previous exercises you used `selection_vector <- poker_vector > 0` to find the days on which you had a positive poker return. Now, you would like to know not only the days on which you won, but also how much you won on those days.\n\nYou can select the desired elements, by putting `selection_vector` between the square brackets that follow `poker_vector`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npoker_vector[selection_vector]\n```\n:::\n\n\nR knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to `TRUE` in `selection_vector`.\n\n**Steps**\n\n1. Use `selection_vector` in square brackets to assign the amounts that you won on the profitable days to the variable `poker_winning_days`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select from poker_vector these days\npoker_winning_days <- poker_vector[selection_vector]\n```\n:::\n\n\n### Advanced selection\n\nJust like you did for poker, you also want to know those days where you realized a positive return for roulette.\n\n**Steps**\n\n1. Create the variable `selection_vector`, this time to see if you made profit with roulette for different days.\n2. Assign the amounts that you made on the days that you ended positively for roulette to the variable `roulette_winning_days`. This vector thus contains the positive winnings of `roulette_vector`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Which days did you make money on roulette?\nselection_vector      <- roulette_vector > 0\n\n## Select from roulette_vector these days\nroulette_winning_days <- roulette_vector[selection_vector]\n```\n:::\n\n\nGreat! This exercise concludes the chapter on vectors. The next chapter will introduce you to the two-dimensional version of vectors: matrices.\n\n# Matrices\n\nIn this chapter, you will learn how to work with matrices in R. By the end of the chapter, you will be able to create matrices and understand how to do basic computations with them. You will analyze the box office numbers of the Star Wars movies and learn how to use matrices in R. May the force be with you!\n\n## What's a matrix?\n\nIn R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. Since you are only working with rows and columns, a matrix is called two-dimensional.\n\nYou can construct a matrix in R with the <a href=\"http://www.rdocumentation.org/packages/base/functions/matrix\" target=\"_blank\" rel=\"noopener noreferrer\">`matrix()`</a> function. Consider the following example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmatrix(1:9, byrow = TRUE, nrow = 3)\n```\n:::\n\n\n\nIn the <a href=\"http://www.rdocumentation.org/packages/base/functions/matrix\" target=\"_blank\" rel=\"noopener noreferrer\">`matrix()`</a> function:<br>\n\n* The first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use `1:9` which is a shortcut for `c(1, 2, 3, 4, 5, 6, 7, 8, 9)`.\n* The argument `byrow` indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place `byrow = FALSE`. \n* The third argument `nrow` indicates that the matrix should have three rows.\n\n**Steps**\n\n1. Construct a matrix with 3 rows containing the numbers 1 up to 9, filled row-wise.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Construct a matrix with 3 rows that contain the numbers 1 up to 9\nmatrix(1:9, byrow = TRUE, nrow = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>      [,1] [,2] [,3]\n#> [1,]    1    2    3\n#> [2,]    4    5    6\n#> [3,]    7    8    9\n```\n:::\n:::\n\n\nIt is now time to get your hands dirty. In the following exercises you will analyze the box office numbers of the Star Wars franchise. May the force be with you!\n\nIn the editor, three vectors are defined. Each one represents the box office numbers from the first three Star Wars movies. The first element of each vector indicates the US box office revenue, the second element refers to the Non-US box office (source: Wikipedia).\n\nIn this exercise, you'll combine all these figures into a single vector. Next, you'll build a matrix from this vector.\n\n**Steps**\n\n1. Use `c(new_hope, empire_strikes, return_jedi)` to combine the three vectors into one vector. Call this vector `box_office`.\n2. Construct a matrix with 3 rows, where each row represents a movie. Use the `matrix()` function to do this. The first argument is the vector `box_office`, containing all box office figures. Next, you'll have to specify `nrow = 3` and `byrow = TRUE`. Name the resulting matrix `star_wars_matrix`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Box office Star Wars (in millions!)\nnew_hope         <- c(460.998, 314.4)\nempire_strikes   <- c(290.475, 247.900)\nreturn_jedi      <- c(309.306, 165.8)\n\n## Create box_office\nbox_office       <- c(new_hope, empire_strikes, return_jedi)\n\n## Construct star_wars_matrix\nstar_wars_matrix <- matrix(box_office, byrow=TRUE, nrow=3)\nstar_wars_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>         [,1]  [,2]\n#> [1,] 460.998 314.4\n#> [2,] 290.475 247.9\n#> [3,] 309.306 165.8\n```\n:::\n:::\n\n\n## Naming a matrix\n\nTo help you remember what is stored in `star_wars_matrix`, you would like to add the names of the movies for the rows. Not only does this help you to read the data, but it is also useful to select certain elements from the matrix.\n\nSimilar to vectors, you can add names for the rows and the columns of a matrix\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrownames(my_matrix) <- row_names_vector\ncolnames(my_matrix) <- col_names_vector\n```\n:::\n\n\nWe went ahead and prepared two vectors for you: `region`, and `titles`. You will need these vectors to name the columns and rows of `star_wars_matrix`, respectively.\n\n**Steps**\n\n1. Use `colnames()` to name the columns of `star_wars_matrix` with the `region` vector.\n2. Use `rownames()` to name the rows of `star_wars_matrix` with the `titles` vector.\n3. Print out `star_wars_matrix` to see the result of your work.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Vectors region and titles, used for naming\nregion <- c(\"US\", \"non-US\")\ntitles <- c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\")\n\n## Name the columns with region\ncolnames(star_wars_matrix) <- region\n\n## Name the rows with titles\nrownames(star_wars_matrix) <- titles\n\n## Print out star_wars_matrix\nstar_wars_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                              US non-US\n#> A New Hope              460.998  314.4\n#> The Empire Strikes Back 290.475  247.9\n#> Return of the Jedi      309.306  165.8\n```\n:::\n:::\n\n\n## Calculations 1\n\n### Calculating the worldwide box office\n\nThe single most important thing for a movie in order to become an instant legend in Tinseltown is its worldwide box office figures.\n\nTo calculate the total box office revenue for the three Star Wars movies, you have to take the sum of the US revenue column and the non-US revenue column.\n\nIn R, the function <a href=\"http://www.rdocumentation.org/packages/base/functions/colSums\" target=\"_blank\" rel=\"noopener noreferrer\">`rowSums()`</a> conveniently calculates the totals for each row of a matrix. This function creates a new vector:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrowSums(my_matrix)\n```\n:::\n\n\n**Steps**\n\n1. Calculate the worldwide box office figures for the three movies and put these in the vector named `worldwide_vector`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Calculate worldwide box office figures\nworldwide_vector <- rowSums(star_wars_matrix)\nworldwide_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>              A New Hope The Empire Strikes Back      Return of the Jedi \n#>                 775.398                 538.375                 475.106\n```\n:::\n:::\n\n\n## Adding rows & columns\n### Adding a column for the Worldwide box office\n\nIn the previous exercise you calculated the vector that contained the worldwide box office receipt for each of the three Star Wars movies. However, this vector is not yet part of `star_wars_matrix`.\n\nYou can add a column or multiple columns to a matrix with the <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`cbind()`</a> function, which merges matrices and/or vectors together by column. For example: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbig_matrix <- cbind(matrix1, matrix2, vector1, ...)\n```\n:::\n\n\n**Steps**\n\n1. Add `worldwide_vector` as a new column to the `star_wars_matrix` and assign the result to `all_wars_matrix`. Use the <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`cbind()`</a> function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Bind the new variable worldwide_vector as a column to star_wars_matrix\nall_wars_matrix <- cbind(star_wars_matrix, worldwide_vector)\nall_wars_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                              US non-US worldwide_vector\n#> A New Hope              460.998  314.4          775.398\n#> The Empire Strikes Back 290.475  247.9          538.375\n#> Return of the Jedi      309.306  165.8          475.106\n```\n:::\n:::\n\n\nNice job! After adding column to a matrix, the logical next step is adding rows. Learn how in the next exercise.\n\n### Adding a row\n\nJust like every action has a reaction, every <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`cbind()`</a> has an <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`rbind()`</a>. (We admit, we are pretty bad with metaphors.) \n\nYour R workspace, where all variables you defined 'live' (<a href=\"http://www.statmethods.net/interface/workspace.html\" target=\"_blank\" rel=\"noopener noreferrer\">check out what a workspace is</a>), has already been initialized and contains two matrices:\n\n*  `star_wars_matrix` that we have used all along, with data on the original trilogy,\n*  `star_wars_matrix2`, with similar data for the prequels trilogy. \n\nExplore these matrices in the console if you want to have a closer look. If you want to check out the contents of the workspace, you can type `ls()` in the console.\n\n**Steps**\n\n1. Use `rbind()` to paste together `star_wars_matrix` and `star_wars_matrix2`, in this order. Assign the resulting matrix to `all_wars_matrix`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## star_wars_matrix and star_wars_matrix2 are available in your workspace\nbox_office2       <- c(474.5, 552.5, 310.7, 338.7, 380.3, 468.5)\nstar_wars_matrix2 <- matrix(box_office2, nrow = 3, byrow = TRUE,\n                           dimnames = list(c(\"The Phantom Menace\", \"Attack of the Clones\", \"Revenge of the Sith\"), \n                                           c(\"US\", \"non-US\")))\n\n## Combine both Star Wars trilogies in one matrix\nall_wars_matrix <- rbind(star_wars_matrix, star_wars_matrix2)\nall_wars_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                              US non-US\n#> A New Hope              460.998  314.4\n#> The Empire Strikes Back 290.475  247.9\n#> Return of the Jedi      309.306  165.8\n#> The Phantom Menace      474.500  552.5\n#> Attack of the Clones    310.700  338.7\n#> Revenge of the Sith     380.300  468.5\n```\n:::\n:::\n\n\nWonderful! Continue with the next exercise and see how you can combine the results of the `rbind()` function with the `colSums()` function!\n\n## Calculations 2\n### The total box office revenue for the entire saga\n\nJust like <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`cbind()`</a> has  <a href=\"http://www.rdocumentation.org/packages/base/functions/cbind\" target=\"_blank\" rel=\"noopener noreferrer\">`rbind()`</a>, <a href=\"http://www.rdocumentation.org/packages/base/functions/colSums\" target=\"_blank\" rel=\"noopener noreferrer\">`colSums()`</a> has <a href=\"http://www.rdocumentation.org/packages/base/functions/colSums\" target=\"_blank\" rel=\"noopener noreferrer\">`rowSums()`</a>. Your R workspace already contains the `all_wars_matrix` that you constructed in the previous exercise; type `all_wars_matrix` to have another look. Let's now calculate the total box office revenue for the entire saga.\n\n**Steps**\n\n1. Calculate the total revenue for the US and the non-US region and assign `total_revenue_vector`. You can use the <a href=\"http://www.rdocumentation.org/packages/base/functions/colSums\" target=\"_blank\" rel=\"noopener noreferrer\">`colSums()`</a> function.\n2. Print out `total_revenue_vector` to have a look at the results.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## all_wars_matrix is available in your workspace\nall_wars_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                              US non-US\n#> A New Hope              460.998  314.4\n#> The Empire Strikes Back 290.475  247.9\n#> Return of the Jedi      309.306  165.8\n#> The Phantom Menace      474.500  552.5\n#> Attack of the Clones    310.700  338.7\n#> Revenge of the Sith     380.300  468.5\n```\n:::\n\n```{.r .cell-code}\n## Total revenue for US and non-US\ntotal_revenue_vector <- colSums(all_wars_matrix)\n  \n## Print out total_revenue_vector\ntotal_revenue_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>       US   non-US \n#> 2226.279 2087.800\n```\n:::\n:::\n\n\nBellissimo! Head over to the next exercise to learn matrix subsetting.\n\n## Selection of matrix elements\n\nSimilar to vectors, you can use the square brackets `[ ]` to select one or multiple elements from a matrix. Whereas vectors have one dimension, matrices have two dimensions. You should therefore use a comma to separate the rows you want to select from the columns. For example: \n\n*  `my_matrix[1,2]` selects the element at the first row and second column.\n*  `my_matrix[1:3,2:4]` results in a matrix with the data on the rows 1, 2, 3 and columns 2, 3, 4.\n\nIf you want to select all elements of a row or a column, no number is needed before or after the comma, respectively:\n\n*  `my_matrix[,1]` selects all elements of the first column.\n*  `my_matrix[1,]` selects all elements of the first row.\n\nBack to Star Wars with this newly acquired knowledge! As in the previous exercise, `all_wars_matrix` is already available in your workspace.\n\n**Steps**\n\n1. Select the non-US revenue for all movies (the entire second column of `all_wars_matrix`), store the result as `non_us_all`.\n2. Use `mean()` on `non_us_all` to calculate the average non-US revenue for all movies. Simply print out the result.\n3. This time, select the non-US revenue for the first two movies in `all_wars_matrix`. Store the result as `non_us_some`.\n4. Use `mean()` again to print out the average of the values in `non_us_some`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select the non-US revenue for all movies\nnon_us_all  <- all_wars_matrix[,2]\n  \n## Average non-US revenue\nmean(non_us_all)\n#> [1] 347.9667\n  \n## Select the non-US revenue for first two movies\nnon_us_some <- all_wars_matrix[1:2,2]\n  \nmean(non_us_some)\n#> [1] 281.15\n```\n:::\n\n\n## Calculations 3\n### A little arithmetic with matrices 1\n\nSimilar to what you have learned with vectors, the standard operators like `+`, `-`, `/`, `*`, etc. work in an element-wise way on matrices in R.\n\nFor example, `2 * my_matrix` multiplies each element of `my_matrix` by two.\n\nAs a newly-hired data analyst for Lucasfilm, it is your job to find out how many visitors went to each movie for each geographical area. You already have the total revenue figures in `all_wars_matrix`. Assume that the price of a ticket was 5 dollars. Simply dividing the box office numbers by this ticket price gives you the number of visitors.\n\n**Steps**\n\n1. Divide `all_wars_matrix` by 5, giving you the number of visitors in millions. Assign the resulting matrix to `visitors`.\n2. Print out `visitors` so you can have a look.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Estimate the visitors\nvisitors <- all_wars_matrix / 5\n  \n## Print the estimate to the console\nvisitors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                              US non-US\n#> A New Hope              92.1996  62.88\n#> The Empire Strikes Back 58.0950  49.58\n#> Return of the Jedi      61.8612  33.16\n#> The Phantom Menace      94.9000 110.50\n#> Attack of the Clones    62.1400  67.74\n#> Revenge of the Sith     76.0600  93.70\n```\n:::\n:::\n\n\nGreat! What do these results tell you? A staggering 92 million people went to see A New Hope in US theaters! Continue to the next exercise.\n\n### A little arithmetic with matrices 2\n\nJust like `2 * my_matrix` multiplied every element of `my_matrix` by two, `my_matrix1 * my_matrix2` creates a matrix where each element is the product of the corresponding elements in `my_matrix1` and `my_matrix2`.\n\nAfter looking at the result of the previous exercise, big boss Lucas points out that the ticket prices went up over time. He asks to redo the analysis based on the prices you can find in `ticket_prices_matrix` (source: imagination).\n\n*Those who are familiar with matrices should note that this is not the standard matrix multiplication for which you should use `%%` in R.*\n\n**Steps**\n\n1. Divide `all_wars_matrix` by `ticket_prices_matrix` to get the estimated number of US and non-US visitors for the six movies. Assign the result to `visitors`.\n2. From the `visitors` matrix, select the entire first column, representing the number of visitors in the US. Store this selection as `us_visitors`.\n3. Calculate the average number of US visitors; print out the result.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nticket_prices        <- c(5.0,5.0,6.0,6.0,7.0,7.0,4.0,4.0,4.5,4.5,4.9,4.9)\nticket_prices_matrix <- matrix(ticket_prices, nrow = 6, byrow = TRUE,\n                               dimnames = list(c(\"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\", \"The Phantom Menace\", \"Attack of the Clones\", \"Revenge of the Sith\"), \n                                               c(\"US\", \"non-US\")))\n\n## Estimated number of visitors\nvisitors <- all_wars_matrix / ticket_prices_matrix\n\n## US visitors\nus_visitors <- visitors[,1]\n\n## Average number of US visitors\nmean(us_visitors)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 75.01339\n```\n:::\n:::\n\n\n# Factors\n\nData often falls into a limited number of categories. For example, human hair color can be categorized as black, brown, blond, red, grey, or white—and perhaps a few more options for people who color their hair. In R, categorical data is stored in factors. Factors are very important in data analysis, so start learning how to create, subset, and compare them now.\n\n## What's a factor?\n### What's a factor and why would you use it? 1\n\nIn this chapter you dive into the wonderful world of **factors**.\n\nThe term factor refers to a statistical data type used to store categorical variables. The difference between a categorical variable and a continuous variable is that a categorical variable can belong to a **limited number of categories**. A continuous variable, on the other hand, can correspond to an infinite number of values.\n\nIt is important that R knows whether it is dealing with a continuous or a categorical variable, as the statistical models you will develop in the future treat both types differently. (You will see later why this is the case.)\n\nA good example of a categorical variable is sex. In many circumstances you can limit the sex categories to \"Male\" or \"Female\". (Sometimes you may need different categories. For example, you may need to consider chromosomal variation, hermaphroditic animals, or different cultural norms, but you will always have a finite number of categories.)\n\n**Steps**\n\n1. Assign to variable `theory` the value `\"factors\"`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Assign to the variable theory what this chapter is about!\ntheory <- \"factors for categorical variables\"\n```\n:::\n\n\n\n### What's a factor and why would you use it? 2\n\nTo create factors in R, you make use of the function <a href=\"http://www.rdocumentation.org/packages/base/functions/factor\" target=\"_blank\" rel=\"noopener noreferrer\">`factor()`</a>. First thing that you have to do is create a vector that contains all the observations that belong to a limited number of categories. For example, `sex_vector` contains the sex of 5 different individuals:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsex_vector <- c(\"Male\",\"Female\",\"Female\",\"Male\",\"Male\")\n```\n:::\n\n\n\nIt is clear that there are two categories, or in R-terms **'factor levels'**, at work here: \"Male\" and \"Female\".\n\nThe function <a href=\"http://www.rdocumentation.org/packages/base/functions/factor\" target=\"_blank\" rel=\"noopener noreferrer\">`factor()`</a> will encode the vector as a factor:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactor_sex_vector <- factor(sex_vector)\n```\n:::\n\n\n**Steps**\n\n1. Convert the character vector `sex_vector` to a factor with `factor()` and assign the result to `factor_sex_vector`\n2. Print out `factor_sex_vector` and assert that R prints out the factor levels below the actual values.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Sex vector\nsex_vector        <- c(\"Male\", \"Female\", \"Female\", \"Male\", \"Male\")\n\n## Convert sex_vector to a factor\nfactor_sex_vector <- factor(sex_vector)\n\n## Print out factor_sex_vector\nfactor_sex_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] Male   Female Female Male   Male  \n#> Levels: Female Male\n```\n:::\n:::\n\n\nGreat! If you want to find out more about the `factor()` function, do not hesitate to type `?factor` in the console. This will open up a help page. Continue to the next exercise.\n\n### What's a factor and why would you use it? 3\n\nThere are two types of categorical variables: a **nominal categorical variable** and an **ordinal categorical variable**.\n\nA nominal variable is a categorical variable without an implied order. This means that it is impossible to say that 'one is worth more than the other'. For example, think of the categorical variable `animals_vector` with the categories `\"Elephant\"`, `\"Giraffe\"`, `\"Donkey\"` and `\"Horse\"`. Here, it is impossible to say that one stands above or below the other. (Note that some of you might disagree ;-) ).\n\nIn contrast, ordinal variables do have a natural ordering. Consider for example the categorical variable `temperature_vector` with the categories: `\"Low\"`, `\"Medium\"` and `\"High\"`. Here it is obvious that `\"Medium\"` stands above `\"Low\"`, and `\"High\"` stands above `\"Medium\"`.\n\n**Steps**\n\n1. Submit the answer to check how R constructs and prints nominal and ordinal variables. Do not worry if you do not understand all the code just yet, we will get to that.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Animals\nanimals_vector        <- c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector <- factor(animals_vector)\nfactor_animals_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] Elephant Giraffe  Donkey   Horse   \n#> Levels: Donkey Elephant Giraffe Horse\n```\n:::\n\n```{.r .cell-code}\n## Temperature\ntemperature_vector        <- c(\"High\", \"Low\", \"High\",\"Low\", \"Medium\")\nfactor_temperature_vector <- factor(temperature_vector, order = TRUE, levels = c(\"Low\", \"Medium\", \"High\"))\nfactor_temperature_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] High   Low    High   Low    Medium\n#> Levels: Low < Medium < High\n```\n:::\n:::\n\n\nCan you already tell what's happening in this exercise? Awesome! Continue to the next exercise and get into the details of factor levels.\n\n## Factor levels\n\nWhen you first get a dataset, you will often notice that it contains factors with specific factor levels. However, sometimes you will want to change the names of these levels for clarity or other reasons. R allows you to do this with the function <a href=\"http://www.rdocumentation.org/packages/base/functions/levels\" target=\"_blank\" rel=\"noopener noreferrer\">`levels()`</a>:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlevels(factor_vector) <- c(\"name1\", \"name2\",...)\n```\n:::\n\n\nA good illustration is the raw data that is provided to you by a survey. A common question for every questionnaire is the sex of the respondent. Here, for simplicity, just two categories were recorded, `\"M\"` and `\"F\"`. (You usually need more categories for survey data; either way, you use a factor to store the categorical data.) \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsurvey_vector <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\n```\n:::\n\n\nRecording the sex with the abbreviations `\"M\"` and `\"F\"` can be convenient if you are collecting data with pen and paper, but it can introduce confusion when analyzing the data. At that point, you will often want to change the factor levels to `\"Male\"` and `\"Female\"` instead of `\"M\"` and `\"F\"` for clarity.\n\n**Watch out:** the order with which you assign the levels is important. If you type `levels(factor_survey_vector)`, you'll see that it outputs `[1] \"F\" \"M\"`. If you don't specify the levels of the factor when creating the vector, `R` will automatically assign them alphabetically. To correctly map `\"F\"` to `\"Female\"` and `\"M\"` to `\"Male\"`, the levels should be set to `c(\"Female\", \"Male\")`, in this order.\n\n**Steps**\n\n1. Check out the code that builds a factor vector from `survey_vector`. You should use `factor_survey_vector` in the next instruction.\n2. Change the factor levels of `factor_survey_vector` to `c(\"Female\", \"Male\")`. Mind the order of the vector elements here.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Code to build factor_survey_vector\nsurvey_vector        <- c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector <- factor(survey_vector)\n\n## Specify the levels of factor_survey_vector\nlevels(factor_survey_vector) <- c(\"Female\", \"Male\")\n\nfactor_survey_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] Male   Female Female Male   Male  \n#> Levels: Female Male\n```\n:::\n:::\n\n\n## Summarizing a factor\n\nAfter finishing this course, one of your favorite functions in R will be <a href=\"http://www.rdocumentation.org/packages/base/functions/summary\" target=\"_blank\" rel=\"noopener noreferrer\">`summary()`</a>. This will give you a quick overview of the contents of a variable:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(my_var)\n```\n:::\n\n\nGoing back to our survey, you would like to know how many `\"Male\"` responses you have in your study, and how many `\"Female\"` responses. The <a href=\"http://www.rdocumentation.org/packages/base/functions/summary\" target=\"_blank\" rel=\"noopener noreferrer\">`summary()`</a> function gives you the answer to this question.<br>\n\n**Steps**\n\n1. Ask a <a href=\"http://www.rdocumentation.org/packages/base/functions/summary\" target=\"_blank\" rel=\"noopener noreferrer\">`summary()`</a> of the `survey_vector` and `factor_survey_vector`. Interpret the results of both vectors. Are they both equally useful in this case?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Generate summary for survey_vector\nsummary(survey_vector)\n#>    Length     Class      Mode \n#>         5 character character\n\n## Generate summary for factor_survey_vector\nsummary(factor_survey_vector)\n#> Female   Male \n#>      2      3\n```\n:::\n\n\nNice! Have a look at the output. The fact that you identified `\"Male\"` and `\"Female\"` as factor levels in `factor_survey_vector` enables R to show the number of elements for each category.\n\n## Comparing factors\n### Battle of the sexes\n\nYou might wonder what happens when you try to compare elements of a factor.  In `factor_survey_vector` you have a factor with two levels: `\"Male\"` and `\"Female\"`. But how does R value these relative to each other?\n\n**Steps**\n\n1. Read the code in the editor and submit the answer to test if `male` is greater than (`&gt;`) `female`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Male\nmale <- factor_survey_vector[1]\n\n## Female\nfemale <- factor_survey_vector[2]\n\n## Battle of the sexes: Male 'larger' than female?\nmale > female\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in Ops.factor(male, female): '>' ist nicht sinnvoll für Faktoren\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] NA\n```\n:::\n:::\n\n\nHow interesting! By default, R returns `NA` when you try to compare values in a factor, since the idea doesn't make sense. Next you'll learn about ordered factors, where more meaningful comparisons are possible.\n\n## Ordered factors\n### Ordered factors 1\n\nSince `\"Male\"` and `\"Female\"` are unordered (or nominal) factor levels, R returns a warning message, telling you that the greater than operator is not meaningful. As seen before, R attaches an equal value to the levels for such factors.\n\nBut this is not always the case! Sometimes you will also deal with factors that do have a natural ordering between its categories. If this is the case, we have to make sure that we pass this information to R…\n\nLet us say that you are leading a research team of five data analysts and that you want to evaluate their performance. To do this, you track their speed, evaluate each analyst as `\"slow\"`, `\"medium\"` or `\"fast\"`, and save the results in `speed_vector`.\n\n**Steps**\n\n1. As a first step, assign `speed_vector` a vector with 5 entries, one for each analyst. Each entry should be either `\"slow\"`, `\"medium\"`, or `\"fast\"`. Use the list below:\n\n    * Analyst 1 is medium,\n    * Analyst 2 is slow,\n    * Analyst 3 is slow,\n    * Analyst 4 is medium and\n    * Analyst 5 is fast.\n\nNo need to specify these are factors yet.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Create speed_vector\nspeed_vector <- c(\"medium\", \"slow\", \"slow\", \"medium\", \"fast\")\n```\n:::\n\n\n### Ordered factors 2\n\n`speed_vector` should be converted to an ordinal factor since its categories have a natural ordering. By default, the function <a href=\"http://www.rdocumentation.org/packages/base/functions/factor\" target=\"_blank\" rel=\"noopener noreferrer\">`factor()`</a> transforms `speed_vector` into an unordered factor. To create an ordered factor, you have to add two additional arguments: `ordered` and `levels`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfactor(some_vector,\n       ordered = TRUE,\n       levels = c(\"lev1\", \"lev2\", ...))\n```\n:::\n\n\nBy setting the argument `ordered` to `TRUE` in the function <a href=\"http://www.rdocumentation.org/packages/base/functions/factor\" target=\"_blank\" rel=\"noopener noreferrer\">`factor()`</a>, you indicate that the factor is ordered. With the argument `levels` you give the values of the factor in the correct order.\n\n**Steps**\n\n1. From `speed_vector`, create an ordered factor vector: `factor_speed_vector`. Set `ordered` to `TRUE`, and set `levels` to `c(\"slow\", \"medium\", \"fast\")`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Convert speed_vector to ordered factor vector\nfactor_speed_vector <- factor(speed_vector, ordered = TRUE, levels =c(\"slow\", \"medium\", \"fast\"))\n\n## Print factor_speed_vector\nfactor_speed_vector\n#> [1] medium slow   slow   medium fast  \n#> Levels: slow < medium < fast\n\nsummary(factor_speed_vector)\n#>   slow medium   fast \n#>      2      2      1\n```\n:::\n\n\nGreat! Have a look at the console. It is now indicated that the Levels indeed have an order associated, with the `<` sign. Continue to the next exercise.\n\n## Comparing ordered factors\n\nHaving a bad day at work, 'data analyst number two' enters your office and starts complaining that 'data analyst number five' is slowing down the entire project. Since you know that 'data analyst number two' has the reputation of being a smarty-pants, you first decide to check if his statement is true.\n\nThe fact that `factor_speed_vector` is now ordered enables us to compare different elements (the data analysts in this case). You can simply do this by using the well-known operators.\n\n**Steps**\n\n1. Use `[2]` to select from `factor_speed_vector` the factor value for the second data analyst. Store it as `da2`.\n2. Use `[5]` to select the `factor_speed_vector` factor value for the fifth data analyst. Store it as `da5`.\n3. Check if `da2` is greater than `da5`; simply print out the result. Remember that you can use the `>` operator to check whether one element is larger than the other.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Factor value for second data analyst\nda2 <- factor_speed_vector[2]\n\n## Factor value for fifth data analyst\nda5 <- factor_speed_vector[5]\n\n## Is data analyst 2 faster than data analyst 5?\nda2 > da5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE\n```\n:::\n:::\n\n\nBellissimo! What does the result tell you? Data analyst two is complaining about the data analyst five while in fact they are the one slowing everything down! This concludes the chapter on factors. With a solid basis in vectors, matrices and factors, you're ready to dive into the wonderful world of data frames, a very important data structure in R!\n\n# Data frames\n\nMost datasets you will be working with will be stored as data frames. By the end of this chapter, you will be able to create a data frame, select interesting parts of a data frame, and order a data frame according to certain variables.\n\n## What's a data frame?\n\nYou may remember from the chapter about matrices that all the elements that you put in a matrix should be of the same type. Back then, your dataset on Star Wars only contained numeric elements. \n\nWhen doing a market research survey, however, you often have questions such as:\n\n* 'Are you married?' or 'yes/no' questions (`logical`)\n* 'How old are you?' (`numeric`)\n* 'What is your opinion on this product?' or other 'open-ended' questions (`character`)\n* …\n\nThe output, namely the respondents' answers to the questions formulated above, is a dataset of different data types. You will often find yourself working with datasets that contain different data types instead of only one.\n\nA data frame has the variables of a dataset as columns and the observations as rows. This will be a familiar concept for those coming from different statistical software packages such as SAS or SPSS.\n\n**Steps**\n\n1. Submit the answer. The data from the built-in example data frame <a href=\"http://www.rdocumentation.org/packages/datasets/functions/mtcars\" target=\"_blank\" rel=\"noopener noreferrer\">`mtcars`</a> will be printed to the console.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Print out built-in R data frame\nmtcars \n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.620\",\"7\":\"16.46\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160.0\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.875\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"108.0\",\"4\":\"93\",\"5\":\"3.85\",\"6\":\"2.320\",\"7\":\"18.61\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\",\"_rn_\":\"Datsun 710\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258.0\",\"4\":\"110\",\"5\":\"3.08\",\"6\":\"3.215\",\"7\":\"19.44\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.7\",\"2\":\"8\",\"3\":\"360.0\",\"4\":\"175\",\"5\":\"3.15\",\"6\":\"3.440\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\",\"_rn_\":\"Hornet Sportabout\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225.0\",\"4\":\"105\",\"5\":\"2.76\",\"6\":\"3.460\",\"7\":\"20.22\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Valiant\"},{\"1\":\"14.3\",\"2\":\"8\",\"3\":\"360.0\",\"4\":\"245\",\"5\":\"3.21\",\"6\":\"3.570\",\"7\":\"15.84\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\",\"_rn_\":\"Duster 360\"},{\"1\":\"24.4\",\"2\":\"4\",\"3\":\"146.7\",\"4\":\"62\",\"5\":\"3.69\",\"6\":\"3.190\",\"7\":\"20.00\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"2\",\"_rn_\":\"Merc 240D\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"140.8\",\"4\":\"95\",\"5\":\"3.92\",\"6\":\"3.150\",\"7\":\"22.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"2\",\"_rn_\":\"Merc 230\"},{\"1\":\"19.2\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.30\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280\"},{\"1\":\"17.8\",\"2\":\"6\",\"3\":\"167.6\",\"4\":\"123\",\"5\":\"3.92\",\"6\":\"3.440\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"0\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Merc 280C\"},{\"1\":\"16.4\",\"2\":\"8\",\"3\":\"275.8\",\"4\":\"180\",\"5\":\"3.07\",\"6\":\"4.070\",\"7\":\"17.40\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"3\",\"_rn_\":\"Merc 450SE\"},{\"1\":\"17.3\",\"2\":\"8\",\"3\":\"275.8\",\"4\":\"180\",\"5\":\"3.07\",\"6\":\"3.730\",\"7\":\"17.60\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"3\",\"_rn_\":\"Merc 450SL\"},{\"1\":\"15.2\",\"2\":\"8\",\"3\":\"275.8\",\"4\":\"180\",\"5\":\"3.07\",\"6\":\"3.780\",\"7\":\"18.00\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"3\",\"_rn_\":\"Merc 450SLC\"},{\"1\":\"10.4\",\"2\":\"8\",\"3\":\"472.0\",\"4\":\"205\",\"5\":\"2.93\",\"6\":\"5.250\",\"7\":\"17.98\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\",\"_rn_\":\"Cadillac Fleetwood\"},{\"1\":\"10.4\",\"2\":\"8\",\"3\":\"460.0\",\"4\":\"215\",\"5\":\"3.00\",\"6\":\"5.424\",\"7\":\"17.82\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\",\"_rn_\":\"Lincoln Continental\"},{\"1\":\"14.7\",\"2\":\"8\",\"3\":\"440.0\",\"4\":\"230\",\"5\":\"3.23\",\"6\":\"5.345\",\"7\":\"17.42\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\",\"_rn_\":\"Chrysler Imperial\"},{\"1\":\"32.4\",\"2\":\"4\",\"3\":\"78.7\",\"4\":\"66\",\"5\":\"4.08\",\"6\":\"2.200\",\"7\":\"19.47\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\",\"_rn_\":\"Fiat 128\"},{\"1\":\"30.4\",\"2\":\"4\",\"3\":\"75.7\",\"4\":\"52\",\"5\":\"4.93\",\"6\":\"1.615\",\"7\":\"18.52\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"2\",\"_rn_\":\"Honda Civic\"},{\"1\":\"33.9\",\"2\":\"4\",\"3\":\"71.1\",\"4\":\"65\",\"5\":\"4.22\",\"6\":\"1.835\",\"7\":\"19.90\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\",\"_rn_\":\"Toyota Corolla\"},{\"1\":\"21.5\",\"2\":\"4\",\"3\":\"120.1\",\"4\":\"97\",\"5\":\"3.70\",\"6\":\"2.465\",\"7\":\"20.01\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Toyota Corona\"},{\"1\":\"15.5\",\"2\":\"8\",\"3\":\"318.0\",\"4\":\"150\",\"5\":\"2.76\",\"6\":\"3.520\",\"7\":\"16.87\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\",\"_rn_\":\"Dodge Challenger\"},{\"1\":\"15.2\",\"2\":\"8\",\"3\":\"304.0\",\"4\":\"150\",\"5\":\"3.15\",\"6\":\"3.435\",\"7\":\"17.30\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\",\"_rn_\":\"AMC Javelin\"},{\"1\":\"13.3\",\"2\":\"8\",\"3\":\"350.0\",\"4\":\"245\",\"5\":\"3.73\",\"6\":\"3.840\",\"7\":\"15.41\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"4\",\"_rn_\":\"Camaro Z28\"},{\"1\":\"19.2\",\"2\":\"8\",\"3\":\"400.0\",\"4\":\"175\",\"5\":\"3.08\",\"6\":\"3.845\",\"7\":\"17.05\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\",\"_rn_\":\"Pontiac Firebird\"},{\"1\":\"27.3\",\"2\":\"4\",\"3\":\"79.0\",\"4\":\"66\",\"5\":\"4.08\",\"6\":\"1.935\",\"7\":\"18.90\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\",\"_rn_\":\"Fiat X1-9\"},{\"1\":\"26.0\",\"2\":\"4\",\"3\":\"120.3\",\"4\":\"91\",\"5\":\"4.43\",\"6\":\"2.140\",\"7\":\"16.70\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"2\",\"_rn_\":\"Porsche 914-2\"},{\"1\":\"30.4\",\"2\":\"4\",\"3\":\"95.1\",\"4\":\"113\",\"5\":\"3.77\",\"6\":\"1.513\",\"7\":\"16.90\",\"8\":\"1\",\"9\":\"1\",\"10\":\"5\",\"11\":\"2\",\"_rn_\":\"Lotus Europa\"},{\"1\":\"15.8\",\"2\":\"8\",\"3\":\"351.0\",\"4\":\"264\",\"5\":\"4.22\",\"6\":\"3.170\",\"7\":\"14.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"4\",\"_rn_\":\"Ford Pantera L\"},{\"1\":\"19.7\",\"2\":\"6\",\"3\":\"145.0\",\"4\":\"175\",\"5\":\"3.62\",\"6\":\"2.770\",\"7\":\"15.50\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"6\",\"_rn_\":\"Ferrari Dino\"},{\"1\":\"15.0\",\"2\":\"8\",\"3\":\"301.0\",\"4\":\"335\",\"5\":\"3.54\",\"6\":\"3.570\",\"7\":\"14.60\",\"8\":\"0\",\"9\":\"1\",\"10\":\"5\",\"11\":\"8\",\"_rn_\":\"Maserati Bora\"},{\"1\":\"21.4\",\"2\":\"4\",\"3\":\"121.0\",\"4\":\"109\",\"5\":\"4.11\",\"6\":\"2.780\",\"7\":\"18.60\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"2\",\"_rn_\":\"Volvo 142E\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Quick, have a look at your dataset\n\nWow, that is a lot of cars!\n\nWorking with large datasets is not uncommon in data analysis. When you work with (extremely) large datasets and data frames, your first task as a data analyst is to develop a clear understanding of its structure and main elements. Therefore, it is often useful to show only a small part of the entire dataset.\n\nSo how to do this in R? Well, the function <a href=\"http://www.rdocumentation.org/packages/utils/functions/head\" target=\"_blank\" rel=\"noopener noreferrer\">`head()`</a> enables you to show the first observations of a data frame. Similarly, the function <a href=\"http://www.rdocumentation.org/packages/utils/functions/head\" target=\"_blank\" rel=\"noopener noreferrer\">`tail()`</a> prints out the last observations in your dataset.\n\nBoth <a href=\"http://www.rdocumentation.org/packages/utils/functions/head\" target=\"_blank\" rel=\"noopener noreferrer\">`head()`</a> and <a href=\"http://www.rdocumentation.org/packages/utils/functions/head\" target=\"_blank\" rel=\"noopener noreferrer\">`tail()`</a> print a top line called the 'header', which contains the names of the different variables in your dataset.\n\n**Steps**\n\n1. Call <a href=\"http://www.rdocumentation.org/packages/utils/functions/head\" target=\"_blank\" rel=\"noopener noreferrer\">`head()`</a> on the <a href=\"http://www.rdocumentation.org/packages/datasets/functions/mtcars\" target=\"_blank\" rel=\"noopener noreferrer\">`mtcars`</a> dataset to have a look at the header and the first observations.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Call head() on mtcars\nhead(mtcars)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"mpg\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cyl\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"disp\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"hp\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"drat\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"wt\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"qsec\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"vs\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"am\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"gear\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"carb\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.620\",\"7\":\"16.46\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4\"},{\"1\":\"21.0\",\"2\":\"6\",\"3\":\"160\",\"4\":\"110\",\"5\":\"3.90\",\"6\":\"2.875\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"1\",\"10\":\"4\",\"11\":\"4\",\"_rn_\":\"Mazda RX4 Wag\"},{\"1\":\"22.8\",\"2\":\"4\",\"3\":\"108\",\"4\":\"93\",\"5\":\"3.85\",\"6\":\"2.320\",\"7\":\"18.61\",\"8\":\"1\",\"9\":\"1\",\"10\":\"4\",\"11\":\"1\",\"_rn_\":\"Datsun 710\"},{\"1\":\"21.4\",\"2\":\"6\",\"3\":\"258\",\"4\":\"110\",\"5\":\"3.08\",\"6\":\"3.215\",\"7\":\"19.44\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Hornet 4 Drive\"},{\"1\":\"18.7\",\"2\":\"8\",\"3\":\"360\",\"4\":\"175\",\"5\":\"3.15\",\"6\":\"3.440\",\"7\":\"17.02\",\"8\":\"0\",\"9\":\"0\",\"10\":\"3\",\"11\":\"2\",\"_rn_\":\"Hornet Sportabout\"},{\"1\":\"18.1\",\"2\":\"6\",\"3\":\"225\",\"4\":\"105\",\"5\":\"2.76\",\"6\":\"3.460\",\"7\":\"20.22\",\"8\":\"1\",\"9\":\"0\",\"10\":\"3\",\"11\":\"1\",\"_rn_\":\"Valiant\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWonderful! So, what do we have in this dataset? For example, `hp` represents the car's horsepower; the Datsun has the lowest horse power of the 6 cars that are displayed. For a full overview of the variables' meaning, type `?mtcars` in the console and read the help page. Continue to the next exercise!\n\n## Structure \n### Have a look at the structure\n\nAnother method that is often used to get a rapid overview of your data is the function <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\" target=\"_blank\" rel=\"noopener noreferrer\">`str()`</a>. The function <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\" target=\"_blank\" rel=\"noopener noreferrer\">`str()`</a> shows you the structure of your dataset. For a data frame it tells you:\n\n* The total number of observations (e.g. 32 car types)\n* The total number of variables (e.g. 11 car features)\n* A full list of the variables names (e.g. `mpg`, `cyl` … )\n* The data type of each variable (e.g. `num`)\n* The first observations\n\nApplying the <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\" target=\"_blank\" rel=\"noopener noreferrer\">`str()`</a> function will often be the first thing that you do when receiving a new dataset or data frame. It is a great way to get more insight in your dataset before diving into the real analysis.\n\n**Steps**\n\n1. Investigate the structure of <a href=\"http://www.rdocumentation.org/packages/datasets/functions/mtcars\" target=\"_blank\" rel=\"noopener noreferrer\">`mtcars`</a>. Make sure that you see the same numbers, variables and data types as mentioned above.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Investigate the structure of mtcars\nstr(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t32 obs. of  11 variables:\n#>  $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n#>  $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n#>  $ disp: num  160 160 108 258 360 ...\n#>  $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n#>  $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n#>  $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n#>  $ qsec: num  16.5 17 18.6 19.4 17 ...\n#>  $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n#>  $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n#>  $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n#>  $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n```\n:::\n:::\n\n\nNice work! You can find lots of information by viewing the `str()` of a dataset. Continue to the next exercise.\n\n## Creating a data frame\n### Creating a data frame 1\n\nSince using built-in datasets is not even half the fun of creating your own datasets, the rest of this chapter is based on your personally developed dataset. Put your jet pack on because it is time for some space exploration!\n\nAs a first goal, you want to construct a data frame that describes the main characteristics of eight planets in our solar system. According to your good friend Buzz, the main features of a planet are:\n\n* The type of planet (Terrestrial or Gas Giant).\n* The planet's diameter relative to the diameter of the Earth.\n* The planet's rotation across the sun relative to that of the Earth.\n* If the planet has rings or not (TRUE or FALSE).\n\nAfter doing some high-quality research on <a href=\"https://en.wikipedia.org/wiki/Planet\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia</a>, you feel confident enough to create the necessary vectors: `name`, `type`, `diameter`, `rotation` and `rings`; these vectors have already been coded up in the editor. The first element in each of these vectors correspond to the first observation.\n\nYou construct a data frame with the <a href=\"https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame\" target=\"_blank\" rel=\"noopener noreferrer\">`data.frame()`</a> function. As arguments, you pass the vectors from before: they will become the different columns of your data frame. Because every column has the same length, the vectors you pass should also have the same length. But don't forget that it is possible (and likely) that they contain different types of data.\n\n**Steps**\n\n1. Use the function <a href=\"https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/data.frame\" target=\"_blank\" rel=\"noopener noreferrer\">`data.frame()`</a> to construct a data frame. Pass the vectors `name`, `type`, `diameter`, `rotation` and `rings` as arguments to `data.frame()`, in this order. Call the resulting data frame `planets_df`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Definition of vectors\nname <- c(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\ntype <- c(\"Terrestrial planet\", \"Terrestrial planet\", \"Terrestrial planet\", \n          \"Terrestrial planet\", \"Gas giant\", \"Gas giant\", \"Gas giant\", \"Gas giant\")\ndiameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)\nrotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)\nrings    <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\n\n## Create a data frame from the vectors\nplanets_df <- data.frame(name, type, diameter, rotation, rings)\nplanets_df\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"diameter\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rotation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rings\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Mercury\",\"2\":\"Terrestrial planet\",\"3\":\"0.382\",\"4\":\"58.64\",\"5\":\"FALSE\"},{\"1\":\"Venus\",\"2\":\"Terrestrial planet\",\"3\":\"0.949\",\"4\":\"-243.02\",\"5\":\"FALSE\"},{\"1\":\"Earth\",\"2\":\"Terrestrial planet\",\"3\":\"1.000\",\"4\":\"1.00\",\"5\":\"FALSE\"},{\"1\":\"Mars\",\"2\":\"Terrestrial planet\",\"3\":\"0.532\",\"4\":\"1.03\",\"5\":\"FALSE\"},{\"1\":\"Jupiter\",\"2\":\"Gas giant\",\"3\":\"11.209\",\"4\":\"0.41\",\"5\":\"TRUE\"},{\"1\":\"Saturn\",\"2\":\"Gas giant\",\"3\":\"9.449\",\"4\":\"0.43\",\"5\":\"TRUE\"},{\"1\":\"Uranus\",\"2\":\"Gas giant\",\"3\":\"4.007\",\"4\":\"-0.72\",\"5\":\"TRUE\"},{\"1\":\"Neptune\",\"2\":\"Gas giant\",\"3\":\"3.883\",\"4\":\"0.67\",\"5\":\"TRUE\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Creating a data frame 2\n\nThe `planets_df` data frame should have 8 observations and 5 variables. It has been made available in the workspace, so you can directly use it.\n\n**Steps**\n\n1. Use <a href=\"http://www.rdocumentation.org/packages/utils/functions/str\" target=\"_blank\" rel=\"noopener noreferrer\">`str()`</a> to investigate the structure of the new `planets_df` variable.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Check the structure of planets_df\nstr(planets_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> 'data.frame':\t8 obs. of  5 variables:\n#>  $ name    : chr  \"Mercury\" \"Venus\" \"Earth\" \"Mars\" ...\n#>  $ type    : chr  \"Terrestrial planet\" \"Terrestrial planet\" \"Terrestrial planet\" \"Terrestrial planet\" ...\n#>  $ diameter: num  0.382 0.949 1 0.532 11.209 ...\n#>  $ rotation: num  58.64 -243.02 1 1.03 0.41 ...\n#>  $ rings   : logi  FALSE FALSE FALSE FALSE TRUE TRUE ...\n```\n:::\n:::\n\n\nAwesome! Now that you have a clear understanding of the `planets_df` dataset, it's time to see how you can select elements from it. Learn all about in the next exercises!\n\n## Selection of data frame elements\n### Selection of data frame elements 1\n\nSimilar to vectors and matrices, you select elements from a data frame with the help of square brackets `[ ]`. By using a comma, you can indicate what to select from the rows and the columns respectively. For example:\n\n* `my_df[1,2]` selects the value at the first row and second column in `my_df`.\n* `my_df[1:3,2:4]` selects rows 1, 2, 3 and columns 2, 3, 4 in `my_df`.\n\nSometimes you want to select all elements of a row or column. For example, `my_df[1, ]` selects all elements of the first row. Let us now apply this technique on `planets_df`!\n\n**Steps**\n\n1. From `planets_df`, select the diameter of Mercury: this is the value at the first row and the third column. Simply print out the result.\n2. From `planets_df`, select all data on Mars (the fourth row). Simply print out the result.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## The planets_df data frame from the previous exercise is pre-loaded\n\n## Print out diameter of Mercury (row 1, column 3)\nplanets_df[1,3]\n#> [1] 0.382\n\n## Print out data for Mars (entire fourth row)\nplanets_df[4,]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"diameter\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rotation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rings\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Mars\",\"2\":\"Terrestrial planet\",\"3\":\"0.532\",\"4\":\"1.03\",\"5\":\"FALSE\",\"_rn_\":\"4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nGreat! Apart from selecting elements from your data frame by index, you can also use the column names. To learn how, head over to the next exercise.\n\n### Selection of data frame elements 2\n\nInstead of using numerics to select elements of a data frame, you can also use the variable names to select columns of a data frame. \nSuppose you want to select the first three elements of the `type` column. One way to do this is\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplanets_df[1:3,2]\n```\n:::\n\n\nA possible disadvantage of this approach is that you have to know (or look up) the column number of `type`, which gets hard if you have a lot of variables. It is often easier to just make use of the variable name:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplanets_df[1:3,\"type\"]\n```\n:::\n\n\n**Steps**\n\n1. Select and print out the first 5 values in the `\"diameter\"` column of `planets_df`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select first 5 values of diameter column\nplanets_df[1:5, \"diameter\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]  0.382  0.949  1.000  0.532 11.209\n```\n:::\n:::\n\n\n### Only planets with rings 1\n\nYou will often want to select an entire column, namely one specific variable from a data frame. If you want to select all elements of the variable `diameter`, for example, both of these will do the trick:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplanets_df[,3]\nplanets_df[,\"diameter\"]\n```\n:::\n\n\nHowever, there is a short-cut. If your columns have names, you can use the `$` sign:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplanets_df$diameter\n```\n:::\n\n\n**Steps**\n\n1. Use the `$` sign to select the `rings` variable from `planets_df`. Store the vector that results as `rings_vector`.\n2. Print out `rings_vector` to see if you got it right.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select the rings variable from planets_df\nrings_vector <- planets_df$rings\n  \n## Print out rings_vector\nrings_vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n:::\n\n\nGreat! Continue to the next exercise and discover yet another way of subsetting!\n\n### Only planets with rings 2\n\nYou probably remember from high school that some planets in our solar system have rings and others do not. Unfortunately you can not recall their names. Could R help you out?\n\nIf you type `rings_vector` in the console, you get:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> [1] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n```\n:::\n\n\nThis means that the first four observations (or planets) do not have a ring (`FALSE`), but the other four do (`TRUE`). However, you do not get a nice overview of the names of these planets, their diameter, etc. Let's try to use `rings_vector` to select the data for the four planets with rings.\n\n**Steps**\n\n1. The code in the editor selects the `name` column of all planets that have rings. Adapt the code so that instead of only the `name` column, *all* columns for planets that have rings are selected.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Adapt the code to select all columns for planets with rings\nplanets_df[rings_vector,]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"diameter\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rotation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rings\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Jupiter\",\"2\":\"Gas giant\",\"3\":\"11.209\",\"4\":\"0.41\",\"5\":\"TRUE\",\"_rn_\":\"5\"},{\"1\":\"Saturn\",\"2\":\"Gas giant\",\"3\":\"9.449\",\"4\":\"0.43\",\"5\":\"TRUE\",\"_rn_\":\"6\"},{\"1\":\"Uranus\",\"2\":\"Gas giant\",\"3\":\"4.007\",\"4\":\"-0.72\",\"5\":\"TRUE\",\"_rn_\":\"7\"},{\"1\":\"Neptune\",\"2\":\"Gas giant\",\"3\":\"3.883\",\"4\":\"0.67\",\"5\":\"TRUE\",\"_rn_\":\"8\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWonderful! This is a rather tedious solution. The next exercise will teach you how to do it in a more concise way.\n\n### Only planets with rings but shorter\n\nSo what exactly did you learn in the previous exercises? You selected a subset from a data frame (`planets_df`) based on whether or not a certain condition was true (rings or no rings), and you managed to pull out all relevant data. Pretty awesome! By now, NASA is probably already flirting with your CV ;-).\n\nNow, let us move up one level and use the function <a href=\"http://www.rdocumentation.org/packages/base/functions/subset\" target=\"_blank\" rel=\"noopener noreferrer\">`subset()`</a>. You should see the <a href=\"http://www.rdocumentation.org/packages/base/functions/subset\" target=\"_blank\" rel=\"noopener noreferrer\">`subset()`</a> function as a short-cut to do exactly the same as what you did in the previous exercises.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsubset(my_df, subset = some_condition)\n```\n:::\n\n\nThe first argument of <a href=\"http://www.rdocumentation.org/packages/base/functions/subset\" target=\"_blank\" rel=\"noopener noreferrer\">`subset()`</a> specifies the dataset for which you want a subset. By adding the second argument, you give R the necessary information and conditions to select the correct subset.\n\nThe code below will give the exact same result as you got in the previous exercise, but this time, you didn't need the `rings_vector`!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsubset(planets_df, subset = rings)\n```\n:::\n\n\n**Steps**\n\n1. Use `subset()` on `planets_df` to select planets that have a diameter smaller than Earth. Because the `diameter` variable is a relative measure of the planet's diameter w.r.t that of planet Earth, your condition is `diameter < 1`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Select planets with diameter < 1\nsubset(planets_df, subset = diameter <1)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"diameter\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rotation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rings\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Mercury\",\"2\":\"Terrestrial planet\",\"3\":\"0.382\",\"4\":\"58.64\",\"5\":\"FALSE\",\"_rn_\":\"1\"},{\"1\":\"Venus\",\"2\":\"Terrestrial planet\",\"3\":\"0.949\",\"4\":\"-243.02\",\"5\":\"FALSE\",\"_rn_\":\"2\"},{\"1\":\"Mars\",\"2\":\"Terrestrial planet\",\"3\":\"0.532\",\"4\":\"1.03\",\"5\":\"FALSE\",\"_rn_\":\"4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nGreat! Not only is the `subset()` function more concise, it is probably also more understandable for people who read your code. Continue to the next exercise.\n\n## Sorting\n\nMaking and creating rankings is one of mankind's favorite affairs. These rankings can be useful (best universities in the world), entertaining (most influential movie stars) or pointless (best 007 look-a-like).\n\nIn data analysis you can sort your data according to a certain variable in the dataset. In R, this is done with the help of the function <a href=\"http://www.rdocumentation.org/packages/base/functions/order\" target=\"_blank\" rel=\"noopener noreferrer\">`order()`</a>. \n\n<a href=\"http://www.rdocumentation.org/packages/base/functions/order\" target=\"_blank\" rel=\"noopener noreferrer\">`order()`</a> is a function that gives you the ranked position of each element when it is applied on a variable, such as a vector for example:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na <- c(100, 10, 1000)\norder(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] 2 1 3\n```\n:::\n:::\n\n\n10, which is the second element in `a`, is the smallest element, so 2 comes first in the output of `order(a)`. 100, which is the first element in `a` is the second smallest element, so 1 comes second in the output of `order(a)`.\n\nThis means we can use the output of `order(a)` to reshuffle `a`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\na[order(a)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1]   10  100 1000\n```\n:::\n:::\n\n\nGreat! Now let's use the `order()` function to sort your data frame!\n\n### Sorting your data frame\n\nAlright, now that you understand the <a href=\"http://www.rdocumentation.org/packages/base/functions/order\" target=\"_blank\" rel=\"noopener noreferrer\">`order()`</a> function, let us do something useful with it. You would like to rearrange your data frame such that it starts with the smallest planet and ends with the largest one. A sort on the `diameter` column.\n\n**Steps**\n\n1. Call `order()` on `planets_df$diameter` (the `diameter` column of `planets_df`). Store the result as `positions`.\n2. Now reshuffle `planets_df` with the `positions` vector as row indexes inside square brackets. Keep all columns. Simply print out the result.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Use order() to create positions\npositions <- order(planets_df$diameter)\n\n## Use positions to sort planets_df\nplanets_df[positions,]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"diameter\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rotation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rings\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Mercury\",\"2\":\"Terrestrial planet\",\"3\":\"0.382\",\"4\":\"58.64\",\"5\":\"FALSE\",\"_rn_\":\"1\"},{\"1\":\"Mars\",\"2\":\"Terrestrial planet\",\"3\":\"0.532\",\"4\":\"1.03\",\"5\":\"FALSE\",\"_rn_\":\"4\"},{\"1\":\"Venus\",\"2\":\"Terrestrial planet\",\"3\":\"0.949\",\"4\":\"-243.02\",\"5\":\"FALSE\",\"_rn_\":\"2\"},{\"1\":\"Earth\",\"2\":\"Terrestrial planet\",\"3\":\"1.000\",\"4\":\"1.00\",\"5\":\"FALSE\",\"_rn_\":\"3\"},{\"1\":\"Neptune\",\"2\":\"Gas giant\",\"3\":\"3.883\",\"4\":\"0.67\",\"5\":\"TRUE\",\"_rn_\":\"8\"},{\"1\":\"Uranus\",\"2\":\"Gas giant\",\"3\":\"4.007\",\"4\":\"-0.72\",\"5\":\"TRUE\",\"_rn_\":\"7\"},{\"1\":\"Saturn\",\"2\":\"Gas giant\",\"3\":\"9.449\",\"4\":\"0.43\",\"5\":\"TRUE\",\"_rn_\":\"6\"},{\"1\":\"Jupiter\",\"2\":\"Gas giant\",\"3\":\"11.209\",\"4\":\"0.41\",\"5\":\"TRUE\",\"_rn_\":\"5\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nWonderful! This exercise concludes the chapter on data frames. Remember that data frames are extremely important in R, you will need them all the time. Another very often used data structure is the list. This will be the subject of the next chapter!\n\n# Lists\n\nAs opposed to vectors, lists can hold components of different types, just as your to-do lists can contain different categories of tasks. This chapter will teach you how to create, name, and subset these lists.\n\n## Why would you need them?\n### Why would you need them? 1\n\nCongratulations! At this point in the course you are already familiar with:\n\n* **Vectors** (one dimensional array): can hold numeric, character or logical values. The elements in a vector all have the same data type.\n* **Matrices** (two dimensional array): can hold numeric, character or logical values. The elements in a matrix all have the same data type.\n* **Data frames** (two-dimensional objects): can hold numeric, character or logical values. Within a column all elements have the same data type, but different columns can be of different data type.\n\nPretty sweet for an R newbie, right? ;-)\n\n### Why would you need them? 2\n\nA **list** in R is similar to your to-do list at work or school: the different items on that list most likely differ in length, characteristic, and type of activity that has to be done. <br>\nA list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way.\n\nYou could say that a list is some kind super data type: you can store practically any piece of information in it!\n\n## Creating a list\n\nLet us create our first list! To construct a list you use the function <a href=\"http://www.rdocumentation.org/packages/base/functions/list\" target=\"_blank\" rel=\"noopener noreferrer\">`list()`</a>: <br>\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list <- list(comp1, comp2, ...)\n```\n:::\n\n\nThe arguments to the list function are the list components. Remember, these components can be matrices, vectors, other lists, …\n\n**Steps**\n\n1. Construct a list, named `my_list`, that contains the variables `my_vector`, `my_matrix` and `my_df` as list components.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \n\n## Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\n\n## First 10 elements of the built-in data frame mtcars\nmy_df     <- mtcars[1:10,]\n\n## Construct list with these different elements:\nmy_list   <- list(my_vector, my_matrix, my_df) \n```\n:::\n\n\n### Creating a named list 1\n\nWell done, you're on a roll!\n\nJust like on your to-do list, you want to avoid not knowing or remembering what the components of your list stand for. That is why you should give names to them: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list <- list(name1 = your_comp1, \n                name2 = your_comp2)\n```\n:::\n\n\nThis creates a list with components that are named `name1`, `name2`, and so on. If you want to name your lists after you've created them, you can use the `names()` function as you did with vectors. The following commands are fully equivalent to the assignment above:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmy_list <- list(your_comp1, your_comp2)\nnames(my_list) <- c(\"name1\", \"name2\")\n```\n:::\n\n\n**Steps**\n\n1. Change the code of the previous exercise (see editor) by adding names to the components. Use for `my_vector` the name `vec`, for `my_matrix` the name `mat` and for `my_df` the name `df`. \n2. Print out `my_list` so you can inspect the output.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Adapt list() call to give the components names\nmy_list <- list(vec = my_vector, mat = my_matrix, df = my_df)\n\n## Print out my_list\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> $vec\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $mat\n#>      [,1] [,2] [,3]\n#> [1,]    1    4    7\n#> [2,]    2    5    8\n#> [3,]    3    6    9\n#> \n#> $df\n#>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb\n#> Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\n#> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\n#> Datsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\n#> Hornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\n#> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\n#> Valiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\n#> Duster 360        14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\n#> Merc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\n#> Merc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\n#> Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\n```\n:::\n:::\n\n\nGreat! Not only do you know how to construct lists now, you can also name them; a skill that will prove most useful in practice. Continue to the next exercise.\n\n### Creating a named list 2\n\nBeing a huge movie fan (remember your job at LucasFilms), you decide to start storing information on good movies with the help of lists. \n\nStart by creating a list for the movie \"The Shining\". We have already created the variables `mov`, `act` and `rev` in your R workspace. Feel free to check them out in the console.\n\n**Steps**\n\n1. Complete the code in the editor to create `shining_list`; it contains three elements:\n\n    * `moviename`: a character string with the movie title (stored in `mov`)\n    * `actors`: a vector with the main actors' names (stored in `act`)\n    * `reviews`: a data frame that contains some reviews (stored in `rev`)\n\nDo not forget to name the list components accordingly (names are `moviename`, `actors` and `reviews`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## The variables mov, act and rev are available\nmov <- \"The Shining\"\nact <- c(\"Jack Nicholson\",\"Shelley Duvall\",\"Danny Lloyd\",\"Scatman Crothers\",\"Barry Nelson\")\nrev <- data.frame(scores   = c(4.5,4.0,5.0),\n                  sources  = c(\"IMDB1\", \"IMDB2\", \"IMDB3\"),\n                  comments = c(\"Best Horror Film I Have Ever Seen\", \"A truly brilliant and scary film from Stanley Kubrick\", \"A masterpiece of psychological horror\"))\n\n## Finish the code to build shining_list\nshining_list <- list(moviename = mov, actors = act, reviews = rev)\n```\n:::\n\n\nWonderful! You now know how to construct and name lists. As in the previous chapters, let's look at how to select elements for lists. Head over to the next exercise\n\n## Selecting elements from a list\n\nYour list will often be built out of numerous elements and components. Therefore, getting a single element, multiple elements, or a component out of it is not always straightforward. \n\nOne way to select a component is using the numbered position of that component. For example, to \"grab\" the first component of `shining_list` you type\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nshining_list[[1]]\n```\n:::\n\n\nA quick way to check this out is typing it in the console. Important to remember: to select elements from vectors, you use single square brackets: `[ ]`. Don't mix them up!\n\nYou can also refer to the names of the components, with `[[ ]]` or with the `$` sign. Both will select the data frame representing the reviews: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nshining_list[[\"reviews\"]]\nshining_list$reviews\n```\n:::\n\n\nBesides selecting components, you often need to select specific elements out of these components. For example, with `shining_list[[2]][1]` you select from the second component, `actors` (`shining_list[[2]]`), the first element (`[1]`). When you type this in the console, you will see the answer is Jack Nicholson.\n\n**Steps**\n\n1. Select from `shining_list` the vector representing the actors. Simply print out this vector.\n2. Select from `shining_list` the second element in the vector representing the actors. Do a printout like before.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Print out the vector representing the actors\nshining_list$actors\n#> [1] \"Jack Nicholson\"   \"Shelley Duvall\"   \"Danny Lloyd\"      \"Scatman Crothers\"\n#> [5] \"Barry Nelson\"\n\n## Print the second element of the vector representing the actors\nshining_list[[2]][2]\n#> [1] \"Shelley Duvall\"\n```\n:::\n\n\n## Example Case\n### Creating a new list for another movie\n\nYou found reviews of another, more recent, Jack Nicholson movie: The Departed!\n\n| Scores|Comments               |\n|------:|:----------------------|\n|    4.6|I would watch it again |\n|    5.0|Amazing!               |\n|    4.8|I liked it             |\n|    5.0|One of the best movies |\n|    4.2|Fascinating plot       |\n\nIt would be useful to collect together all the pieces of information about the movie, like the title, actors, and reviews into a single variable. Since these pieces of data are different shapes, it is natural to combine them in a list variable.\n\n`movie_title`, containing the title of the movie, and `movie_actors`, containing the names of some of the actors in the movie, are available in your workspace.\n\n**Steps**\n\n1. Create two vectors, called `scores` and `comments`, that contain the information from the reviews shown in the table.\n2. Find the average of the `scores` vector and save it as `avg_review`. \n3. Combine the `scores` and `comments` vectors into a data frame called `reviews_df`. \n4. Create a list, called `departed_list`, that contains the `movie_title`, `movie_actors`, reviews data frame as `reviews_df`, and the average review score as `avg_review`, and print it out.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n## Use the table from the exercise to define the comments and scores vectors\nscores       <- c(4.6, 5, 4.8, 5, 4.2)\ncomments     <- c(\"I would watch it again\", \"Amazing!\", \"I liked it\", \"One of the best movies\", \"Fascinating plot\")\nmovie_title  <- \"The Departed\"\nmovie_actors <- c(\"Leonardo DiCaprio\", \"Matt Damon\", \"Jack Nicholson\", \"Mark Wahlberg\", \"Vera Farmiga\", \"Martin Sheen\")\n\n## Save the average of the scores vector as avg_review  \navg_review <- mean(scores)\n\n## Combine scores and comments into the reviews_df data frame\nreviews_df <- data.frame(scores, comments)\n\n## Create and print out a list, called departed_list\ndeparted_list <- list(movie_title, movie_actors, reviews_df, avg_review)\ndeparted_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [[1]]\n#> [1] \"The Departed\"\n#> \n#> [[2]]\n#> [1] \"Leonardo DiCaprio\" \"Matt Damon\"        \"Jack Nicholson\"   \n#> [4] \"Mark Wahlberg\"     \"Vera Farmiga\"      \"Martin Sheen\"     \n#> \n#> [[3]]\n#>   scores               comments\n#> 1    4.6 I would watch it again\n#> 2    5.0               Amazing!\n#> 3    4.8             I liked it\n#> 4    5.0 One of the best movies\n#> 5    4.2       Fascinating plot\n#> \n#> [[4]]\n#> [1] 4.72\n```\n:::\n:::\n\n\nGood work! You successfully created another list of movie information, and combined different components into a single list. Congratulations on finishing the course!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}