{
  "hash": "70a32386163501a4598e8314423fbf13",
  "result": {
    "markdown": "---\ntitle: \"Introduction to SQL\"\nauthor: \"Joschka Schwarz\"\ntoc-depth: 2\nexecute: \n  eval: true\n  echo: true\n---\n\n\n\n\n**Short Description**\n\nLearn the basics of syntax in SQL, how to extract and wrangle data, and use querying tables in relational databases like MySQL, SQL Server, and PostgreSQL.\n\n**Long Description**\n\nThe role of a data scientist is to turn raw data into actionable insights. Much of the world's raw data—from electronic medical records to customer transaction histories—lives in organized collections of tables called relational databases. To be an effective data scientist, you must know how to wrangle and extract data from these databases using a language called SQL . This course teaches syntax in SQL shared by many types of databases, such as PostgreSQL, MySQL, SQL Server, and Oracle. This course teaches you everything you need to know to begin working with databases today!\n\n# 1. Selecting columns\n\nThis chapter provides a brief introduction to working with relational databases. You'll learn about their structure, how to talk about them using database lingo, and how to begin an analysis using simple SQL commands to select and summarize columns from database tables.\n\n## Welcome to the course!\n\nTheory. Coming soon ...\n\n\n**1. Welcome to the course!**\n\nHi, and welcome to Introduction to SQL for Data Science!Most of the world's data live in databases, so learning how to access and unlock insights from these data is an essential skill for every data scientist. SQL, or ess-que-el, is the native language for interacting with databases and is designed for exactly this purpose.This course will give you a basic introduction to SQL. We hope you enjoy it.\n\n**2. Let's practice!**\n\nNow let's get started!\n\n## Onboarding | Tables\n\nThe DataCamp interface for SQL courses contains a few unique features you should be aware of.\n\nFor this course, you'll be using a database containing information on almost 5000 films. To the right, underneath the editor, you can see the data in this database by clicking through the tabs.\n\nFrom looking at the tabs, who is the first person listed in the `people` table?\n\n> *Question*\n> ---\n> ???<br>\n> <br>\n> ⬜ Kanye West<br>\n> ⬜ Biggie Smalls<br>\n> ✅ 50 Cent<br>\n> ⬜ Jay Z<br>\n\nThat's correct! Head over to the next exercise to see how we can answer a similar question with code!\n\n## Onboarding | Query Result\n\nNotice the **query result** tab in the bottom right corner of your screen. This is where the results of your SQL queries will be displayed.\n\nRun this query in the editor and check out the resulting table in the query result tab!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name FROM people;\n```\n:::\n\n\nWho is the second person listed in the query result?\n\n> *Question*\n> ---\n> ???<br>\n> <br>\n> ⬜ Kanye West<br>\n> ✅ A. Michael Baldwin<br>\n> ⬜ 50 Cent<br>\n> ⬜ Jay Z<br>\n\n## Onboarding | Errors\n\nIf you submit the code to the right, you'll see that you get two types of errors.\n\n*SQL* errors are shown below the editor. These are errors returned by the *SQL* engine. You should see:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nsyntax error at or near \"'I <3 SQL'\" LINE 2: 'I <3 SQL' ^\n```\n:::\n\n\n*DataCamp* errors are shown in the **Instructions** box. These will let you know in plain English where you went wrong in your code! You should see:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nYou need to add SELECT at the start of line 2!\n```\n:::\n\n\n**Steps**\n\n1. Submit the code to the right, check out the errors, then fix them!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Try running me!\nSELECT 'I <3 SQL'\nAS result;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|result   |\n|:--------|\n|I <3 SQL |\n\n</div>\n:::\n\n\nExcellent error editing! You can feel safe experimenting with code in the editor &ndash; you'll always get feedback if something goes wrong.\n\n## Onboarding | Multi-step Exercises\n\nThe following multi-step exercise allows you to practice a new concept through repetition. Check it out!\n\n**Steps**\n\n1. Submit the query in the editor! Don't worry, you'll learn how it works soon.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT 'SQL'\nAS result;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|result |\n|:------|\n|SQL    |\n\n</div>\n:::\n\n\n2. Now change `'SQL'` to `'SQL is'` and click Submit!\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT 'SQL is'\nAS result;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|result |\n|:------|\n|SQL is |\n\n</div>\n:::\n\n\n3. Finally, change `'SQL is'` to `'SQL is cool'` and click Submit!\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT 'SQL is cool'\nAS result;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|result      |\n|:-----------|\n|SQL is cool |\n\n</div>\n:::\n\n\nWell done! The time has come to actually fetch information from tables now!\n\n## Beginning your SQL journey\n\nNow that you're familiar with the interface, let's get straight into it.\n\nSQL, which stands for *Structured Query Language*, is a language for interacting with data stored in something called a *relational database*.\n\nYou can think of a relational database as a collection of tables. A table is just a set of rows and columns, like a spreadsheet, which represents exactly one type of entity. For example, a table might represent employees in a company or purchases made, but not both.\n\nEach row, or *record*, of a table contains information about a single entity. For example, in a table representing employees, each row represents a single person. Each column, or *field*, of a table contains a single attribute for all rows in the table. For example, in a table representing employees, we might have a column containing first and last names for all employees.\n\nThe table of employees might look something like this:\n\n| id|name    | age|nationality |\n|--:|:-------|---:|:-----------|\n|  1|Jessica |  22|Ireland     |\n|  2|Gabriel |  48|France      |\n|  3|Laura   |  36|USA         |\n\n> *Question*\n> ---\n> How many fields does the employees table above contain?<br>\n> <br>\n> ⬜ 1<br>\n> ⬜ 2<br>\n> ⬜ 3<br>\n> ✅ 4<br>\n\nCorrect! The table contains four columns, or fields.\n\n## SELECTing single columns\n\nWhile SQL can be used to create and modify databases, the focus of this course will be *querying* databases. A *query* is a request for data from a database table (or combination of tables). Querying is an essential skill for a data scientist, since the data you need for your analyses will often live in databases.\n\nIn SQL, you can select data from a table using a `SELECT` statement. For example, the following query selects the `name` column from the `people` table:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people;\n```\n:::\n\n\nIn this query, `SELECT` and `FROM` are called keywords. In SQL, keywords are not case-sensitive, which means you can write the same query as:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nselect name\nfrom people;\n```\n:::\n\n\nThat said, it's good practice to make SQL keywords uppercase to distinguish them from other parts of your query, like column and table names.\n\nIt's also good practice (but not necessary for the exercises in this course) to include a semicolon at the end of your query. This tells SQL where the end of your query is!\n\nRemember, you can see the results of executing your query in the **query** tab!\n\n**Steps**\n\n1. Select the `title` column from the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                            |\n|:------------------------------------------------|\n|Intolerance: Love's Struggle Throughout the Ages |\n|Over the Hill to the Poorhouse                   |\n|The Big Parade                                   |\n|Metropolis                                       |\n|Pandora's Box                                    |\n|The Broadway Melody                              |\n|Hell's Angels                                    |\n|A Farewell to Arms                               |\n|42nd Street                                      |\n|She Done Him Wrong                               |\n\n</div>\n:::\n\n\n2. Select the `release_year` column from the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|\n|------------:|\n|         1916|\n|         1920|\n|         1925|\n|         1927|\n|         1929|\n|         1929|\n|         1930|\n|         1932|\n|         1933|\n|         1933|\n\n</div>\n:::\n\n\n3. Select the `name` of each person in the `people` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name               |\n|:------------------|\n|50 Cent            |\n|A. Michael Baldwin |\n|A. Raven Cruz      |\n|A.J. Buckley       |\n|A.J. DeLucia       |\n|A.J. Langer        |\n|Aaliyah            |\n|Aaron Ashmore      |\n|Aaron Hann         |\n|Aaron Hill         |\n\n</div>\n:::\n\n\n## SELECTing multiple columns\n\nWell done! Now you know how to select single columns.\n\nIn the real world, you will often want to select multiple columns. Luckily, SQL makes this really easy. To select multiple columns from a table, simply separate the column names with commas!\n\nFor example, this query selects two columns, `name` and `birthdate`, from the `people` table:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name, birthdate\nFROM people;\n```\n:::\n\n\nSometimes, you may want to select all columns from a table. Typing out every column name would be a pain, so there's a handy shortcut:\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM people;\n```\n:::\n\n\nIf you only want to return a certain number of results, you can use the `LIMIT` keyword to limit the number of rows returned:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM people\nLIMIT 10;\n```\n:::\n\n\nBefore getting started with the instructions below, check out the column names in the `films` table!\n\n**Steps**\n\n1. Get the title of every film from the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                            |\n|:------------------------------------------------|\n|Intolerance: Love's Struggle Throughout the Ages |\n|Over the Hill to the Poorhouse                   |\n|The Big Parade                                   |\n|Metropolis                                       |\n|Pandora's Box                                    |\n|The Broadway Melody                              |\n|Hell's Angels                                    |\n|A Farewell to Arms                               |\n|42nd Street                                      |\n|She Done Him Wrong                               |\n\n</div>\n:::\n\n\n2. Get the title and release year for every film.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                            | release_year|\n|:------------------------------------------------|------------:|\n|Intolerance: Love's Struggle Throughout the Ages |         1916|\n|Over the Hill to the Poorhouse                   |         1920|\n|The Big Parade                                   |         1925|\n|Metropolis                                       |         1927|\n|Pandora's Box                                    |         1929|\n|The Broadway Melody                              |         1929|\n|Hell's Angels                                    |         1930|\n|A Farewell to Arms                               |         1932|\n|42nd Street                                      |         1933|\n|She Done Him Wrong                               |         1933|\n\n</div>\n:::\n\n\n3. Get the title, release year and country for every film.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year, country\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                            | release_year|country |\n|:------------------------------------------------|------------:|:-------|\n|Intolerance: Love's Struggle Throughout the Ages |         1916|USA     |\n|Over the Hill to the Poorhouse                   |         1920|USA     |\n|The Big Parade                                   |         1925|USA     |\n|Metropolis                                       |         1927|Germany |\n|Pandora's Box                                    |         1929|Germany |\n|The Broadway Melody                              |         1929|USA     |\n|Hell's Angels                                    |         1930|USA     |\n|A Farewell to Arms                               |         1932|USA     |\n|42nd Street                                      |         1933|USA     |\n|She Done Him Wrong                               |         1933|USA     |\n\n</div>\n:::\n\n\n4. Get all columns from the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|id |title                                            | release_year|country | duration|language |certification |   gross|  budget|\n|:--|:------------------------------------------------|------------:|:-------|--------:|:--------|:-------------|-------:|-------:|\n|1  |Intolerance: Love's Struggle Throughout the Ages |         1916|USA     |      123|NA       |Not Rated     |      NA|  385907|\n|2  |Over the Hill to the Poorhouse                   |         1920|USA     |      110|NA       |NA            | 3000000|  100000|\n|3  |The Big Parade                                   |         1925|USA     |      151|NA       |Not Rated     |      NA|  245000|\n|4  |Metropolis                                       |         1927|Germany |      145|German   |Not Rated     |   26435| 6000000|\n|5  |Pandora's Box                                    |         1929|Germany |      110|German   |Not Rated     |    9950|      NA|\n|6  |The Broadway Melody                              |         1929|USA     |      100|English  |Passed        | 2808000|  379000|\n|7  |Hell's Angels                                    |         1930|USA     |       96|English  |Passed        |      NA| 3950000|\n|8  |A Farewell to Arms                               |         1932|USA     |       79|English  |Unrated       |      NA|  800000|\n|9  |42nd Street                                      |         1933|USA     |       89|English  |Unrated       | 2300000|  439000|\n|10 |She Done Him Wrong                               |         1933|USA     |       66|English  |Approved      |      NA|  200000|\n\n</div>\n:::\n\n\n## SELECT DISTINCT\n\nOften your results will include many duplicate values. If you want to select all the unique values from a column, you can use the `DISTINCT` keyword.\n\nThis might be useful if, for example, you're interested in knowing which languages are represented in the `films` table:\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT DISTINCT language\nFROM films;\n```\n:::\n\n\nRemember, you can check out the data in the tables by clicking on the table name!\n\n**Steps**\n\n1. Get all the unique countries represented in the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT DISTINCT country\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country            |\n|:------------------|\n|NA                 |\n|Soviet Union       |\n|Indonesia          |\n|Italy              |\n|Cameroon           |\n|Czech Republic     |\n|Sweden             |\n|USA                |\n|Dominican Republic |\n|Cambodia           |\n\n</div>\n:::\n\n\n2. Get all the different film certifications from the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT DISTINCT certification\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|certification |\n|:-------------|\n|Unrated       |\n|M             |\n|G             |\n|NC-17         |\n|GP            |\n|PG            |\n|Approved      |\n|NA            |\n|X             |\n|PG-13         |\n\n</div>\n:::\n\n\n3. Get the different types of film roles from the `roles` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT DISTINCT role\nFROM roles;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|role     |\n|:--------|\n|director |\n|actor    |\n\n</div>\n:::\n\n\n## Learning to COUNT\n\nWhat if you want to count the number of employees in your employees table? The `COUNT()` function lets you do this by returning the number of rows in one or more columns.\n\nFor example, this code gives the number of rows in the `people` table:\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*)\nFROM people;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|  8397|\n\n</div>\n:::\n\n\n> *Question*\n> ---\n> How many records are contained in the `reviews` table?<br>\n> <br>\n> ⬜ 9,468<br>\n> ⬜ 8,397<br>\n> ✅ 4,968<br>\n> ⬜ 9,837<br>\n> ⬜ 9,864<br>\n\n## Practice with COUNT\n\nAs you've seen, `COUNT(*)` tells you how many rows are in a table. However, if you want to count the number of *non-missing* values in a particular column, you can call `COUNT()` on just that column.\n\nFor example, to count the number of birth dates present in the `people` table:\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(birthdate)\nFROM people;\n```\n:::\n\n\nIt's also common to combine `COUNT()` with `DISTINCT` to count the number of *distinct* values in a column.\n\nFor example, this query counts the number of distinct birth dates contained in the `people` table:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(DISTINCT birthdate)\nFROM people;\n```\n:::\n\n\nLet's get some practice with `COUNT()`!\n\n**Steps**\n\n1. Count the number of rows in the `people` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*)\nFROM people;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|  8397|\n\n</div>\n:::\n\n\n2. Count the number of (non-missing) birth dates in the `people` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(birthdate)\nFROM people;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|  6152|\n\n</div>\n:::\n\n\n3. Count the number of unique birth dates in the `people` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(DISTINCT birthdate)\nFROM people;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|  5398|\n\n</div>\n:::\n\n\n4. Count the number of unique languages in the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(DISTINCT language)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    47|\n\n</div>\n:::\n\n\n5. Count the number of unique countries in the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(DISTINCT country)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    64|\n\n</div>\n:::\n\n\n# 2. Filtering rows\n\nThis chapter builds on the first by teaching you how to filter tables for rows satisfying some criteria of interest. You'll learn how to use basic comparison operators, combine multiple criteria, match patterns in text, and much more.\n\n## Filtering results\n\nCongrats on finishing the first chapter! You now know how to select columns and perform basic counts. This chapter will focus on filtering your results.\n\nIn SQL, the `WHERE` keyword allows you to filter based on both text and numeric values in a table. There are a few different comparison operators you can use:\n\n* `=` equal\n* `<>` not equal\n* `<` less than\n* `>` greater than\n* `<=` less than or equal to\n* `>=` greater than or equal to\n\nFor example, you can filter text records such as `title`. The following code returns all films with the title `'Metropolis'`:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE title = 'Metropolis';\n```\n:::\n\n\nNotice that the `WHERE` clause always comes after the `FROM` statement!\n\n**Note that in this course we will use `<>` and not `!=` for the not equal operator, as per the SQL standard.**\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year > 2000;\n```\n:::\n\n\n> *Question*\n> ---\n> What does the following query return?<br>\n> <br>\n> ⬜ Films released before the year 2000<br>\n> ✅ Films released after the year 2000<br>\n> ⬜ Films released after the year 2001<br>\n> ⬜ Films released in 2000<br>\n\n## Simple filtering of numeric values\n\nAs you learned in the previous exercise, the `WHERE` clause can also be used to filter numeric records, such as years or ages.\n\nFor example, the following query selects all details for films with a budget over ten thousand dollars:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE budget > 10000;\n```\n:::\n\n\nNow it's your turn to use the `WHERE` clause to filter numeric values!\n\n**Steps**\n\n1. Get all details for all films released in 2016.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE release_year = 2016;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|id   |title                           | release_year|country | duration|language |certification |    gross|    budget|\n|:----|:-------------------------------|------------:|:-------|--------:|:--------|:-------------|--------:|---------:|\n|4821 |10 Cloverfield Lane             |         2016|USA     |      104|English  |PG-13         | 71897215|  15000000|\n|4822 |13 Hours                        |         2016|USA     |      144|English  |R             | 52822418|  50000000|\n|4823 |A Beginner's Guide to Snuff     |         2016|USA     |       87|English  |NA            |       NA|        NA|\n|4824 |Airlift                         |         2016|India   |      130|Hindi    |NA            |       NA|   4400000|\n|4825 |Alice Through the Looking Glass |         2016|USA     |      113|English  |PG            | 76846624| 170000000|\n|4826 |Allegiant                       |         2016|USA     |      120|English  |PG-13         | 66002193| 110000000|\n|4827 |Alleluia! The Devil's Carnival  |         2016|USA     |       97|English  |NA            |       NA|    500000|\n|4828 |Antibirth                       |         2016|USA     |       94|English  |NA            |       NA|   3500000|\n|4829 |Bad Moms                        |         2016|USA     |      100|English  |R             | 55461307|  20000000|\n|4830 |Bad Moms                        |         2016|USA     |      100|English  |R             | 55461307|  20000000|\n\n</div>\n:::\n\n\n2. Get the number of films released before 2000.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*)\nFROM films\nWHERE release_year < 2000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|  1337|\n\n</div>\n:::\n\n\n3. Get the title and release year of films released after 2000.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year > 2000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                        | release_year|\n|:----------------------------|------------:|\n|15 Minutes                   |         2001|\n|3000 Miles to Graceland      |         2001|\n|A Beautiful Mind             |         2001|\n|A Knight's Tale              |         2001|\n|A.I. Artificial Intelligence |         2001|\n|Ali                          |         2001|\n|Alias Betty                  |         2001|\n|All the Queen's Men          |         2001|\n|Along Came a Spider          |         2001|\n|Amélie                       |         2001|\n\n</div>\n:::\n\n\nGreat job! After filtering of numeric values, it's time to explore filtering of text!\n\n## Simple filtering of text\n\nRemember, the `WHERE` clause can also be used to filter text results, such as names or countries.\n\nFor example, this query gets the titles of all films which were filmed in China:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE country = 'China';\n```\n:::\n\n\nNow it's your turn to practice using `WHERE` with text values!\n\n**Important: in PostgreSQL (the version of SQL we're using), you must use single quotes with `WHERE`.**\n\n**Steps**\n\n1. Get all details for all French language films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE language = 'French';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|   id|title                                   | release_year|country | duration|language |certification |   gross|    budget|\n|----:|:---------------------------------------|------------:|:-------|--------:|:--------|:-------------|-------:|---------:|\n|  108|Une Femme Mariée                        |         1964|France  |       94|French   |NA            |      NA|    120000|\n|  111|Pierrot le Fou                          |         1965|France  |      110|French   |Not Rated     |      NA|    300000|\n|  140|Mississippi Mermaid                     |         1969|France  |      123|French   |R             |   26893|   1600000|\n|  423|Subway                                  |         1985|France  |       98|French   |R             |      NA|  17000000|\n|  662|Les visiteurs                           |         1993|France  |      107|French   |R             |  700000|  50000000|\n|  801|The Horseman on the Roof                |         1995|France  |      135|French   |R             | 1877179|        NA|\n|  916|When the Cat's Away                     |         1996|France  |       91|French   |R             | 1652472|    300000|\n| 1004|The Chambermaid on the Titanic          |         1997|France  |      101|French   |NA            |  244465|        NA|\n| 1026|The Swindle                             |         1997|France  |      101|French   |NA            |  231417|  60000000|\n| 1088|Les couloirs du temps: Les visiteurs II |         1998|France  |      118|French   |NA            |  146072| 140000000|\n\n</div>\n:::\n\n\n2. Get the name and birth date of the person born on November 11th, 1974. Remember to use ISO date format (`'1974-11-11'`)!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name, birthdate\nFROM people\nWHERE birthdate = '1974-11-11';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|name              |birthdate  |\n|:-----------------|:----------|\n|Leonardo DiCaprio |1974-11-11 |\n\n</div>\n:::\n\n\n3. Get the number of Hindi language films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*)\nFROM films\nWHERE language = 'Hindi';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    28|\n\n</div>\n:::\n\n\n4. Get all details for all films with an R certification.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE certification = 'R';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|  id|title                     | release_year|country | duration|language |certification |    gross|   budget|\n|---:|:-------------------------|------------:|:-------|--------:|:--------|:-------------|--------:|--------:|\n|  76|Psycho                    |         1960|USA     |      108|English  |R             | 32000000|   806947|\n|  99|A Fistful of Dollars      |         1964|Italy   |       99|Italian  |R             |  3500000|   200000|\n| 134|Rosemary's Baby           |         1968|USA     |      136|English  |R             |       NA|  2300000|\n| 140|Mississippi Mermaid       |         1969|France  |      123|French   |R             |    26893|  1600000|\n| 145|The Wild Bunch            |         1969|USA     |      144|English  |R             |       NA|  6244087|\n| 149|Catch-22                  |         1970|USA     |      122|English  |R             |       NA| 18000000|\n| 150|Cotton Comes to Harlem    |         1970|USA     |       97|English  |R             |       NA|  1200000|\n| 153|The Ballad of Cable Hogue |         1970|USA     |      121|English  |R             |       NA|  3716946|\n| 154|The Conformist            |         1970|Italy   |      106|Italian  |R             |       NA|   750000|\n| 158|Woodstock                 |         1970|USA     |      215|English  |R             | 13300000|   600000|\n\n</div>\n:::\n\n\nWonderful! Let's look at combining different conditions now!\n\n## WHERE AND\n\nOften, you'll want to select data based on multiple conditions. You can build up your `WHERE` queries by combining multiple conditions with the `AND` keyword.\n\nFor example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year > 1994\nAND release_year < 2000;\n```\n:::\n\n\ngives you the titles of films released between 1994 and 2000.\n\nNote that you need to specify the column name separately for every `AND` condition, so the following would be invalid:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year > 1994 AND < 2000;\n```\n:::\n\n\nYou can add as many `AND` conditions as you need!\n\n**Steps**\n\n1. Get the title and release year for all Spanish language films released before 2000.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year < 2000\nAND language = 'Spanish';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|title             | release_year|\n|:-----------------|------------:|\n|El Mariachi       |         1992|\n|La otra conquista |         1998|\n|Tango             |         1998|\n\n</div>\n:::\n\n\n2. Get all details for Spanish language films released after 2000.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE release_year > 2000\nAND language = 'Spanish';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|   id|title                                    | release_year|country   | duration|language |certification |    gross|   budget|\n|----:|:----------------------------------------|------------:|:---------|--------:|:--------|:-------------|--------:|--------:|\n| 1695|Y Tu Mamá También                        |         2001|Mexico    |      106|Spanish  |R             | 13622333|  2000000|\n| 1757|El crimen del padre Amaro                |         2002|Mexico    |      118|Spanish  |R             |  5709616|  1800000|\n| 1807|Mondays in the Sun                       |         2002|Spain     |      113|Spanish  |R             |   146402|  4000000|\n| 2173|Live-In Maid                             |         2004|Argentina |       83|Spanish  |Unrated       |       NA|   800000|\n| 2175|Maria Full of Grace                      |         2004|Colombia  |      101|Spanish  |R             |  6517198|  3000000|\n| 2246|The Holy Girl                            |         2004|Argentina |      106|Spanish  |R             |   304124|  1400000|\n| 2263|The Sea Inside                           |         2004|Spain     |      125|Spanish  |PG-13         |  2086345| 10000000|\n| 2458|The Legend of Zorro                      |         2005|USA       |      129|Spanish  |PG            | 45356386| 75000000|\n| 2542|Captain Alatriste: The Spanish Musketeer |         2006|Spain     |      145|Spanish  |NA            |       NA| 24000000|\n| 2646|Pan's Labyrinth                          |         2006|Spain     |      112|Spanish  |R             | 37623143| 13500000|\n\n</div>\n:::\n\n\n3. Get all details for Spanish language films released after 2000, but before 2010.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE release_year > 2000\nAND release_year < 2010\nAND language = 'Spanish';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|   id|title                                    | release_year|country   | duration|language |certification |    gross|   budget|\n|----:|:----------------------------------------|------------:|:---------|--------:|:--------|:-------------|--------:|--------:|\n| 1695|Y Tu Mamá También                        |         2001|Mexico    |      106|Spanish  |R             | 13622333|  2000000|\n| 1757|El crimen del padre Amaro                |         2002|Mexico    |      118|Spanish  |R             |  5709616|  1800000|\n| 1807|Mondays in the Sun                       |         2002|Spain     |      113|Spanish  |R             |   146402|  4000000|\n| 2173|Live-In Maid                             |         2004|Argentina |       83|Spanish  |Unrated       |       NA|   800000|\n| 2175|Maria Full of Grace                      |         2004|Colombia  |      101|Spanish  |R             |  6517198|  3000000|\n| 2246|The Holy Girl                            |         2004|Argentina |      106|Spanish  |R             |   304124|  1400000|\n| 2263|The Sea Inside                           |         2004|Spain     |      125|Spanish  |PG-13         |  2086345| 10000000|\n| 2458|The Legend of Zorro                      |         2005|USA       |      129|Spanish  |PG            | 45356386| 75000000|\n| 2542|Captain Alatriste: The Spanish Musketeer |         2006|Spain     |      145|Spanish  |NA            |       NA| 24000000|\n| 2646|Pan's Labyrinth                          |         2006|Spain     |      112|Spanish  |R             | 37623143| 13500000|\n\n</div>\n:::\n\n\nGreat work! Being able to combine conditions with `AND` will prove to be very useful if you only want your query to return a specific subset of records!\n\n## WHERE AND OR\n\nWhat if you want to select rows based on multiple conditions where some but not *all* of the conditions need to be met? For this, SQL has the `OR` operator.\n\nFor example, the following returns all films released in *either* 1994 or 2000:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year = 1994\nOR release_year = 2000;\n```\n:::\n\n\nNote that you need to specify the column for every `OR` condition, so the following is invalid:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year = 1994 OR 2000;\n```\n:::\n\n\nWhen combining `AND` and `OR`, be sure to enclose the individual clauses in parentheses, like so:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE (release_year = 1994 OR release_year = 1995)\nAND (certification = 'PG' OR certification = 'R');\n```\n:::\n\n\nOtherwise, due to SQL's precedence rules, you may not get the results you're expecting!\n\n> *Question*\n> ---\n> What does the `OR` operator do?<br>\n> <br>\n> ✅ Display only rows that meet at least **one** of the specified conditions.<br>\n> ⬜ Display only rows that meet **all** of the specified conditions.<br>\n> ⬜ Display only rows that meet **none** of the specified conditions.<br>\n\n\n## WHERE AND OR (2)\n\nYou now know how to select rows that meet **some** but not **all** conditions by combining `AND` and `OR`.\n\nFor example, the following query selects all films that were released in 1994 or 1995 which had a rating of PG or R.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE (release_year = 1994 OR release_year = 1995)\nAND (certification = 'PG' OR certification = 'R');\n```\n:::\n\n\nNow you'll write a query to get the title and release year of films released in the 90s which were in French or Spanish and which took in more than $2M gross.\n\nIt looks like a lot, but you can build the query up one step at a time to get comfortable with the underlying concept in each step. Let's go!\n\n**Steps**\n\n1. Get the title and release year for films released in the 90s.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year >= 1990 AND release_year < 2000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                       | release_year|\n|:---------------------------|------------:|\n|Arachnophobia               |         1990|\n|Back to the Future Part III |         1990|\n|Child's Play 2              |         1990|\n|Dances with Wolves          |         1990|\n|Days of Thunder             |         1990|\n|Dick Tracy                  |         1990|\n|Die Hard 2                  |         1990|\n|Edward Scissorhands         |         1990|\n|Flatliners                  |         1990|\n|Ghost                       |         1990|\n\n</div>\n:::\n\n\n2. Now, build on your query to filter the records to only include French or Spanish language films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE (release_year >= 1990 AND release_year < 2000)\nAND (language = 'French' OR language = 'Spanish');\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                   | release_year|\n|:---------------------------------------|------------:|\n|El Mariachi                             |         1992|\n|Les visiteurs                           |         1993|\n|The Horseman on the Roof                |         1995|\n|When the Cat's Away                     |         1996|\n|The Chambermaid on the Titanic          |         1997|\n|The Swindle                             |         1997|\n|La otra conquista                       |         1998|\n|Les couloirs du temps: Les visiteurs II |         1998|\n|Tango                                   |         1998|\n|The Red Violin                          |         1998|\n\n</div>\n:::\n\n\n3. Finally, restrict the query to only return films that took in more than $2M gross.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE (release_year >= 1990 AND release_year < 2000)\nAND (language = 'French' OR language = 'Spanish')\nAND gross > 2000000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|title          | release_year|\n|:--------------|------------:|\n|El Mariachi    |         1992|\n|The Red Violin |         1998|\n\n</div>\n:::\n\n\nThat was pretty involved!\n\n## BETWEEN\n\nAs you've learned, you can use the following query to get titles of all films released in and between 1994 and 2000:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year >= 1994\nAND release_year <= 2000;\n```\n:::\n\n\nChecking for ranges like this is very common, so in SQL the `BETWEEN` keyword provides a useful shorthand for filtering values within a specified range. This query is equivalent to the one above:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year\nBETWEEN 1994 AND 2000;\n```\n:::\n\n\nIt's important to remember that `BETWEEN` is *inclusive*, meaning the beginning and end values are included in the results!\n\n> *Question*\n> ---\n> What does the `BETWEEN` keyword do?<br>\n> <br>\n> ⬜ Filter numeric values<br>\n> ⬜ Filter text values<br>\n> ⬜ Filter values in a specified list<br>\n> ✅ Filter values in a specified range<br>\n\n## BETWEEN (2)\n\nSimilar to the `WHERE` clause, the `BETWEEN` clause can be used with multiple `AND` and `OR` operators, so you can build up your queries and make them even more powerful!\n\nFor example, suppose we have a table called `kids`. We can get the names of all kids between the ages of 2 and 12 from the United States:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM kids\nWHERE age BETWEEN 2 AND 12\nAND nationality = 'USA';\n```\n:::\n\n\nTake a go at using `BETWEEN` with `AND` on the films data to get the title and release year of all Spanish language films released between 1990 and 2000 (inclusive) with budgets over $100 million. We have broken the problem into smaller steps so that you can build the query as you go along!\n\n**Steps**\n\n1. Get the title and release year of all films released between 1990 and 2000 (inclusive).\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year BETWEEN 1990 AND 2000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                       | release_year|\n|:---------------------------|------------:|\n|Arachnophobia               |         1990|\n|Back to the Future Part III |         1990|\n|Child's Play 2              |         1990|\n|Dances with Wolves          |         1990|\n|Days of Thunder             |         1990|\n|Dick Tracy                  |         1990|\n|Die Hard 2                  |         1990|\n|Edward Scissorhands         |         1990|\n|Flatliners                  |         1990|\n|Ghost                       |         1990|\n\n</div>\n:::\n\n\n2. Now, build on your previous query to select only films that have budgets over $100 million.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year BETWEEN 1990 AND 2000\nAND budget > 100000000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                      | release_year|\n|:--------------------------|------------:|\n|Terminator 2: Judgment Day |         1991|\n|True Lies                  |         1994|\n|Waterworld                 |         1995|\n|Batman & Robin             |         1997|\n|Dante's Peak               |         1997|\n|Princess Mononoke          |         1997|\n|Speed 2: Cruise Control    |         1997|\n|Starship Troopers          |         1997|\n|Titanic                    |         1997|\n|Tomorrow Never Dies        |         1997|\n\n</div>\n:::\n\n\n3. Now restrict the query to only return Spanish language films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year BETWEEN 1990 AND 2000\nAND budget > 100000000\nAND language = 'Spanish';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|title | release_year|\n|:-----|------------:|\n|Tango |         1998|\n\n</div>\n:::\n\n\n4. Finally, modify to your previous query to include all Spanish language *or* French language films with the same criteria as before. Don't forget your parentheses!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year BETWEEN 1990 AND 2000\nAND budget > 100000000\nAND (language = 'Spanish' OR language = 'French');\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|title                                   | release_year|\n|:---------------------------------------|------------:|\n|Les couloirs du temps: Les visiteurs II |         1998|\n|Tango                                   |         1998|\n\n</div>\n:::\n\n\nWell done! Off to the next filtering operator!\n\n## WHERE IN\n\nAs you've seen, `WHERE` is very useful for filtering results. However, if you want to filter based on many conditions, `WHERE` can get unwieldy. For example:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM kids\nWHERE age = 2\nOR age = 4\nOR age = 6\nOR age = 8\nOR age = 10;\n```\n:::\n\n\nEnter the `IN` operator! The `IN` operator allows you to specify multiple values in a `WHERE` clause, making it easier and quicker to specify multiple `OR` conditions! Neat, right?\n\nSo, the above example would become simply:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM kids\nWHERE age IN (2, 4, 6, 8, 10);\n```\n:::\n\n\nTry using the `IN` operator yourself!\n\n**Steps**\n\n1. Get the title and release year of all films released in 1990 or 2000 that were longer than two hours. Remember, duration is in minutes!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, release_year\nFROM films\nWHERE release_year IN (1990, 2000)\nAND duration > 120;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                    | release_year|\n|:------------------------|------------:|\n|Dances with Wolves       |         1990|\n|Die Hard 2               |         1990|\n|Ghost                    |         1990|\n|Goodfellas               |         1990|\n|Mo' Better Blues         |         1990|\n|Pretty Woman             |         1990|\n|The Godfather: Part III  |         1990|\n|The Hunt for Red October |         1990|\n|All the Pretty Horses    |         2000|\n|Almost Famous            |         2000|\n\n</div>\n:::\n\n\n2. Get the title and language of all films which were in English, Spanish, or French.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, language\nFROM films\nWHERE language IN ('English', 'Spanish', 'French');\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                           |language |\n|:-------------------------------|:--------|\n|The Broadway Melody             |English  |\n|Hell's Angels                   |English  |\n|A Farewell to Arms              |English  |\n|42nd Street                     |English  |\n|She Done Him Wrong              |English  |\n|It Happened One Night           |English  |\n|Top Hat                         |English  |\n|Modern Times                    |English  |\n|The Charge of the Light Brigade |English  |\n|Snow White and the Seven Dwarfs |English  |\n\n</div>\n:::\n\n\n3. Get the title and certification of all films with an NC-17 or R certification.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, certification\nFROM films\nWHERE certification IN ('NC-17', 'R');\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                     |certification |\n|:-------------------------|:-------------|\n|Psycho                    |R             |\n|A Fistful of Dollars      |R             |\n|Rosemary's Baby           |R             |\n|Mississippi Mermaid       |R             |\n|The Wild Bunch            |R             |\n|Catch-22                  |R             |\n|Cotton Comes to Harlem    |R             |\n|The Ballad of Cable Hogue |R             |\n|The Conformist            |R             |\n|Woodstock                 |R             |\n\n</div>\n:::\n\n\nYour SQL vocabulary is growing by the minute!\n\n## Introduction to NULL and IS NULL\n\nIn SQL, `NULL` represents a missing or unknown value. You can check for `NULL` values using the expression `IS NULL`. For example, to count the number of missing birth dates in the `people` table:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*)\nFROM people\nWHERE birthdate IS NULL;\n```\n:::\n\n\nAs you can see, `IS NULL` is useful when combined with `WHERE` to figure out what data you're missing.\n\nSometimes, you'll want to filter out missing values so you only get results which are not `NULL`. To do this, you can use the `IS NOT NULL` operator.\n\nFor example, this query gives the names of all people whose birth dates are *not* missing in the `people` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nWHERE birthdate IS NOT NULL;\n```\n:::\n\n\n> *Question*\n> ---\n> What does `NULL` represent?<br>\n> <br>\n> ⬜ A corrupt entry<br>\n> ✅ A missing value<br>\n> ⬜ An empty string<br>\n> ⬜ An invalid value<br>\n\nCorrect! `NULL` is used to represent unknown values.\n\n## NULL and IS NULL\n\nNow that you know what `NULL` is and what it's used for, it's time for some practice!\n\n**Steps**\n\n1. Get the names of people who are still alive, i.e. whose death date is missing.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nWHERE deathdate IS NULL;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name               |\n|:------------------|\n|50 Cent            |\n|A. Michael Baldwin |\n|A. Raven Cruz      |\n|A.J. Buckley       |\n|A.J. DeLucia       |\n|A.J. Langer        |\n|Aaron Ashmore      |\n|Aaron Hann         |\n|Aaron Hill         |\n|Aaron Hughes       |\n\n</div>\n:::\n\n\n2. Get the title of every film which doesn't have a budget associated with it.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE budget IS NULL;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                             |\n|:---------------------------------|\n|Pandora's Box                     |\n|The Prisoner of Zenda             |\n|The Blue Bird                     |\n|Bambi                             |\n|State Fair                        |\n|Open Secret                       |\n|Deadline - U.S.A.                 |\n|Ordet                             |\n|The Party's Over                  |\n|The Torture Chamber of Dr. Sadism |\n\n</div>\n:::\n\n\n3. Get the number of films which don't have a language associated with them.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT COUNT(*)\nFROM films\nWHERE language IS NULL;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    11|\n\n</div>\n:::\n\n\nAlright! Are you ready for a last type of operator?\n\n## LIKE and NOT LIKE\n\nAs you've seen, the `WHERE` clause can be used to filter text data. However, so far you've only been able to filter by specifying the exact text you're interested in. In the real world, often you'll want to search for a *pattern* rather than a specific text string.\n\nIn SQL, the `LIKE` operator can be used in a `WHERE` clause to search for a pattern in a column. To accomplish this, you use something called a *wildcard* as a placeholder for some other values. There are two wildcards you can use with `LIKE`:\n\nThe `%` wildcard will match zero, one, or many characters in text. For example, the following query matches companies like `'Data'`, `'DataC'` `'DataCamp'`, `'DataMind'`, and so on:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM companies\nWHERE name LIKE 'Data%';\n```\n:::\n\n\nThe `_` wildcard will match a *single* character. For example, the following query matches companies like `'DataCamp'`, `'DataComp'`, and so on:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM companies\nWHERE name LIKE 'DataC_mp';\n```\n:::\n\n\nYou can also use the `NOT LIKE` operator to find records that *don't* match the pattern you specify.\n\nGot it? Let's practice!\n\n**Steps**\n\n1. Get the names of all people whose names begin with 'B'. The pattern you need is `'B%'`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nWHERE name LIKE 'B%';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                         |\n|:----------------------------|\n|B.J. Novak                   |\n|Babak Najafi                 |\n|Babar Ahmed                  |\n|Bahare Seddiqi               |\n|Bai Ling                     |\n|Bailee Madison               |\n|Balinese Tari Legong Dancers |\n|Bálint Péntek                |\n|Baltasar Kormákur            |\n|Balthazar Getty              |\n\n</div>\n:::\n\n\n2. Get the names of people whose names have 'r' as the second letter. The pattern you need is `'_r%'`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nWHERE name LIKE '_r%';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name              |\n|:-----------------|\n|Ara Celi          |\n|Aramis Knight     |\n|Arben Bajraktaraj |\n|Arcelia Ramírez   |\n|Archie Kao        |\n|Archie Panjabi    |\n|Aretha Franklin   |\n|Ari Folman        |\n|Ari Gold          |\n|Ari Graynor       |\n\n</div>\n:::\n\n\n3. Get the names of people whose names don't start with A. The pattern you need is `'A%'`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nWHERE name NOT LIKE 'A%';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name               |\n|:------------------|\n|50 Cent            |\n|Álex Angulo        |\n|Álex de la Iglesia |\n|Ángela Molina      |\n|B.J. Novak         |\n|Babak Najafi       |\n|Babar Ahmed        |\n|Bahare Seddiqi     |\n|Bai Ling           |\n|Bailee Madison     |\n\n</div>\n:::\n\n\nThis concludes the second chapter of the intro to SQL course. Rush over to chapter 3 if you want to learn more about aggregate functions!\n\n# 3. Aggregate Functions\n\nThis chapter teaches you how to use aggregate functions to summarize data and gain useful insights. You'll also learn about arithmetic in SQL and how to use aliases to make your results more readable.\n\n## Aggregate functions\n\nOften, you will want to perform some calculation on the data in a database. SQL provides a few functions, called *aggregate functions*, to help you out with this.\n\nFor example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT AVG(budget)\nFROM films;\n```\n:::\n\n\ngives you the average value from the `budget` column of the `films` table. Similarly, the `MAX()` function returns the highest budget:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(budget)\nFROM films;\n```\n:::\n\n\nThe `SUM()` function returns the result of adding up the numeric values in a column:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT SUM(budget)\nFROM films;\n```\n:::\n\n\nYou can probably guess what the `MIN()` function does! Now it's your turn to try out some SQL functions.\n\n**Steps**\n\n1. Use the `SUM()` function to get the total duration of all films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT SUM(duration)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|    sum|\n|------:|\n| 534882|\n\n</div>\n:::\n\n\n2. Get the average duration of all films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT AVG(duration)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|      avg|\n|--------:|\n| 107.9479|\n\n</div>\n:::\n\n\n3. Get the duration of the shortest film.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MIN(duration)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| min|\n|---:|\n|   7|\n\n</div>\n:::\n\n\n4. Get the duration of the longest film.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(duration)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| max|\n|---:|\n| 334|\n\n</div>\n:::\n\n\nSequelistic!\n\n## Aggregate functions practice\n\nGood work. Aggregate functions are important to understand, so let's get some more practice!\n\n**Steps**\n\n1. Use the `SUM()` function to get the total amount grossed by all films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT SUM(gross)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|          sum|\n|------------:|\n| 202515840134|\n\n</div>\n:::\n\n\n2. Get the average amount grossed by all films.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT AVG(gross)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|      avg|\n|--------:|\n| 48705108|\n\n</div>\n:::\n\n\n3. Get the amount grossed by the worst performing film.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MIN(gross)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| min|\n|---:|\n| 162|\n\n</div>\n:::\n\n\n4. Get the amount grossed by the best performing film.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(gross)\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|       max|\n|---------:|\n| 936627416|\n\n</div>\n:::\n\n\nWell done! Don't forget about these functions. You'll find yourself using them over and over again to get a quick grasp of the data in a SQL database.\n\n## Combining aggregate functions with WHERE\n\nAggregate functions can be combined with the `WHERE` clause to gain further insights from your data.\n\nFor example, to get the total budget of movies made in the year 2010 or later:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT SUM(budget)\nFROM films\nWHERE release_year >= 2010;\n```\n:::\n\n\nNow it's your turn!\n\n**Steps**\n\n1. Use the `SUM()` function to get the total amount grossed by all films made in the year 2000 or later.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT SUM(gross)\nFROM films\nWHERE release_year >= 2000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|          sum|\n|------------:|\n| 150900926358|\n\n</div>\n:::\n\n\n2. Get the average amount grossed by all films whose titles start with the letter 'A'.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT AVG(gross)\nFROM films\nwhere title LIKE 'A%';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|      avg|\n|--------:|\n| 47893236|\n\n</div>\n:::\n\n\n3. Get the amount grossed by the worst performing film in 1994.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MIN(gross)\nFROM films\nWHERE release_year = 1994;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|    min|\n|------:|\n| 125169|\n\n</div>\n:::\n\n\n4. Get the amount grossed by the best performing film between 2000 and 2012, inclusive.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(gross)\nFROM films\nWHERE release_year BETWEEN 2000 AND 2012;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|       max|\n|---------:|\n| 760505847|\n\n</div>\n:::\n\n\nNice. Can you see how SQL basically provides you a bunch of building blocks that you can combine in all kinds of ways? Hence the name: Structured Query Language.\n\n## A note on arithmetic\n\nIn addition to using aggregate functions, you can perform basic arithmetic with symbols like `+`, `-`, `*`, and `/`.\n\nSo, for example, this gives a result of `12`:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT (4 * 3);\n```\n:::\n\n\nHowever, the following gives a result of `1`:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT (4 / 3);\n```\n:::\n\n\nWhat's going on here?\n\nSQL assumes that if you divide an integer by an integer, you want to get an integer back. So be careful when dividing!\n\nIf you want more precision when dividing, you can add decimal places to your numbers. For example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT (4.0 / 3.0) AS result;\n```\n:::\n\n\ngives you the result you would expect: `1.333`.\n\n> *Question*\n> ---\n> What is the result of `SELECT (10 / 3);`?<br>\n> <br>\n> ⬜ 2.333<br>\n> ⬜ 3.333<br>\n> ✅ 3<br>\n> ⬜ 3.0<br>\n\n## It's AS simple AS aliasing\n\nYou may have noticed in the first exercise of this chapter that the column name of your result was just the name of the function you used. For example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(budget)\nFROM films;\n```\n:::\n\n\ngives you a result with one column, named `max`. But what if you use two functions like this?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(budget), MAX(duration)\nFROM films;\n```\n:::\n\n\nWell, then you'd have two columns named `max`, which isn't very useful!\n\nTo avoid situations like this, SQL allows you to do something called *aliasing*. Aliasing simply means you assign a temporary name to something. To alias, you use the `AS` keyword, which you've already seen earlier in this course.\n\nFor example, in the above example we could use aliases to make the result clearer:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(budget) AS max_budget,\n       MAX(duration) AS max_duration\nFROM films;\n```\n:::\n\n\nAliases are helpful for making results more readable!\n\n**Steps**\n\n1. Get the title and net profit (the amount a film grossed, minus its budget) for all films. Alias the net profit as `net_profit`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, gross - budget AS net_profit\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                            | net_profit|\n|:------------------------------------------------|----------:|\n|Intolerance: Love's Struggle Throughout the Ages |         NA|\n|Over the Hill to the Poorhouse                   |    2900000|\n|The Big Parade                                   |         NA|\n|Metropolis                                       |   -5973565|\n|Pandora's Box                                    |         NA|\n|The Broadway Melody                              |    2429000|\n|Hell's Angels                                    |         NA|\n|A Farewell to Arms                               |         NA|\n|42nd Street                                      |    1861000|\n|She Done Him Wrong                               |         NA|\n\n</div>\n:::\n\n\n2. Get the title and duration in hours for all films. The duration is in minutes, so you'll need to divide by 60.0 to get the duration in hours. Alias the duration in hours as `duration_hours`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, duration / 60.0 AS duration_hours\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                            | duration_hours|\n|:------------------------------------------------|--------------:|\n|Intolerance: Love's Struggle Throughout the Ages |       2.050000|\n|Over the Hill to the Poorhouse                   |       1.833333|\n|The Big Parade                                   |       2.516667|\n|Metropolis                                       |       2.416667|\n|Pandora's Box                                    |       1.833333|\n|The Broadway Melody                              |       1.666667|\n|Hell's Angels                                    |       1.600000|\n|A Farewell to Arms                               |       1.316667|\n|42nd Street                                      |       1.483333|\n|She Done Him Wrong                               |       1.100000|\n\n</div>\n:::\n\n\n3. Get the average duration in hours for all films, aliased as `avg_duration_hours`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT AVG(duration) / 60.0 AS avg_duration_hours  \nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| avg_duration_hours|\n|------------------:|\n|           1.799132|\n\n</div>\n:::\n\n\n## Even more aliasing\n\nLet's practice your newfound aliasing skills some more before moving on!\n\n**Recall:** SQL assumes that if you divide an integer by an integer, you want to get an integer back. \n\nThis means that the following will erroneously result in `400.0`:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT 45 / 10 * 100.0;\n```\n:::\n\n\nThis is because `45 / 10` evaluates to an integer (`4`), and not a decimal number like we would expect.\n\nSo when you're dividing make sure at least one of your numbers has a decimal place:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT 45 * 100.0 / 10;\n```\n:::\n\n\nThe above now gives the correct answer of `450.0` since the numerator (`45 * 100.0`) of the division is now a decimal!\n\n**Steps**\n\n1. Get the percentage of `people` who are no longer alive. Alias the result as `percentage_dead`. Remember to use `100.0` and not `100`!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- get the count(deathdate) and multiply by 100.0\n-- then divide by count(*) \nSELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead\nFROM people;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| percentage_dead|\n|---------------:|\n|        9.372395|\n\n</div>\n:::\n\n\n2. Get the number of years between the newest film and oldest film. Alias the result as `difference`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT MAX(release_year) - MIN(release_year)\nAS difference\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| difference|\n|----------:|\n|        100|\n\n</div>\n:::\n\n\n3. Get the number of decades the `films` table covers. Alias the result as `number_of_decades`. The top half of your fraction should be enclosed in parentheses.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT (MAX(release_year) - MIN(release_year)) / 10.0\nAS number_of_decades\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| number_of_decades|\n|-----------------:|\n|                10|\n\n</div>\n:::\n\n\nWe're at the end of chapter 3! In chapter 4, you will learn about sorting, grouping and joins. Head over there quickly!\n\n# 4. Sorting and grouping\n\nThis chapter provides a brief introduction to sorting and grouping your results.\n\n## ORDER BY\n\nCongratulations on making it this far! You now know how to select and filter your results.\n\nIn this chapter you'll learn how to sort and group your results to gain further insight. Let's go!\n\nIn SQL, the `ORDER BY` keyword is used to sort results in ascending or descending order according to the values of one or more columns. \n\nBy default `ORDER BY` will sort in ascending order. If you want to sort the results in descending order, you can use the `DESC` keyword. For example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nORDER BY release_year DESC;\n```\n:::\n\n\ngives you the titles of films sorted by release year, from newest to oldest.\n\n> *Question*\n> ---\n> How do you think `ORDER BY` sorts a column of text values by default?<br>\n> <br>\n> ✅ Alphabetically (A-Z)<br>\n> ⬜ Reverse alphabetically (Z-A)<br>\n> ⬜ There's no natural ordering to text data<br>\n> ⬜ By number of characters (fewest to most)<br>\n\n## Sorting single columns\n\nNow that you understand how `ORDER BY` works, give these exercises a go!\n\n**Steps**\n\n1. Get the names of people from the `people` table, sorted alphabetically.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nORDER BY name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name               |\n|:------------------|\n|50 Cent            |\n|A. Michael Baldwin |\n|A. Raven Cruz      |\n|A.J. Buckley       |\n|A.J. DeLucia       |\n|A.J. Langer        |\n|AJ Michalka        |\n|Aaliyah            |\n|Aaron Ashmore      |\n|Aaron Hann         |\n\n</div>\n:::\n\n\n2. Get the names of people, sorted by birth date.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nORDER BY birthdate;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name              |\n|:-----------------|\n|Robert Shaw       |\n|Lucille La Verne  |\n|Mary Carr         |\n|D.W. Griffith     |\n|Finlay Currie     |\n|Lionel Barrymore  |\n|Billy Gilbert     |\n|Cecil B. DeMille  |\n|Leopold Stokowski |\n|Éric Tessier      |\n\n</div>\n:::\n\n\n3. Get the birth date and name for every person, in order of when they were born.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT birthdate, name\nFROM people\nORDER BY birthdate;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|birthdate  |name              |\n|:----------|:-----------------|\n|1837-10-10 |Robert Shaw       |\n|1872-11-07 |Lucille La Verne  |\n|1874-03-14 |Mary Carr         |\n|1875-01-22 |D.W. Griffith     |\n|1878-01-20 |Finlay Currie     |\n|1878-04-28 |Lionel Barrymore  |\n|1880-03-21 |Billy Gilbert     |\n|1881-08-12 |Cecil B. DeMille  |\n|1882-04-18 |Leopold Stokowski |\n|1883-05-28 |Éric Tessier      |\n\n</div>\n:::\n\n\n## Sorting single columns (2)\n\nLet's get some more practice with `ORDER BY`!\n\n**Steps**\n\n1. Get the title of films released in 2000 or 2012, in the order they were released.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nWHERE release_year IN (2000, 2012)\nORDER BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                 |\n|:---------------------|\n|102 Dalmatians        |\n|28 Days               |\n|3 Strikes             |\n|Aberdeen              |\n|All the Pretty Horses |\n|Almost Famous         |\n|American Psycho       |\n|Amores Perros         |\n|An Everlasting Piece  |\n|Anatomy               |\n\n</div>\n:::\n\n\n2. Get all details for all films except those released in 2015 and order them by duration.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM films\nWHERE release_year <> 2015\nORDER BY duration;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|   id|title                                                 | release_year|country | duration|language |certification |   gross|   budget|\n|----:|:-----------------------------------------------------|------------:|:-------|--------:|:--------|:-------------|-------:|--------:|\n| 2926|The Touch                                             |         2007|USA     |        7|English  |NA            |      NA|    13000|\n| 4098|Vessel                                                |         2012|USA     |       14|English  |NA            |      NA|       NA|\n| 2501|Wal-Mart: The High Cost of Low Price                  |         2005|USA     |       20|English  |Not Rated     |      NA|  1500000|\n|  566|Marilyn Hotchkiss' Ballroom Dancing and Charm School  |         1990|USA     |       34|English  |NA            |  333658|    34000|\n| 2829|Jesus People                                          |         2007|USA     |       35|English  |NA            |      NA|       NA|\n|  462|Evil Dead II                                          |         1987|USA     |       37|English  |X             | 5923044|  3600000|\n| 3579|Sea Rex 3D: Journey to a Prehistoric World            |         2010|UK      |       41|English  |NA            | 4074023|  5000000|\n| 2985|Dolphins and Whales 3D: Tribes of the Ocean           |         2008|UK      |       42|English  |NA            | 7518876|  6000000|\n| 2997|Flame and Citron                                      |         2008|Denmark |       45|Danish   |Not Rated     |  145109| 45000000|\n| 4358|Alpha and Omega 4: The Legend of the Saw Toothed Cave |         2014|USA     |       45|NA       |NA            |      NA|  7000000|\n\n</div>\n:::\n\n\n3. Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, gross\nFROM films\nWHERE title LIKE 'M%'\nORDER BY title;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                       |    gross|\n|:---------------------------|--------:|\n|MacGruber                   |  8460995|\n|Machete                     | 26589953|\n|Machete Kills               |  7268659|\n|Machine Gun McCain          |       NA|\n|Machine Gun Preacher        |   537580|\n|Mad City                    | 10556196|\n|Mad Hot Ballroom            |  8044906|\n|Mad Max                     |       NA|\n|Mad Max 2: The Road Warrior |  9003011|\n|Mad Max Beyond Thunderdome  | 36200000|\n\n</div>\n:::\n\n\nCan you feel the SQL power dawn on you?!\n\n## Sorting single columns (DESC)\n\nTo order results in *descending* order, you can put the keyword `DESC` after your `ORDER BY`. For example, to get all the names in the `people` table, in reverse alphabetical order:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name\nFROM people\nORDER BY name DESC;\n```\n:::\n\n\nNow practice using `ORDER BY` with `DESC` to sort single columns in descending order!\n\n**Steps**\n\n1. Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT imdb_score, film_id\nFROM reviews\nORDER BY imdb_score DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| imdb_score| film_id|\n|----------:|-------:|\n|        9.5|    4960|\n|        9.3|     742|\n|        9.2|     178|\n|        9.1|    4866|\n|        9.0|    3110|\n|        9.0|     192|\n|        8.9|     676|\n|        8.9|      69|\n|        8.9|     120|\n|        8.9|     723|\n\n</div>\n:::\n\n\n2. Get the title for every film, in reverse order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title\nFROM films\nORDER BY title DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                   |\n|:-----------------------|\n|Æon Flux                |\n|xXx: State of the Union |\n|xXx                     |\n|eXistenZ                |\n|[Rec] 2                 |\n|[Rec]                   |\n|Zulu                    |\n|Zoom                    |\n|Zoolander 2             |\n|Zoolander               |\n\n</div>\n:::\n\n\n3. Get the title and duration for every film, in order of longest duration to shortest.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, duration\nFROM films\nORDER BY duration DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|title                                        | duration|\n|:--------------------------------------------|--------:|\n|Destiny                                      |       NA|\n|Should've Been Romeo                         |       NA|\n|Hum To Mohabbat Karega                       |       NA|\n|Harry Potter and the Deathly Hallows: Part I |       NA|\n|Barfi                                        |       NA|\n|Romantic Schemer                             |       NA|\n|Wolf Creek                                   |       NA|\n|Dil Jo Bhi Kahey...                          |       NA|\n|The Naked Ape                                |       NA|\n|Black Water Transit                          |       NA|\n\n</div>\n:::\n\n\nNice. Let's explore how you can sort multiple columns!\n\n## Sorting multiple columns\n\n`ORDER BY` can also be used to sort on multiple columns. It will sort by the first column specified, then sort by the next, then the next, and so on. For example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT birthdate, name\nFROM people\nORDER BY birthdate, name;\n```\n:::\n\n\nsorts on birth dates first (oldest to newest) and then sorts on the names in alphabetical order. **The order of columns is important!**\n\nTry using `ORDER BY` to sort multiple columns! Remember, to specify multiple columns you separate the column names with a comma.\n\n**Steps**\n\n1. Get the birth date and name of people in the `people` table, in order of when they were born and alphabetically by name.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT birthdate, name\nFROM people\nORDER BY birthdate, name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|birthdate  |name              |\n|:----------|:-----------------|\n|1837-10-10 |Robert Shaw       |\n|1872-11-07 |Lucille La Verne  |\n|1874-03-14 |Mary Carr         |\n|1875-01-22 |D.W. Griffith     |\n|1878-01-20 |Finlay Currie     |\n|1878-04-28 |Lionel Barrymore  |\n|1880-03-21 |Billy Gilbert     |\n|1881-08-12 |Cecil B. DeMille  |\n|1882-04-18 |Leopold Stokowski |\n|1883-05-28 |Éric Tessier      |\n\n</div>\n:::\n\n\n2. Get the release year, duration, and title of films ordered by their release year and duration.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, duration, title\nFROM films\nORDER BY release_year, duration;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year| duration|title                                            |\n|------------:|--------:|:------------------------------------------------|\n|         1916|      123|Intolerance: Love's Struggle Throughout the Ages |\n|         1920|      110|Over the Hill to the Poorhouse                   |\n|         1925|      151|The Big Parade                                   |\n|         1927|      145|Metropolis                                       |\n|         1929|      100|The Broadway Melody                              |\n|         1929|      110|Pandora's Box                                    |\n|         1930|       96|Hell's Angels                                    |\n|         1932|       79|A Farewell to Arms                               |\n|         1933|       66|She Done Him Wrong                               |\n|         1933|       89|42nd Street                                      |\n\n</div>\n:::\n\n\n3. Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT certification, release_year, title\nFROM films\nORDER BY certification, release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|certification | release_year|title                           |\n|:-------------|------------:|:-------------------------------|\n|Approved      |         1933|She Done Him Wrong              |\n|Approved      |         1935|Top Hat                         |\n|Approved      |         1936|The Charge of the Light Brigade |\n|Approved      |         1937|Snow White and the Seven Dwarfs |\n|Approved      |         1937|The Prisoner of Zenda           |\n|Approved      |         1938|You Can't Take It with You      |\n|Approved      |         1938|Alexander's Ragtime Band        |\n|Approved      |         1940|Pinocchio                       |\n|Approved      |         1940|The Blue Bird                   |\n|Approved      |         1941|How Green Was My Valley         |\n\n</div>\n:::\n\n\n4. Get the names and birthdates of people ordered by name and birth date.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name, birthdate\nFROM people\nORDER BY name, birthdate;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name               |birthdate  |\n|:------------------|:----------|\n|50 Cent            |1975-07-06 |\n|A. Michael Baldwin |1963-04-04 |\n|A. Raven Cruz      |NA         |\n|A.J. Buckley       |1978-02-09 |\n|A.J. DeLucia       |NA         |\n|A.J. Langer        |1974-05-22 |\n|AJ Michalka        |1991-04-10 |\n|Aaliyah            |1979-01-16 |\n|Aaron Ashmore      |1979-10-07 |\n|Aaron Hann         |NA         |\n\n</div>\n:::\n\n\nWell done. Notice how the second column you order on only steps in when the first column is not decisive to tell the order. The second column acts as a tie breaker.\n\n## GROUP BY\n\nNow you know how to sort results! Often you'll need to aggregate results. For example, you might want to count the number of male and female employees in your company. Here, what you want is to group all the males together and count them, and group all the females together and count them. In SQL, `GROUP BY` allows you to group a result by one or more columns, like so:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT sex, count(*)\nFROM employees\nGROUP BY sex;\n```\n:::\n\n\nThis might give, for example:\n\n|sex    | count|\n|:------|-----:|\n|male   |    15|\n|female |    19|\n\nCommonly, `GROUP BY` is used with *aggregate functions* like `COUNT()` or `MAX()`. Note that `GROUP BY` always goes after the `FROM` clause!\n\n> *Question*\n> ---\n> What is `GROUP BY` used for?<br>\n> <br>\n> ⬜ Performing operations by column<br>\n> ⬜ Performing operations all at once<br>\n> ⬜ Performing operations in a particular order<br>\n> ✅ Performing operations by group<br>\n\nCorrect! `GROUP BY` is for performing operations within groups.\n\n## GROUP BY practice\n\nAs you've just seen, combining aggregate functions with `GROUP BY` can yield some powerful results!\n\nA word of warning: SQL will return an error if you try to `SELECT` a field that is not in your `GROUP BY` clause without using it to calculate some kind of value about the entire group.\n\nNote that you can combine `GROUP BY` with `ORDER BY` to group your results, calculate something about them, and then order your results. For example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT sex, count(*)\nFROM employees\nGROUP BY sex\nORDER BY count DESC;\n```\n:::\n\n\nmight return something like\n\n|sex    | count|\n|:------|-----:|\n|female |    19|\n|male   |    15|\n\nbecause there are more females at our company than males. Note also that `ORDER BY` always goes after `GROUP BY`. Let's try some exercises!\n\n**Steps**\n\n1. Get the release year and count of films released in each year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, COUNT(*)\nFROM films\nGROUP BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year| count|\n|------------:|-----:|\n|         1954|     5|\n|         1988|    31|\n|         1959|     3|\n|         1964|    10|\n|         1969|    10|\n|           NA|    42|\n|         2008|   225|\n|         1991|    31|\n|         1989|    33|\n|         1945|     4|\n\n</div>\n:::\n\n\n2. Get the release year and average duration of all films, grouped by release year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, AVG(duration)\nFROM films\nGROUP BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|       avg|\n|------------:|---------:|\n|         1954| 140.60000|\n|         1988| 107.00000|\n|         1959| 136.66667|\n|         1964| 119.40000|\n|         1969| 126.00000|\n|           NA|  77.43902|\n|         2008| 105.38222|\n|         1991| 113.06452|\n|         1989| 113.12121|\n|         1945| 103.75000|\n\n</div>\n:::\n\n\n3. Get the release year and largest budget for all films, grouped by release year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, MAX(budget)\nFROM films\nGROUP BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|        max|\n|------------:|----------:|\n|         1954|    5000000|\n|         1988| 1100000000|\n|         1959|    5000000|\n|         1964|   19000000|\n|         1969|   20000000|\n|           NA|   15000000|\n|         2008|  553632000|\n|         1991|  102000000|\n|         1989|   69500000|\n|         1945|    2160000|\n\n</div>\n:::\n\n\n4. Get the IMDB score and count of film reviews grouped by IMDB score in the `reviews` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT imdb_score, COUNT(*)\nFROM reviews\nGROUP BY imdb_score;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| imdb_score| count|\n|----------:|-----:|\n|        5.7|   117|\n|        8.7|    11|\n|        9.0|     2|\n|        9.1|     1|\n|        8.3|    37|\n|        5.6|   112|\n|        5.9|   144|\n|        9.3|     1|\n|        4.4|    25|\n|        2.1|     3|\n\n</div>\n:::\n\n\nNow that you've accustomed yourself with `GROUP BY`, let's throw it in the mix with other SQL constructs you already know!\n\n## GROUP BY practice (2)\n\nNow practice your new skills by combining `GROUP BY` and `ORDER BY` with some more aggregate functions!\n\nMake sure to always put the `ORDER BY` clause at the end of your query. You can't sort values that you haven't calculated yet!\n\n**Steps**\n\n1. Get the release year and lowest gross earnings per release year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, MIN(gross)\nFROM films\nGROUP BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|      min|\n|------------:|--------:|\n|         1954|   269061|\n|         1988|   439162|\n|         1959| 25000000|\n|         1964|    12438|\n|         1969|    26893|\n|           NA|   145118|\n|         2008|     3478|\n|         1991|   869325|\n|         1989|   792966|\n|         1945|       NA|\n\n</div>\n:::\n\n\n2. Get the language and total gross amount films in each language made.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT language, SUM(gross)\nFROM films\nGROUP BY language;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|language |       sum|\n|:--------|---------:|\n|Danish   |   2403857|\n|Greek    |    110197|\n|Dzongkha |    505295|\n|None     |   2601847|\n|NA       |   4319281|\n|Tamil    |        NA|\n|Swahili  |        NA|\n|Mandarin | 163611530|\n|Urdu     |        NA|\n|Filipino |  10166502|\n\n</div>\n:::\n\n\n3. Get the country and total budget spent making movies in each country.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT country, SUM(budget)\nFROM films\nGROUP BY country;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country            |          sum|\n|:------------------|------------:|\n|NA                 |      3500000|\n|Soviet Union       |      1000000|\n|Indonesia          |      1100000|\n|Italy              |    261350000|\n|Cameroon           |           NA|\n|Czech Republic     |    146450000|\n|Sweden             |     50400000|\n|USA                | 125693604035|\n|Dominican Republic |       500000|\n|Cambodia           |           NA|\n\n</div>\n:::\n\n\n4. Get the release year, country, and highest budget spent making a film for each year, for each country. Sort your results by release year and country.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, country, MAX(budget)\nFROM films\nGROUP BY release_year, country\nORDER BY release_year, country;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|country |     max|\n|------------:|:-------|-------:|\n|         1916|USA     |  385907|\n|         1920|USA     |  100000|\n|         1925|USA     |  245000|\n|         1927|Germany | 6000000|\n|         1929|Germany |      NA|\n|         1929|USA     |  379000|\n|         1930|USA     | 3950000|\n|         1932|USA     |  800000|\n|         1933|USA     |  439000|\n|         1934|USA     |  325000|\n\n</div>\n:::\n\n\n5. Get the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT country, release_year, MIN(gross)\nFROM films\nGROUP BY country, release_year\nORDER BY country, release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country     | release_year|       min|\n|:-----------|------------:|---------:|\n|Afghanistan |         2003|   1127331|\n|Argentina   |         2000|   1221261|\n|Argentina   |         2004|    304124|\n|Argentina   |         2009|  20167424|\n|Aruba       |         1998|  10076136|\n|Australia   |         1979|        NA|\n|Australia   |         1981|   9003011|\n|Australia   |         1982|        NA|\n|Australia   |         1985|  36200000|\n|Australia   |         1986| 174635000|\n\n</div>\n:::\n\n\nOff to the next statement!\n\n## HAVING a great time\n\nIn SQL, aggregate functions can't be used in `WHERE` clauses. For example, the following query is invalid:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year\nFROM films\nGROUP BY release_year\nWHERE COUNT(title) > 10;\n```\n:::\n\n\nThis means that if you want to filter based on the result of an aggregate function, you need another way! That's where the `HAVING` clause comes in. For example,\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year\nFROM films\nGROUP BY release_year\nHAVING COUNT(title) > 10;\n```\n:::\n\n\nshows only those years in which more than 10 films were released.\n\n> *Question*\n> ---\n> In how many different years were more than 200 movies released?<br>\n> <br>\n> ⬜ 2<br>\n> ✅ 13<br>\n> ⬜ 44<br>\n> ⬜ 63<br>\n\n## All together now\n\nTime to practice using `ORDER BY`, `GROUP BY` and `HAVING` together.\n\nNow you're going to write a query that returns the average budget and average gross earnings for films in each year after 1990, if the average budget is greater than $60 million.\n\nThis is going to be a big query, but you can handle it!\n\n**Steps**\n\n1. Get the release year, budget and gross earnings for each film in the `films` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, budget, gross\nFROM films;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|  budget|   gross|\n|------------:|-------:|-------:|\n|         1916|  385907|      NA|\n|         1920|  100000| 3000000|\n|         1925|  245000|      NA|\n|         1927| 6000000|   26435|\n|         1929|      NA|    9950|\n|         1929|  379000| 2808000|\n|         1930| 3950000|      NA|\n|         1932|  800000|      NA|\n|         1933|  439000| 2300000|\n|         1933|  200000|      NA|\n\n</div>\n:::\n\n\n2. Modify your query so that only records with a `release_year` after 1990 are included.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, budget, gross\nFROM films\nWHERE release_year > 1990;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|   budget|     gross|\n|------------:|--------:|---------:|\n|         1991|  6000000|    869325|\n|         1991| 20000000|  38037513|\n|         1991|  6000000|  57504069|\n|         1991| 35000000|  79100000|\n|         1991| 15000000|  30102717|\n|         1991| 35000000|  14587732|\n|         1991|  8500000|  34872293|\n|         1991| 23000000|   7434726|\n|         1991| 70000000| 119654900|\n|         1991|  5000000|  19281235|\n\n</div>\n:::\n\n\n3. Remove the budget and gross columns, and group your results by release year.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year\nFROM films\nWHERE release_year > 1990\nGROUP BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year|\n|------------:|\n|         2008|\n|         1991|\n|         2009|\n|         2005|\n|         2013|\n|         2003|\n|         2015|\n|         1993|\n|         2002|\n|         2004|\n\n</div>\n:::\n\n\n4. Modify your query to include the average budget and average gross earnings for the results you have so far. Alias the average budget as `avg_budget`; alias the average gross earnings as `avg_gross`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\nFROM films\nWHERE release_year > 1990\nGROUP BY release_year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| release_year| avg_budget| avg_gross|\n|------------:|----------:|---------:|\n|         2008|   41804886|  44573509|\n|         1991|   25176548|  53844502|\n|         2009|   37073287|  46207440|\n|         2005|   70323938|  41159143|\n|         2013|   40519045|  56158358|\n|         2003|   37208649|  48727747|\n|         2015|   39298329|  72573303|\n|         1993|   20729787|  45302091|\n|         2002|   32598511|  43511151|\n|         2004|   46865345|  40726529|\n\n</div>\n:::\n\n\n5. Modify your query so that only years with an average budget of greater than $60 million are included.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\nFROM films\nWHERE release_year > 1990\nGROUP BY release_year\nHAVING AVG(budget) > 60000000;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|release_year | avg_budget| avg_gross|\n|:------------|----------:|---------:|\n|2005         |   70323938|  41159143|\n|2006         |   93968930|  39237856|\n\n</div>\n:::\n\n\n6. Finally, modify your query to order the results from highest average gross earnings to lowest.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross\nFROM films\nWHERE release_year > 1990\nGROUP BY release_year\nHAVING AVG(budget) > 60000000\nORDER BY avg_gross DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|release_year | avg_budget| avg_gross|\n|:------------|----------:|---------:|\n|2005         |   70323938|  41159143|\n|2006         |   93968930|  39237856|\n\n</div>\n:::\n\n\nWooooow! Let's do another one!\n\n## All together now (2)\n\nGreat work! Now try another large query. This time, all in one go!\n\nRemember, if you only want to return a certain number of results, you can use the `LIMIT` keyword to limit the number of rows returned\n\n**Steps**\n\n1. Get the country, average budget, and average gross take of countries that have made more than 10 films. Order the result by country name, and limit the number of results displayed to 5. You should alias the averages as `avg_budget` and `avg_gross` respectively.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- select country, average budget, \n-- and average gross\nSELECT country, AVG(budget) AS avg_budget, \n       AVG(gross) AS avg_gross\n-- from the films table\nFROM films\n-- group by country \nGROUP BY country\n-- where the country has more than 10 titles\nHAVING COUNT(title) > 10\n-- order by country\nORDER BY country\n-- limit to only show 5 results\nLIMIT 5;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|country   | avg_budget| avg_gross|\n|:---------|----------:|---------:|\n|Australia |   31172110|  40205910|\n|Canada    |   14798459|  22432067|\n|China     |   62219000|  14143041|\n|Denmark   |   13922222|   1418469|\n|France    |   30672035|  16350594|\n\n</div>\n:::\n\n\nSuperb work on a selection saga! `SELECT` queries can get rather long, but breaking them down into individual clauses makes them easier to write.\n\n## A taste of things to come\n\nCongrats on making it to the end of the course! By now you should have a good understanding of the basics of SQL.\n\nThere's one more concept we're going to introduce. You may have noticed that all your results so far have been from just one table, e.g., `films` or `people`.\n\nIn the real world however, you will often want to query multiple tables. For example, what if you want to see the IMDB score for a particular movie?\n\nIn this case, you'd want to get the ID of the movie from the `films` table and then use it to get IMDB information from the `reviews` table. In SQL, this concept is known as a **join**, and a basic join is shown in the editor to the right.\n\nThe query in the editor gets the IMDB score for the film *To Kill a Mockingbird*! Cool right?\n\nAs you can see, joins are incredibly useful and important to understand for anyone using SQL.\n\nWe have a whole follow-up course dedicated to them called <a href=\"https://learn.datacamp.com/courses/joining-data-in-postgresql\">Joining Data in SQL</a> for you to hone your database skills further!\n\n**Steps**\n\n1. Submit the code in the editor and inspect the results.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT title, imdb_score\nFROM films\nJOIN reviews\nON films.id = reviews.film_id\nWHERE title = 'To Kill a Mockingbird';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|title                 | imdb_score|\n|:---------------------|----------:|\n|To Kill a Mockingbird |        8.4|\n\n</div>\n:::\n\n\n> *Question*\n> ---\n> What is the IMDB score for the film *To Kill a Mockingbird*?<br>\n> <br>\n> ⬜ 8.1<br>\n> ✅ 8.4<br>\n> ⬜ 7.7<br>\n> ⬜ 9.3<br>",
    "supporting": [
      "introduction_to_sql_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}