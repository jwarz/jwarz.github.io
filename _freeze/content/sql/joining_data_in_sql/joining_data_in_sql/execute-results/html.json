{
  "hash": "c1ef4bba27df53d98561e76784ca8c7f",
  "result": {
    "markdown": "---\ntitle: \"Joining Data in SQL\"\nauthor: \"Joschka Schwarz\"\ntoc-depth: 2\nexecute: \n  eval: true\n  echo: true\n---\n\n::: {.cell}\n\n```{.sql .cell-code}\ncreate database countries;\n```\n:::\n\n::: {.cell}\n\n```{.sql .cell-code}\npsql -d countries -U jschwarz -f countries.sql\n```\n:::\n\n\n\n\n**Short Description**\n\nDiscover all the fundamental in PostgreSQL, like inner, outer self, semi, anti, and cross joins, as well as unions, intersections, and except clauses.\n\n**Long Description**\n\nNow that you've learned the basics of SQL in our <a href=\"https://learn.datacamp.com/courses/introduction-to-sql\">Introduction to SQL</a> course,  it's time to supercharge your queries using joins and relational set theory. In this course, you'll learn all about the power of joining tables while exploring interesting features of countries and their cities throughout the world. You will master inner and outer joins, as well as self joins, semi joins, anti joins and cross joins—fundamental tools in any PostgreSQL wizard's toolbox. Never fear set theory again after learning all about unions, intersections, and except clauses through easy-to-understand diagrams and examples. Lastly, you'll be introduced to the challenging topic of subqueries. You will be able to visually grasp these ideas by using Venn diagrams and other linking illustrations.\n\n# 1. Introduction to joins\n\nIn this chapter, you'll be introduced to the concept of joining tables, and will explore the different ways you can enrich your queries using inner joins and self joins. You'll also see how to use the case statement to split up a field into different categories.\n\n## Introduction to INNER JOIN\n\nTheory. Coming soon ...\n\n**1. Welcome to the course!**\n\nHi, my name is Chester Ismay and I'll be your instructor for this course on Joining Data in PostgreSQL. As the name suggests, the focus of this course is using SQL to join two or more database tables together into a single table, an essential skill for data scientists. In this chapter, you'll learn about the INNER JOIN, which along with LEFT JOIN are probably the two most common JOINs. You'll see diagrams throughout this course that are designed to help you understand the mechanics of the different joins. Let's begin with a diagram showing the layout of some data and then how an INNER JOIN can be applied to that data.\n\n**2. Initial data diagram**\n\nIn the videos in this chapter and the next, we'll often work with two tables named left and right. You can see that matching values of the id field are colored with the same color. The id field is known as a KEY field since it can be used to reference one table to another. Both the left and right tables also have another field named val. This will be useful in helping you see specifically which records and values are included in each join.\n\n**3. INNER JOIN diagram**\n\nAn INNER JOIN only includes records in which the key is in both tables. You can see here that the id field matches for values of 1 and 4 only. With inner joins we look for matches in the right table corresponding to all entries in the key field in the left table.\n\n**4. INNER JOIN diagram (2)**\n\nSo the focus here shifts to only those records with a match in terms of the id field. The records not of interest to INNER JOIN have been faded.\n\n**5. INNER JOIN diagram (3)**\n\nHere's a resulting single table from the INNER JOIN clause that gives the val field from the right table with records corresponding to only those with id value of 1 or 4, which are colored as yellow and purple. Now that you have a sense for how INNER JOIN works, let's try an example in SQL.\n\n**6. prime_ministers table**\n\nThe prime_ministers table is one of the tables in the leaders database. It is displayed here. Note the countries that are included. Suppose you were interested in determining nations that have both a prime minister and a president AND putting the results into a single table. Next you'll see the presidents table.\n\n**7. presidents table**\n\nHow did I display all of the prime_ministers table in the previous slide? Recall the use of SELECT and FROM clauses as is shown for the presidents table here.Which countries appear in both tables? With small tables like these, it is easy to notice that Egypt, Portugal, Vietnam, and Haiti appear in both tables. For larger tables, it isn't as simple as just picking these countries out visually. So what does the syntax look like for SQL to get the results of countries with a prime minister and a president from these two tables into one?\n\n**8. INNER JOIN in SQL**\n\nThe syntax for completing an INNER JOIN from the prime_ministers table to the presidents table based on a key field of country is shown. Note the use of aliases for prime_ministers as p1 and presidents as p2. This helps to simplify your code, especially with longer table names like prime_ministers and presidents. A SELECT statement is used to select specific fields from the two tables. In this case, since country exists in both tables, we must write p1 and the period to avoid a SQL error. Next we list the table on the left of the inner join after FROM and then we list the table on the right after INNER JOIN. Lastly, we specify the keys in the two tables that we would like to match on.\n\n**9. Let's practice!**\n\nYou'll now practice applying an inner join to two tables and to three tables. Let's get to it!\n\n## Inner join\n\nAlthough this course focuses on PostgreSQL, you'll find that these joins and the material here applies to different forms of SQL as well.\n\nThroughout this course, you'll be working with the `countries` database containing information about the most populous world cities as well as country-level economic data, population data, and geographic data.  This `countries` database also contains information on languages spoken in each country.\n\nYou can see the different tables in this database by clicking on the corresponding tabs. Click through them to get a sense for the types of data that each table contains before you continue with the course! Take note of the fields that appear to be shared across the tables.\n\nRecall from the video the basic syntax for an `INNER JOIN`, here including all columns in **both** tables:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM left_table\nINNER JOIN right_table\nON left_table.id = right_table.id;\n```\n:::\n\n\nYou'll start off with a `SELECT` statement and then build up to an `INNER JOIN` with the `cities` and `countries` tables.  Let's get to it!\n\n**Steps**\n\n1. Begin by selecting all columns from the `cities` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select all columns from cities\nSELECT *\nFROM cities;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name        |country_code | city_proper_pop| metroarea_pop| urbanarea_pop|\n|:-----------|:------------|---------------:|-------------:|-------------:|\n|Abidjan     |CIV          |         4765000|            NA|       4765000|\n|Abu Dhabi   |ARE          |         1145000|            NA|       1145000|\n|Abuja       |NGA          |         1235880|       6000000|       1235880|\n|Accra       |GHA          |         2070463|       4010054|       2070463|\n|Addis Ababa |ETH          |         3103673|       4567857|       3103673|\n|Ahmedabad   |IND          |         5570585|            NA|       5570585|\n|Alexandria  |EGY          |         4616625|            NA|       4616625|\n|Algiers     |DZA          |         3415811|       5000000|       3415811|\n|Almaty      |KAZ          |         1703481|            NA|       1703481|\n|Ankara      |TUR          |         5271000|       4585000|       5271000|\n\n</div>\n:::\n\n\n2. Inner join the `cities` table on the left to the `countries` table on the right, keeping all of the fields in both tables. \n3. You should match the tables on the `country_code` field in `cities` and the `code` field in `countries`. \n4. **Do not** alias your tables here or in the next step. Using `cities` and `countries` is fine for now.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * \nFROM cities\n  -- Inner join to countries\n  INNER JOIN countries\n    -- Match on the country codes\n    ON cities.country_code = countries.code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name        |country_code | city_proper_pop| metroarea_pop| urbanarea_pop|code |name..7              |continent |region                    | surface_area| indep_year|local_name                         |gov_form           |capital      | cap_long|  cap_lat|\n|:-----------|:------------|---------------:|-------------:|-------------:|:----|:--------------------|:---------|:-------------------------|------------:|----------:|:----------------------------------|:------------------|:------------|--------:|--------:|\n|Abidjan     |CIV          |         4765000|            NA|       4765000|CIV  |Cote d'Ivoire        |Africa    |Western Africa            |       322463|       1960|Cote dIvoire                       |Republic           |Yamoussoukro | -4.03050|  5.33200|\n|Abu Dhabi   |ARE          |         1145000|            NA|       1145000|ARE  |United Arab Emirates |Asia      |Middle East               |        83600|       1971|Al-Imarat al-´Arabiya al-Muttahida |Emirate Federation |Abu Dhabi    | 54.37050| 24.47640|\n|Abuja       |NGA          |         1235880|       6000000|       1235880|NGA  |Nigeria              |Africa    |Western Africa            |       923768|       1960|Nigeria                            |Federal Republic   |Abuja        |  7.48906|  9.05804|\n|Accra       |GHA          |         2070463|       4010054|       2070463|GHA  |Ghana                |Africa    |Western Africa            |       238533|       1957|Ghana                              |Republic           |Accra        | -0.20795|  5.57045|\n|Addis Ababa |ETH          |         3103673|       4567857|       3103673|ETH  |Ethiopia             |Africa    |Eastern Africa            |      1104300|      -1000|YeItyop´iya                        |Republic           |Addis Ababa  | 38.74680|  9.02274|\n|Ahmedabad   |IND          |         5570585|            NA|       5570585|IND  |India                |Asia      |Southern and Central Asia |      3287260|       1947|Bharat/India                       |Federal Republic   |New Delhi    | 77.22500| 28.63530|\n|Alexandria  |EGY          |         4616625|            NA|       4616625|EGY  |Egypt                |Africa    |Northern Africa           |      1001450|       1922|Misr                               |Republic           |Cairo        | 31.24610| 30.09820|\n|Algiers     |DZA          |         3415811|       5000000|       3415811|DZA  |Algeria              |Africa    |Northern Africa           |      2381740|       1962|Al-Jazair/Algerie                  |Republic           |Algiers      |  3.05097| 36.73970|\n|Almaty      |KAZ          |         1703481|            NA|       1703481|KAZ  |Kazakhstan           |Asia      |Southern and Central Asia |      2724900|       1991|Qazaqstan                          |Republic           |Astana       | 71.43820| 51.18790|\n|Ankara      |TUR          |         5271000|       4585000|       5271000|TUR  |Turkey               |Asia      |Middle East               |       774815|       1923|Turkiye                            |Republic           |Ankara       | 32.36060| 39.71530|\n\n</div>\n:::\n\n\n5. Modify the `SELECT` statement to keep only the name of the city, the name of the country, and the name of the region the country resides in.\n6. Alias the name of the city `AS city` and the name of the country `AS country`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select name fields (with alias) and region \nSELECT cities.name AS city, countries.name AS country, region\nFROM cities\n  INNER JOIN countries\n    ON cities.country_code = countries.code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|city        |country              |region                    |\n|:-----------|:--------------------|:-------------------------|\n|Abidjan     |Cote d'Ivoire        |Western Africa            |\n|Abu Dhabi   |United Arab Emirates |Middle East               |\n|Abuja       |Nigeria              |Western Africa            |\n|Accra       |Ghana                |Western Africa            |\n|Addis Ababa |Ethiopia             |Eastern Africa            |\n|Ahmedabad   |India                |Southern and Central Asia |\n|Alexandria  |Egypt                |Northern Africa           |\n|Algiers     |Algeria              |Northern Africa           |\n|Almaty      |Kazakhstan           |Southern and Central Asia |\n|Ankara      |Turkey               |Middle East               |\n\n</div>\n:::\n\n\nGreat work! In the next exercise you'll explore how you can do more aliasing to limit the amount of writing.\n\n## Inner join (2)\n\nInstead of writing the full table name, you can use table aliasing as a shortcut. For tables you also use `AS` to add the alias immediately after the table name with a space. Check\nout the aliasing of `cities` and `countries` below.\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT c1.name AS city, c2.name AS country\nFROM cities AS c1\nINNER JOIN countries AS c2\nON c1.country_code = c2.code;\n```\n:::\n\n\nNotice that to select a field in your query that appears in multiple tables, you'll need to identify which table/table alias you're referring to by using a `.` in your `SELECT` statement.\n\nYou'll now explore a way to get data from both the `countries` and `economies` tables to examine the inflation rate for both 2010 and 2015.\n\nSometimes it's easier to write SQL code out of order: you write the `SELECT` statement after you've done the `JOIN`.\n\n**Steps**\n\n1. Join the tables `countries` (left) and `economies` (right) aliasing `countries AS c` and `economies AS e`. \n2. Specify the field to match the tables `ON`.\n3. From this join, `SELECT`:\\n`c.code`, aliased as `country_code`.\\n`name`, `year`, and `inflation_rate`, not aliased.\n\n  * `c.code`, aliased as `country_code`.\n  * `name`, `year`, and `inflation_rate`, not aliased.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields with aliases\nSELECT c.code AS country_code, name, year, inflation_rate\nFROM countries AS c\n  -- Join to economies (alias e)\n  INNER JOIN economies AS e\n    -- Match on code\n    ON c.code = e.code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code |name                 | year| inflation_rate|\n|:------------|:--------------------|----:|--------------:|\n|AFG          |Afghanistan          | 2010|          2.179|\n|AFG          |Afghanistan          | 2015|         -1.549|\n|AGO          |Angola               | 2010|         14.480|\n|AGO          |Angola               | 2015|         10.287|\n|ALB          |Albania              | 2010|          3.605|\n|ALB          |Albania              | 2015|          1.896|\n|ARE          |United Arab Emirates | 2010|          0.878|\n|ARE          |United Arab Emirates | 2015|          4.070|\n|ARG          |Argentina            | 2010|         10.461|\n|ARG          |Argentina            | 2015|             NA|\n\n</div>\n:::\n\n\nNicely done! Using this short aliases takes some getting used to, but it will save you a lot of typing.\n\n## Inner join (3)\n\nThe ability to combine multiple joins in a single query is a powerful feature of SQL, e.g:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM left_table\n  INNER JOIN right_table\n    ON left_table.id = right_table.id\n  INNER JOIN another_table\n    ON left_table.id = another_table.id;\n```\n:::\n\n\nAs you can see here it becomes tedious to continually write long table names in joins. This is when it becomes useful to alias each table using the first letter of its name (e.g. `countries AS c`)! It is standard practice to alias in this way and, if you choose to alias tables or are asked to specifically for an exercise in this course, you should follow this protocol.\n\nNow, for each country, you want to get the country name, its region, the fertility rate, and the unemployment rate for both 2010 and 2015.\n\nNote that results should work throughout this course with or without table aliasing unless specified differently.\n\n**Steps**\n\n1. Inner join `countries` (left) and `populations` (right) on the `code` and `country_code` fields respectively.\n2. Alias `countries AS c` and `populations AS p`.\n3. Select `code`, `name`, and `region` from `countries` and also select `year` and `fertility_rate` from `populations` (5 fields in total).\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.code, name, region, year, fertility_rate\n  -- From countries (alias as c)\n  FROM countries AS c\n  -- Join with populations (as p)\n  INNER JOIN populations AS p\n    -- Match on country code\n    ON c.code = p.country_code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code |name        |region                    | year| fertility_rate|\n|:----|:-----------|:-------------------------|----:|--------------:|\n|ABW  |Aruba       |Caribbean                 | 2010|          1.704|\n|ABW  |Aruba       |Caribbean                 | 2015|          1.647|\n|AFG  |Afghanistan |Southern and Central Asia | 2010|          5.746|\n|AFG  |Afghanistan |Southern and Central Asia | 2015|          4.653|\n|AGO  |Angola      |Central Africa            | 2010|          6.416|\n|AGO  |Angola      |Central Africa            | 2015|          5.996|\n|ALB  |Albania     |Southern Europe           | 2010|          1.663|\n|ALB  |Albania     |Southern Europe           | 2015|          1.793|\n|AND  |Andorra     |Southern Europe           | 2010|          1.270|\n|AND  |Andorra     |Southern Europe           | 2015|             NA|\n\n</div>\n:::\n\n\n4. Add an additional `INNER JOIN` with `economies` to your previous query by joining on `code`.\n5. Include the `unemployment_rate` column that became available through joining with `economies`.\n6. Note that `year` appears in both `populations` and `economies`, so you have to explicitly use `e.year` instead of `year` as you did before.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.code, name, region, e.year, fertility_rate, unemployment_rate\n  -- From countries (alias as c)\n  FROM countries AS c\n  -- Join to populations (as p)\n  INNER JOIN populations AS p\n    -- Match on country code\n    ON c.code = p.country_code\n  -- Join to economies (as e)\n  INNER JOIN economies AS e\n    -- Match on country code\n    ON c.code = e.code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code |name        |region                    | year| fertility_rate| unemployment_rate|\n|:----|:-----------|:-------------------------|----:|--------------:|-----------------:|\n|AFG  |Afghanistan |Southern and Central Asia | 2015|          5.746|                NA|\n|AFG  |Afghanistan |Southern and Central Asia | 2010|          5.746|                NA|\n|AFG  |Afghanistan |Southern and Central Asia | 2015|          4.653|                NA|\n|AFG  |Afghanistan |Southern and Central Asia | 2010|          4.653|                NA|\n|AGO  |Angola      |Central Africa            | 2015|          6.416|                NA|\n|AGO  |Angola      |Central Africa            | 2010|          6.416|                NA|\n|AGO  |Angola      |Central Africa            | 2015|          5.996|                NA|\n|AGO  |Angola      |Central Africa            | 2010|          5.996|                NA|\n|ALB  |Albania     |Southern Europe           | 2015|          1.663|              17.1|\n|ALB  |Albania     |Southern Europe           | 2010|          1.663|              14.0|\n\n</div>\n:::\n\n\n7. Scroll down the query result and take a look at the results for Albania from your previous query. Does something seem off to you?\n8. The trouble with doing your last join on `c.code = e.code` and not also including `year` is that e.g. the 2010 value for `fertility_rate` is also paired with the 2015 value for `unemployment_rate`.\n9. Fix your previous query: in your last `ON` clause, use `AND` to add an additional joining condition. In addition to joining on `code` in `c` and `e`, also join on `year` in `e` and `p`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.code, name, region, e.year, fertility_rate, unemployment_rate\n  -- From countries (alias as c)\n  FROM countries AS c\n  -- Join to populations (as p)\n  INNER JOIN populations AS p\n    -- Match on country code\n    ON c.code = p.country_code\n  -- Join to economies (as e)\n  INNER JOIN economies AS e\n    -- Match on country code and year\n    ON c.code = e.code AND e.year = p.year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code |name                 |region                    | year| fertility_rate| unemployment_rate|\n|:----|:--------------------|:-------------------------|----:|--------------:|-----------------:|\n|AFG  |Afghanistan          |Southern and Central Asia | 2010|          5.746|                NA|\n|AFG  |Afghanistan          |Southern and Central Asia | 2015|          4.653|                NA|\n|AGO  |Angola               |Central Africa            | 2010|          6.416|                NA|\n|AGO  |Angola               |Central Africa            | 2015|          5.996|                NA|\n|ALB  |Albania              |Southern Europe           | 2010|          1.663|             14.00|\n|ALB  |Albania              |Southern Europe           | 2015|          1.793|             17.10|\n|ARE  |United Arab Emirates |Middle East               | 2010|          1.868|                NA|\n|ARE  |United Arab Emirates |Middle East               | 2015|          1.767|                NA|\n|ARG  |Argentina            |South America             | 2010|          2.370|              7.75|\n|ARG  |Argentina            |South America             | 2015|          2.308|                NA|\n\n</div>\n:::\n\n\nGood work! Time to learn something new!\n\n## INNER JOIN via USING\n\nTheory. Coming soon ...\n\n**1. INNER JOIN via USING**\n\nCongratulations on making it through the first set of exercises on using INNER JOIN to combine two or three tables into one! You'll next learn about the USING keyword in SQL and how it can be used in joins.\n\n**2. The INNER JOIN diagram again**\n\nRecall the INNER JOIN diagram you saw in the last video. Think about the SQL code needed to complete this diagram. Let's check it out. We select and alias three fields and use the left table on the left of the join and the right table on the right of the join matching based on the entries for the id key field.\n\n**3. The INNER JOIN diagram with USING**\n\nWhen the key field you'd like to join on is the same name in both tables, you can use a USING clause instead of the ON clause you have seen so far.Since id is the same name in both the left table and the right table we can specify USING instead of ON here. Note that the parentheses are required around the key field with USING. Let's revisit the example of joining the prime_ministers table\n\n**4. Countries with prime ministers and presidents**\n\nto the presidents table to determine countries with both types of leaders. How could you fill in the blanks to get the result with USING? (Pause for a few seconds)Did you get it? (PAUSE) Ah, I played a bit of a trick on you here. But why does this work? Since an INNER JOIN includes entries in both tables and both tables contain the countries listed, it doesn't matter the order in which we place the tables in the join if we SELECT these columns. You'll be told in the exercises which table to use on the left and on the right to avoid this confusion. Note again the use of the parentheses around country after USING.\n\n**5. Let's practice!**\n\nNow you'll test your understanding of INNER JOINs before we delve into an exercise with USING. Go get 'em!\n\n## Review inner join using on\n\n> *Question*\n> ---\n> Why does the following code result in an error?<br>\n> <br>\n> ⬜ The `languages` table has more rows than the `countries` table.<br>\n> ⬜ There are multiple languages spoken in many countries.<br>\n> ✅ `INNER JOIN` requires a specification of the key field (or fields) in each table.<br>\n> ⬜ Join queries may not be followed by a semi-colon.<br>\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT c.name AS country, l.name AS language\nFROM countries AS c\n  INNER JOIN languages AS l;\n```\n:::\n\n\n## Inner join with using\n\nWhen joining tables with a common field name, e.g.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM countries\n  INNER JOIN economies\n    ON countries.code = economies.code\n```\n:::\n\n\nYou can use `USING` as a shortcut:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM countries\n  INNER JOIN economies\n    USING(code)\n```\n:::\n\n\nYou'll now explore how this can be done with the `countries` and `languages` tables.\n\n**Steps**\n\n1. Inner join `countries` on the left and `languages` on the right with `USING(code)`. \n2. Select the fields corresponding to:\n\n  * country name `AS country`,\n  * continent name,\n  * language name `AS language`, and\n  * whether or not the language is official.\n\nRemember to alias your tables using the first letter of their names.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.name AS country, continent, l.name AS language, official\n  -- From countries (alias as c)\n  FROM countries AS c\n  -- Join to languages (as l)\n  INNER JOIN languages AS l\n    -- Match using code\n    USING(code);\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country     |continent |language    |official |\n|:-----------|:---------|:-----------|:--------|\n|Afghanistan |Asia      |Dari        |TRUE     |\n|Afghanistan |Asia      |Pashto      |TRUE     |\n|Afghanistan |Asia      |Turkic      |FALSE    |\n|Afghanistan |Asia      |Other       |FALSE    |\n|Albania     |Europe    |Albanian    |TRUE     |\n|Albania     |Europe    |Greek       |FALSE    |\n|Albania     |Europe    |Other       |FALSE    |\n|Albania     |Europe    |unspecified |FALSE    |\n|Algeria     |Africa    |Arabic      |TRUE     |\n|Algeria     |Africa    |French      |FALSE    |\n\n</div>\n:::\n\n\nWell done! Another technique to save you some typing!\n\n## Self-ish joins, just in CASE\n\nTheory. Coming soon ...\n\n**1. Self-ish joins, just in CASE**\n\nYou'll now dive into inner joins where a table is joined with itself. Sounds a little selfish, doesn't it? These types of joins, as you may have guessed, are called self joins. You'll also explore how to slice a numerical field into categories using the CASE command. Joining a table to\n\n**2. Join a table to itself?**\n\nitself may seem like a bit of a crazy, strange thing to ever want to do. Self-joins are used to compare values in a field to other values of the same field from within the same table. Let's further explore this with an example. Recall the prime_ministers table from earlier. What if you wanted to create a new table showing countries that are in the same continent matched as pairs? Let's explore a chunk of INNER JOIN code using the prime_ministers table.\n\n**3. Join prime_ministers to itself?**\n\nYou might want to pause the video and think about what the resulting tablewill look like. The country column is selected twice as well as continent. The prime_ministers table is on both the left and the right. The vital step here is setting the key columns by which we match the table to itself. For each country, we will have a match if the country in the \"right table\" (that is also prime_ministers) is in the same continent. Lastly, since the results of this query are more than can fit on the slide, you'll only see the first 14 records. See how we have exactly this in the result! It's a pairing of each country with every other country in its same continent. But do you see a problem here? We don't want to list the country with itself after all. In the next slide, you'll see a way to do this. Pause to think about how to get around this before continuing. We don't want to include rows\n\n**4. Finishing off the self-join on prime_ministers**\n\nwhere the country is the same in the country1 and country2 fields. The AND clause can check that multiple conditions are met. Here a match will not be made between prime_ministers and itself if the countries match.You, thus, have the correct table now; the results here are again limited in order for them to fit on the slide. Notice that self-join doesn't have a syntax quite as simple as INNER JOIN (You can't just write SELF JOIN in SQL code).\n\n**5. CASE WHEN and THEN**\n\nThe next command isn't a join, but is a useful tool in your repertoire. You'll be introduced to using CASE with another table in the leaders database. The states table contains numeric data about different countries in the six inhabited world continents. We'll focus on the field indep_year now. Suppose we'd like to group the year of independence into categories of before 1900, between 1900 and 1930, and after 1930. CASE will get us there! CASE is a way to do multiple if-then-else statements in a simplified way in SQL.\n\n**6. Preparing indep_year_group in states**\n\nYou can now see the basic layout for creating a new field containing the groupings. How might we fill them in? After the first WHEN should specify that we want to check for indep_year being less than 1900. Next we want indep_year_group to contain 'between 1900 and 1930' in the next blank. Lastly any other record not matching these conditions will be assigned the value of 'after 1930' for indep_year_group.\n\n**7. Creating indep_year_group in states**\n\nCheck out the completed query with completed blanks.Notice how the values of indep_year are grouped in indep_year_group. Also observe how continent relates to indep_year_group.\n\n**8. Let's practice!**\n\nYou'll now work on a couple of exercises for practice, then complete a challenge testing your knowledge of the Chapter 1 material.\n\n## Self-join\n\nIn this exercise, you'll use the `populations` table to perform a self-join to calculate the percentage increase in population from 2010 to 2015 for each country code!\n\nSince you'll be joining the `populations` table to itself, you can alias `populations` as `p1` and also `populations` as `p2`. This is good practice whenever you are aliasing and your tables have the same first letter. Note that you are required to alias the tables with self-joins.\n\n**Steps**\n\n1. Join `populations` with itself `ON` `country_code`.\n2. Select the `country_code` from `p1` and the `size` field from both `p1` and `p2`. SQL won't allow same-named fields, so alias `p1.size` as `size2010` and `p2.size` as `size2015`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields with aliases\nSELECT p1.country_code,\n       p1.size AS size2010,\n       p2.size AS size2015\n-- From populations (alias as p1)\nFROM populations AS p1\n  -- Join to itself (alias as p2)\n  INNER JOIN populations AS p2\n    -- Match on country code\n    ON  p1.country_code = p2.country_code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code | size2010| size2015|\n|:------------|--------:|--------:|\n|ABW          |   101597|   101597|\n|ABW          |   101597|   103889|\n|ABW          |   103889|   101597|\n|ABW          |   103889|   103889|\n|AFG          | 27962208| 27962208|\n|AFG          | 27962208| 32526562|\n|AFG          | 32526562| 27962208|\n|AFG          | 32526562| 32526562|\n|AGO          | 21219954| 21219954|\n|AGO          | 21219954| 25021974|\n\n</div>\n:::\n\n\n3. Notice from the result that for each `country_code` you have four entries laying out all combinations of 2010 and 2015.\n4. Extend the `ON` in your query to include only those records where the `p1.year` (2010) matches with `p2.year - 5` (2015 - 5 = 2010). This will omit the three entries per `country_code` that you aren't interested in.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields with aliases\nSELECT p1.country_code,\n       p1.size AS size2010,\n       p2.size AS size2015\n-- From populations (alias as p1)\nFROM populations AS p1\n  -- Join to itself (alias as p2)\n  INNER JOIN populations AS p2\n    -- Match on country code\n    ON p1.country_code = p2.country_code\n        -- and year (with calculation)\n        AND p1.year = p2.year - 5;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code | size2010| size2015|\n|:------------|--------:|--------:|\n|ABW          |   101597|   103889|\n|AFG          | 27962208| 32526562|\n|AGO          | 21219954| 25021974|\n|ALB          |  2913021|  2889167|\n|AND          |    84419|    70473|\n|ARE          |  8329453|  9156963|\n|ARG          | 41222876| 43416756|\n|ARM          |  2963496|  3017712|\n|ASM          |    55636|    55538|\n|ATG          |    87233|    91818|\n\n</div>\n:::\n\n\n5. As you just saw, you can also use SQL to calculate values like `p2.year - 5` for you.  With two fields like `size2010` and `size2015`, you may want to determine the percentage increase from one field to the next:\\nWith two numeric fields \\\\(A\\\\) and \\\\(B\\\\), the percentage growth from \\\\(A\\\\) to \\\\(B\\\\) can be calculated as \\\\((B - A) / A * 100.0\\\\).\\nAdd a new field to `SELECT`, aliased as `growth_perc`, that calculates the percentage population growth from 2010 to 2015 for each country, using `p2.size` and `p1.size`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields with aliases\nSELECT p1.country_code,\n       p1.size AS size2010, \n       p2.size AS size2015,\n       -- Calculate growth_perc\n       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc\n-- From populations (alias as p1)\nFROM populations AS p1\n  -- Join to itself (alias as p2)\n  INNER JOIN populations AS p2\n    -- Match on country code\n    ON p1.country_code = p2.country_code\n        -- and year (with calculation)\n        AND p1.year = p2.year - 5;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code | size2010| size2015| growth_perc|\n|:------------|--------:|--------:|-----------:|\n|ABW          |   101597|   103889|   2.2559721|\n|AFG          | 27962208| 32526562|  16.3232967|\n|AGO          | 21219954| 25021974|  17.9171920|\n|ALB          |  2913021|  2889167|  -0.8188750|\n|AND          |    84419|    70473| -16.5199772|\n|ARE          |  8329453|  9156963|   9.9347457|\n|ARG          | 41222876| 43416756|   5.3219963|\n|ARM          |  2963496|  3017712|   1.8294608|\n|ASM          |    55636|    55538|  -0.1761449|\n|ATG          |    87233|    91818|   5.2560385|\n\n</div>\n:::\n\n\nNice!\n\n## Case when and then\n\nOften it's useful to look at a numerical field not as raw data, but instead as being in different categories or groups.\n\nYou can use `CASE` with `WHEN`, `THEN`, `ELSE`, and `END` to define a new grouping field.\n\n**Steps**\n\n1. Using the `countries` table, create a new field `AS geosize_group` that groups the countries into three groups:\n\n    * If `surface_area` is greater than 2 million, `geosize_group` is `'large'`.\n    * If `surface_area` is greater than 350 thousand but not larger than 2 million, `geosize_group` is `'medium'`.\n    * Otherwise, `geosize_group` is `'small'`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name, continent, code, surface_area,\n    -- First case\n    CASE WHEN surface_area > 2000000 THEN 'large'\n        -- Second case\n        WHEN surface_area > 350000 THEN 'medium'\n        -- Else clause + end\n        ELSE 'small' END\n        -- Alias name\n        AS geosize_group\n-- From table\nFROM countries;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                 |continent     |code | surface_area|geosize_group |\n|:--------------------|:-------------|:----|------------:|:-------------|\n|Afghanistan          |Asia          |AFG  |       652090|medium        |\n|Netherlands          |Europe        |NLD  |        41526|small         |\n|Albania              |Europe        |ALB  |        28748|small         |\n|Algeria              |Africa        |DZA  |      2381740|large         |\n|American Samoa       |Oceania       |ASM  |          199|small         |\n|Andorra              |Europe        |AND  |          468|small         |\n|Angola               |Africa        |AGO  |      1246700|medium        |\n|Antigua and Barbuda  |North America |ATG  |          442|small         |\n|United Arab Emirates |Asia          |ARE  |        83600|small         |\n|Argentina            |South America |ARG  |      2780400|large         |\n\n</div>\n:::\n\n\nWell done! Time for the last exercise of this chapter!\n\n## Inner challenge\n\nThe table you created with the added `geosize_group` field has been loaded for you here with the name `countries_plus`.  Observe the use of (and the placement of) the `INTO` command to create this `countries_plus` table:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name, continent, code, surface_area,\n    CASE WHEN surface_area > 2000000\n            THEN 'large'\n       WHEN surface_area > 350000\n            THEN 'medium'\n       ELSE 'small' END\n       AS geosize_group\nINTO countries_plus\nFROM countries;\n```\n:::\n\n\nYou will now explore the relationship between the size of a country in terms of surface area and in terms of population using grouping fields created with `CASE`.\n\nBy the end of this exercise, you'll be writing two queries back-to-back in a single script. You got this!\n\n**Steps**\n\n1. Using the `populations` table focused only for the `year` 2015, create a new field aliased as `popsize_group` to organize population `size` into\n\n    * `'large'` (> 50 million),\n    * `'medium'` (> 1 million), and\n    * `'small'` groups.\n    \n2. Select only the country code, population size, and this new `popsize_group` as fields.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT country_code, size,\n    -- First case\n    CASE WHEN size > 50000000 THEN 'large'\n        -- Second case\n        WHEN size > 1000000 THEN 'medium'\n        -- Else clause + end\n        ELSE 'small' END\n        -- Alias name (popsize_group)\n        AS popsize_group\n-- From table\nFROM populations\n-- Focus on 2015\nWHERE year = 2015;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code |     size|popsize_group |\n|:------------|--------:|:-------------|\n|ABW          |   103889|small         |\n|AFG          | 32526562|medium        |\n|AGO          | 25021974|medium        |\n|ALB          |  2889167|medium        |\n|AND          |    70473|small         |\n|ARE          |  9156963|medium        |\n|ARG          | 43416756|medium        |\n|ARM          |  3017712|medium        |\n|ASM          |    55538|small         |\n|ATG          |    91818|small         |\n\n</div>\n:::\n\n\n3. Use `INTO` to save the result of the previous query as `pop_plus`. You can see an example of this in the `countries_plus` code in the assignment text. Make sure to include a `;` at the end of your `WHERE` clause!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT country_code, size,\n    CASE WHEN size > 50000000 THEN 'large'\n        WHEN size > 1000000 THEN 'medium'\n        ELSE 'small' END\n        AS popsize_group\n-- Into table\nINTO pop_plus\nFROM populations\nWHERE year = 2015;\n```\n:::\n\n\n4. Then, include another query below your first query to display all the records in `pop_plus` using\\n`SELECT * FROM pop_plus;` so that you generate results and this will display `pop_plus` in the query result.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select all columns of pop_plus\nSELECT * FROM pop_plus;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code |     size|popsize_group |\n|:------------|--------:|:-------------|\n|ABW          |   103889|small         |\n|AFG          | 32526562|medium        |\n|AGO          | 25021974|medium        |\n|ALB          |  2889167|medium        |\n|AND          |    70473|small         |\n|ARE          |  9156963|medium        |\n|ARG          | 43416756|medium        |\n|ARM          |  3017712|medium        |\n|ASM          |    55538|small         |\n|ATG          |    91818|small         |\n\n</div>\n:::\n\n\n5. Write a query to join `countries_plus AS c` on the left with `pop_plus AS p` on the right matching\\non the country code fields.\n6. Sort the data based on `geosize_group`, in ascending order so that `large` appears on top.\n7. Select the `name`, `continent`, `geosize_group`, and `popsize_group` fields.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT name, continent, geosize_group, popsize_group\n-- From countries_plus (alias as c)\nFROM countries_plus AS c\n  -- Join to pop_plus (alias as p)\n  INNER JOIN pop_plus AS p\n    -- Match on country code\n    ON c.code = p.country_code\n-- Order the table    \nORDER BY geosize_group;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                                  |continent     |geosize_group |popsize_group |\n|:-------------------------------------|:-------------|:-------------|:-------------|\n|India                                 |Asia          |large         |large         |\n|United States                         |North America |large         |large         |\n|Saudi Arabia                          |Asia          |large         |medium        |\n|China                                 |Asia          |large         |large         |\n|Kazakhstan                            |Asia          |large         |medium        |\n|Sudan                                 |Africa        |large         |medium        |\n|Argentina                             |South America |large         |medium        |\n|Algeria                               |Africa        |large         |medium        |\n|Congo, The Democratic Republic of the |Africa        |large         |large         |\n|Canada                                |North America |large         |medium        |\n\n</div>\n:::\n\n\nThis concludes chapter 1 and you now know the INs of JOINs. Off to chapter 2 to learn the OUTs!\n\n# 2. Outer joins and cross joins\n\nIn this chapter, you'll come to grips with different kinds of outer joins. You'll learn how to gain further insights into your data through left joins, right joins, and full joins. In addition to outer joins, you'll also work with cross joins.\n\n## LEFT and RIGHT JOINs\n\nTheory. Coming soon ...\n\n**1. LEFT and RIGHT JOINs**\n\nCongratulations on completing Chapter 1 on INNER JOINs. Welcome to Chapter 2 on OUTER JOINs! You can remember outer joins as reaching OUT to another table while keeping all of the records of the original table. Inner joins keep only the records IN both tables. You'll begin this chapter by exploring (1) LEFT JOINs, (2) RIGHT JOINs, and (3) FULL JOINs, which are the three types of OUTER JOINs. Let's begin by exploring how a LEFT JOIN differs from an INNER JOIN via a diagram.\n\n**2. INNER JOIN diagram**\n\nRecall the inner join diagram from Chapter 1. The only records that were included in the resulting table of the INNER JOIN query were those in which the id field had matching values.\n\n**3. LEFT JOIN initial diagram**\n\nIn contrast, a LEFT JOIN notes those records in the left table that do not have a match on the key field in the right table. This is denoted in the diagram by the open circles remaining close to the left table for id values of 2 and 3. These values of 2 and 3 do not appear in the id field of the right table.\n\n**4. LEFT JOIN diagram**\n\nYou now see the result of the LEFT JOIN query. Whereas the INNER JOIN kept just the records corresponding to id values of 1 and 4, a LEFT JOIN keeps all of the original records in the left table but then marks the values as missing in the right table for those that don't have a match. The missing values are marked with dark gray boxes here for clarity. Note that the values of 5 and 6 for id in the right table are not found in the result of LEFT JOIN in any way.\n\n**5. Multiple INNER JOIN diagram**\n\nIt isn't always the case that each key value in the left table corresponds to exactly one record in the key column of the right table. In these examples, we have this layout. Missing entries still occur for ids of 2 and 3 and the value of R3 is brought into the join from right2 since it matches on id 4. Duplicate rows are shown in the LEFT JOIN for id 1 since it has two matches corresponding to the values of R1 and R2 in the right2 table.\n\n**6. The syntax of a LEFT JOIN**\n\nThe syntax of the LEFT JOIN is similar to that of the INNER JOIN. Let's explore the same code you used before to determine the countries with a prime minister and a president, but let's use a LEFT JOIN instead of an INNER JOIN. Further, let's remove continent to save space on the screen. The first four records in this table are the same as those from the INNER JOIN. The last six correspond to the countries that do not have a president and thus their president values are missing.\n\n**7. RIGHT JOIN**\n\nThe RIGHT JOIN is much less common than the LEFT JOIN so we won't spend as much time on it here. The diagram will help you to understand how it works. Instead of matching entries in the id column on the left table TO the id column of the right table, a RIGHT JOIN does the reverse. Therefore, we see open circles on the ids of 5 and 6 in the right table since they are not found in the left table. The resulting table from the RIGHT JOIN shows these missing entries in the L_val field.As you can see in SQL the right table appears after RIGHT JOIN and the left table appears after FROM.\n\n**8. Let's practice!**\n\nI'll see you again soon to introduce FULL JOINs after you complete the next few exercises.\n\n## Left Join\n\nNow you'll explore the differences between performing an inner join and a left join using the `cities` and `countries` tables.\n\nYou'll begin by performing an inner join with the `cities` table on the left and the `countries` table on the right. Remember to alias the name of the city field as `city` and the name of the country field as `country`.\n\nYou will then change the query to a left join. Take note of how many records are in each query here!\n\n**Steps**\n\n1. Fill in the code based on the instructions in the code comments to complete the inner join.  Note how many records are in the result of the join in the query result.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select the city name (with alias), the country code,\n-- the country name (with alias), the region,\n-- and the city proper population\nSELECT c1.name AS city, code, c2.name AS country,\n       region, city_proper_pop\n-- From left table (with alias)\nFROM cities AS c1\n  -- Join to right table (with alias)\n  INNER JOIN countries AS c2\n    -- Match on country code?\n    ON c1.country_code = c2.code\n-- Order based on descending country code\nORDER BY code DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|city             |code |country      |region          | city_proper_pop|\n|:----------------|:----|:------------|:---------------|---------------:|\n|Harare           |ZWE  |Zimbabwe     |Eastern Africa  |         1606000|\n|Lusaka           |ZMB  |Zambia       |Eastern Africa  |         1742979|\n|Cape Town        |ZAF  |South Africa |Southern Africa |         3740026|\n|Johannesburg     |ZAF  |South Africa |Southern Africa |         4434827|\n|Durban           |ZAF  |South Africa |Southern Africa |         3442361|\n|Ekurhuleni       |ZAF  |South Africa |Southern Africa |         3178470|\n|Sana'a           |YEM  |Yemen        |Middle East     |         1937451|\n|Ho Chi Minh City |VNM  |Vietnam      |Southeast Asia  |         7681700|\n|Hanoi            |VNM  |Vietnam      |Southeast Asia  |         6844100|\n|Caracas          |VEN  |Venezuela    |South America   |         1943901|\n\n</div>\n:::\n\n\n2. Change the code to perform a `LEFT JOIN` instead of an `INNER JOIN`. After executing this query, note how many records the query result contains.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT c1.name AS city, code, c2.name AS country,\n       region, city_proper_pop\nFROM cities AS c1\n  -- Join right table (with alias)\n  LEFT JOIN countries AS c2\n    -- Match on country code\n    ON c1.country_code = c2.code\n-- Order by descending country code\nORDER BY code DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|city            |code |country      |region          | city_proper_pop|\n|:---------------|:----|:------------|:---------------|---------------:|\n|Taichung        |NA   |NA           |NA              |         2752413|\n|Tainan          |NA   |NA           |NA              |         1885252|\n|Kaohsiung       |NA   |NA           |NA              |         2778918|\n|Bucharest       |NA   |NA           |NA              |         1883425|\n|Taipei          |NA   |NA           |NA              |         2704974|\n|New Taipei City |NA   |NA           |NA              |         3954929|\n|Harare          |ZWE  |Zimbabwe     |Eastern Africa  |         1606000|\n|Lusaka          |ZMB  |Zambia       |Eastern Africa  |         1742979|\n|Cape Town       |ZAF  |South Africa |Southern Africa |         3740026|\n|Ekurhuleni      |ZAF  |South Africa |Southern Africa |         3178470|\n\n</div>\n:::\n\n\nPerfect! Notice that the `INNER JOIN` version resulted in 230 records. The `LEFT JOIN` version returned 236 rows.\n\n## Left join (2)\n\nNext, you'll try out another example comparing an inner join to its corresponding left join. Before you begin though,\ntake note of how many records are in both the `countries` and `languages` tables below.\n\nYou will begin with an inner join on the `countries` table on the left with the `languages` table on the right. Then you'll change the code to a left join in the next bullet.\n\nNote the use of multi-line comments here using `/*` and `*/`.\n\n**Steps**\n\n1. Perform an inner join and alias the name of the country field as `country` and the name of the language field as `language`.\n2. Sort based on descending country name.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n/*\nSelect country name AS country, the country's local name,\nthe language name AS language, and\nthe percent of the language spoken in the country\n*/\nSELECT c.name AS country, local_name, l.name AS language, percent\n-- From left table (alias as c)\nFROM countries AS c\n  -- Join to right table (alias as l)\n  INNER JOIN languages AS l\n    -- Match on fields\n    ON c.code = l.code\n-- Order by descending country\nORDER BY country DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country  |local_name |language | percent|\n|:--------|:----------|:--------|-------:|\n|Zimbabwe |Zimbabwe   |Shona    |      NA|\n|Zimbabwe |Zimbabwe   |Tonga    |      NA|\n|Zimbabwe |Zimbabwe   |Tswana   |      NA|\n|Zimbabwe |Zimbabwe   |Venda    |      NA|\n|Zimbabwe |Zimbabwe   |Xhosa    |      NA|\n|Zimbabwe |Zimbabwe   |Sotho    |      NA|\n|Zimbabwe |Zimbabwe   |sign     |      NA|\n|Zimbabwe |Zimbabwe   |Shangani |      NA|\n|Zimbabwe |Zimbabwe   |Ndau     |      NA|\n|Zimbabwe |Zimbabwe   |Nambya   |      NA|\n\n</div>\n:::\n\n\n3. Perform a left join instead of an inner join. Observe the result, and also note the change in the number of records in the result.\n4. Carefully review which records appear in the left join result, but not in the inner join result.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n/*\nSelect country name AS country, the country's local name,\nthe language name AS language, and\nthe percent of the language spoken in the country\n*/\nSELECT c.name AS country, local_name, l.name AS language, percent\n-- From left table (alias as c)\nFROM countries AS c\n  -- Join to right table (alias as l)\n  LEFT JOIN languages AS l\n    -- Match on fields\n    ON c.code = l.code\n-- Order by descending country\nORDER BY country DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country  |local_name |language | percent|\n|:--------|:----------|:--------|-------:|\n|Zimbabwe |Zimbabwe   |Chibarwe |      NA|\n|Zimbabwe |Zimbabwe   |Shona    |      NA|\n|Zimbabwe |Zimbabwe   |Ndebele  |      NA|\n|Zimbabwe |Zimbabwe   |English  |      NA|\n|Zimbabwe |Zimbabwe   |Chewa    |      NA|\n|Zimbabwe |Zimbabwe   |Xhosa    |      NA|\n|Zimbabwe |Zimbabwe   |Venda    |      NA|\n|Zimbabwe |Zimbabwe   |Tswana   |      NA|\n|Zimbabwe |Zimbabwe   |Tonga    |      NA|\n|Zimbabwe |Zimbabwe   |Sotho    |      NA|\n\n</div>\n:::\n\n\nPerfect! Notice that the `INNER JOIN` version resulted in 909 records. The `LEFT JOIN` version returned 916 rows.\n\n## Left join (3)\n\nYou'll now revisit the use of the `AVG()` function introduced in our introductory SQL course.\nYou will use it in combination with left join to determine the average gross domestic product (GDP) per capita **by region** in 2010.\n\n**Steps**\n\n1. Begin with a left join with the `countries` table on the left and the `economies` table on the right.\n2. Focus only on records with 2010 as the `year`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select name, region, and gdp_percapita\nSELECT name, region, gdp_percapita\n-- From countries (alias as c)\nFROM countries AS c\n  -- Left join with economies (alias as e)\n  LEFT JOIN economies AS e\n    -- Match on code fields\n    ON c.code = e.code\n-- Focus on 2010\nWHERE year = 2010;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                 |region                    | gdp_percapita|\n|:--------------------|:-------------------------|-------------:|\n|Afghanistan          |Southern and Central Asia |       539.667|\n|Netherlands          |Western Europe            |     50433.310|\n|Albania              |Southern Europe           |      4098.130|\n|Algeria              |Northern Africa           |      4480.720|\n|Angola               |Central Africa            |      3599.270|\n|Antigua and Barbuda  |Caribbean                 |     13531.780|\n|United Arab Emirates |Middle East               |     34628.630|\n|Argentina            |South America             |     10412.950|\n|Armenia              |Middle East               |      3121.780|\n|Australia            |Australia and New Zealand |     56362.840|\n\n</div>\n:::\n\n\n3. Modify your code to calculate the average GDP per capita `AS avg_gdp` for **each region** in 2010.\n4. Select the `region` and `avg_gdp` fields.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT region, AVG(gdp_percapita) AS avg_gdp\n-- From countries (alias as c)\nFROM countries AS c\n  -- Left join with economies (alias as e)\n  LEFT JOIN economies AS e\n    -- Match on code fields\n    ON c.code = e.code\n-- Focus on 2010\nWHERE year = 2010\n-- Group by region\nGROUP BY region;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|region                    |   avg_gdp|\n|:-------------------------|---------:|\n|Australia and New Zealand | 44792.385|\n|Baltic Countries          | 12631.030|\n|British Islands           | 43588.330|\n|Caribbean                 | 11413.339|\n|Central Africa            |  4797.240|\n|Central America           |  4969.970|\n|Eastern Africa            |  1757.348|\n|Eastern Asia              | 26205.851|\n|Eastern Europe            | 10095.457|\n|Melanesia                 |  2532.610|\n\n</div>\n:::\n\n\n5. Arrange this data on average GDP per capita for each region in 2010 from highest to lowest average GDP per capita.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT region, AVG(gdp_percapita) AS avg_gdp\n-- From countries (alias as c)\nFROM countries AS c\n  -- Left join with economies (alias as e)\n  LEFT JOIN economies AS e\n    -- Match on code fields\n    ON c.code = e.code\n-- Focus on 2010\nWHERE year = 2010\n-- Group by region\nGROUP BY region\n-- Order by descending avg_gdp\nORDER BY avg_gdp DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|region                    |  avg_gdp|\n|:-------------------------|--------:|\n|Western Europe            | 58130.96|\n|Nordic Countries          | 57074.00|\n|North America             | 47911.51|\n|Australia and New Zealand | 44792.38|\n|British Islands           | 43588.33|\n|Eastern Asia              | 26205.85|\n|Southern Europe           | 22926.41|\n|Middle East               | 18204.64|\n|Baltic Countries          | 12631.03|\n|Caribbean                 | 11413.34|\n\n</div>\n:::\n\n\nWell done. Notice how gradually you're adding more and more building blocks to your SQL vocabulary. This enables you to answer questions of ever-increasing complexity!\n\n## Right join\n\nRight joins aren't as common as left joins. One reason why is that you can always write a right join\nas a left join.\n\n**Steps**\n\n1. The left join code is commented out here.  Your task is to write a new query using rights joins that produces the same result as what the query using left joins produces. Keep this left joins code commented as you write your own query just below it using right joins to solve the problem.\n\nNote the order of the joins matters in your conversion to using right joins!\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- convert this code to use RIGHT JOINs instead of LEFT JOINs\n/*\nSELECT cities.name AS city, urbanarea_pop, countries.name AS country,\n       indep_year, languages.name AS language, percent\nFROM cities\n  LEFT JOIN countries\n    ON cities.country_code = countries.code\n  LEFT JOIN languages\n    ON countries.code = languages.code\nORDER BY city, language;\n*/\n\nSELECT cities.name AS city, urbanarea_pop, countries.name AS country,\n       indep_year, languages.name AS language, percent\nFROM languages\n  RIGHT JOIN countries\n    ON languages.code = countries.code\n  RIGHT JOIN cities\n    ON countries.code = cities.country_code\nORDER BY city, language;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|city      | urbanarea_pop|country              | indep_year|language | percent|\n|:---------|-------------:|:--------------------|----------:|:--------|-------:|\n|Abidjan   |       4765000|Cote d'Ivoire        |       1960|French   |      NA|\n|Abidjan   |       4765000|Cote d'Ivoire        |       1960|Other    |      NA|\n|Abu Dhabi |       1145000|United Arab Emirates |       1971|Arabic   |      NA|\n|Abu Dhabi |       1145000|United Arab Emirates |       1971|English  |      NA|\n|Abu Dhabi |       1145000|United Arab Emirates |       1971|Hindi    |      NA|\n|Abu Dhabi |       1145000|United Arab Emirates |       1971|Persian  |      NA|\n|Abu Dhabi |       1145000|United Arab Emirates |       1971|Urdu     |      NA|\n|Abuja     |       1235880|Nigeria              |       1960|English  |      NA|\n|Abuja     |       1235880|Nigeria              |       1960|Fulani   |      NA|\n|Abuja     |       1235880|Nigeria              |       1960|Hausa    |      NA|\n\n</div>\n:::\n\n\nCorrect; everything should be reversed!\n\n## FULL JOINs\n\nTheory. Coming soon ...\n\n**1. FULL JOINs**\n\nThe last of the three types of OUTER JOINs is the FULL JOIN. In this video, you'll see the differences between a FULL JOIN and the other joins you've learned about. In particular, the instruction will focus on comparing them to INNER JOINs and LEFT JOINs and then to LEFT JOINs and RIGHT JOINs.Let's first review how the diagram changes between an INNER JOIN and a LEFT JOIN for our basic example using the left and right tables. Then we'll delve into the FULL JOIN diagram and its SQL code.\n\n**2. INNER JOIN vs LEFT JOIN**\n\nRecall that an INNER JOIN keeps only the records that have matching key field values in both tables. A LEFT JOIN keeps all of the records in the left table while bringing in missing values for those key field values that don't appear in the right table. Let's next review the differences between a LEFT JOIN and a RIGHT JOIN.\n\n**3. LEFT JOIN vs RIGHT JOIN**\n\nNow you can see the differences between a LEFT JOIN and a RIGHT JOIN. The id values of 2 and 3 in the left table do not match with the id values in the right table, so missing values are brought in for them in the LEFT JOIN. Likewise for the RIGHT JOIN, missing values are brought in for id values of 5 and 6.\n\n**4. FULL JOIN initial diagram**\n\nA FULL JOIN combines a LEFT JOIN and a RIGHT JOIN as you can see by looking at this diagram. So it will bring in all records from both the left and the right table and keep track of the missing values accordingly.\n\n**5. FULL JOIN diagram**\n\nNote the missing values here and that all six of the values of id are included in the table. You can also see from the SQL code to produce this FULL JOIN result that the general format aligns closely with the SQL syntax you've seen for both an INNER JOIN and a LEFT JOIN. You'll next explore an example from the leaders database.\n\n**6. FULL JOIN example using leaders database**\n\nLet's revisit the example of looking at countries with prime ministers and/or presidents. We'll walk through the code line by line to do this using a FULL JOIN. The SELECT statement starts us off by including the country field from both of our tables of interest and also the prime_minister and president fields.\n\n**7. FULL JOIN example using leaders database**\n\nNext, the left table is specified as prime_ministers. Note that the order matters here and if you switched the two tables you'd get slightly different output.\n\n**8. FULL JOIN example using leaders database**\n\nThe right table is specified as presidents with the alias of p2. prime_ministers was aliased as p1 in the previous line.\n\n**9. FULL JOIN example using leaders database**\n\nLastly, the join is done based on the key field of country in both tables.\n\n**10. FULL JOIN example results using leaders**\n\nTime for some practice!\n\n**11. Let's practice!**\n\n## Full join\n\nIn this exercise, you'll examine how your results differ when using a full join versus using a left join versus using an inner join with the `countries` and `currencies` tables.\n\nYou will focus on the North American `region` and also where the `name` of the country is missing. Dig in to see what we mean!\n\nBegin with a full join with `countries` on the left and `currencies` on the right. The fields of interest have been `SELECT`ed for you throughout this exercise.\n\nThen complete a similar left join and conclude with an inner join.\n\n**Steps**\n\n1. Choose records in which `region` corresponds to North America or is `NULL`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name AS country, code, region, basic_unit\n-- From countries\nFROM countries\n  -- Join to currencies\n  FULL JOIN currencies\n    -- Match on code\n    USING (code)\n-- Where region is North America or null\nWHERE region = 'North America' OR region IS NULL\n-- Order by region\nORDER BY region;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country       |code |region        |basic_unit             |\n|:-------------|:----|:-------------|:----------------------|\n|Canada        |CAN  |North America |Canadian dollar        |\n|United States |USA  |North America |United States dollar   |\n|Bermuda       |BMU  |North America |Bermudian dollar       |\n|Greenland     |GRL  |North America |NA                     |\n|NA            |TMP  |NA            |United States dollar   |\n|NA            |FLK  |NA            |Falkland Islands pound |\n|NA            |AIA  |NA            |East Caribbean dollar  |\n|NA            |NIU  |NA            |New Zealand dollar     |\n|NA            |ROM  |NA            |Romanian leu           |\n|NA            |SHN  |NA            |Saint Helena pound     |\n\n</div>\n:::\n\n\n2. Repeat the same query as before, using a `LEFT JOIN` instead of a `FULL JOIN`. Note what has changed compared to the `FULL JOIN` result!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name AS country, code, region, basic_unit\n-- From countries\nFROM countries\n  -- Join to currencies\n  LEFT JOIN currencies\n    -- Match on code\n    USING (code)\n-- Where region is North America or null\nWHERE region = 'North America' OR region IS NULL\n-- Order by region\nORDER BY region;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 4 records\n\n|country       |code |region        |basic_unit           |\n|:-------------|:----|:-------------|:--------------------|\n|Bermuda       |BMU  |North America |Bermudian dollar     |\n|Canada        |CAN  |North America |Canadian dollar      |\n|United States |USA  |North America |United States dollar |\n|Greenland     |GRL  |North America |NA                   |\n\n</div>\n:::\n\n\n3. Repeat the same query again but use an `INNER JOIN` instead of a `FULL JOIN`.\\nNote what has changed compared to the `FULL JOIN` and `LEFT JOIN` results!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT name AS country, code, region, basic_unit\n-- From countries\nFROM countries\n  -- Join to currencies\n  INNER JOIN currencies\n    -- Match on code\n    USING (code)\n-- Where region is North America or null\nWHERE region = 'North America' OR region IS NULL\n-- Order by region\nORDER BY region;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 3 records\n\n|country       |code |region        |basic_unit           |\n|:-------------|:----|:-------------|:--------------------|\n|Bermuda       |BMU  |North America |Bermudian dollar     |\n|Canada        |CAN  |North America |Canadian dollar      |\n|United States |USA  |North America |United States dollar |\n\n</div>\n:::\n\n\nHave you kept an eye out on the different numbers of records these queries returned? The `FULL JOIN` query returned 18 rows, the `OUTER JOIN` returned 4 rows, and the `INNER JOIN` only returned 3 rows. Do these results make sense to you?\n\n## Full join (2)\n\nYou'll now investigate a similar exercise to the last one, but this time focused on using a table with more records on the left than the right. You'll work with the `languages` and `countries` tables.\n\nBegin with a full join with `languages` on the left and `countries` on the right. Appropriate fields have been selected for you again here.\n\n**Steps**\n\n1. Choose records in which `countries.name` starts with the capital letter `'V'` or is `NULL`. \n2. Arrange by `countries.name` in ascending order to more clearly see the results.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT countries.name, code, languages.name AS language\n-- From languages\nFROM languages\n  -- Join to countries\n  FULL JOIN countries\n    -- Match on code\n    USING (code)\n-- Where countries.name starts with V or is null\nWHERE countries.name LIKE 'V%' OR countries.name IS NULL\n-- Order by ascending countries.name\nORDER BY countries.name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name      |code |language         |\n|:---------|:----|:----------------|\n|Vanuatu   |VUT  |Tribal Languages |\n|Vanuatu   |VUT  |English          |\n|Vanuatu   |VUT  |French           |\n|Vanuatu   |VUT  |Other            |\n|Vanuatu   |VUT  |Bislama          |\n|Venezuela |VEN  |Spanish          |\n|Venezuela |VEN  |indigenous       |\n|Vietnam   |VNM  |Vietnamese       |\n|Vietnam   |VNM  |English          |\n|Vietnam   |VNM  |Other            |\n\n</div>\n:::\n\n\n3. Repeat the same query as before, using a `LEFT JOIN` instead of a `FULL JOIN`. Note what has changed compared to the `FULL JOIN` result!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT countries.name, code, languages.name AS language\n-- From languages\nFROM languages\n  -- Join to countries\n  LEFT JOIN countries\n    -- Match using code\n    USING (code)\n-- Where countries.name starts with V or is null\nWHERE countries.name LIKE 'V%' OR countries.name IS NULL\n-- Order by ascending countries.name\nORDER BY countries.name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name      |code |language         |\n|:---------|:----|:----------------|\n|Vanuatu   |VUT  |English          |\n|Vanuatu   |VUT  |Other            |\n|Vanuatu   |VUT  |French           |\n|Vanuatu   |VUT  |Tribal Languages |\n|Vanuatu   |VUT  |Bislama          |\n|Venezuela |VEN  |indigenous       |\n|Venezuela |VEN  |Spanish          |\n|Vietnam   |VNM  |English          |\n|Vietnam   |VNM  |Vietnamese       |\n|Vietnam   |VNM  |Other            |\n\n</div>\n:::\n\n\n4. Repeat once more, but use an `INNER JOIN` instead of a `LEFT JOIN`. Note what has changed compared to the `FULL JOIN` and `LEFT JOIN` results.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT countries.name, code, languages.name AS language\n-- From languages\nFROM languages\n  -- Join to countries\n  INNER JOIN countries\n  -- Match using code\n    USING (code)\n-- Where countries.name starts with V or is null\nWHERE countries.name LIKE 'V%' OR countries.name IS NULL\n-- Order by ascending countries.name\nORDER BY countries.name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name      |code |language         |\n|:---------|:----|:----------------|\n|Vanuatu   |VUT  |Tribal Languages |\n|Vanuatu   |VUT  |Bislama          |\n|Vanuatu   |VUT  |English          |\n|Vanuatu   |VUT  |French           |\n|Vanuatu   |VUT  |Other            |\n|Venezuela |VEN  |Spanish          |\n|Venezuela |VEN  |indigenous       |\n|Vietnam   |VNM  |Vietnamese       |\n|Vietnam   |VNM  |English          |\n|Vietnam   |VNM  |Other            |\n\n</div>\n:::\n\n\nWell done. Again, make sure to compare the number of records the different types of joins return and try to verify whether the results make sense.\n\n## Full join (3)\n\nYou'll now explore using two consecutive full joins on the three tables you worked with in the previous two exercises.\n\n**Steps**\n\n1. Complete a full join with `countries` on the left and `languages` on the right. \n2. Next, full join this result with `currencies` on the right.\n3. Use `LIKE` to choose the Melanesia and Micronesia regions (Hint: `'M%esia'`).\n4. Select the fields corresponding to the country name `AS country`, region, language name `AS language`, and basic and fractional units of currency.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields (with aliases)\nSELECT c1.name AS country, region, l.name AS language,\n       basic_unit, frac_unit\n-- From countries (alias as c1)\nFROM countries AS c1\n  -- Join with languages (alias as l)\n  FULL JOIN languages AS l\n    -- Match on code\n    USING (code)\n  -- Join with currencies (alias as c2)\n  FULL JOIN currencies AS c2\n    -- Match on code\n    USING (code)\n-- Where region like Melanesia and Micronesia\nWHERE region LIKE 'M%esia';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country          |region     |language    |basic_unit           |frac_unit |\n|:----------------|:----------|:-----------|:--------------------|:---------|\n|Kiribati         |Micronesia |English     |Australian dollar    |Cent      |\n|Kiribati         |Micronesia |Kiribati    |Australian dollar    |Cent      |\n|Marshall Islands |Micronesia |Other       |United States dollar |Cent      |\n|Marshall Islands |Micronesia |Marshallese |United States dollar |Cent      |\n|Nauru            |Micronesia |Other       |Australian dollar    |Cent      |\n|Nauru            |Micronesia |English     |Australian dollar    |Cent      |\n|Nauru            |Micronesia |Nauruan     |Australian dollar    |Cent      |\n|New Caledonia    |Melanesia  |Other       |CFP franc            |Centime   |\n|New Caledonia    |Melanesia  |French      |CFP franc            |Centime   |\n|Palau            |Micronesia |Other       |United States dollar |Cent      |\n\n</div>\n:::\n\n\nWell done! How many countries are in the regions you filtered on?\n\n## Review outer joins\n\nA(n) ___ join is a join combining the results of a ___ join and a ___ join.\n\n> *Question*\n> ---\n> Fill out!<br>\n> <br>\n> ⬜ left, full, right<br>\n> ⬜ right, full, left<br>\n> ⬜ inner, left, right<br>\n> ✅ None of the above are true<br>\n\nCorrect!\n\n## CROSSing the rubicon\n\nTheory. Coming soon ...\n\n**1. CROSSing the Rubicon**\n\nNow that you've worked with INNER JOINs and OUTER JOINs it's time to check out the CROSS JOIN. CROSS JOINs create all possible combinations of two tables. Let's explore the diagram for a CROSS JOIN next.\n\n**2. CROSS JOIN diagram**\n\nIn this diagram we have two tables named table1 and table2. Each table only has one field, both with the name of id. The result of the CROSS JOIN is all nine combinations of the id values of 1, 2, and 3 in table1 with the id values of A, B, and C for table2. Next you'll explore an example from the leaders database and look over the SQL syntax for a CROSS JOIN.\n\n**3. Pairing prime ministers with presidents**\n\nSuppose that all prime ministers in North America and Oceania in the prime_ministers table are scheduled for individual meetings with all presidents in the presidents table. You can look at all of these combinations by using a CROSS JOIN. The syntax here remains similar to what you've seen earlier in the course. We use a WHERE clause to focus on only prime ministers in North America and Oceania in the prime_ministers table. The results of the query give us the pairings for the two prime ministers in North America and Oceania from the prime_ministers table with the seven presidents in the presidents table.\n\n**4. Let's practice!**\n\nYou'll now hop into an exercise focusing on a couple of cities in a tribute to the author Charles Dickens. This chapter closes with a challenge to test your comprehension of the content covered here. Good luck!\n\n## A table of two cities\n\nThis exercise looks to explore languages potentially *and* most frequently spoken in the cities of Hyderabad, India and Hyderabad, Pakistan.\n\n**Steps**\n\n1. Create a `CROSS JOIN` with `cities AS c` on the left and `languages AS l` on the right.\n2. Make use of `LIKE` and `Hyder%` to choose Hyderabad in both countries.\n3. Select only the city name `AS city` and language name `AS language`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.name AS city, l.name AS language\n-- From cities (alias as c)\nFROM cities AS c        \n  -- Join to languages (alias as l)\n  CROSS JOIN languages AS l\n-- Where c.name like Hyderabad\nWHERE c.name LIKE 'Hyder%';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|city              |language |\n|:-----------------|:--------|\n|Hyderabad (India) |Dari     |\n|Hyderabad         |Dari     |\n|Hyderabad (India) |Pashto   |\n|Hyderabad         |Pashto   |\n|Hyderabad (India) |Turkic   |\n|Hyderabad         |Turkic   |\n|Hyderabad (India) |Other    |\n|Hyderabad         |Other    |\n|Hyderabad (India) |Albanian |\n|Hyderabad         |Albanian |\n\n</div>\n:::\n\n\n4. Use an `INNER JOIN` instead of a `CROSS JOIN`. Think about what the difference will be in the results for this `INNER JOIN` result and the one for the `CROSS JOIN`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.name AS city, l.name AS language\n-- From cities (alias as c)\nFROM cities AS c        \n  -- Join to languages (alias as l)\n  INNER JOIN languages AS l\n    -- Match on country code\n    ON c.country_code = l.code\n-- Where c.name like Hyderabad\nWHERE c.name LIKE 'Hyder%';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|city              |language  |\n|:-----------------|:---------|\n|Hyderabad (India) |Hindi     |\n|Hyderabad (India) |Bengali   |\n|Hyderabad (India) |Telugu    |\n|Hyderabad (India) |Marathi   |\n|Hyderabad (India) |Tamil     |\n|Hyderabad (India) |Urdu      |\n|Hyderabad (India) |Gujarati  |\n|Hyderabad (India) |Kannada   |\n|Hyderabad (India) |Malayalam |\n|Hyderabad (India) |Oriya     |\n\n</div>\n:::\n\n\nGood one! Can you see the difference between a `CROSS JOIN` and a `INNER JOIN`?\n\n## Outer challenge\n\nNow that you're fully equipped to use `OUTER JOIN`s, try a challenge problem to test your knowledge!\n\nIn terms of life expectancy for 2010, determine the names of the lowest five countries and their regions.\n\n**Steps**\n\n1. Select country name `AS country`, `region`, and life expectancy `AS life_exp`.\n2. Make sure to use `LEFT JOIN`, `WHERE`, `ORDER BY`, and `LIMIT`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT c.name AS country,\n       region,\n       life_expectancy AS life_exp\n-- From countries (alias as c)\nFROM countries AS c\n  -- Join to populations (alias as p)\n  LEFT JOIN populations AS p\n    -- Match on country code\n    ON c.code = p.country_code\n-- Focus on 2010\nWHERE year = 2010\n-- Order by life_exp\nORDER BY life_exp\n-- Limit to 5 records\nLIMIT 5;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|country                  |region          | life_exp|\n|:------------------------|:---------------|--------:|\n|Lesotho                  |Southern Africa | 47.48341|\n|Central African Republic |Central Africa  | 47.62532|\n|Sierra Leone             |Western Africa  | 48.22895|\n|Swaziland                |Southern Africa | 48.34576|\n|Zimbabwe                 |Eastern Africa  | 49.57466|\n\n</div>\n:::\n\n\nThis was the last exercise of this chapter on outer joins and cross joins. In the next chapter, you'll learn about set theory clauses!\n\n# 3. Set theory clauses\n\nIn this chapter, you'll learn more about set theory using Venn diagrams and get an introduction to union, union all, intersect, and except clauses. You'll finish by investigating semi joins and anti joins, which provide a nice introduction to subqueries.\n\n## State of the UNION\n\nTheory. Coming soon ...\n\n**1. State of the UNION**\n\nWelcome to Chapter 3! You've made it through some challenging material so far. Keep up the great work! Next are set theory clauses. In this video, we'll focus on the operations of UNION and UNION ALL. In addition to joining diagrams, in this chapter, you'll also see how Venn diagrams can be used to represent set operations. Let's begin with these Venn diagrams now.\n\n**2. Set Theory Venn Diagrams**\n\nYou can think of each circle as representing a table of data. The shading represents what is included in the result of the set operation from each table. Beginning in the top left, UNION includes every record in both tables but DOES NOT double count those that are in both tables. UNION ALL includes every record in both tables and DOES replicate those that are in both tables. This is why the center is shaded black. The two diagrams on the bottom represent only subsets of data being selected. INTERSECT results in only those records found in both of the two tables. EXCEPT results in only those records in one table BUT NOT the other. Let's investigate what UNION looks like as a joining diagram.\n\n**3. UNION diagram**\n\nIn this diagram, you have two tables with names left_one and right_one. The \"one\" here corresponds to each table only having one field. If you run a UNION on these two fields you get each record appearing in either table, but notice that the id values of 1 and 4 in right_one are not included again in the UNION since they were already found in the left_one table.\n\n**4. UNION ALL diagram**\n\nBy contrast (with the same two tables left_one and right_one), UNION ALL includes all duplicates in its result. So left_one and right_one both having four records yields eight records for the result of the UNION ALL. If it were the case that right_one had these same four values and also one more value of 1 for id, you'd see three entries for 1 in the resulting UNION ALL. Let's check out the SQL syntax using the leaders database for both UNION and UNION ALL, but first you'll see one more table in the leaders database.\n\n**5. monarchs table**\n\nCheck out the monarchs table in the leaders database that we will use in examples here. The table lists the country, continent, and the name of the monarch for that country. Do some of these names look familiar based on the other tables you've seen? They should! We'll come back to this.\n\n**6. All prime ministers and monarchs**\n\nYou can use UNION on the prime_ministers and monarchs table to show all of the different prime ministers and monarchs in these two tables. The country field is also included here for reference. Note that the prime_minister field has been aliased as leader. In fact, the resulting field from the UNION will have the name of leader. That's an important property of the set theory clauses you will see in this chapter. The fields included in the operation must be of the same data type since they come back as just a single field. You can't stack a number on top of a character field in other words.\n\n**7. Resulting table from UNION**\n\nOur resulting table from the UNION gives all the leaders and their corresponding country.  Does something stand out to you here? (PAUSE)\n\n**8. UNION ALL with leaders**\n\nThe countries of Brunei and Oman were listed only once in the UNION table. These countries have monarchs that also act as prime ministers. This can be seen in the UNION ALL results. You've seen\n\n**9. Let's practice!**\n\nthat UNION and UNION ALL clauses do not do the lookup step that JOINs do. They simply stack records on top of each other from one table to the next.\n\n## Union\n\nYou have two new tables, `economies2010` and `economies2015`, available to you. The `economies` table is also included for reference.\n\n**Steps**\n\n1. Combine the two new tables into one table containing all of the fields in `economies2010`. \n2. Sort this resulting single table by country code and then by year, both in ascending order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields from 2010 table\nSELECT *\n  -- From 2010 table\n  FROM economies2010\n    -- Set theory clause\n    UNION\n-- Select fields from 2015 table\nSELECT *\n  -- From 2015 table\n  FROM economies2015\n-- Order by code and year\nORDER BY code, year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code | year|income_group        | gross_savings|\n|:----|----:|:-------------------|-------------:|\n|AFG  | 2010|Low income          |        37.133|\n|AFG  | 2015|Low income          |        21.466|\n|AGO  | 2010|Upper middle income |        23.534|\n|AGO  | 2015|Upper middle income |        -0.425|\n|ALB  | 2010|Upper middle income |        20.011|\n|ALB  | 2015|Upper middle income |        13.840|\n|ARE  | 2010|High income         |        27.073|\n|ARE  | 2015|High income         |        34.106|\n|ARG  | 2010|Upper middle income |        17.361|\n|ARG  | 2015|Upper middle income |        14.111|\n\n</div>\n:::\n\n\nWhat a beauty!\n\n## Union (2)\n\n`UNION` can also be used to determine all occurrences of a field across multiple tables. Try out this exercise with no starter code.\n\n**Steps**\n\n1. Determine all (non-duplicated) country codes in either the `cities` or the `currencies` table. The result should be a table with only one field called `country_code`.\n2. Sort by `country_code` in alphabetical order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select field\nSELECT country_code\n  -- From cities\n  FROM cities\n  -- Set theory clause\n  UNION\n-- Select field\nSELECT code\n  -- From currencies\n  FROM currencies\n-- Order by country_code\nORDER BY country_code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|country_code |\n|:------------|\n|ABW          |\n|AFG          |\n|AGO          |\n|AIA          |\n|ALB          |\n|AND          |\n|ARE          |\n|ARG          |\n|ARM          |\n|ATG          |\n\n</div>\n:::\n\n\nWell done! Let's take it up a notch!\n\n## Union all\n\nAs you saw, duplicates were removed from the previous two exercises by using `UNION`.  \n\nTo include duplicates, you can use `UNION ALL`.\n\n**Steps**\n\n1. Determine all combinations (include duplicates) of country code and year that exist in either the `economies` or the `populations` tables. Order by `code` then `year`.\n2. The result of the query should only have two columns/fields. Think about how many records this query should result in.  \n3. You'll use code very similar to this in your next exercise after the video. Make note of this code after completing it.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT code, year\n  -- From economies\n  FROM economies\n  -- Set theory clause\n  UNION ALL\n-- Select fields\nSELECT country_code, year\n  -- From populations\n  FROM populations\n-- Order by code, year\nORDER BY code, year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code | year|\n|:----|----:|\n|ABW  | 2010|\n|ABW  | 2015|\n|AFG  | 2010|\n|AFG  | 2010|\n|AFG  | 2015|\n|AFG  | 2015|\n|AGO  | 2010|\n|AGO  | 2010|\n|AGO  | 2015|\n|AGO  | 2015|\n\n</div>\n:::\n\n\nCan you spot some duplicates in the query result?\n\n## INTERSECTional data science\n\nTheory. Coming soon ...\n\n**1. INTERSECTional data science**\n\nYou saw with UNION and UNION ALL via examples that they do not do quite the same thing as what a join does. They only bind fields on top of one another in the two tables. The set theory clause INTERSECT works in a similar fashion to UNION and UNION ALL, but remember from the Venn diagram that INTERSECT only includes those records in common to both tables and fields selected. Let's investigate the diagram for INTERSECT and the corresponding SQL code to achieve it.\n\n**2. INTERSECT diagram and SQL code**\n\nThe result of the INTERSECT on left_one and right_one is only the records in common to both left_one and right_one: 1 and 4. Let's next see how you could use INTERSECT to determine all countries having both a prime minister and a president.\n\n**3. Prime minister and president countries**\n\nThe code for each of these set operations has a similar layout. You first select which fields you'd like to include in your first table, and then you specify the name of the first table. Next you specify the set operation to perform. Lastly, you denote which fields in the second table you'd like to include and then the name of the second table.The result of the query is the four countries with both a prime minister and a president in the leaders database.\n\n**4. INTERSECT on two fields**\n\nNext, let's think about what would happen if we tried to select two columns instead of one from our previous example. The code shown does just that. What will be the result of this query? Will this also give you the names of the countries that have both a prime minister and a president? Hmmm [PAUSE]The actual result is an empty table. Why is that? When INTERSECT looks at two columns it includes both columns in the search. So it didn't find any countries with prime ministers AND presidents having the same name. INTERSECT looks for RECORDS in common, not individual key fields like what a join does to match. This is an important distinction.\n\n**5. Let's practice!**\n\nLet's get some practice!\n\n## Intersect\n\n`UNION ALL` will extract all records from two tables, while `INTERSECT` will only return records that both tables have in common. In this exercise, you will create a similar query as before, however, this time you will look at the records in common for country code and year for the `economies` and `populations` tables.\n\nNote the number of records from the result of this query compared to the similar `UNION ALL` query result of 814 records.\n\n**Steps**\n\n1. Use `INTERSECT` to determine the records in common for country code and year for the `economies` and `populations` tables.\n2. Again, order by `code` and then by `year`, both in ascending order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT code, year\n  -- From economies\n  FROM economies\n  -- Set theory clause\n  INTERSECT\n-- Select fields\nSELECT country_code, year\n  -- From populations\n  FROM populations\n-- Order by code and year\nORDER BY code, year;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code | year|\n|:----|----:|\n|AFG  | 2010|\n|AFG  | 2015|\n|AGO  | 2010|\n|AGO  | 2015|\n|ALB  | 2010|\n|ALB  | 2015|\n|ARE  | 2010|\n|ARE  | 2015|\n|ARG  | 2010|\n|ARG  | 2015|\n\n</div>\n:::\n\n\nBoom!\n\n## Intersect (2)\n\nAs you think about major world cities and their corresponding country, you may ask *which countries also have a city with the same name as their country name?*\n\n**Steps**\n\n1. Use `INTERSECT` to answer this question with `countries` and `cities`!\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT name\n  -- From countries\n  FROM countries\n  -- Set theory clause\n  INTERSECT\n-- Select fields\nSELECT name\n  -- From cities\n  FROM cities;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 2 records\n\n|name      |\n|:---------|\n|Singapore |\n|Hong Kong |\n\n</div>\n:::\n\n\nNice one! It looks as though Singapore is the only country that has a city with the same name!\n\n## Review union and intersect\n\n> *Question*\n> ---\n> Which of the following combinations of terms and definitions is correct?<br>\n> <br>\n> ⬜ `UNION`: returns all records (potentially duplicates) in both tables<br>\n> ⬜ `UNION ALL`: returns only unique records<br>\n> ✅ `INTERSECT`: returns only records appearing in both tables<br>\n> ⬜ None of the above are matched correctly<br>\n\nCorrect!\n\n## EXCEPTional\n\nTheory. Coming soon ...\n\n**1. EXCEPTional**\n\nWay to go! You've made it to the last of the four set theory clauses in this course. EXCEPT allows you to include only the records that are in one table, but not the other. Let's mix things up and look into the SQL code and result first and then dive into the diagram.\n\n**2. Monarchs that aren't prime ministers**\n\nYou saw earlier that there are some monarchs that also act as the prime minister for their country. One way to determine those monarchs in the monarchs table that do not also hold the title of prime minister is to use the EXCEPT clause. [CLICK]This SQL query selects the monarch field from monarchs and then looks for common entries with the prime_ministers field, while also keeping track of the country for each leader. [CLICK] You can see in the resulting query that only the two European monarchs are not also prime ministers in the leaders database.\n\n**3. EXCEPT diagram**\n\nThis diagram gives the structure of EXCEPT clauses. Only the records that appear in the left table BUT DO NOT appear in the right table are included.\n\n**4. Let's practice!**\n\nAfter a couple exercises on using EXCEPT clauses, you'll check out the last two types of joins for the course: semi-joins and anti-joins. I'll see you in the next video for them!\n\n## Except\n\nGet the names of cities in `cities` which are not noted as capital cities in `countries` as a single field result.  \n\nNote that there are some countries in the world that are not included in the `countries` table, which will result in some cities not being labeled as capital cities when in fact they are.\n\n**Steps**\n\n1. Order the resulting field in ascending order. \n2. Can you spot the city/cities that are actually capital cities which this query misses?\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select field\nSELECT name\n  -- From cities\n  FROM cities\n  -- Set theory clause\n  EXCEPT\n-- Select field\nSELECT capital\n  -- From countries\n  FROM countries\n-- Order by result\nORDER BY name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name           |\n|:--------------|\n|Abidjan        |\n|Ahmedabad      |\n|Alexandria     |\n|Almaty         |\n|Auckland       |\n|Bandung        |\n|Barcelona      |\n|Barranquilla   |\n|Basra          |\n|Belo Horizonte |\n\n</div>\n:::\n\n\nEXCEPTional!\n\n## Except (2)\n\nNow you will complete the previous query in reverse!\n\nDetermine the names of capital cities that are **not** listed in the `cities` table.\n\n**Steps**\n\n1. Order by `capital` in ascending order.\n2. The `cities` table contains information about 236 of the world's most populous cities. The result of your query may surprise you in terms of the number of capital cities that **do not** appear in this list!\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select field\nSELECT capital\n  -- From countries\n  FROM countries\n  -- Set theory clause\n  EXCEPT\n-- Select field\nSELECT name\n  -- From cities\n  FROM cities\n-- Order by ascending capital\nORDER BY capital;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|capital          |\n|:----------------|\n|Agana            |\n|Amman            |\n|Amsterdam        |\n|Andorra la Vella |\n|Antananarivo     |\n|Apia             |\n|Ashgabat         |\n|Asmara           |\n|Astana           |\n|Asuncion         |\n\n</div>\n:::\n\n\nWell done. Is this query surprising, as the instructions suggested?\n\n## Semi-joins and Anti-joins\n\nTheory. Coming soon ...\n\n**1. Semi-joins and Anti-joins**\n\nYou'll now close this chapter by returning to joins. The six joins you've worked with so far are all additive joins in that they add columns to the original \"left\" table. Can you name all six? (1. INNER JOIN, 2. self-join, 3. LEFT JOIN, 4. RIGHT JOIN, 5. FULL JOIN, and 6. CROSS JOIN).\n\n**2. Building up to a semi-join**\n\nThe last two joins we will cover use a right table to determine which records to keep in the left table. In other words, you use these last two joins (semi-join and anti-join) in a way similar to a WHERE clause dependent on the values of a second table. Let's try out some examples of semi-joins and anti-joins and then return to the diagrams for each.Suppose that you are interested in determining the presidents of countries that gained independence before 1800. Let's first determine which countries this corresponds to in the states table. Recall from your knowledge of SQL before you knew anything about JOINs how this could be done. To get only the countries meeting this condition you can use the WHERE clause. We'll next set up the other part of the query to get the\n\n**3. Another step towards the semi-join**\n\npresidents we want. What code is needed to retrieve the president, country, and continent columns from the presidents table in that order? [PAUSE]Now we need to use this result with the one in the previous slide to further filter the country field in the presidents table to give us the correct result. Let's see how this might be done next.\n\n**4. Finish the semi-join (an intro to subqueries)**\n\nIn the first query of this example, we determined that Portugal and Spain were both independent before 1800. In the second query, we determined how to display the table in a nice form to answer our question. In order to combine the two tables together we will again use a WHERE clause and then use the first query as the condition to check in the WHERE clause. Check it out!This is your first example of a subquery: a query that sits inside of another query. You'll explore these more in Chapter 4. What does this give as a result? Is it the presidents of Spain and of Portugal? Since Spain does not have a president, it is not included here and only the Portuguese president is listed. The semi-join chooses records in the first table where a condition IS met in a second table. An anti-join chooses records in the first table where a condition IS NOT met in the second table. How might you determine countries in the Americas founded after 1800?\n\n**5. An anti-join**\n\nUsing the code from the previous example, you only need to add a few pieces of code. So what goes in the blanks? [PAUSE]Fill in the WHERE clause by choosing only those continents ending in America and then fill in the other space with a NOT to exclude those countries in the subquery. The presidents of\n\n**6. The result of the anti-join**\n\ncountries in the Americas founded after 1800 are given in the table.\n\n**7. Semi-join and anti-join diagrams**\n\nThe semi-join matches records by key field in the right table with those in the left. It then picks out only the rows in the left table that match that condition. The anti-join picks out those columns in the left table that do not match the condition on the right table. Semi-joins and anti-joins don't have the same built-in SQL syntax that INNER JOIN and LEFT JOIN have. They are useful tools in filtering one table's records on the records of another table.\n\n**8. Let's practice!**\n\nThis chapter's challenge exercise will ask you to combine set theory clauses with semi-joins.  Before you get to that, you'll try out some exercises on semi-joins and anti-joins. See you again in Chapter 4!\n\n## Semi-join\n\nYou are now going to use the concept of a semi-join to identify languages spoken in the Middle East.\n\n**Steps**\n\n1. Begin by selecting all country codes in the Middle East as a single field result using `SELECT`, `FROM`, and `WHERE`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select code\nSELECT code\n  -- From countries\n  FROM countries\n-- Where region is Middle East\nWHERE region = 'Middle East';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code |\n|:----|\n|ARE  |\n|ARM  |\n|AZE  |\n|BHR  |\n|GEO  |\n|IRQ  |\n|ISR  |\n|YEM  |\n|JOR  |\n|KWT  |\n\n</div>\n:::\n\n\n2. Below the commented code, select only unique languages by name appearing in the `languages` table. \n3. Order the resulting single field table by `name` in ascending order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Query from step 1:\n/*\nSELECT code\n  FROM countries\nWHERE region = 'Middle East';\n*/\n\n-- Select field\nSELECT DISTINCT name\n  -- From languages\n  FROM languages\n-- Order by name\nORDER BY name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name            |\n|:---------------|\n|Afar            |\n|Afrikaans       |\n|Akyem           |\n|Albanian        |\n|Alsatian        |\n|Amerindian      |\n|Amharic         |\n|Angolar         |\n|Antiguan creole |\n|Arabic          |\n\n</div>\n:::\n\n\n4. Combine the previous two queries into one query by adding a `WHERE IN` statement to the `SELECT DISTINCT` query to determine the unique languages spoken in the Middle East.\n5. Order the result by `name` in ascending order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Query from step 2\nSELECT DISTINCT name\n  FROM languages\n-- Where in statement\nWHERE code IN\n  -- Query from step 1\n  -- Subquery\n  (SELECT code\n   FROM countries\n   WHERE region = 'Middle East')\n-- Order by name\nORDER BY name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name        |\n|:-----------|\n|Arabic      |\n|Aramaic     |\n|Armenian    |\n|Azerbaijani |\n|Azeri       |\n|Baluchi     |\n|Bulgarian   |\n|Circassian  |\n|English     |\n|Farsi       |\n\n</div>\n:::\n\n\nYour first subquery is a fact! Let's dive a little deeper into the concept.\n\n## Relating semi-join to a tweaked inner join\n\nLet's revisit the code from the previous exercise, which retrieves languages spoken in the Middle East. \n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT DISTINCT name\nFROM languages\nWHERE code IN\n  (SELECT code\n   FROM countries\n   WHERE region = 'Middle East')\nORDER BY name;\n```\n:::\n\n\nSometimes problems solved with semi-joins can also be solved using an inner join.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT languages.name AS language\nFROM languages\nINNER JOIN countries\nON languages.code = countries.code\nWHERE region = 'Middle East'\nORDER BY language;\n```\n:::\n\n\n> *Question*\n> ---\n> This inner join isn't quite right. What is missing from this second code block to get it to match with the correct answer produced by the first block?<br>\n> <br>\n> ⬜ `HAVING` instead of `WHERE`<br>\n> ✅ `DISTINCT`<br>\n> ⬜ `UNIQUE`<br>\n\n## Diagnosing problems using anti-join\n\nAnother powerful join in SQL is the anti-join. It is particularly useful in identifying which records are causing an incorrect number of records to appear in join queries.\n\nYou will also see another example of a subquery here, as you saw in the first exercise on semi-joins. Your goal is to identify the currencies used in Oceanian countries!\n\n**Steps**\n\n1. Begin by determining the number of countries in `countries` that are listed in Oceania using `SELECT`, `FROM`, and `WHERE`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select statement\nSELECT COUNT(*)\n  -- From countries\n  FROM countries\n-- Where continent is Oceania\nWHERE continent = 'Oceania';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n| count|\n|-----:|\n|    19|\n\n</div>\n:::\n\n\n2. Complete an inner join with `countries AS c1` on the left and `currencies AS c2` on the right to get the different currencies used in the countries of Oceania.\n3. Match `ON` the `code` field in the two tables.\n4. Include the country `code`, country `name`, and `basic_unit AS currency`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields (with aliases)\nSELECT c1.code, name, basic_unit AS currency\n  -- From countries (alias as c1)\n  FROM countries AS c1\n    -- Join with currencies (alias as c2)\n    INNER JOIN currencies AS c2\n    -- Match on code\n    ON c1.code = c2.code\n-- Where continent is Oceania\nWHERE c1.continent = 'Oceania';\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code |name             |currency               |\n|:----|:----------------|:----------------------|\n|AUS  |Australia        |Australian dollar      |\n|PYF  |French Polynesia |CFP franc              |\n|KIR  |Kiribati         |Australian dollar      |\n|MHL  |Marshall Islands |United States dollar   |\n|NRU  |Nauru            |Australian dollar      |\n|NCL  |New Caledonia    |CFP franc              |\n|NZL  |New Zealand      |New Zealand dollar     |\n|PLW  |Palau            |United States dollar   |\n|PNG  |Papua New Guinea |Papua New Guinean kina |\n|WSM  |Samoa            |Samoan tala            |\n\n</div>\n:::\n\n\n5. Note that not all countries in Oceania were listed in the resulting inner join with `currencies`. Use an anti-join to determine which countries were not included!\n\n    * Use `NOT IN` and `(SELECT code FROM currencies)` as a subquery to get the country code and country name for the Oceanian countries that are not included in the `currencies` table.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT code, name\n  -- From Countries\n  FROM countries\n  -- Where continent is Oceania\n  WHERE continent = 'Oceania'\n    -- And code not in\n    AND code NOT IN\n    -- Subquery\n    (SELECT code\n     FROM currencies);\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|code |name                            |\n|:----|:-------------------------------|\n|ASM  |American Samoa                  |\n|FJI  |Fiji Islands                    |\n|GUM  |Guam                            |\n|FSM  |Micronesia, Federated States of |\n|MNP  |Northern Mariana Islands        |\n\n</div>\n:::\n\n\nNice! Can you tell which countries were not included now?\n\n## Set theory challenge\n\nCongratulations!  You've now made your way to the challenge problem for this third chapter. Your task here will be to incorporate two of `UNION`/`UNION ALL`/`INTERSECT`/`EXCEPT` to solve a challenge involving three tables.\n\nIn addition, you will use a subquery as you have in the last two exercises!  This will be great practice as you hop into subqueries more in Chapter 4!\n\n**Steps**\n\n1. Identify the country codes that are included in either `economies` or `currencies` but not in `populations`.\n2. Use that result to determine the names of cities in the countries that match the specification in the previous instruction.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select the city name\nSELECT name\n  -- Alias the table where city name resides\n  FROM cities AS c1\n  -- Choose only records matching the result of multiple set theory clauses\n  WHERE country_code IN\n(\n    -- Select appropriate field from economies AS e\n    SELECT e.code\n    FROM economies AS e\n    -- Get all additional (unique) values of the field from currencies AS c2   \n    UNION\n    SELECT c2.code\n    FROM currencies AS c2\n    -- Exclude those appearing in populations AS p  \n    EXCEPT\n    SELECT p.country_code\n    FROM populations AS p\n);\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n|name            |\n|:---------------|\n|Bucharest       |\n|Kaohsiung       |\n|New Taipei City |\n|Taichung        |\n|Tainan          |\n|Taipei          |\n\n</div>\n:::\n\n\nSuccess! Head over to the final chapter of this course to feel the power of subqueries at your fingertips!\n\n# 4. Subqueries\n\nIn this closing chapter, you'll learn how to use nested queries and you'll use what you’ve learned in this course to solve three challenge problems.\n\n## Subqueries inside WHERE and SELECT clauses\n\nTheory. Coming soon ...\n\n**1. Subqueries inside WHERE and SELECT clauses**\n\nYou've made it all the way to the last chapter of this course. Congratulations and keep up the excellent work. This last chapter is focused on embedding queries inside of queries. These are called nested queries and also known as subqueries as you saw in Chapter 3. The most common type of subquery is one inside of a WHERE statement. Let's check out another one of these now with a little bit of setting up to do first, of course.\n\n**2. Subquery inside WHERE clause set-up**\n\nYou've seen many examples of using a subquery inside a WHERE clause already with the semi-join and anti-join examples and exercises you just completed. With the WHERE clause being the most common place for a subquery to be found, it's important that you see just one more example of doing so. With this being the final chapter, it's time to unveil the remaining fields in the states table. Note that the continent field is not shown to display all the fields here.The fert_rate field gives an estimate for the average number of babies born per woman in each country. The women_parli_perc field gives the percentage of women in the elected federal parliament for each country. Across these 13 countries, how would you determine the average fertility rate?\n\n**3. Average fert_rate**\n\nWe will use the average fertility rate as part of a subquery. Recall how this is done. The average babies born to women across these countries is 2-point-28 children.\n\n**4. Asian countries below average `fert_rate`**\n\nLet's use the previous slide's query as a subquery to determine Asian countries that fall under this average. You'll see the code in a couple steps. First we select the country name and the fertility rate for Asian countries.\n\n**5. Asian countries below average `fert_rate`**\n\nNext, we want to choose records where fert_rate is smaller than What comes next?\n\n**6. Asian countries below average `fert_rate`**\n\nThe subquery is to get the average fertility rate! And now we can check out our result to make sure it makes sense.\n\n**7. Asian countries below average `fert_rate`**\n\nIt appears so. These are the two Asian countries we were looking for with fertility rates below 2-point-28 babies per woman.\n\n**8. Subqueries inside SELECT clauses - setup**\n\nThe second most common type of a subquery is inside of a SELECT clause. The task here is to count the number of countries listed in the states table for each continent in the prime_ministers table. Let's again take the stepwise approach to setting up the problem. What does this code do? [PAUSE] It gives each of the five continents in the prime_ministers table. Let's keep building our answer in the next slide.\n\n**9. Subquery inside SELECT clause - complete**\n\nNext is determining the counts of the number of countries in states for each of the continents in the last slide. Combining a COUNT clause with a WHERE statement matching the continent fields in the two tables gets us there. Let's check out the code and then discuss a bit further. The subquery involving states also can reference the prime_ministers table in the main query. Any time you do a subquery inside a SELECT statement like this, you need to give the subquery an alias like countries_num here. Please pause the video here and carefully review this code. The result of this query comes next. [PAUSE] It's kinda like magic that this works, huh?! If you haven't discovered it already, there are often many different ways to solve problems with SQL queries. You could use a carefully constructed JOIN to achieve this same result, for example.\n\n**10. Let's practice!**\n\nTest out your subquery expertise with a few exercises. I'll see you back soon in the subqueries inside FROM clauses video!\n\n## Subquery inside where\n\nYou'll now try to figure out which countries had high average life expectancies (at the country level) in 2015.\n\n**Steps**\n\n1. Begin by calculating the average life expectancy across all countries for 2015.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select average life_expectancy\nSELECT AVG(life_expectancy)\n  -- From populations\n  FROM populations\n-- Where year is 2015\nWHERE year = 2015;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 1 records\n\n|      avg|\n|--------:|\n| 71.67634|\n\n</div>\n:::\n\n\n2. Recall that you can use SQL to do calculations for you.  Suppose we wanted only records that were above\\n`1.15 * 100` in terms of life expectancy for 2015:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\n  FROM populations\nWHERE life_expectancy > 1.15 * 100\n  AND year = 2015;\n```\n:::\n\n\nSelect all fields from `populations` with records corresponding to larger than 1.15 times\\nthe average you calculated in the first task for 2015. In other words, change the `100` in the example above with a subquery.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT *\n  -- From populations\n  FROM populations\n-- Where life_expectancy is greater than\nWHERE life_expectancy >\n  -- 1.15 * subquery\n  1.15 * (SELECT AVG(life_expectancy)\n   FROM populations\n   WHERE year = 2015) AND\n  year = 2015;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n| pop_id|country_code | year| fertility_rate| life_expectancy|      size|\n|------:|:------------|----:|--------------:|---------------:|---------:|\n|     21|AUS          | 2015|          1.833|        82.45122|  23789752|\n|    376|CHE          | 2015|          1.540|        83.19756|   8281430|\n|    356|ESP          | 2015|          1.320|        83.38049|  46443992|\n|    134|FRA          | 2015|          2.010|        82.67073|  66538392|\n|    170|HKG          | 2015|          1.195|        84.27805|   7305700|\n|    174|ISL          | 2015|          1.930|        82.86098|    330815|\n|    190|ITA          | 2015|          1.370|        83.49024|  60730584|\n|    194|JPN          | 2015|          1.460|        83.84366| 126958470|\n|    340|SGP          | 2015|          1.240|        82.59512|   5535002|\n|    374|SWE          | 2015|          1.880|        82.55122|   9799186|\n\n</div>\n:::\n\n\nGood work! Let's see how you do on a more high-level question in one go.\n\n## Subquery inside where (2)\n\nUse your knowledge of subqueries in `WHERE` to get the urban area population for only capital cities.\n\n**Steps**\n\n1. Make use of the `capital` field in the `countries` table in your subquery.\n2. Select the city name, country code, and urban area population fields.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT name, country_code, urbanarea_pop\n  -- From cities\n  FROM cities\n-- Where city name in the field of capital cities\nWHERE name IN\n  -- Subquery\n  (SELECT capital\n   FROM countries)\nORDER BY urbanarea_pop DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name        |country_code | urbanarea_pop|\n|:-----------|:------------|-------------:|\n|Beijing     |CHN          |      21516000|\n|Dhaka       |BGD          |      14543124|\n|Tokyo       |JPN          |      13513734|\n|Moscow      |RUS          |      12197596|\n|Cairo       |EGY          |      10230350|\n|Kinshasa    |COD          |      10130000|\n|Jakarta     |IDN          |      10075310|\n|Seoul       |KOR          |       9995784|\n|Mexico City |MEX          |       8974724|\n|Lima        |PER          |       8852000|\n\n</div>\n:::\n\n\nAlright. You've got some practice on subqueries inside `WHERE` now. Time to see how you do when these subqueries are in the `SELECT` statement!\n\n## Subquery inside select\n\nIn this exercise, you'll see how some queries can be written using either a join or a subquery.\n\nYou have seen previously how to use `GROUP BY` with aggregate functions and an inner join to get summarized information from multiple tables. \n\nThe code given in the first query selects the top nine countries in terms of number of cities appearing in the `cities` table. Recall that this corresponds to the most populous cities in the world. Your task will be to convert the second query to get the same result as the provided code.\n\n**Steps**\n\n1. Submit the code to view the result of the provided query.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT countries.name AS country, COUNT(*) AS cities_num\n  FROM cities\n    INNER JOIN countries\n    ON countries.code = cities.country_code\nGROUP BY country\nORDER BY cities_num DESC, country\nLIMIT 9;\n\n/* \nSELECT ___ AS ___,\n  (SELECT ___\n   FROM ___\n   WHERE countries.code = cities.country_code) AS cities_num\nFROM ___\nORDER BY ___ ___, ___\nLIMIT 9;\n*/\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|country            | cities_num|\n|:------------------|----------:|\n|China              |         36|\n|India              |         18|\n|Japan              |         11|\n|Brazil             |         10|\n|Pakistan           |          9|\n|United States      |          9|\n|Indonesia          |          7|\n|Russian Federation |          7|\n|South Korea        |          7|\n\n</div>\n:::\n\n\n2. Convert the `GROUP BY` code to use a subquery inside of `SELECT` by filling in the blanks to get a result that matches the one given using the `GROUP BY` code in the first query.\n3. Again, sort the result by `cities_num` descending and then by `country` ascending.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n/*\nSELECT countries.name AS country, COUNT(*) AS cities_num\n  FROM cities\n    INNER JOIN countries\n    ON countries.code = cities.country_code\nGROUP BY country\nORDER BY cities_num DESC, country\nLIMIT 9;\n*/\n\nSELECT countries.name AS country,\n  -- Subquery\n  (SELECT COUNT(*)\n   FROM cities\n   WHERE countries.code = cities.country_code) AS cities_num\nFROM countries\nORDER BY cities_num DESC, country\nLIMIT 9;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 9 records\n\n|country            | cities_num|\n|:------------------|----------:|\n|China              |         36|\n|India              |         18|\n|Japan              |         11|\n|Brazil             |         10|\n|Pakistan           |          9|\n|United States      |          9|\n|Indonesia          |          7|\n|Russian Federation |          7|\n|South Korea        |          7|\n\n</div>\n:::\n\n\nGreat! The next video will introduce you to using subqueries in the `FROM` clause. Exciting stuff!\n\n## Subquery inside FROM clause\n\nTheory. Coming soon ...\n\n**1. Subquery inside the FROM clause**\n\nThe last basic type of a subquery exists inside of a FROM clause. A motivating example pertaining to the percentage of women in parliament will be used now to help you understand this style of subquery. Let's dig in!\n\n**2. Build-up**\n\nFirst, let's determine the maximum percentage of women in parliament for each continent listed in states. Recall that this query will only work if you include continent as one of the fields in the SELECT clause since we are grouping based on that field. Let's check out the result. We see that Europe has the largest value and North America has the smallest value for the countries listed in the states table.\n\n**3. Focusing on records in monarchs**\n\nWhat if you weren't interested in all continents, but specifically those in the monarchs table. You haven't seen this yet in the course but you can include multiple tables in a FROM clause by adding a comma between them. Let's investigate a way to get the continents only in monarchs using this new trick. We have at least part of our answer here, but how do we get rid of those duplicate entries? And what about the maximum column?\n\n**4. Finishing off the subquery**\n\nTo get Asia and Europe to appear only once, use the DISTINCT command in your SELECT statement. But now how do you get that maximum column to also come along with Asia and Europe? Instead of including states in the FROM clause, include the subquery instead and alias it with a name like subquery. There you have it! That's how to include a subquery as a temporary table in your FROM clause.\n\n**5. Let's practice!**\n\nYou are very close to the end of the course. Awesome work on making it this far! The last remaining exercises are designed to really test your understanding of the material. You may be a bit frustrated but stick with it and you'll take the knowledge gained in these problems with you as you continue to develop your SQL skills. See you in a bit for the course review video!\n\n## Subquery inside from\n\nThe last type of subquery you will work with is one inside of `FROM`.\n\nYou will use this to determine the number of languages spoken for each country, identified by\nthe country's local name!  (Note this may be different than the `name` field and is stored in the `local_name` field.)\n\n**Steps**\n\n1. Begin by determining for each country code how many languages are listed in the\\n`languages` table using `SELECT`, `FROM`, and `GROUP BY`. \n2. Alias the aggregated field as `lang_num`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields (with aliases)\nSELECT code, COUNT(*) AS lang_num\n  -- From languages\n  FROM languages\n-- Group by code\nGROUP BY code;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code | lang_num|\n|:----|--------:|\n|PRY  |        2|\n|NRU  |        3|\n|MDG  |        3|\n|ASM  |        5|\n|TZA  |        4|\n|PLW  |        6|\n|NLD  |        1|\n|VEN  |        2|\n|BMU  |        2|\n|MSR  |        1|\n\n</div>\n:::\n\n\n3. Include the previous query (aliased as `subquery`) as a subquery in the `FROM` clause of a new query.\n4. Select the local name of the country from `countries`.\n5. Also, select `lang_num` from `subquery`.\n6. Make sure to use `WHERE` appropriately to match `code` in `countries` and in `subquery`.\n7. Sort by `lang_num` in descending order.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT local_name, subquery.lang_num\n  FROM countries,\n    (SELECT code, COUNT(*) AS lang_num\n     FROM languages\n     GROUP BY code) AS subquery\n  WHERE countries.code = subquery.code\nORDER BY lang_num DESC;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|local_name   | lang_num|\n|:------------|--------:|\n|Zambia       |       19|\n|YeItyop´iya  |       16|\n|Zimbabwe     |       16|\n|Bharat/India |       14|\n|Nepal        |       14|\n|Mali         |       13|\n|France       |       13|\n|South Africa |       13|\n|Malawi       |       12|\n|Angola       |       12|\n\n</div>\n:::\n\n\nThis one wasn't easy!\n\n## Advanced subquery\n\nYou can also nest multiple subqueries to answer even more specific questions.\n\nIn this exercise, for each of the six continents listed in 2015, you'll identify which country had the maximum inflation rate, and how high it was, using multiple subqueries. The table result of your final query\nshould look something like the following, where anything between `<` `>` will be filled in with appropriate values:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n+------------+---------------+-------------------+\n| name       | continent     | inflation_rate    |\n|------------+---------------+-------------------|\n| <country1> | North America | <max_inflation1>  |\n| <country2> | Africa        | <max_inflation2>  |\n| <country3> | Oceania       | <max_inflation3>  |\n| <country4> | Europe        | <max_inflation4>  |\n| <country5> | South America | <max_inflation5>  |\n| <country6> | Asia          | <max_inflation6>  |\n+------------+---------------+-------------------+\n```\n:::\n\n\nAgain, there are multiple ways to get to this solution using only joins, but the focus here is on showing you an introduction into advanced subqueries.\n\n**Steps**\n\n1. Create an `INNER JOIN` with `countries` on the left and `economies` on the right with `USING`, without aliasing your tables or columns.\n2. Retrieve the country's name, continent, and inflation rate for 2015.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT name, continent, inflation_rate\n  -- From countries\n  FROM countries\n    -- Join to economies\n    INNER JOIN economies\n    -- Match on code\n    USING (code)\n-- Where year is 2015\nWHERE year = 2015;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name                 |continent     | inflation_rate|\n|:--------------------|:-------------|--------------:|\n|Afghanistan          |Asia          |         -1.549|\n|Netherlands          |Europe        |          0.220|\n|Albania              |Europe        |          1.896|\n|Algeria              |Africa        |          4.784|\n|Angola               |Africa        |         10.287|\n|Antigua and Barbuda  |North America |          0.969|\n|United Arab Emirates |Asia          |          4.070|\n|Argentina            |South America |             NA|\n|Armenia              |Asia          |          3.731|\n|Australia            |Oceania       |          1.461|\n\n</div>\n:::\n\n\n3. Select the maximum inflation rate in 2015 `AS max_inf` grouped by continent using the previous step's query as a subquery in the `FROM` clause. \n\n* Thus, in your subquery you should:\n\n    * Create an inner join with `countries` on the left and `economies` on the right with `USING` (without aliasing your tables or columns).\n    * Retrieve the country name, continent, and inflation rate for 2015.\n    * Alias the subquery as `subquery`.\n    \n4. This will result in the six maximum inflation rates in 2015 for the six continents as one field table. Make sure to not include `continent` in the outer `SELECT` statement.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select the maximum inflation rate as max_inf\nSELECT MAX(inflation_rate) AS max_inf\n  -- Subquery using FROM (alias as subquery)\n  FROM (\n      SELECT name, continent, inflation_rate\n      FROM countries\n      INNER JOIN economies\n      USING (code)\n      WHERE year = 2015) AS subquery\n-- Group by continent\nGROUP BY continent;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n| max_inf|\n|-------:|\n|  21.858|\n|  39.403|\n|  48.684|\n|   7.524|\n|   9.784|\n| 121.738|\n\n</div>\n:::\n\n\n5. Now it's time to append your second query to your first query using `AND` and `IN` to obtain the name of the country, its continent, and the maximum inflation rate for each continent in 2015. \n6. For the sake of practice, change all joining conditions to use `ON` instead of `USING`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT name, continent, inflation_rate\n  -- From countries\n  FROM countries\n  -- Join to economies\n  INNER JOIN economies\n  -- Match on code\n  ON countries.code = economies.code\n  -- Where year is 2015\n  WHERE year = 2015\n    -- And inflation rate in subquery (alias as subquery)\n    AND inflation_rate IN (\n        SELECT MAX(inflation_rate) AS max_inf\n        FROM (\n             SELECT name, continent, inflation_rate\n             FROM countries\n             INNER JOIN economies\n             ON countries.code = economies.code\n             WHERE year = 2015) AS subquery\n      -- Group by continent\n        GROUP BY continent);\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 6 records\n\n|name      |continent     | inflation_rate|\n|:---------|:-------------|--------------:|\n|Haiti     |North America |          7.524|\n|Malawi    |Africa        |         21.858|\n|Nauru     |Oceania       |          9.784|\n|Ukraine   |Europe        |         48.684|\n|Venezuela |South America |        121.738|\n|Yemen     |Asia          |         39.403|\n\n</div>\n:::\n\n\nWow! Well done! This code works since each of the six maximum inflation rate values occur only once in the 2015 data. Think about whether this particular code involving subqueries would work in cases where there are ties for the maximum inflation rate values.\n\n## Subquery challenge\n\nLet's test your understanding of the subqueries with a challenge problem!  Use a subquery to get 2015 economic data for countries that do **not** have \n\n* `gov_form` of `'Constitutional Monarchy'` or \n* `'Republic'` in their `gov_form`.\nHere, `gov_form` stands for the form of the government for each country.  Review the different entries for `gov_form` in the `countries` table.\n\n**Steps**\n\n1. Select the country code, inflation rate, and unemployment rate.\n2. Order by inflation rate ascending. \n3. Do not use table aliasing in this exercise.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT code, inflation_rate, unemployment_rate\n  -- From economies\n  FROM economies\n  -- Where year is 2015 and code is not in\n  WHERE year = 2015 AND code NOT IN\n    -- Subquery\n    (SELECT code\n     FROM countries\n     WHERE (gov_form = 'Constitutional Monarchy' OR gov_form LIKE '%Republic%'))\n-- Order by inflation rate\nORDER BY inflation_rate;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|code | inflation_rate| unemployment_rate|\n|:----|--------------:|-----------------:|\n|AFG  |         -1.549|                NA|\n|CHE  |         -1.140|             3.178|\n|PRI  |         -0.751|            12.000|\n|ROU  |         -0.596|             6.812|\n|BRN  |         -0.423|             6.900|\n|TON  |         -0.283|                NA|\n|OMN  |          0.065|                NA|\n|TLS  |          0.553|                NA|\n|BEL  |          0.620|             8.492|\n|CAN  |          1.132|             6.900|\n\n</div>\n:::\n\n\nSuperb! Let's review subqueries before you head off to the last video of this course!\n\n## Subquery review\n\n> *Question*\n> ---\n> Within which SQL clause are subqueries most frequently found?<br>\n> <br>\n> ✅ WHERE<br>\n> ⬜ FROM<br>\n> ⬜ SELECT<br>\n> ⬜ IN<br>\n\nCorrect!\n\n## Course review\n\nTheory. Coming soon ...\n\n\n**1. Course Review**\n\nOnly the challenge problems remain! Way to go! You're on your way to being a SQL query warrior using PostgreSQL! Before you tackle the three challenge problems, let's review the main topics covered throughout the course.\n\n**2. Types of joins**\n\nIn SQL, a join combines columns from one or more tables in a relational database via a lookup process.There are four different types of joins you learned about in this course. First, an INNER JOIN is also denoted as just JOIN in SQL. A special case of an INNER JOIN you explored is called a self-join.Second, there are three OUTER JOINs denoted as LEFT JOIN (or LEFT OUTER JOIN), RIGHT JOIN (or RIGHT OUTER JOIN), and FULL JOIN (or FULL OUTER JOIN).Third, you worked with CROSS JOINs to create all possible combinations between two tables. Lastly, you investigated semi-joins and anti-joins. Remember that words appearing in ALL capital letters correspond to the joins having simple SQL syntax. Self-joins, semi-joins, and anti-joins don't have built-in SQL syntax.\n\n**3. INNER JOIN vs LEFT JOIN**\n\nAn INNER JOIN keeps only the records in which the key field (or fields) is in both tables. A LEFT JOIN keeps all the records in fields specified in the left table and includes the matches in the right table based on the key field or fields. Key field values that don't match in the right table are included as missing data in the resulting table of a LEFT JOIN.\n\n**4. RIGHT JOIN vs FULL JOIN**\n\nA RIGHT JOIN keeps all the records specified in the right table and includes the matches from the key field (or fields) in the left table. Those that don't match are included as missing values in the resulting table from the RIGHT JOIN query. A FULL JOIN is a combination of a LEFT JOIN and a RIGHT JOIN showing exactly which values appear in both tables and those that appear in only one or the other table.\n\n**5. CROSS JOIN with code**\n\nA CROSS JOIN matches all records from fields specified in one table with all records from fields specified in another table. Remember that a CROSS JOIN does not have an ON or USING clause, but otherwise looks very similar to the code for an INNER JOIN, LEFT JOIN, RIGHT JOIN, or FULL JOIN.\n\n**6. Set Theory Clauses**\n\nRecall that UNION includes every record in both tables but DOES NOT double count those that are in both tables whereas UNION ALL DOES replicate those that are in both tables. INTERSECT gives only those records found in both of the two tables. EXCEPT gives only those records in one table BUT NOT the other.\n\n**7. Semi-joins and Anti-joins**\n\nWhen you'd like to filter your first table based on conditions set on a second table, you should use a semi-join to accomplish your task. If instead you'd like to filter your first table based on conditions NOT being met on a second table, you should use an anti-join. Anti-joins are particularly useful in diagnosing problems with other joins in terms of getting fewer or more records than you expected.\n\n**8. Types of basic subqueries**\n\nThe most common type of subquery is done inside of a WHERE clause. The next most frequent types of subqueries are inside SELECT clauses and inside FROM clauses. As you'll see in the challenge exercises, subqueries can also find their way into the ON statement of a join in ways similar to what you've seen inside WHERE clauses too.\n\n**9. Own the challenge problems!  You got this!**\n\nWell, you are only three exercises away from mastering the content in this course. You are a true SQL ninja. Now take down these last three problems using all the skills you've built up in this course!\n\n## Final challenge\n\nWelcome to the end of the course! The next three exercises will test your knowledge of the content covered in this course and apply many of the ideas you've seen to difficult problems. Good luck!\n\nRead carefully over the instructions and solve them step-by-step, thinking about how the different clauses work together.\n\nIn this exercise, you'll need to get the country names and other 2015 data in the `economies` table and the `countries` table for **Central American countries with an official language**.\n\n**Steps**\n\n1. Select unique country names. Also select the total investment and imports fields.\n2. Use a left join with `countries` on the left. (An inner join would also work, but please use a left join here.)\n3. Match on `code` in the two tables `AND` use a subquery inside of `ON` to choose the appropriate `languages` records.\n4. Order by country name ascending. \n5. Use table aliasing but **not** field aliasing in this exercise.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT DISTINCT name, total_investment, imports\n  -- From table (with alias)\n  FROM countries AS c\n    -- Join with table (with alias)\n    LEFT JOIN economies AS e\n      -- Match on code\n      ON (c.code = e.code\n        -- and code in Subquery\n        AND c.code IN (\n          SELECT l.code\n          FROM languages AS l\n          WHERE official = 'true'\n        ) )\n  -- Where region and year are correct\n  WHERE region = 'Central America' AND year = 2015\n-- Order by field\nORDER BY name;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 7 records\n\n|name        | total_investment| imports|\n|:-----------|----------------:|-------:|\n|Belize      |           22.014|   6.743|\n|Costa Rica  |           20.218|   4.629|\n|El Salvador |           13.983|   8.193|\n|Guatemala   |           13.433|  15.124|\n|Honduras    |           24.633|   9.353|\n|Nicaragua   |           31.862|  11.665|\n|Panama      |           46.557|   5.898|\n\n</div>\n:::\n\n\nOne down, two to go!\n\n## Final challenge (2)\n\nWhoofta! That was challenging, huh?\n\nLet's ease up a bit and calculate the average fertility rate for each region in 2015.\n\n**Steps**\n\n1. Include the name of region, its continent, and average fertility rate aliased as `avg_fert_rate`. \n2. Sort based on `avg_fert_rate` ascending.\n3. Remember that you'll need to `GROUP BY` all fields that aren't included in the aggregate function of `SELECT`.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT region, continent, AVG(fertility_rate) AS avg_fert_rate\n  -- From left table\n  FROM countries AS c\n    -- Join to right table\n    INNER JOIN populations AS p\n      -- Match on join condition\n      ON c.code = p.country_code\n  -- Where specific records matching some condition\n  WHERE year = 2015\n-- Group appropriately?\nGROUP BY region, continent\n-- Order appropriately\nORDER BY avg_fert_rate;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|region                    |continent     | avg_fert_rate|\n|:-------------------------|:-------------|-------------:|\n|Southern Europe           |Europe        |      1.426100|\n|Eastern Europe            |Europe        |      1.490889|\n|Baltic Countries          |Europe        |      1.603333|\n|Eastern Asia              |Asia          |      1.620714|\n|Western Europe            |Europe        |      1.632500|\n|North America             |North America |      1.765750|\n|British Islands           |Europe        |      1.875000|\n|Nordic Countries          |Europe        |      1.893333|\n|Australia and New Zealand |Oceania       |      1.911500|\n|Caribbean                 |North America |      1.950571|\n\n</div>\n:::\n\n\nInteresting. It seems that the average fertility rate is lowest in Southern Europe and highest in Central Africa. Two down, one to go!\n\n## Final challenge (3)\n\nWelcome to the last challenge problem. By now you're a query warrior!  Remember that these challenges are designed to take you to the limit to solidify your SQL knowledge! Take a deep breath and solve this step-by-step.\n\nYou are now tasked with determining the top 10 capital cities in Europe and the Americas in terms of a calculated percentage using `city_proper_pop` and `metroarea_pop` in `cities`.\n\nDo not use table aliasing in this exercise.\n\n**Steps**\n\n1. Select the city name, country code, city proper population, and metro area population.\n2. Calculate the percentage of metro area population composed of city proper population for each city in `cities`, aliased as `city_perc`.  \n3. Focus only on capital cities in Europe and the Americas in a subquery.\n4. Make sure to exclude records with missing data on metro area population.\n5. Order the result by `city_perc` descending.\n6. Then determine the top 10 capital cities in Europe and the Americas in terms of this `city_perc` percentage.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\n-- Select fields\nSELECT name, country_code, city_proper_pop, metroarea_pop,\n    -- Calculate city_perc\n      city_proper_pop / metroarea_pop * 100 AS city_perc\n  -- From appropriate table    \n  FROM cities\n  -- Where\n  WHERE name IN\n    -- Subquery\n    (SELECT capital\n     FROM countries\n     WHERE (continent = 'Europe'\n        OR continent LIKE '%America'))\n       AND metroarea_pop IS NOT NULL\n-- Order appropriately\nORDER BY city_perc DESC\n-- Limit amount\nLIMIT 10;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: Displaying records 1 - 10\n\n|name       |country_code | city_proper_pop| metroarea_pop| city_perc|\n|:----------|:------------|---------------:|-------------:|---------:|\n|Lima       |PER          |         8852000|      10750000|  82.34419|\n|Bogota     |COL          |         7878783|       9800000|  80.39575|\n|Moscow     |RUS          |        12197596|      16170000|  75.43349|\n|Vienna     |AUT          |         1863881|       2600000|  71.68773|\n|Montevideo |URY          |         1305082|       1947604|  67.00962|\n|Caracas    |VEN          |         1943901|       2923959|  66.48182|\n|Rome       |ITA          |         2877215|       4353775|  66.08552|\n|Brasilia   |BRA          |         2556149|       3919864|  65.21015|\n|London     |GBR          |         8673713|      13879757|  62.49182|\n|Budapest   |HUN          |         1759407|       2927944|  60.09018|\n\n</div>\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}