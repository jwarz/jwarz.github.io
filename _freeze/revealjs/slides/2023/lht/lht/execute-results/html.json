{
  "hash": "379f8fbdafdfdb4ab384585d04655e59",
  "result": {
    "markdown": "---\n# TITLE & AUTHOR\ntitle: \"LHT Data Scientist\"\nsubtitle: \"Case Study\"\nauthor: \"Joschka Schwarz\"\ninstitute: \"Hamburg University of Technology\"\ndate: today\ndate-format: \"dddd, D[<sup style='font-size:65%;font-style:italic;'>th</sup>] [of] MMMM YYYY\"\nsection-divs: true\nfilters:\n   - lightbox\nlightbox: auto\nengine: knitr\nknitr:\n  opts_chunk: \n    class-output: hscroll\n---\n\n\n\n\n## Table of Contents {data-state=\"hide-menubar\"}\n<ul class=\"menu\"><ul>\n\n\n::: {.cell layout-align=\"center\"}\n<style type=\"text/css\">\n.hscroll {\n  overflow-x: auto;\n  white-space: nowrap;\n}\n</style>\n:::\n\n\n# Problem Statement {data-stack-name=\"Scenario\"}\nWhat are we solving for?\n\n## Optimizing Precision: Strategies for Minimizing Error Rates in VIP Waiter Robots {background-image=\"img/lh_waiter_robot.png\" background-size=\"50% auto\" background-position=\"right bottom\" background-repeat=\"no-repeat\"}\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n<h3>Scenario</h3>\n\n* Voice-controlled waiter robots were developed to equip VIP aircraft, but they [occasionally produce errors]{style=\"color: #f9ba00;\"} during operation. \n* A software update was developed to [reduce the frequency of errors]{style=\"color: #f9ba00;\"}.\n* [Test series]{style=\"color: #f9ba00;\"} were performed to verify the effectiveness of the update.\n\n<h3>Objectives</h3>\n\n1. Does the new software version [reduce the error rate?]{style=\"color: #f9ba00;\"}\n2. If yes, by [how much?]{style=\"color: #f9ba00;\"}\n3. Each error that occurs generates costs of 3,14 €, rolling out the software update 42k €. [Which software version should be used?]{style=\"color: #f9ba00;\"}\n\n:::\n::::\n\n# Steps {data-stack-name=\"Steps\"}\nUnderstanding what needs to be done\n\n## Navigating Excellence: Step-by-Step Solutions for Enhancing Accuracy \n\n:::: {.panel-tabset}\n\n### General\n\n<ol>\n<b><li>Step: Error Rate Reduction</li></b>\n<ul>\n<li>Calculate Error Rates</li>\n<li>Perform Statistical Test</li>\n<li>Quantify Result</li>\n</ul>\n<b><li>Step: Cost Analysis (Break-Even)</li></b>\n<ul>\n<li>Cost of Errors</li>\n<li>Cost of Software Update</li>\n<li>Compare Total Costs</li>\n</ul>\n<b><li>Step: Conclusion</li></b>\n</ol>\n\n### Specific (Step 1)\n\n::: {.panel-tabset-heading}\nStep 1: Error Rate Reduction\n:::\n\n<u>Hypothesis:</u>\n\n* Null Hypothesis ($H_0$): The new software version does not reduce the error rate.\n* Alternative Hypothesis ($H_1$): The new software version reduces the error rate.\n\n<ol>\n<b><li>Calculate Error Rates</li></b>\n<ul>\n<li>Determine the error rate for the old software version and the error rate for the new software version. Error rate can be calculated as the number of errors divided by the total number of operations.</li>\n</ul>\n<b><li>Perform Statistical Test</li></b>\n<ul>\n<li>Use an appropriate statistical test (**C.I. for the Difference in Proportions**) to compare the error rates of the old and new software versions.</li>\n</ul>\n<b><li>Quantify Confidence</li></b>\n<ul>\n<li>Quantify confidence by providing confidence intervals for the reduction in error rate if the null hypothesis is rejected.</li>\n</ul>\n</ol>\n\n### Specific (Step 2)\n \n::: {.panel-tabset-heading}\nStep 2: Cost Analysis (Break-Even)\n:::\n\n**1. Cost of Errors:** Determine the total cost of errors for the old software version and the new software version.\n\n$$Cost \\: of \\: Errors = Error \\: Rate × Cost \\: per \\: Error × Number \\: of \\: Operations$$\n\n**2. Cost of Software Update:** Add the cost of rolling out the software update to the total cost for the new software version.\n\n$$Total \\: Cost \\: for \\: New \\: Software \\: Version = Cost \\: of \\: Errors \\: (New \\: Software) + Cost \\: of \\: Software \\: Update$$\n\n**3. Compare Total Costs:** Compare the total cost of errors and the cost of software update for the old and new software versions.\n\n::::\n\n# Data sources {data-stack-name=\"Data\"}\nWhat is Data Integrity and why does it matter?\n\n## Test series were performed to verify the effectiveness of the update\n\n:::: {.panel-tabset}\n\n### General\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_joined_cleaned_tbl <- read_rds(\"01_data/02_wrangled/data_joined_cleaned.rds\")\ndata_joined_cleaned_tbl\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 2,256 × 3\n#>    software_version id                                                   failure\n#>               <dbl> <chr>                                                  <dbl>\n#>  1              1.1 76e899853d32693594596d20837f7fbd681864daff696baacd2…       0\n#>  2              1.1 3714cb3b078089ac23bd92ab34c184ae6b69e7389c772e9b639…       0\n#>  3              1.1 8601f3d8df88259dd4d0f84a7d0a8b287caf5e08f52b9ca98e4…       0\n#>  4              1.2 4b457e08955d94130bf2f90ff905bc76fb1db3942688ff3e228…       0\n#>  5              1.1 8dbd0947776dbab34f635daaebabc38309d09f45118da420b30…       0\n#>  6              1.2 d7241ff8b59eefc600c21a9f16c12d5045a193f546c22181380…       0\n#>  7              1.2 1a42a494855da0ad19f0535740ee4a8d08c6073bdb9aec157af…       0\n#>  8              1.1 419c2d6bdc8497b2adc6f1f645689d6094d1f077543448d3af9…       0\n#>  9              1.2 8739b5739e334cf30fb624fb970ad575a7475ffbd479ec2aca1…       0\n#> 10              1.1 4c76f9572167ccb21c2e0bc93f6be7cf2cd367a116b84baec79…       0\n#> # ℹ 2,246 more rows\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_joined_cleaned_tbl |> \n   count(failure, software_version)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 4 × 3\n#>   failure software_version     n\n#>     <dbl>            <dbl> <int>\n#> 1       0              1.1  1461\n#> 2       0              1.2   736\n#> 3       1              1.1    43\n#> 4       1              1.2    16\n```\n:::\n:::\n\n\n### Specific\n\n![](img/lh_erd.svg)\n\n### Code (1)\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 1. Read data\ndevice_sv_tbl   <- read_delim(\"01_data/01_raw/device_sv.csv\",   delim = \"|\", col_types = \"dc\")\ntest_result_tbl <- read_delim(\"01_data/01_raw/test_result.csv\", delim = \"|\", col_types = \"dc\")\n\n# 2. Analyze data (I)\ndevice_sv_tbl   |> get_dupes(id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 2 × 3\n#>   id                                                 dupe_count software_version\n#>   <chr>                                                   <int>            <dbl>\n#> 1 bc62efbd55c35066c7dd02b34009fd3c6075834f98eb20aef…          2              1.2\n#> 2 bc62efbd55c35066c7dd02b34009fd3c6075834f98eb20aef…          2              1.1\n```\n:::\n\n```{.r .cell-code}\ntest_result_tbl |> get_dupes(pid)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 2 × 3\n#>   pid                                                      dupe_count failure\n#>   <chr>                                                         <int>   <dbl>\n#> 1 bc62efbd55c35066c7dd02b34009fd3c6075834f98eb20aef8f43e6e          2       0\n#> 2 bc62efbd55c35066c7dd02b34009fd3c6075834f98eb20aef8f43e6e          2       0\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 3. Clean data (I)\ndevice_sv_cleaned_tbl   <- device_sv_tbl   |> filter(id  != \"bc62efbd55c35066c7dd02b34009fd3c6075834f98eb20aef8f43e6e\")\ntest_result_cleaned_tbl <- test_result_tbl |> filter(pid != \"bc62efbd55c35066c7dd02b34009fd3c6075834f98eb20aef8f43e6e\")\n```\n:::\n\n\n### Code (2)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# 4. Merge data\ndata_joined_tbl <- device_sv_cleaned_tbl |> \n                      left_join(test_result_cleaned_tbl, by = join_by(id == pid))\n\n# 5. Analyze data (II)\ndata_joined_tbl |> count(software_version, failure)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 8 × 3\n#>   software_version failure     n\n#>              <dbl>   <dbl> <int>\n#> 1              1.1       0  1461\n#> 2              1.1       1    43\n#> 3              1.1     100     1\n#> 4              1.1      NA     1\n#> 5              1.2      -1     1\n#> 6              1.2       0   736\n#> 7              1.2       1    16\n#> 8              1.2      NA     2\n```\n:::\n\n```{.r .cell-code}\n# 3. Clean data (II)\ndata_joined_cleaned_tbl <- data_joined_tbl |> filter(failure %in% c(0,1))\n```\n:::\n\n\n::::\n\n# Analysis {data-stack-name=\"Analysis\"}\nTurning raw data into actionable insights\n\n## Achieving Precision: 25% Reduction in Mean Error Rates for Waiter Robots\n\n:::::: {.panel-tabset}\n\n### General\n\n::::: {.r-stack}\n\n::: {.fragment .absolute top=20% left=25% right=25%}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_joined_cleaned_tbl |>\n  summarise(\n    error_rate = mean(failure),\n    n          = n(),\n    .by = software_version\n  )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 2 × 3\n#>   software_version error_rate     n\n#>              <dbl> <chr>      <int>\n#> 1              1.1 2.86%       1504\n#> 2              1.2 2.13%        752\n```\n:::\n:::\n\n:::\n\n::: {.fragment}\n![](img/lh_error_rate_wf.png){width=80%}\n:::\n\n:::: {.fragment}\n\n::: {.callout-warning}\nThere is a **95% chance** that the confidence interval of **[-0,6 pp; 2,1 pp]** contains the true difference in the proportion of error rates between the two software versions. In other words, we cannot say with 95% certainty that there is a difference in mean error rates between these versions.\n\n* `90% Confidence Interval:` [-0,4 pp; 1,8 pp]\n* `95% Confidence Interval:` [-0,6 pp, 2,1 pp]\n* `99% Confidence Interval:` [-1,0 pp, 2,5 pp]\n:::\n::::\n\n:::::\n\n### Specific\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n$Confidence \\: interval = (p_1–p_2) ± z*\\sqrt{\\frac{p_1(1-p_1)}{n_1} + \\frac{p_2(1-p_2)}{n_2}}$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npropCI(n1 = 1504, n2 = 752, p1 = 0.02859043, p2 = 0.02127660, alpha = 0.10, digits = 3) |> pluck(\"result\") |> select(CI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 1 × 1\n#>   CI                        \n#>   <chr>                     \n#> 1 0.007 [90CI -0.004; 0.018]\n```\n:::\n\n```{.r .cell-code}\npropCI(n1 = 1504, n2 = 752, p1 = 0.02859043, p2 = 0.02127660, alpha = 0.05, digits = 3) |> pluck(\"result\") |> select(CI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 1 × 1\n#>   CI                        \n#>   <chr>                     \n#> 1 0.007 [95CI -0.006; 0.021]\n```\n:::\n\n```{.r .cell-code}\npropCI(n1 = 1504, n2 = 752, p1 = 0.02859043, p2 = 0.02127660, alpha = 0.01, digits = 3) |> pluck(\"result\") |> select(CI)\n```\n\n::: {.cell-output .cell-output-stdout}\n```{.hscroll}\n#> # A tibble: 1 × 1\n#>   CI                        \n#>   <chr>                     \n#> 1 0.007 [99CI -0.010; 0.025]\n```\n:::\n:::\n\n\n::::::\n\n## Crossing the Threshold at 1,7M - Unveiling the Cost Efficiency of the Update\n\n:::::: {.panel-tabset}\n\n### General\n\n:::: {.columns}\n::: {.column .fragment width=\"70%\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](lht_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=576}\n:::\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n<p><u>Assumption</u></p>\n<p style=\"font-size: smaller\">**The law of large numbers:** The average of the results obtained from a [large number of independent identical trials should be close to the expected value]{style=\"color: #f9ba00;\"} and tends to become closer to the expected value as more trials are performed.</p>\n:::\n\n::::\n\n### Code (Calc)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Set unitary cost\ncost_err_1.1  <- 0.02859043 * 3.14\ncost_err_1.2  <- 0.0212766  * 3.14\ncost_rout_1.2 <- 40000\n\n# Create units column\nunits <- seq(from = 0, to = 3000000, by = 100000)\n\n# Create total cost columns\ntotal_cost_1.1 <- cost_err_1.1 * units\ntotal_cost_1.2 <- cost_err_1.2 * units + cost_rout_1.2\n\n# Build data frame\ndf <- data.frame(units, total_cost_1.1, total_cost_1.2)\n\n# Calculate contribution margin & break even units\ncontribution_margin  <- cost_err_1.1 - cost_err_1.2\nbreak_even_units     <- cost_rout_1.2 / contribution_margin \nbreak_even_units_chr <- scales::label_number(accuracy  = 0.1, \n                                             scale_cut = scales::cut_short_scale(),\n                                             big.mark  = \".\", decimal.mark = \",\")(break_even_units)\n```\n:::\n\n\n### Code (Plot)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = df, aes(x = units)) +\n  geom_line(aes(y = cost_rout_1.2,\n                col = \"Rollout Cost\")) +\n  geom_line(aes(y = total_cost_1.1,\n                col = \"Total Cost v1.1\")) +\n  geom_line(aes(y = total_cost_1.2,\n                col = \"Total Cost v1.2\")) +\n  geom_segment(aes(x = break_even_units, xend = break_even_units, \n                   y = 0, yend = break_even_units*cost_err_1.1),\n               linetype = \"dashed\", color = \"#9B9B9B\") +\n  geom_segment(aes(x = 0, xend = break_even_units, \n                   y = break_even_units*cost_err_1.1, yend = break_even_units*cost_err_1.1),\n                   linetype = \"dashed\", color = \"#9B9B9B\") +\n  geom_point(aes(x = break_even_units, \n                 y = break_even_units*cost_err_1.1), \n             colour = \"#9B9B9B\", size = 4) +\n  annotate(\"label\", x = break_even_units, y = 0, label = paste(\"Break Even Point:\", break_even_units_chr)) +\n  scale_color_manual(labels = c(\"Rollout Cost\", \"Total Cost v1.1\", \"Total Cost v1.2\"),\n                     values = c(\"Rollout Cost\" = \"black\", \"Total Cost v1.1\" = \"#FFAD00\", \"Total Cost v1.2\" = \"#0A1D3D\")) +\n  scale_y_continuous(breaks = c(0, 40000, 100000, 200000),\n                     labels = scales::dollar_format(suffix = \" €\", prefix = \"\", big.mark = \".\", decimal.mark = \",\")) +\n  scale_x_continuous(labels = scales::unit_format(unit = \"M\", scale = 1e-6)) +\n  geom_ribbon(data = df[df$total_cost_1.2 >= df$total_cost_1.1, ], aes(x = units, ymin = total_cost_1.2, ymax = total_cost_1.1), fill = \"#0A1D3D\", alpha = 0.15) +\n  geom_ribbon(data = df[df$total_cost_1.2 <= df$total_cost_1.1, ], aes(x = units, ymin = total_cost_1.1, ymax = total_cost_1.2), fill = \"#FFAD00\", alpha = 0.15) +\n  labs(title = \"Break Even Point Graph\",\n       x = \"Number of operations (in millions)\",\n       y = \"Expected cost\",\n       color = NULL) +\n  tidyquant::theme_tq()\n```\n:::\n\n\n::::::\n\n# Conclusion {data-stack-name=\"Conclusion\"}\nWhat conclusion can you draw from this?\n\n## Striving for Perfection: Key Takeaways in Advancing Voice-Controlled Waiter Robots\n\n<h3>Summary</h3>\n<ol>\n<b><li>Does the new software version reduce the error rate?</li></b>\n<ul>\n<li>In all likelihood <em>(More tests needed, experimentation with other test statistics, ...)</em></li>\n</ul>\n<b><li>By how much?</li></b>\n<ul>\n<li>25,6% / 0,73pp <em>(taking our assumptions into account)</em></li>\n</ul>\n<b><li>Which software version should be used?</li></b>\n<ul>\n<li>The updated version 1.2 <em>(depending on type of operations and cost of errors)</em></li>\n</ul>\n</ol>\n<br>\n<h3>Next Steps</h3>\n<br>\n<ul>\n<li>Better understanding of errors & cost of errors -> Maximizing „utility“ vs. minimizing expected cost </li>\n<li>Good practices for Data Integrity</li>\n<li>Looking ahead to version 1.3: Improving quality by analysis of process variables (combating the causes)</li>\n</ul>\n",
    "supporting": [
      "lht_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}